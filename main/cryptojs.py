from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)
# Name reduction
_seq = PyJsStrictEq

# Code follows:
var.registers(['crypto_js', '_typeof', 'getFromGlobals'])
@Js
def PyJsHoisted_getFromGlobals_(name, this, arguments, var=var):
    var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
    var.registers(['name'])
    return var.get('Object').get('prototype').get('_fake_exports').get(var.get('name'))
PyJsHoisted_getFromGlobals_.func_name = 'getFromGlobals'
var.put('getFromGlobals', PyJsHoisted_getFromGlobals_)
Js('use strict')
@Js
def PyJs_anonymous_1_(obj, this, arguments, var=var):
    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
    var.registers(['obj'])
    return (Js('symbol') if (((var.get('obj') and _seq(var.get('Symbol',throw=False).typeof(),Js('function'))) and _seq(var.get('obj').get('constructor'),var.get('Symbol'))) and PyJsStrictNeq(var.get('obj'),var.get('Symbol').get('prototype'))) else var.get('obj',throw=False).typeof())
PyJs_anonymous_1_._set_name('anonymous')
var.put('_typeof', (PyJs_anonymous_0_ if (_seq(var.get('Symbol',throw=False).typeof(),Js('function')) and _seq(var.get('Symbol').get('iterator').typeof(),Js('symbol'))) else PyJs_anonymous_1_))
def PyJs_LONG_2686_(var=var):
    @Js
    def PyJs_anonymous_2_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'asn1', 'require', 'module'])
        Js('use strict')
        var.put('asn1', var.get('exports'))
        var.get('asn1').put('bignum', var.get('require')(Js('bn.js')))
        var.get('asn1').put('define', var.get('require')(Js('./asn1/api')).get('define'))
        var.get('asn1').put('base', var.get('require')(Js('./asn1/base')))
        var.get('asn1').put('constants', var.get('require')(Js('./asn1/constants')))
        var.get('asn1').put('decoders', var.get('require')(Js('./asn1/decoders')))
        var.get('asn1').put('encoders', var.get('require')(Js('./asn1/encoders')))
    PyJs_anonymous_2_._set_name('anonymous')
    @Js
    def PyJs_anonymous_3_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['encoders', 'exports', 'require', 'module', 'Entity', 'api', 'inherits', 'decoders'])
        @Js
        def PyJsHoisted_Entity_(name, body, this, arguments, var=var):
            var = Scope({'name':name, 'body':body, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'body'])
            var.get(u"this").put('name', var.get('name'))
            var.get(u"this").put('body', var.get('body'))
            var.get(u"this").put('decoders', Js({}))
            var.get(u"this").put('encoders', Js({}))
        PyJsHoisted_Entity_.func_name = 'Entity'
        var.put('Entity', PyJsHoisted_Entity_)
        Js('use strict')
        var.put('encoders', var.get('require')(Js('./encoders')))
        var.put('decoders', var.get('require')(Js('./decoders')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('api', var.get('exports'))
        @Js
        def PyJs_define_4_(name, body, this, arguments, var=var):
            var = Scope({'name':name, 'body':body, 'this':this, 'arguments':arguments, 'define':PyJs_define_4_}, var)
            var.registers(['name', 'body'])
            return var.get('Entity').create(var.get('name'), var.get('body'))
        PyJs_define_4_._set_name('define')
        var.get('api').put('define', PyJs_define_4_)
        pass
    PyJs_anonymous_3_._set_name('anonymous')
    @Js
    def PyJs_anonymous_11_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'Reporter', 'Buffer', 'require', 'module', 'EncoderBuffer', 'DecoderBuffer', 'inherits'])
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Reporter', var.get('require')(Js('../base/reporter')).get('Reporter'))
        var.put('Buffer', var.get('require')(Js('safer-buffer')).get('Buffer'))
        pass
        var.get('inherits')(var.get('DecoderBuffer'), var.get('Reporter'))
        var.get('exports').put('DecoderBuffer', var.get('DecoderBuffer'))
        @Js
        def PyJs_isDecoderBuffer_12_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments, 'isDecoderBuffer':PyJs_isDecoderBuffer_12_}, var)
            var.registers(['isCompatible', 'data'])
            if var.get('data').instanceof(var.get('DecoderBuffer')):
                return Js(True)
            def PyJs_LONG_14_(var=var):
                def PyJs_LONG_13_(var=var):
                    return ((((_seq((Js('undefined') if _seq(var.get('data',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('data'))),Js('object')) and var.get('Buffer').callprop('isBuffer', var.get('data').get('base'))) and _seq(var.get('data').get('constructor').get('name'),Js('DecoderBuffer'))) and _seq(var.get('data').get('offset').typeof(),Js('number'))) and _seq(var.get('data').get('length').typeof(),Js('number')))
                return ((((((PyJs_LONG_13_() and _seq(var.get('data').get('save').typeof(),Js('function'))) and _seq(var.get('data').get('restore').typeof(),Js('function'))) and _seq(var.get('data').get('isEmpty').typeof(),Js('function'))) and _seq(var.get('data').get('readUInt8').typeof(),Js('function'))) and _seq(var.get('data').get('skip').typeof(),Js('function'))) and _seq(var.get('data').get('raw').typeof(),Js('function')))
            var.put('isCompatible', PyJs_LONG_14_())
            return var.get('isCompatible')
        PyJs_isDecoderBuffer_12_._set_name('isDecoderBuffer')
        var.get('DecoderBuffer').put('isDecoderBuffer', PyJs_isDecoderBuffer_12_)
        @Js
        def PyJs_save_15_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'save':PyJs_save_15_}, var)
            var.registers([])
            return Js({'offset':var.get(u"this").get('offset'),'reporter':var.get('Reporter').get('prototype').get('save').callprop('call', var.get(u"this"))})
        PyJs_save_15_._set_name('save')
        var.get('DecoderBuffer').get('prototype').put('save', PyJs_save_15_)
        @Js
        def PyJs_restore_16_(save, this, arguments, var=var):
            var = Scope({'save':save, 'this':this, 'arguments':arguments, 'restore':PyJs_restore_16_}, var)
            var.registers(['save', 'res'])
            var.put('res', var.get('DecoderBuffer').create(var.get(u"this").get('base')))
            var.get('res').put('offset', var.get('save').get('offset'))
            var.get('res').put('length', var.get(u"this").get('offset'))
            var.get(u"this").put('offset', var.get('save').get('offset'))
            var.get('Reporter').get('prototype').get('restore').callprop('call', var.get(u"this"), var.get('save').get('reporter'))
            return var.get('res')
        PyJs_restore_16_._set_name('restore')
        var.get('DecoderBuffer').get('prototype').put('restore', PyJs_restore_16_)
        @Js
        def PyJs_isEmpty_17_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'isEmpty':PyJs_isEmpty_17_}, var)
            var.registers([])
            return _seq(var.get(u"this").get('offset'),var.get(u"this").get('length'))
        PyJs_isEmpty_17_._set_name('isEmpty')
        var.get('DecoderBuffer').get('prototype').put('isEmpty', PyJs_isEmpty_17_)
        @Js
        def PyJs_readUInt8_18_(fail, this, arguments, var=var):
            var = Scope({'fail':fail, 'this':this, 'arguments':arguments, 'readUInt8':PyJs_readUInt8_18_}, var)
            var.registers(['fail'])
            if ((var.get(u"this").get('offset')+Js(1.0))<=var.get(u"this").get('length')):
                return var.get(u"this").get('base').callprop('readUInt8', (var.get(u"this").put('offset',Js(var.get(u"this").get('offset').to_number())+Js(1))-Js(1)), Js(True))
            else:
                return var.get(u"this").callprop('error', (var.get('fail') or Js('DecoderBuffer overrun')))
        PyJs_readUInt8_18_._set_name('readUInt8')
        var.get('DecoderBuffer').get('prototype').put('readUInt8', PyJs_readUInt8_18_)
        @Js
        def PyJs_skip_19_(bytes, fail, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'fail':fail, 'this':this, 'arguments':arguments, 'skip':PyJs_skip_19_}, var)
            var.registers(['bytes', 'fail', 'res'])
            if ((var.get(u"this").get('offset')+var.get('bytes'))<=var.get(u"this").get('length')).neg():
                return var.get(u"this").callprop('error', (var.get('fail') or Js('DecoderBuffer overrun')))
            var.put('res', var.get('DecoderBuffer').create(var.get(u"this").get('base')))
            var.get('res').put('_reporterState', var.get(u"this").get('_reporterState'))
            var.get('res').put('offset', var.get(u"this").get('offset'))
            var.get('res').put('length', (var.get(u"this").get('offset')+var.get('bytes')))
            var.get(u"this").put('offset', var.get('bytes'), '+')
            return var.get('res')
        PyJs_skip_19_._set_name('skip')
        var.get('DecoderBuffer').get('prototype').put('skip', PyJs_skip_19_)
        @Js
        def PyJs_raw_20_(save, this, arguments, var=var):
            var = Scope({'save':save, 'this':this, 'arguments':arguments, 'raw':PyJs_raw_20_}, var)
            var.registers(['save'])
            return var.get(u"this").get('base').callprop('slice', (var.get('save').get('offset') if var.get('save') else var.get(u"this").get('offset')), var.get(u"this").get('length'))
        PyJs_raw_20_._set_name('raw')
        var.get('DecoderBuffer').get('prototype').put('raw', PyJs_raw_20_)
        pass
        var.get('exports').put('EncoderBuffer', var.get('EncoderBuffer'))
        @Js
        def PyJs_isEncoderBuffer_22_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments, 'isEncoderBuffer':PyJs_isEncoderBuffer_22_}, var)
            var.registers(['isCompatible', 'data'])
            if var.get('data').instanceof(var.get('EncoderBuffer')):
                return Js(True)
            var.put('isCompatible', (((_seq((Js('undefined') if _seq(var.get('data',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('data'))),Js('object')) and _seq(var.get('data').get('constructor').get('name'),Js('EncoderBuffer'))) and _seq(var.get('data').get('length').typeof(),Js('number'))) and _seq(var.get('data').get('join').typeof(),Js('function'))))
            return var.get('isCompatible')
        PyJs_isEncoderBuffer_22_._set_name('isEncoderBuffer')
        var.get('EncoderBuffer').put('isEncoderBuffer', PyJs_isEncoderBuffer_22_)
        @Js
        def PyJs_join_23_(out, offset, this, arguments, var=var):
            var = Scope({'out':out, 'offset':offset, 'this':this, 'arguments':arguments, 'join':PyJs_join_23_}, var)
            var.registers(['out', 'offset'])
            if var.get('out').neg():
                var.put('out', var.get('Buffer').callprop('alloc', var.get(u"this").get('length')))
            if var.get('offset').neg():
                var.put('offset', Js(0.0))
            if _seq(var.get(u"this").get('length'),Js(0.0)):
                return var.get('out')
            if var.get('Array').callprop('isArray', var.get(u"this").get('value')):
                @Js
                def PyJs_anonymous_24_(item, this, arguments, var=var):
                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                    var.registers(['item'])
                    var.get('item').callprop('join', var.get('out'), var.get('offset'))
                    var.put('offset', var.get('item').get('length'), '+')
                PyJs_anonymous_24_._set_name('anonymous')
                var.get(u"this").get('value').callprop('forEach', PyJs_anonymous_24_)
            else:
                if _seq(var.get(u"this").get('value').typeof(),Js('number')):
                    var.get('out').put(var.get('offset'), var.get(u"this").get('value'))
                else:
                    if _seq(var.get(u"this").get('value').typeof(),Js('string')):
                        var.get('out').callprop('write', var.get(u"this").get('value'), var.get('offset'))
                    else:
                        if var.get('Buffer').callprop('isBuffer', var.get(u"this").get('value')):
                            var.get(u"this").get('value').callprop('copy', var.get('out'), var.get('offset'))
                var.put('offset', var.get(u"this").get('length'), '+')
            return var.get('out')
        PyJs_join_23_._set_name('join')
        var.get('EncoderBuffer').get('prototype').put('join', PyJs_join_23_)
    PyJs_anonymous_11_._set_name('anonymous')
    @Js
    def PyJs_anonymous_25_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'base', 'module'])
        Js('use strict')
        var.put('base', var.get('exports'))
        var.get('base').put('Reporter', var.get('require')(Js('./reporter')).get('Reporter'))
        var.get('base').put('DecoderBuffer', var.get('require')(Js('./buffer')).get('DecoderBuffer'))
        var.get('base').put('EncoderBuffer', var.get('require')(Js('./buffer')).get('EncoderBuffer'))
        var.get('base').put('Node', var.get('require')(Js('./node')))
    PyJs_anonymous_25_._set_name('anonymous')
    @Js
    def PyJs_anonymous_26_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'Reporter', 'methods', 'require', 'module', 'stateProps', 'EncoderBuffer', 'overrided', 'DecoderBuffer', 'Node', 'tags', 'assert'])
        @Js
        def PyJsHoisted_Node_(enc, parent, name, this, arguments, var=var):
            var = Scope({'enc':enc, 'parent':parent, 'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'state', 'parent', 'enc'])
            var.put('state', Js({}))
            var.get(u"this").put('_baseState', var.get('state'))
            var.get('state').put('name', var.get('name'))
            var.get('state').put('enc', var.get('enc'))
            var.get('state').put('parent', (var.get('parent') or var.get(u"null")))
            var.get('state').put('children', var.get(u"null"))
            var.get('state').put('tag', var.get(u"null"))
            var.get('state').put('args', var.get(u"null"))
            var.get('state').put('reverseArgs', var.get(u"null"))
            var.get('state').put('choice', var.get(u"null"))
            var.get('state').put('optional', Js(False))
            var.get('state').put('any', Js(False))
            var.get('state').put('obj', Js(False))
            var.get('state').put('use', var.get(u"null"))
            var.get('state').put('useDecoder', var.get(u"null"))
            var.get('state').put('key', var.get(u"null"))
            var.get('state').put('default', var.get(u"null"))
            var.get('state').put('explicit', var.get(u"null"))
            var.get('state').put('implicit', var.get(u"null"))
            var.get('state').put('contains', var.get(u"null"))
            if var.get('state').get('parent').neg():
                var.get('state').put('children', Js([]))
                var.get(u"this").callprop('_wrap')
        PyJsHoisted_Node_.func_name = 'Node'
        var.put('Node', PyJsHoisted_Node_)
        Js('use strict')
        var.put('Reporter', var.get('require')(Js('../base/reporter')).get('Reporter'))
        var.put('EncoderBuffer', var.get('require')(Js('../base/buffer')).get('EncoderBuffer'))
        var.put('DecoderBuffer', var.get('require')(Js('../base/buffer')).get('DecoderBuffer'))
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        var.put('tags', Js([Js('seq'), Js('seqof'), Js('set'), Js('setof'), Js('objid'), Js('bool'), Js('gentime'), Js('utctime'), Js('null_'), Js('enum'), Js('int'), Js('objDesc'), Js('bitstr'), Js('bmpstr'), Js('charstr'), Js('genstr'), Js('graphstr'), Js('ia5str'), Js('iso646str'), Js('numstr'), Js('octstr'), Js('printstr'), Js('t61str'), Js('unistr'), Js('utf8str'), Js('videostr')]))
        var.put('methods', Js([Js('key'), Js('obj'), Js('use'), Js('optional'), Js('explicit'), Js('implicit'), Js('def'), Js('choice'), Js('any'), Js('contains')]).callprop('concat', var.get('tags')))
        var.put('overrided', Js([Js('_peekTag'), Js('_decodeTag'), Js('_use'), Js('_decodeStr'), Js('_decodeObjid'), Js('_decodeTime'), Js('_decodeNull'), Js('_decodeInt'), Js('_decodeBool'), Js('_decodeList'), Js('_encodeComposite'), Js('_encodeStr'), Js('_encodeObjid'), Js('_encodeTime'), Js('_encodeNull'), Js('_encodeInt'), Js('_encodeBool')]))
        pass
        var.get('module').put('exports', var.get('Node'))
        var.put('stateProps', Js([Js('enc'), Js('parent'), Js('children'), Js('tag'), Js('args'), Js('reverseArgs'), Js('choice'), Js('optional'), Js('any'), Js('obj'), Js('use'), Js('alteredUse'), Js('key'), Js('default'), Js('explicit'), Js('implicit'), Js('contains')]))
        @Js
        def PyJs_clone_27_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_27_}, var)
            var.registers(['state', 'cstate', 'res'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.put('cstate', Js({}))
            @Js
            def PyJs_anonymous_28_(prop, this, arguments, var=var):
                var = Scope({'prop':prop, 'this':this, 'arguments':arguments}, var)
                var.registers(['prop'])
                var.get('cstate').put(var.get('prop'), var.get('state').get(var.get('prop')))
            PyJs_anonymous_28_._set_name('anonymous')
            var.get('stateProps').callprop('forEach', PyJs_anonymous_28_)
            var.put('res', var.get(u"this").get('constructor').create(var.get('cstate').get('parent')))
            var.get('res').put('_baseState', var.get('cstate'))
            return var.get('res')
        PyJs_clone_27_._set_name('clone')
        var.get('Node').get('prototype').put('clone', PyJs_clone_27_)
        @Js
        def PyJs_wrap_29_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'wrap':PyJs_wrap_29_}, var)
            var.registers(['state'])
            var.put('state', var.get(u"this").get('_baseState'))
            @Js
            def PyJs_anonymous_30_(method, this, arguments, var=var):
                var = Scope({'method':method, 'this':this, 'arguments':arguments}, var)
                var.registers(['method'])
                @Js
                def PyJs__wrappedMethod_31_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_wrappedMethod':PyJs__wrappedMethod_31_}, var)
                    var.registers(['clone'])
                    var.put('clone', var.get(u"this").get('constructor').create(var.get(u"this")))
                    var.get('state').get('children').callprop('push', var.get('clone'))
                    return var.get('clone').get(var.get('method')).callprop('apply', var.get('clone'), var.get('arguments'))
                PyJs__wrappedMethod_31_._set_name('_wrappedMethod')
                var.get(u"this").put(var.get('method'), PyJs__wrappedMethod_31_)
            PyJs_anonymous_30_._set_name('anonymous')
            var.get('methods').callprop('forEach', PyJs_anonymous_30_, var.get(u"this"))
        PyJs_wrap_29_._set_name('wrap')
        var.get('Node').get('prototype').put('_wrap', PyJs_wrap_29_)
        @Js
        def PyJs_init_32_(body, this, arguments, var=var):
            var = Scope({'body':body, 'this':this, 'arguments':arguments, 'init':PyJs_init_32_}, var)
            var.registers(['state', 'body'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('assert')(_seq(var.get('state').get('parent'),var.get(u"null")))
            var.get('body').callprop('call', var.get(u"this"))
            @Js
            def PyJs_anonymous_33_(child, this, arguments, var=var):
                var = Scope({'child':child, 'this':this, 'arguments':arguments}, var)
                var.registers(['child'])
                return _seq(var.get('child').get('_baseState').get('parent'),var.get(u"this"))
            PyJs_anonymous_33_._set_name('anonymous')
            var.get('state').put('children', var.get('state').get('children').callprop('filter', PyJs_anonymous_33_, var.get(u"this")))
            var.get('assert').callprop('equal', var.get('state').get('children').get('length'), Js(1.0), Js('Root node can have only one child'))
        PyJs_init_32_._set_name('init')
        var.get('Node').get('prototype').put('_init', PyJs_init_32_)
        @Js
        def PyJs_useArgs_34_(args, this, arguments, var=var):
            var = Scope({'args':args, 'this':this, 'arguments':arguments, 'useArgs':PyJs_useArgs_34_}, var)
            var.registers(['state', 'args', 'children'])
            var.put('state', var.get(u"this").get('_baseState'))
            @Js
            def PyJs_anonymous_35_(arg, this, arguments, var=var):
                var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                var.registers(['arg'])
                return var.get('arg').instanceof(var.get(u"this").get('constructor'))
            PyJs_anonymous_35_._set_name('anonymous')
            var.put('children', var.get('args').callprop('filter', PyJs_anonymous_35_, var.get(u"this")))
            @Js
            def PyJs_anonymous_36_(arg, this, arguments, var=var):
                var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                var.registers(['arg'])
                return var.get('arg').instanceof(var.get(u"this").get('constructor')).neg()
            PyJs_anonymous_36_._set_name('anonymous')
            var.put('args', var.get('args').callprop('filter', PyJs_anonymous_36_, var.get(u"this")))
            if PyJsStrictNeq(var.get('children').get('length'),Js(0.0)):
                var.get('assert')(_seq(var.get('state').get('children'),var.get(u"null")))
                var.get('state').put('children', var.get('children'))
                @Js
                def PyJs_anonymous_37_(child, this, arguments, var=var):
                    var = Scope({'child':child, 'this':this, 'arguments':arguments}, var)
                    var.registers(['child'])
                    var.get('child').get('_baseState').put('parent', var.get(u"this"))
                PyJs_anonymous_37_._set_name('anonymous')
                var.get('children').callprop('forEach', PyJs_anonymous_37_, var.get(u"this"))
            if PyJsStrictNeq(var.get('args').get('length'),Js(0.0)):
                var.get('assert')(_seq(var.get('state').get('args'),var.get(u"null")))
                var.get('state').put('args', var.get('args'))
                @Js
                def PyJs_anonymous_38_(arg, this, arguments, var=var):
                    var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg', 'res'])
                    if (PyJsStrictNeq((Js('undefined') if _seq(var.get('arg',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg'))),Js('object')) or PyJsStrictNeq(var.get('arg').get('constructor'),var.get('Object'))):
                        return var.get('arg')
                    var.put('res', Js({}))
                    @Js
                    def PyJs_anonymous_39_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'key'])
                        if (var.get('key')==(var.get('key')|Js(0.0))):
                            var.put('key', Js(0.0), '|')
                        var.put('value', var.get('arg').get(var.get('key')))
                        var.get('res').put(var.get('value'), var.get('key'))
                    PyJs_anonymous_39_._set_name('anonymous')
                    var.get('Object').callprop('keys', var.get('arg')).callprop('forEach', PyJs_anonymous_39_)
                    return var.get('res')
                PyJs_anonymous_38_._set_name('anonymous')
                var.get('state').put('reverseArgs', var.get('args').callprop('map', PyJs_anonymous_38_))
        PyJs_useArgs_34_._set_name('useArgs')
        var.get('Node').get('prototype').put('_useArgs', PyJs_useArgs_34_)
        @Js
        def PyJs_anonymous_40_(method, this, arguments, var=var):
            var = Scope({'method':method, 'this':this, 'arguments':arguments}, var)
            var.registers(['method'])
            @Js
            def PyJs__overrided_41_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, '_overrided':PyJs__overrided_41_}, var)
                var.registers(['state'])
                var.put('state', var.get(u"this").get('_baseState'))
                PyJsTempException = JsToPyException(var.get('Error').create(((var.get('method')+Js(' not implemented for encoding: '))+var.get('state').get('enc'))))
                raise PyJsTempException
            PyJs__overrided_41_._set_name('_overrided')
            var.get('Node').get('prototype').put(var.get('method'), PyJs__overrided_41_)
        PyJs_anonymous_40_._set_name('anonymous')
        var.get('overrided').callprop('forEach', PyJs_anonymous_40_)
        @Js
        def PyJs_anonymous_42_(tag, this, arguments, var=var):
            var = Scope({'tag':tag, 'this':this, 'arguments':arguments}, var)
            var.registers(['tag'])
            @Js
            def PyJs__tagMethod_43_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, '_tagMethod':PyJs__tagMethod_43_}, var)
                var.registers(['state', 'args'])
                var.put('state', var.get(u"this").get('_baseState'))
                var.put('args', var.get('Array').get('prototype').get('slice').callprop('call', var.get('arguments')))
                var.get('assert')(_seq(var.get('state').get('tag'),var.get(u"null")))
                var.get('state').put('tag', var.get('tag'))
                var.get(u"this").callprop('_useArgs', var.get('args'))
                return var.get(u"this")
            PyJs__tagMethod_43_._set_name('_tagMethod')
            var.get('Node').get('prototype').put(var.get('tag'), PyJs__tagMethod_43_)
        PyJs_anonymous_42_._set_name('anonymous')
        var.get('tags').callprop('forEach', PyJs_anonymous_42_)
        @Js
        def PyJs_use_44_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments, 'use':PyJs_use_44_}, var)
            var.registers(['state', 'item'])
            var.get('assert')(var.get('item'))
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('assert')(_seq(var.get('state').get('use'),var.get(u"null")))
            var.get('state').put('use', var.get('item'))
            return var.get(u"this")
        PyJs_use_44_._set_name('use')
        var.get('Node').get('prototype').put('use', PyJs_use_44_)
        @Js
        def PyJs_optional_45_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'optional':PyJs_optional_45_}, var)
            var.registers(['state'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('state').put('optional', Js(True))
            return var.get(u"this")
        PyJs_optional_45_._set_name('optional')
        var.get('Node').get('prototype').put('optional', PyJs_optional_45_)
        @Js
        def PyJs_InlineNonPyName_46_(val, this, arguments, var=var):
            var = Scope({'val':val, 'this':this, 'arguments':arguments, 'def':PyJs_InlineNonPyName_46_}, var)
            var.registers(['state', 'val'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('assert')(_seq(var.get('state').get('default'),var.get(u"null")))
            var.get('state').put('default', var.get('val'))
            var.get('state').put('optional', Js(True))
            return var.get(u"this")
        PyJs_InlineNonPyName_46_._set_name('def')
        var.get('Node').get('prototype').put('def', PyJs_InlineNonPyName_46_)
        @Js
        def PyJs_explicit_47_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, 'explicit':PyJs_explicit_47_}, var)
            var.registers(['num', 'state'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('assert')((_seq(var.get('state').get('explicit'),var.get(u"null")) and _seq(var.get('state').get('implicit'),var.get(u"null"))))
            var.get('state').put('explicit', var.get('num'))
            return var.get(u"this")
        PyJs_explicit_47_._set_name('explicit')
        var.get('Node').get('prototype').put('explicit', PyJs_explicit_47_)
        @Js
        def PyJs_implicit_48_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, 'implicit':PyJs_implicit_48_}, var)
            var.registers(['num', 'state'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('assert')((_seq(var.get('state').get('explicit'),var.get(u"null")) and _seq(var.get('state').get('implicit'),var.get(u"null"))))
            var.get('state').put('implicit', var.get('num'))
            return var.get(u"this")
        PyJs_implicit_48_._set_name('implicit')
        var.get('Node').get('prototype').put('implicit', PyJs_implicit_48_)
        @Js
        def PyJs_obj_49_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'obj':PyJs_obj_49_}, var)
            var.registers(['state', 'args'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.put('args', var.get('Array').get('prototype').get('slice').callprop('call', var.get('arguments')))
            var.get('state').put('obj', Js(True))
            if PyJsStrictNeq(var.get('args').get('length'),Js(0.0)):
                var.get(u"this").callprop('_useArgs', var.get('args'))
            return var.get(u"this")
        PyJs_obj_49_._set_name('obj')
        var.get('Node').get('prototype').put('obj', PyJs_obj_49_)
        @Js
        def PyJs_key_50_(newKey, this, arguments, var=var):
            var = Scope({'newKey':newKey, 'this':this, 'arguments':arguments, 'key':PyJs_key_50_}, var)
            var.registers(['newKey', 'state'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('assert')(_seq(var.get('state').get('key'),var.get(u"null")))
            var.get('state').put('key', var.get('newKey'))
            return var.get(u"this")
        PyJs_key_50_._set_name('key')
        var.get('Node').get('prototype').put('key', PyJs_key_50_)
        @Js
        def PyJs_any_51_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'any':PyJs_any_51_}, var)
            var.registers(['state'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('state').put('any', Js(True))
            return var.get(u"this")
        PyJs_any_51_._set_name('any')
        var.get('Node').get('prototype').put('any', PyJs_any_51_)
        @Js
        def PyJs_choice_52_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments, 'choice':PyJs_choice_52_}, var)
            var.registers(['state', 'obj'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('assert')(_seq(var.get('state').get('choice'),var.get(u"null")))
            var.get('state').put('choice', var.get('obj'))
            @Js
            def PyJs_anonymous_53_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key'])
                return var.get('obj').get(var.get('key'))
            PyJs_anonymous_53_._set_name('anonymous')
            var.get(u"this").callprop('_useArgs', var.get('Object').callprop('keys', var.get('obj')).callprop('map', PyJs_anonymous_53_))
            return var.get(u"this")
        PyJs_choice_52_._set_name('choice')
        var.get('Node').get('prototype').put('choice', PyJs_choice_52_)
        @Js
        def PyJs_contains_54_(item, this, arguments, var=var):
            var = Scope({'item':item, 'this':this, 'arguments':arguments, 'contains':PyJs_contains_54_}, var)
            var.registers(['state', 'item'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('assert')(_seq(var.get('state').get('use'),var.get(u"null")))
            var.get('state').put('contains', var.get('item'))
            return var.get(u"this")
        PyJs_contains_54_._set_name('contains')
        var.get('Node').get('prototype').put('contains', PyJs_contains_54_)
        @Js
        def PyJs_decode_55_(input, options, this, arguments, var=var):
            var = Scope({'input':input, 'options':options, 'this':this, 'arguments':arguments, 'decode':PyJs_decode_55_}, var)
            var.registers(['options', 'save', 'prevKey', 'body', 'start', '_save', 'tag', 'data', 'input', 'state', 'prevObj', 'explicit', 'result', 'present'])
            var.put('state', var.get(u"this").get('_baseState'))
            if _seq(var.get('state').get('parent'),var.get(u"null")):
                return var.get('input').callprop('wrapResult', var.get('state').get('children').get('0').callprop('_decode', var.get('input'), var.get('options')))
            var.put('result', var.get('state').get('default'))
            var.put('present', Js(True))
            var.put('prevKey', var.get(u"null"))
            if PyJsStrictNeq(var.get('state').get('key'),var.get(u"null")):
                var.put('prevKey', var.get('input').callprop('enterKey', var.get('state').get('key')))
            if var.get('state').get('optional'):
                var.put('tag', var.get(u"null"))
                if PyJsStrictNeq(var.get('state').get('explicit'),var.get(u"null")):
                    var.put('tag', var.get('state').get('explicit'))
                else:
                    if PyJsStrictNeq(var.get('state').get('implicit'),var.get(u"null")):
                        var.put('tag', var.get('state').get('implicit'))
                    else:
                        if PyJsStrictNeq(var.get('state').get('tag'),var.get(u"null")):
                            var.put('tag', var.get('state').get('tag'))
                if (_seq(var.get('tag'),var.get(u"null")) and var.get('state').get('any').neg()):
                    var.put('save', var.get('input').callprop('save'))
                    try:
                        if _seq(var.get('state').get('choice'),var.get(u"null")):
                            var.get(u"this").callprop('_decodeGeneric', var.get('state').get('tag'), var.get('input'), var.get('options'))
                        else:
                            var.get(u"this").callprop('_decodeChoice', var.get('input'), var.get('options'))
                        var.put('present', Js(True))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_30799255 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.put('present', Js(False))
                        finally:
                            if PyJsHolder_65_30799255 is not None:
                                var.own['e'] = PyJsHolder_65_30799255
                            else:
                                del var.own['e']
                            del PyJsHolder_65_30799255
                    var.get('input').callprop('restore', var.get('save'))
                else:
                    var.put('present', var.get(u"this").callprop('_peekTag', var.get('input'), var.get('tag'), var.get('state').get('any')))
                    if var.get('input').callprop('isError', var.get('present')):
                        return var.get('present')
            var.put('prevObj', PyJsComma(Js(0.0), Js(None)))
            if (var.get('state').get('obj') and var.get('present')):
                var.put('prevObj', var.get('input').callprop('enterObject'))
            if var.get('present'):
                if PyJsStrictNeq(var.get('state').get('explicit'),var.get(u"null")):
                    var.put('explicit', var.get(u"this").callprop('_decodeTag', var.get('input'), var.get('state').get('explicit')))
                    if var.get('input').callprop('isError', var.get('explicit')):
                        return var.get('explicit')
                    var.put('input', var.get('explicit'))
                var.put('start', var.get('input').get('offset'))
                if (_seq(var.get('state').get('use'),var.get(u"null")) and _seq(var.get('state').get('choice'),var.get(u"null"))):
                    var.put('_save', PyJsComma(Js(0.0), Js(None)))
                    if var.get('state').get('any'):
                        var.put('_save', var.get('input').callprop('save'))
                    var.put('body', var.get(u"this").callprop('_decodeTag', var.get('input'), (var.get('state').get('implicit') if PyJsStrictNeq(var.get('state').get('implicit'),var.get(u"null")) else var.get('state').get('tag')), var.get('state').get('any')))
                    if var.get('input').callprop('isError', var.get('body')):
                        return var.get('body')
                    if var.get('state').get('any'):
                        var.put('result', var.get('input').callprop('raw', var.get('_save')))
                    else:
                        var.put('input', var.get('body'))
                if ((var.get('options') and var.get('options').get('track')) and PyJsStrictNeq(var.get('state').get('tag'),var.get(u"null"))):
                    var.get('options').callprop('track', var.get('input').callprop('path'), var.get('start'), var.get('input').get('length'), Js('tagged'))
                if ((var.get('options') and var.get('options').get('track')) and PyJsStrictNeq(var.get('state').get('tag'),var.get(u"null"))):
                    var.get('options').callprop('track', var.get('input').callprop('path'), var.get('input').get('offset'), var.get('input').get('length'), Js('content'))
                if var.get('state').get('any'):
                    pass
                else:
                    if _seq(var.get('state').get('choice'),var.get(u"null")):
                        var.put('result', var.get(u"this").callprop('_decodeGeneric', var.get('state').get('tag'), var.get('input'), var.get('options')))
                    else:
                        var.put('result', var.get(u"this").callprop('_decodeChoice', var.get('input'), var.get('options')))
                if var.get('input').callprop('isError', var.get('result')):
                    return var.get('result')
                if ((var.get('state').get('any').neg() and _seq(var.get('state').get('choice'),var.get(u"null"))) and PyJsStrictNeq(var.get('state').get('children'),var.get(u"null"))):
                    @Js
                    def PyJs_decodeChildren_56_(child, this, arguments, var=var):
                        var = Scope({'child':child, 'this':this, 'arguments':arguments, 'decodeChildren':PyJs_decodeChildren_56_}, var)
                        var.registers(['child'])
                        var.get('child').callprop('_decode', var.get('input'), var.get('options'))
                    PyJs_decodeChildren_56_._set_name('decodeChildren')
                    var.get('state').get('children').callprop('forEach', PyJs_decodeChildren_56_)
                if (var.get('state').get('contains') and (_seq(var.get('state').get('tag'),Js('octstr')) or _seq(var.get('state').get('tag'),Js('bitstr')))):
                    var.put('data', var.get('DecoderBuffer').create(var.get('result')))
                    var.put('result', var.get(u"this").callprop('_getUse', var.get('state').get('contains'), var.get('input').get('_reporterState').get('obj')).callprop('_decode', var.get('data'), var.get('options')))
            if (var.get('state').get('obj') and var.get('present')):
                var.put('result', var.get('input').callprop('leaveObject', var.get('prevObj')))
            if (PyJsStrictNeq(var.get('state').get('key'),var.get(u"null")) and (PyJsStrictNeq(var.get('result'),var.get(u"null")) or _seq(var.get('present'),Js(True)))):
                var.get('input').callprop('leaveKey', var.get('prevKey'), var.get('state').get('key'), var.get('result'))
            else:
                if PyJsStrictNeq(var.get('prevKey'),var.get(u"null")):
                    var.get('input').callprop('exitKey', var.get('prevKey'))
            return var.get('result')
        PyJs_decode_55_._set_name('decode')
        var.get('Node').get('prototype').put('_decode', PyJs_decode_55_)
        @Js
        def PyJs_decodeGeneric_57_(tag, input, options, this, arguments, var=var):
            var = Scope({'tag':tag, 'input':input, 'options':options, 'this':this, 'arguments':arguments, 'decodeGeneric':PyJs_decodeGeneric_57_}, var)
            var.registers(['options', 'state', 'tag', 'input'])
            var.put('state', var.get(u"this").get('_baseState'))
            if (_seq(var.get('tag'),Js('seq')) or _seq(var.get('tag'),Js('set'))):
                return var.get(u"null")
            if (_seq(var.get('tag'),Js('seqof')) or _seq(var.get('tag'),Js('setof'))):
                return var.get(u"this").callprop('_decodeList', var.get('input'), var.get('tag'), var.get('state').get('args').get('0'), var.get('options'))
            else:
                if JsRegExp('/str$/').callprop('test', var.get('tag')):
                    return var.get(u"this").callprop('_decodeStr', var.get('input'), var.get('tag'), var.get('options'))
                else:
                    if (_seq(var.get('tag'),Js('objid')) and var.get('state').get('args')):
                        return var.get(u"this").callprop('_decodeObjid', var.get('input'), var.get('state').get('args').get('0'), var.get('state').get('args').get('1'), var.get('options'))
                    else:
                        if _seq(var.get('tag'),Js('objid')):
                            return var.get(u"this").callprop('_decodeObjid', var.get('input'), var.get(u"null"), var.get(u"null"), var.get('options'))
                        else:
                            if (_seq(var.get('tag'),Js('gentime')) or _seq(var.get('tag'),Js('utctime'))):
                                return var.get(u"this").callprop('_decodeTime', var.get('input'), var.get('tag'), var.get('options'))
                            else:
                                if _seq(var.get('tag'),Js('null_')):
                                    return var.get(u"this").callprop('_decodeNull', var.get('input'), var.get('options'))
                                else:
                                    if _seq(var.get('tag'),Js('bool')):
                                        return var.get(u"this").callprop('_decodeBool', var.get('input'), var.get('options'))
                                    else:
                                        if _seq(var.get('tag'),Js('objDesc')):
                                            return var.get(u"this").callprop('_decodeStr', var.get('input'), var.get('tag'), var.get('options'))
                                        else:
                                            if (_seq(var.get('tag'),Js('int')) or _seq(var.get('tag'),Js('enum'))):
                                                return var.get(u"this").callprop('_decodeInt', var.get('input'), (var.get('state').get('args') and var.get('state').get('args').get('0')), var.get('options'))
            if PyJsStrictNeq(var.get('state').get('use'),var.get(u"null")):
                return var.get(u"this").callprop('_getUse', var.get('state').get('use'), var.get('input').get('_reporterState').get('obj')).callprop('_decode', var.get('input'), var.get('options'))
            else:
                return var.get('input').callprop('error', (Js('unknown tag: ')+var.get('tag')))
        PyJs_decodeGeneric_57_._set_name('decodeGeneric')
        var.get('Node').get('prototype').put('_decodeGeneric', PyJs_decodeGeneric_57_)
        @Js
        def PyJs__getUse_58_(entity, obj, this, arguments, var=var):
            var = Scope({'entity':entity, 'obj':obj, 'this':this, 'arguments':arguments, '_getUse':PyJs__getUse_58_}, var)
            var.registers(['state', 'entity', 'obj'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.get('state').put('useDecoder', var.get(u"this").callprop('_use', var.get('entity'), var.get('obj')))
            var.get('assert')(_seq(var.get('state').get('useDecoder').get('_baseState').get('parent'),var.get(u"null")))
            var.get('state').put('useDecoder', var.get('state').get('useDecoder').get('_baseState').get('children').get('0'))
            if PyJsStrictNeq(var.get('state').get('implicit'),var.get('state').get('useDecoder').get('_baseState').get('implicit')):
                var.get('state').put('useDecoder', var.get('state').get('useDecoder').callprop('clone'))
                var.get('state').get('useDecoder').get('_baseState').put('implicit', var.get('state').get('implicit'))
            return var.get('state').get('useDecoder')
        PyJs__getUse_58_._set_name('_getUse')
        var.get('Node').get('prototype').put('_getUse', PyJs__getUse_58_)
        @Js
        def PyJs_decodeChoice_59_(input, options, this, arguments, var=var):
            var = Scope({'input':input, 'options':options, 'this':this, 'arguments':arguments, 'decodeChoice':PyJs_decodeChoice_59_}, var)
            var.registers(['options', 'input', 'state', 'match', 'result'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.put('result', var.get(u"null"))
            var.put('match', Js(False))
            @Js
            def PyJs_anonymous_60_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key', 'value', 'node', 'save'])
                var.put('save', var.get('input').callprop('save'))
                var.put('node', var.get('state').get('choice').get(var.get('key')))
                try:
                    var.put('value', var.get('node').callprop('_decode', var.get('input'), var.get('options')))
                    if var.get('input').callprop('isError', var.get('value')):
                        return Js(False)
                    var.put('result', Js({'type':var.get('key'),'value':var.get('value')}))
                    var.put('match', Js(True))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_35237536 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get('input').callprop('restore', var.get('save'))
                        return Js(False)
                    finally:
                        if PyJsHolder_65_35237536 is not None:
                            var.own['e'] = PyJsHolder_65_35237536
                        else:
                            del var.own['e']
                        del PyJsHolder_65_35237536
                return Js(True)
            PyJs_anonymous_60_._set_name('anonymous')
            var.get('Object').callprop('keys', var.get('state').get('choice')).callprop('some', PyJs_anonymous_60_, var.get(u"this"))
            if var.get('match').neg():
                return var.get('input').callprop('error', Js('Choice not matched'))
            return var.get('result')
        PyJs_decodeChoice_59_._set_name('decodeChoice')
        var.get('Node').get('prototype').put('_decodeChoice', PyJs_decodeChoice_59_)
        @Js
        def PyJs_createEncoderBuffer_61_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments, 'createEncoderBuffer':PyJs_createEncoderBuffer_61_}, var)
            var.registers(['data'])
            return var.get('EncoderBuffer').create(var.get('data'), var.get(u"this").get('reporter'))
        PyJs_createEncoderBuffer_61_._set_name('createEncoderBuffer')
        var.get('Node').get('prototype').put('_createEncoderBuffer', PyJs_createEncoderBuffer_61_)
        @Js
        def PyJs_encode_62_(data, reporter, parent, this, arguments, var=var):
            var = Scope({'data':data, 'reporter':reporter, 'parent':parent, 'this':this, 'arguments':arguments, 'encode':PyJs_encode_62_}, var)
            var.registers(['parent', 'state', 'reporter', 'data', 'result'])
            var.put('state', var.get(u"this").get('_baseState'))
            if (PyJsStrictNeq(var.get('state').get('default'),var.get(u"null")) and _seq(var.get('state').get('default'),var.get('data'))):
                return var.get('undefined')
            var.put('result', var.get(u"this").callprop('_encodeValue', var.get('data'), var.get('reporter'), var.get('parent')))
            if _seq(var.get('result'),var.get('undefined')):
                return var.get('undefined')
            if var.get(u"this").callprop('_skipDefault', var.get('result'), var.get('reporter'), var.get('parent')):
                return var.get('undefined')
            return var.get('result')
        PyJs_encode_62_._set_name('encode')
        var.get('Node').get('prototype').put('_encode', PyJs_encode_62_)
        @Js
        def PyJs_encode_63_(data, reporter, parent, this, arguments, var=var):
            var = Scope({'data':data, 'reporter':reporter, 'parent':parent, 'this':this, 'arguments':arguments, 'encode':PyJs_encode_63_}, var)
            var.registers(['content', 'tag', 'state', 'parent', 'reporter', 'primitive', 'child', 'data', 'result', 'cls'])
            var.put('state', var.get(u"this").get('_baseState'))
            if _seq(var.get('state').get('parent'),var.get(u"null")):
                return var.get('state').get('children').get('0').callprop('_encode', var.get('data'), (var.get('reporter') or var.get('Reporter').create()))
            var.put('result', var.get(u"null"))
            var.get(u"this").put('reporter', var.get('reporter'))
            if (var.get('state').get('optional') and _seq(var.get('data'),var.get('undefined'))):
                if PyJsStrictNeq(var.get('state').get('default'),var.get(u"null")):
                    var.put('data', var.get('state').get('default'))
                else:
                    return var.get('undefined')
            var.put('content', var.get(u"null"))
            var.put('primitive', Js(False))
            if var.get('state').get('any'):
                var.put('result', var.get(u"this").callprop('_createEncoderBuffer', var.get('data')))
            else:
                if var.get('state').get('choice'):
                    var.put('result', var.get(u"this").callprop('_encodeChoice', var.get('data'), var.get('reporter')))
                else:
                    if var.get('state').get('contains'):
                        var.put('content', var.get(u"this").callprop('_getUse', var.get('state').get('contains'), var.get('parent')).callprop('_encode', var.get('data'), var.get('reporter')))
                        var.put('primitive', Js(True))
                    else:
                        if var.get('state').get('children'):
                            @Js
                            def PyJs_anonymous_64_(child, this, arguments, var=var):
                                var = Scope({'child':child, 'this':this, 'arguments':arguments}, var)
                                var.registers(['child'])
                                return var.get('child')
                            PyJs_anonymous_64_._set_name('anonymous')
                            @Js
                            def PyJs_anonymous_65_(child, this, arguments, var=var):
                                var = Scope({'child':child, 'this':this, 'arguments':arguments}, var)
                                var.registers(['child', 'prevKey', 'res'])
                                if _seq(var.get('child').get('_baseState').get('tag'),Js('null_')):
                                    return var.get('child').callprop('_encode', var.get(u"null"), var.get('reporter'), var.get('data'))
                                if _seq(var.get('child').get('_baseState').get('key'),var.get(u"null")):
                                    return var.get('reporter').callprop('error', Js('Child should have a key'))
                                var.put('prevKey', var.get('reporter').callprop('enterKey', var.get('child').get('_baseState').get('key')))
                                if PyJsStrictNeq((Js('undefined') if _seq(var.get('data',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('data'))),Js('object')):
                                    return var.get('reporter').callprop('error', Js('Child expected, but input is not object'))
                                var.put('res', var.get('child').callprop('_encode', var.get('data').get(var.get('child').get('_baseState').get('key')), var.get('reporter'), var.get('data')))
                                var.get('reporter').callprop('leaveKey', var.get('prevKey'))
                                return var.get('res')
                            PyJs_anonymous_65_._set_name('anonymous')
                            var.put('content', var.get('state').get('children').callprop('map', PyJs_anonymous_65_, var.get(u"this")).callprop('filter', PyJs_anonymous_64_))
                            var.put('content', var.get(u"this").callprop('_createEncoderBuffer', var.get('content')))
                        else:
                            if (_seq(var.get('state').get('tag'),Js('seqof')) or _seq(var.get('state').get('tag'),Js('setof'))):
                                if (var.get('state').get('args') and _seq(var.get('state').get('args').get('length'),Js(1.0))).neg():
                                    return var.get('reporter').callprop('error', (Js('Too many args for : ')+var.get('state').get('tag')))
                                if var.get('Array').callprop('isArray', var.get('data')).neg():
                                    return var.get('reporter').callprop('error', Js('seqof/setof, but data is not Array'))
                                var.put('child', var.get(u"this").callprop('clone'))
                                var.get('child').get('_baseState').put('implicit', var.get(u"null"))
                                @Js
                                def PyJs_anonymous_66_(item, this, arguments, var=var):
                                    var = Scope({'item':item, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['state', 'item'])
                                    var.put('state', var.get(u"this").get('_baseState'))
                                    return var.get(u"this").callprop('_getUse', var.get('state').get('args').get('0'), var.get('data')).callprop('_encode', var.get('item'), var.get('reporter'))
                                PyJs_anonymous_66_._set_name('anonymous')
                                var.put('content', var.get(u"this").callprop('_createEncoderBuffer', var.get('data').callprop('map', PyJs_anonymous_66_, var.get('child'))))
                            else:
                                if PyJsStrictNeq(var.get('state').get('use'),var.get(u"null")):
                                    var.put('result', var.get(u"this").callprop('_getUse', var.get('state').get('use'), var.get('parent')).callprop('_encode', var.get('data'), var.get('reporter')))
                                else:
                                    var.put('content', var.get(u"this").callprop('_encodePrimitive', var.get('state').get('tag'), var.get('data')))
                                    var.put('primitive', Js(True))
            if (var.get('state').get('any').neg() and _seq(var.get('state').get('choice'),var.get(u"null"))):
                var.put('tag', (var.get('state').get('implicit') if PyJsStrictNeq(var.get('state').get('implicit'),var.get(u"null")) else var.get('state').get('tag')))
                var.put('cls', (Js('universal') if _seq(var.get('state').get('implicit'),var.get(u"null")) else Js('context')))
                if _seq(var.get('tag'),var.get(u"null")):
                    if _seq(var.get('state').get('use'),var.get(u"null")):
                        var.get('reporter').callprop('error', Js('Tag could be omitted only for .use()'))
                else:
                    if _seq(var.get('state').get('use'),var.get(u"null")):
                        var.put('result', var.get(u"this").callprop('_encodeComposite', var.get('tag'), var.get('primitive'), var.get('cls'), var.get('content')))
            if PyJsStrictNeq(var.get('state').get('explicit'),var.get(u"null")):
                var.put('result', var.get(u"this").callprop('_encodeComposite', var.get('state').get('explicit'), Js(False), Js('context'), var.get('result')))
            return var.get('result')
        PyJs_encode_63_._set_name('encode')
        var.get('Node').get('prototype').put('_encodeValue', PyJs_encode_63_)
        @Js
        def PyJs_encodeChoice_67_(data, reporter, this, arguments, var=var):
            var = Scope({'data':data, 'reporter':reporter, 'this':this, 'arguments':arguments, 'encodeChoice':PyJs_encodeChoice_67_}, var)
            var.registers(['state', 'data', 'reporter', 'node'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.put('node', var.get('state').get('choice').get(var.get('data').get('type')))
            if var.get('node').neg():
                var.get('assert')(Js(False), ((var.get('data').get('type')+Js(' not found in '))+var.get('JSON').callprop('stringify', var.get('Object').callprop('keys', var.get('state').get('choice')))))
            return var.get('node').callprop('_encode', var.get('data').get('value'), var.get('reporter'))
        PyJs_encodeChoice_67_._set_name('encodeChoice')
        var.get('Node').get('prototype').put('_encodeChoice', PyJs_encodeChoice_67_)
        @Js
        def PyJs_encodePrimitive_68_(tag, data, this, arguments, var=var):
            var = Scope({'tag':tag, 'data':data, 'this':this, 'arguments':arguments, 'encodePrimitive':PyJs_encodePrimitive_68_}, var)
            var.registers(['state', 'data', 'tag'])
            var.put('state', var.get(u"this").get('_baseState'))
            if JsRegExp('/str$/').callprop('test', var.get('tag')):
                return var.get(u"this").callprop('_encodeStr', var.get('data'), var.get('tag'))
            else:
                if (_seq(var.get('tag'),Js('objid')) and var.get('state').get('args')):
                    return var.get(u"this").callprop('_encodeObjid', var.get('data'), var.get('state').get('reverseArgs').get('0'), var.get('state').get('args').get('1'))
                else:
                    if _seq(var.get('tag'),Js('objid')):
                        return var.get(u"this").callprop('_encodeObjid', var.get('data'), var.get(u"null"), var.get(u"null"))
                    else:
                        if (_seq(var.get('tag'),Js('gentime')) or _seq(var.get('tag'),Js('utctime'))):
                            return var.get(u"this").callprop('_encodeTime', var.get('data'), var.get('tag'))
                        else:
                            if _seq(var.get('tag'),Js('null_')):
                                return var.get(u"this").callprop('_encodeNull')
                            else:
                                if (_seq(var.get('tag'),Js('int')) or _seq(var.get('tag'),Js('enum'))):
                                    return var.get(u"this").callprop('_encodeInt', var.get('data'), (var.get('state').get('args') and var.get('state').get('reverseArgs').get('0')))
                                else:
                                    if _seq(var.get('tag'),Js('bool')):
                                        return var.get(u"this").callprop('_encodeBool', var.get('data'))
                                    else:
                                        if _seq(var.get('tag'),Js('objDesc')):
                                            return var.get(u"this").callprop('_encodeStr', var.get('data'), var.get('tag'))
                                        else:
                                            PyJsTempException = JsToPyException(var.get('Error').create((Js('Unsupported tag: ')+var.get('tag'))))
                                            raise PyJsTempException
        PyJs_encodePrimitive_68_._set_name('encodePrimitive')
        var.get('Node').get('prototype').put('_encodePrimitive', PyJs_encodePrimitive_68_)
        @Js
        def PyJs_isNumstr_69_(str, this, arguments, var=var):
            var = Scope({'str':str, 'this':this, 'arguments':arguments, 'isNumstr':PyJs_isNumstr_69_}, var)
            var.registers(['str'])
            return JsRegExp('/^[0-9 ]*$/').callprop('test', var.get('str'))
        PyJs_isNumstr_69_._set_name('isNumstr')
        var.get('Node').get('prototype').put('_isNumstr', PyJs_isNumstr_69_)
        @Js
        def PyJs_isPrintstr_70_(str, this, arguments, var=var):
            var = Scope({'str':str, 'this':this, 'arguments':arguments, 'isPrintstr':PyJs_isPrintstr_70_}, var)
            var.registers(['str'])
            return JsRegExp("/^[A-Za-z0-9 '()+,-./:=?]*$/").callprop('test', var.get('str'))
        PyJs_isPrintstr_70_._set_name('isPrintstr')
        var.get('Node').get('prototype').put('_isPrintstr', PyJs_isPrintstr_70_)
    PyJs_anonymous_26_._set_name('anonymous')
    @Js
    def PyJs_anonymous_71_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Reporter', 'ReporterError', 'module', 'inherits'])
        @Js
        def PyJsHoisted_Reporter_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            var.get(u"this").put('_reporterState', Js({'obj':var.get(u"null"),'path':Js([]),'options':(var.get('options') or Js({})),'errors':Js([])}))
        PyJsHoisted_Reporter_.func_name = 'Reporter'
        var.put('Reporter', PyJsHoisted_Reporter_)
        @Js
        def PyJsHoisted_ReporterError_(path, msg, this, arguments, var=var):
            var = Scope({'path':path, 'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['msg', 'path'])
            var.get(u"this").put('path', var.get('path'))
            var.get(u"this").callprop('rethrow', var.get('msg'))
        PyJsHoisted_ReporterError_.func_name = 'ReporterError'
        var.put('ReporterError', PyJsHoisted_ReporterError_)
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        pass
        var.get('exports').put('Reporter', var.get('Reporter'))
        @Js
        def PyJs_isError_72_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments, 'isError':PyJs_isError_72_}, var)
            var.registers(['obj'])
            return var.get('obj').instanceof(var.get('ReporterError'))
        PyJs_isError_72_._set_name('isError')
        var.get('Reporter').get('prototype').put('isError', PyJs_isError_72_)
        @Js
        def PyJs_save_73_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'save':PyJs_save_73_}, var)
            var.registers(['state'])
            var.put('state', var.get(u"this").get('_reporterState'))
            return Js({'obj':var.get('state').get('obj'),'pathLen':var.get('state').get('path').get('length')})
        PyJs_save_73_._set_name('save')
        var.get('Reporter').get('prototype').put('save', PyJs_save_73_)
        @Js
        def PyJs_restore_74_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments, 'restore':PyJs_restore_74_}, var)
            var.registers(['state', 'data'])
            var.put('state', var.get(u"this").get('_reporterState'))
            var.get('state').put('obj', var.get('data').get('obj'))
            var.get('state').put('path', var.get('state').get('path').callprop('slice', Js(0.0), var.get('data').get('pathLen')))
        PyJs_restore_74_._set_name('restore')
        var.get('Reporter').get('prototype').put('restore', PyJs_restore_74_)
        @Js
        def PyJs_enterKey_75_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'enterKey':PyJs_enterKey_75_}, var)
            var.registers(['key'])
            return var.get(u"this").get('_reporterState').get('path').callprop('push', var.get('key'))
        PyJs_enterKey_75_._set_name('enterKey')
        var.get('Reporter').get('prototype').put('enterKey', PyJs_enterKey_75_)
        @Js
        def PyJs_exitKey_76_(index, this, arguments, var=var):
            var = Scope({'index':index, 'this':this, 'arguments':arguments, 'exitKey':PyJs_exitKey_76_}, var)
            var.registers(['state', 'index'])
            var.put('state', var.get(u"this").get('_reporterState'))
            var.get('state').put('path', var.get('state').get('path').callprop('slice', Js(0.0), (var.get('index')-Js(1.0))))
        PyJs_exitKey_76_._set_name('exitKey')
        var.get('Reporter').get('prototype').put('exitKey', PyJs_exitKey_76_)
        @Js
        def PyJs_leaveKey_77_(index, key, value, this, arguments, var=var):
            var = Scope({'index':index, 'key':key, 'value':value, 'this':this, 'arguments':arguments, 'leaveKey':PyJs_leaveKey_77_}, var)
            var.registers(['state', 'index', 'value', 'key'])
            var.put('state', var.get(u"this").get('_reporterState'))
            var.get(u"this").callprop('exitKey', var.get('index'))
            if PyJsStrictNeq(var.get('state').get('obj'),var.get(u"null")):
                var.get('state').get('obj').put(var.get('key'), var.get('value'))
        PyJs_leaveKey_77_._set_name('leaveKey')
        var.get('Reporter').get('prototype').put('leaveKey', PyJs_leaveKey_77_)
        @Js
        def PyJs_path_78_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'path':PyJs_path_78_}, var)
            var.registers([])
            return var.get(u"this").get('_reporterState').get('path').callprop('join', Js('/'))
        PyJs_path_78_._set_name('path')
        var.get('Reporter').get('prototype').put('path', PyJs_path_78_)
        @Js
        def PyJs_enterObject_79_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'enterObject':PyJs_enterObject_79_}, var)
            var.registers(['state', 'prev'])
            var.put('state', var.get(u"this").get('_reporterState'))
            var.put('prev', var.get('state').get('obj'))
            var.get('state').put('obj', Js({}))
            return var.get('prev')
        PyJs_enterObject_79_._set_name('enterObject')
        var.get('Reporter').get('prototype').put('enterObject', PyJs_enterObject_79_)
        @Js
        def PyJs_leaveObject_80_(prev, this, arguments, var=var):
            var = Scope({'prev':prev, 'this':this, 'arguments':arguments, 'leaveObject':PyJs_leaveObject_80_}, var)
            var.registers(['state', 'now', 'prev'])
            var.put('state', var.get(u"this").get('_reporterState'))
            var.put('now', var.get('state').get('obj'))
            var.get('state').put('obj', var.get('prev'))
            return var.get('now')
        PyJs_leaveObject_80_._set_name('leaveObject')
        var.get('Reporter').get('prototype').put('leaveObject', PyJs_leaveObject_80_)
        @Js
        def PyJs_error_81_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'arguments':arguments, 'error':PyJs_error_81_}, var)
            var.registers(['state', 'err', 'msg', 'inherited'])
            var.put('err', PyJsComma(Js(0.0), Js(None)))
            var.put('state', var.get(u"this").get('_reporterState'))
            var.put('inherited', var.get('msg').instanceof(var.get('ReporterError')))
            if var.get('inherited'):
                var.put('err', var.get('msg'))
            else:
                @Js
                def PyJs_anonymous_82_(elem, this, arguments, var=var):
                    var = Scope({'elem':elem, 'this':this, 'arguments':arguments}, var)
                    var.registers(['elem'])
                    return ((Js('[')+var.get('JSON').callprop('stringify', var.get('elem')))+Js(']'))
                PyJs_anonymous_82_._set_name('anonymous')
                var.put('err', var.get('ReporterError').create(var.get('state').get('path').callprop('map', PyJs_anonymous_82_).callprop('join', Js('')), (var.get('msg').get('message') or var.get('msg')), var.get('msg').get('stack')))
            if var.get('state').get('options').get('partial').neg():
                PyJsTempException = JsToPyException(var.get('err'))
                raise PyJsTempException
            if var.get('inherited').neg():
                var.get('state').get('errors').callprop('push', var.get('err'))
            return var.get('err')
        PyJs_error_81_._set_name('error')
        var.get('Reporter').get('prototype').put('error', PyJs_error_81_)
        @Js
        def PyJs_wrapResult_83_(result, this, arguments, var=var):
            var = Scope({'result':result, 'this':this, 'arguments':arguments, 'wrapResult':PyJs_wrapResult_83_}, var)
            var.registers(['state', 'result'])
            var.put('state', var.get(u"this").get('_reporterState'))
            if var.get('state').get('options').get('partial').neg():
                return var.get('result')
            return Js({'result':(var.get(u"null") if var.get(u"this").callprop('isError', var.get('result')) else var.get('result')),'errors':var.get('state').get('errors')})
        PyJs_wrapResult_83_._set_name('wrapResult')
        var.get('Reporter').get('prototype').put('wrapResult', PyJs_wrapResult_83_)
        pass
        var.get('inherits')(var.get('ReporterError'), var.get('Error'))
        @Js
        def PyJs_rethrow_84_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'arguments':arguments, 'rethrow':PyJs_rethrow_84_}, var)
            var.registers(['msg'])
            var.get(u"this").put('message', ((var.get('msg')+Js(' at: '))+(var.get(u"this").get('path') or Js('(shallow)'))))
            if var.get('Error').get('captureStackTrace'):
                var.get('Error').callprop('captureStackTrace', var.get(u"this"), var.get('ReporterError'))
            if var.get(u"this").get('stack').neg():
                try:
                    PyJsTempException = JsToPyException(var.get('Error').create(var.get(u"this").get('message')))
                    raise PyJsTempException
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_76712804 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get(u"this").put('stack', var.get('e').get('stack'))
                    finally:
                        if PyJsHolder_65_76712804 is not None:
                            var.own['e'] = PyJsHolder_65_76712804
                        else:
                            del var.own['e']
                        del PyJsHolder_65_76712804
            return var.get(u"this")
        PyJs_rethrow_84_._set_name('rethrow')
        var.get('ReporterError').get('prototype').put('rethrow', PyJs_rethrow_84_)
    PyJs_anonymous_71_._set_name('anonymous')
    @Js
    def PyJs_anonymous_85_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'reverse'])
        @Js
        def PyJsHoisted_reverse_(map, this, arguments, var=var):
            var = Scope({'map':map, 'this':this, 'arguments':arguments}, var)
            var.registers(['map', 'res'])
            var.put('res', Js({}))
            @Js
            def PyJs_anonymous_86_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['value', 'key'])
                if ((var.get('key')|Js(0.0))==var.get('key')):
                    var.put('key', (var.get('key')|Js(0.0)))
                var.put('value', var.get('map').get(var.get('key')))
                var.get('res').put(var.get('value'), var.get('key'))
            PyJs_anonymous_86_._set_name('anonymous')
            var.get('Object').callprop('keys', var.get('map')).callprop('forEach', PyJs_anonymous_86_)
            return var.get('res')
        PyJsHoisted_reverse_.func_name = 'reverse'
        var.put('reverse', PyJsHoisted_reverse_)
        Js('use strict')
        pass
        var.get('exports').put('tagClass', Js({'0':Js('universal'),'1':Js('application'),'2':Js('context'),'3':Js('private')}))
        var.get('exports').put('tagClassByName', var.get('reverse')(var.get('exports').get('tagClass')))
        def PyJs_LONG_87_(var=var):
            return var.get('exports').put('tag', Js({'0':Js('end'),'1':Js('bool'),'2':Js('int'),'3':Js('bitstr'),'4':Js('octstr'),'5':Js('null_'),'6':Js('objid'),'7':Js('objDesc'),'8':Js('external'),'9':Js('real'),'10':Js('enum'),'11':Js('embed'),'12':Js('utf8str'),'13':Js('relativeOid'),'16':Js('seq'),'17':Js('set'),'18':Js('numstr'),'19':Js('printstr'),'20':Js('t61str'),'21':Js('videostr'),'22':Js('ia5str'),'23':Js('utctime'),'24':Js('gentime'),'25':Js('graphstr'),'26':Js('iso646str'),'27':Js('genstr'),'28':Js('unistr'),'29':Js('charstr'),'30':Js('bmpstr')}))
        PyJs_LONG_87_()
        var.get('exports').put('tagByName', var.get('reverse')(var.get('exports').get('tag')))
    PyJs_anonymous_85_._set_name('anonymous')
    @Js
    def PyJs_anonymous_88_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'constants'])
        Js('use strict')
        var.put('constants', var.get('exports'))
        @Js
        def PyJs_reverse_89_(map, this, arguments, var=var):
            var = Scope({'map':map, 'this':this, 'arguments':arguments, 'reverse':PyJs_reverse_89_}, var)
            var.registers(['map', 'res'])
            var.put('res', Js({}))
            @Js
            def PyJs_anonymous_90_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['value', 'key'])
                if ((var.get('key')|Js(0.0))==var.get('key')):
                    var.put('key', (var.get('key')|Js(0.0)))
                var.put('value', var.get('map').get(var.get('key')))
                var.get('res').put(var.get('value'), var.get('key'))
            PyJs_anonymous_90_._set_name('anonymous')
            var.get('Object').callprop('keys', var.get('map')).callprop('forEach', PyJs_anonymous_90_)
            return var.get('res')
        PyJs_reverse_89_._set_name('reverse')
        var.get('constants').put('_reverse', PyJs_reverse_89_)
        var.get('constants').put('der', var.get('require')(Js('./der')))
    PyJs_anonymous_88_._set_name('anonymous')
    @Js
    def PyJs_anonymous_91_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'DERDecoder', 'DERNode', 'require', 'module', 'Node', 'DecoderBuffer', 'inherits', 'derDecodeLen', 'derDecodeTag', 'der', 'bignum'])
        @Js
        def PyJsHoisted_DERDecoder_(entity, this, arguments, var=var):
            var = Scope({'entity':entity, 'this':this, 'arguments':arguments}, var)
            var.registers(['entity'])
            var.get(u"this").put('enc', Js('der'))
            var.get(u"this").put('name', var.get('entity').get('name'))
            var.get(u"this").put('entity', var.get('entity'))
            var.get(u"this").put('tree', var.get('DERNode').create())
            var.get(u"this").get('tree').callprop('_init', var.get('entity').get('body'))
        PyJsHoisted_DERDecoder_.func_name = 'DERDecoder'
        var.put('DERDecoder', PyJsHoisted_DERDecoder_)
        @Js
        def PyJsHoisted_DERNode_(parent, this, arguments, var=var):
            var = Scope({'parent':parent, 'this':this, 'arguments':arguments}, var)
            var.registers(['parent'])
            var.get('Node').callprop('call', var.get(u"this"), Js('der'), var.get('parent'))
        PyJsHoisted_DERNode_.func_name = 'DERNode'
        var.put('DERNode', PyJsHoisted_DERNode_)
        @Js
        def PyJsHoisted_derDecodeTag_(buf, fail, this, arguments, var=var):
            var = Scope({'buf':buf, 'fail':fail, 'this':this, 'arguments':arguments}, var)
            var.registers(['oct', 'buf', 'tag', 'tagStr', 'primitive', 'fail', 'cls'])
            var.put('tag', var.get('buf').callprop('readUInt8', var.get('fail')))
            if var.get('buf').callprop('isError', var.get('tag')):
                return var.get('tag')
            var.put('cls', var.get('der').get('tagClass').get((var.get('tag')>>Js(6.0))))
            var.put('primitive', _seq((var.get('tag')&Js(32)),Js(0.0)))
            if _seq((var.get('tag')&Js(31)),Js(31)):
                var.put('oct', var.get('tag'))
                var.put('tag', Js(0.0))
                while _seq((var.get('oct')&Js(128)),Js(128)):
                    var.put('oct', var.get('buf').callprop('readUInt8', var.get('fail')))
                    if var.get('buf').callprop('isError', var.get('oct')):
                        return var.get('oct')
                    var.put('tag', Js(7.0), '<<')
                    var.put('tag', (var.get('oct')&Js(127)), '|')
            else:
                var.put('tag', Js(31), '&')
            var.put('tagStr', var.get('der').get('tag').get(var.get('tag')))
            return Js({'cls':var.get('cls'),'primitive':var.get('primitive'),'tag':var.get('tag'),'tagStr':var.get('tagStr')})
        PyJsHoisted_derDecodeTag_.func_name = 'derDecodeTag'
        var.put('derDecodeTag', PyJsHoisted_derDecodeTag_)
        @Js
        def PyJsHoisted_derDecodeLen_(buf, primitive, fail, this, arguments, var=var):
            var = Scope({'buf':buf, 'primitive':primitive, 'fail':fail, 'this':this, 'arguments':arguments}, var)
            var.registers(['j', 'len', 'i', 'buf', 'num', 'primitive', 'fail'])
            var.put('len', var.get('buf').callprop('readUInt8', var.get('fail')))
            if var.get('buf').callprop('isError', var.get('len')):
                return var.get('len')
            if (var.get('primitive').neg() and _seq(var.get('len'),Js(128))):
                return var.get(u"null")
            if _seq((var.get('len')&Js(128)),Js(0.0)):
                return var.get('len')
            var.put('num', (var.get('len')&Js(127)))
            if (var.get('num')>Js(4.0)):
                return var.get('buf').callprop('error', Js('length octect is too long'))
            var.put('len', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('num')):
                try:
                    var.put('len', Js(8.0), '<<')
                    var.put('j', var.get('buf').callprop('readUInt8', var.get('fail')))
                    if var.get('buf').callprop('isError', var.get('j')):
                        return var.get('j')
                    var.put('len', var.get('j'), '|')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('len')
        PyJsHoisted_derDecodeLen_.func_name = 'derDecodeLen'
        var.put('derDecodeLen', PyJsHoisted_derDecodeLen_)
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('bignum', var.get('require')(Js('bn.js')))
        var.put('DecoderBuffer', var.get('require')(Js('../base/buffer')).get('DecoderBuffer'))
        var.put('Node', var.get('require')(Js('../base/node')))
        var.put('der', var.get('require')(Js('../constants/der')))
        pass
        var.get('module').put('exports', var.get('DERDecoder'))
        @Js
        def PyJs_decode_92_(data, options, this, arguments, var=var):
            var = Scope({'data':data, 'options':options, 'this':this, 'arguments':arguments, 'decode':PyJs_decode_92_}, var)
            var.registers(['options', 'data'])
            if var.get('DecoderBuffer').callprop('isDecoderBuffer', var.get('data')).neg():
                var.put('data', var.get('DecoderBuffer').create(var.get('data'), var.get('options')))
            return var.get(u"this").get('tree').callprop('_decode', var.get('data'), var.get('options'))
        PyJs_decode_92_._set_name('decode')
        var.get('DERDecoder').get('prototype').put('decode', PyJs_decode_92_)
        pass
        var.get('inherits')(var.get('DERNode'), var.get('Node'))
        @Js
        def PyJs_peekTag_93_(buffer, tag, any, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'tag':tag, 'any':any, 'this':this, 'arguments':arguments, 'peekTag':PyJs_peekTag_93_}, var)
            var.registers(['buffer', 'any', 'tag', 'state', 'decodedTag'])
            if var.get('buffer').callprop('isEmpty'):
                return Js(False)
            var.put('state', var.get('buffer').callprop('save'))
            var.put('decodedTag', var.get('derDecodeTag')(var.get('buffer'), ((Js('Failed to peek tag: "')+var.get('tag'))+Js('"'))))
            if var.get('buffer').callprop('isError', var.get('decodedTag')):
                return var.get('decodedTag')
            var.get('buffer').callprop('restore', var.get('state'))
            return (((_seq(var.get('decodedTag').get('tag'),var.get('tag')) or _seq(var.get('decodedTag').get('tagStr'),var.get('tag'))) or _seq((var.get('decodedTag').get('tagStr')+Js('of')),var.get('tag'))) or var.get('any'))
        PyJs_peekTag_93_._set_name('peekTag')
        var.get('DERNode').get('prototype').put('_peekTag', PyJs_peekTag_93_)
        @Js
        def PyJs_decodeTag_94_(buffer, tag, any, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'tag':tag, 'any':any, 'this':this, 'arguments':arguments, 'decodeTag':PyJs_decodeTag_94_}, var)
            var.registers(['buffer', 'any', 'len', 'tag', 'state', 'decodedTag', 'res'])
            var.put('decodedTag', var.get('derDecodeTag')(var.get('buffer'), ((Js('Failed to decode tag of "')+var.get('tag'))+Js('"'))))
            if var.get('buffer').callprop('isError', var.get('decodedTag')):
                return var.get('decodedTag')
            var.put('len', var.get('derDecodeLen')(var.get('buffer'), var.get('decodedTag').get('primitive'), ((Js('Failed to get length of "')+var.get('tag'))+Js('"'))))
            if var.get('buffer').callprop('isError', var.get('len')):
                return var.get('len')
            if (((var.get('any').neg() and PyJsStrictNeq(var.get('decodedTag').get('tag'),var.get('tag'))) and PyJsStrictNeq(var.get('decodedTag').get('tagStr'),var.get('tag'))) and PyJsStrictNeq((var.get('decodedTag').get('tagStr')+Js('of')),var.get('tag'))):
                return var.get('buffer').callprop('error', ((Js('Failed to match tag: "')+var.get('tag'))+Js('"')))
            if (var.get('decodedTag').get('primitive') or PyJsStrictNeq(var.get('len'),var.get(u"null"))):
                return var.get('buffer').callprop('skip', var.get('len'), ((Js('Failed to match body of: "')+var.get('tag'))+Js('"')))
            var.put('state', var.get('buffer').callprop('save'))
            var.put('res', var.get(u"this").callprop('_skipUntilEnd', var.get('buffer'), ((Js('Failed to skip indefinite length body: "')+var.get(u"this").get('tag'))+Js('"'))))
            if var.get('buffer').callprop('isError', var.get('res')):
                return var.get('res')
            var.put('len', (var.get('buffer').get('offset')-var.get('state').get('offset')))
            var.get('buffer').callprop('restore', var.get('state'))
            return var.get('buffer').callprop('skip', var.get('len'), ((Js('Failed to match body of: "')+var.get('tag'))+Js('"')))
        PyJs_decodeTag_94_._set_name('decodeTag')
        var.get('DERNode').get('prototype').put('_decodeTag', PyJs_decodeTag_94_)
        @Js
        def PyJs_skipUntilEnd_95_(buffer, fail, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'fail':fail, 'this':this, 'arguments':arguments, 'skipUntilEnd':PyJs_skipUntilEnd_95_}, var)
            var.registers(['buffer', 'len', 'tag', 'fail', 'res'])
            #for JS loop

            while 1:
                var.put('tag', var.get('derDecodeTag')(var.get('buffer'), var.get('fail')))
                if var.get('buffer').callprop('isError', var.get('tag')):
                    return var.get('tag')
                var.put('len', var.get('derDecodeLen')(var.get('buffer'), var.get('tag').get('primitive'), var.get('fail')))
                if var.get('buffer').callprop('isError', var.get('len')):
                    return var.get('len')
                var.put('res', PyJsComma(Js(0.0), Js(None)))
                if (var.get('tag').get('primitive') or PyJsStrictNeq(var.get('len'),var.get(u"null"))):
                    var.put('res', var.get('buffer').callprop('skip', var.get('len')))
                else:
                    var.put('res', var.get(u"this").callprop('_skipUntilEnd', var.get('buffer'), var.get('fail')))
                if var.get('buffer').callprop('isError', var.get('res')):
                    return var.get('res')
                if _seq(var.get('tag').get('tagStr'),Js('end')):
                    break

        PyJs_skipUntilEnd_95_._set_name('skipUntilEnd')
        var.get('DERNode').get('prototype').put('_skipUntilEnd', PyJs_skipUntilEnd_95_)
        @Js
        def PyJs_decodeList_96_(buffer, tag, decoder, options, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'tag':tag, 'decoder':decoder, 'options':options, 'this':this, 'arguments':arguments, 'decodeList':PyJs_decodeList_96_}, var)
            var.registers(['options', 'buffer', 'tag', 'decoder', 'result', 'possibleEnd', 'res'])
            var.put('result', Js([]))
            while var.get('buffer').callprop('isEmpty').neg():
                var.put('possibleEnd', var.get(u"this").callprop('_peekTag', var.get('buffer'), Js('end')))
                if var.get('buffer').callprop('isError', var.get('possibleEnd')):
                    return var.get('possibleEnd')
                var.put('res', var.get('decoder').callprop('decode', var.get('buffer'), Js('der'), var.get('options')))
                if (var.get('buffer').callprop('isError', var.get('res')) and var.get('possibleEnd')):
                    break
                var.get('result').callprop('push', var.get('res'))
            return var.get('result')
        PyJs_decodeList_96_._set_name('decodeList')
        var.get('DERNode').get('prototype').put('_decodeList', PyJs_decodeList_96_)
        @Js
        def PyJs_decodeStr_97_(buffer, tag, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'tag':tag, 'this':this, 'arguments':arguments, 'decodeStr':PyJs_decodeStr_97_}, var)
            var.registers(['str', 'buffer', 'unused', 'i', 'numstr', 'tag', 'printstr', 'raw'])
            if _seq(var.get('tag'),Js('bitstr')):
                var.put('unused', var.get('buffer').callprop('readUInt8'))
                if var.get('buffer').callprop('isError', var.get('unused')):
                    return var.get('unused')
                return Js({'unused':var.get('unused'),'data':var.get('buffer').callprop('raw')})
            else:
                if _seq(var.get('tag'),Js('bmpstr')):
                    var.put('raw', var.get('buffer').callprop('raw'))
                    if _seq((var.get('raw').get('length')%Js(2.0)),Js(1.0)):
                        return var.get('buffer').callprop('error', Js('Decoding of string type: bmpstr length mismatch'))
                    var.put('str', Js(''))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<(var.get('raw').get('length')/Js(2.0))):
                        try:
                            var.put('str', var.get('String').callprop('fromCharCode', var.get('raw').callprop('readUInt16BE', (var.get('i')*Js(2.0)))), '+')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('str')
                else:
                    if _seq(var.get('tag'),Js('numstr')):
                        var.put('numstr', var.get('buffer').callprop('raw').callprop('toString', Js('ascii')))
                        if var.get(u"this").callprop('_isNumstr', var.get('numstr')).neg():
                            return var.get('buffer').callprop('error', (Js('Decoding of string type: ')+Js('numstr unsupported characters')))
                        return var.get('numstr')
                    else:
                        if _seq(var.get('tag'),Js('octstr')):
                            return var.get('buffer').callprop('raw')
                        else:
                            if _seq(var.get('tag'),Js('objDesc')):
                                return var.get('buffer').callprop('raw')
                            else:
                                if _seq(var.get('tag'),Js('printstr')):
                                    var.put('printstr', var.get('buffer').callprop('raw').callprop('toString', Js('ascii')))
                                    if var.get(u"this").callprop('_isPrintstr', var.get('printstr')).neg():
                                        return var.get('buffer').callprop('error', (Js('Decoding of string type: ')+Js('printstr unsupported characters')))
                                    return var.get('printstr')
                                else:
                                    if JsRegExp('/str$/').callprop('test', var.get('tag')):
                                        return var.get('buffer').callprop('raw').callprop('toString')
                                    else:
                                        return var.get('buffer').callprop('error', ((Js('Decoding of string type: ')+var.get('tag'))+Js(' unsupported')))
        PyJs_decodeStr_97_._set_name('decodeStr')
        var.get('DERNode').get('prototype').put('_decodeStr', PyJs_decodeStr_97_)
        @Js
        def PyJs_decodeObjid_98_(buffer, values, relative, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'values':values, 'relative':relative, 'this':this, 'arguments':arguments, 'decodeObjid':PyJs_decodeObjid_98_}, var)
            var.registers(['identifiers', 'first', 'ident', 'buffer', 'tmp', 'second', 'values', 'relative', 'result', 'subident'])
            var.put('result', PyJsComma(Js(0.0), Js(None)))
            var.put('identifiers', Js([]))
            var.put('ident', Js(0.0))
            var.put('subident', Js(0.0))
            while var.get('buffer').callprop('isEmpty').neg():
                var.put('subident', var.get('buffer').callprop('readUInt8'))
                var.put('ident', Js(7.0), '<<')
                var.put('ident', (var.get('subident')&Js(127)), '|')
                if _seq((var.get('subident')&Js(128)),Js(0.0)):
                    var.get('identifiers').callprop('push', var.get('ident'))
                    var.put('ident', Js(0.0))
            if (var.get('subident')&Js(128)):
                var.get('identifiers').callprop('push', var.get('ident'))
            var.put('first', ((var.get('identifiers').get('0')/Js(40.0))|Js(0.0)))
            var.put('second', (var.get('identifiers').get('0')%Js(40.0)))
            if var.get('relative'):
                var.put('result', var.get('identifiers'))
            else:
                var.put('result', Js([var.get('first'), var.get('second')]).callprop('concat', var.get('identifiers').callprop('slice', Js(1.0))))
            if var.get('values'):
                var.put('tmp', var.get('values').get(var.get('result').callprop('join', Js(' '))))
                if _seq(var.get('tmp'),var.get('undefined')):
                    var.put('tmp', var.get('values').get(var.get('result').callprop('join', Js('.'))))
                if PyJsStrictNeq(var.get('tmp'),var.get('undefined')):
                    var.put('result', var.get('tmp'))
            return var.get('result')
        PyJs_decodeObjid_98_._set_name('decodeObjid')
        var.get('DERNode').get('prototype').put('_decodeObjid', PyJs_decodeObjid_98_)
        @Js
        def PyJs_decodeTime_99_(buffer, tag, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'tag':tag, 'this':this, 'arguments':arguments, 'decodeTime':PyJs_decodeTime_99_}, var)
            var.registers(['str', 'sec', 'min', 'buffer', 'mon', 'day', 'year', 'tag', 'hour'])
            var.put('str', var.get('buffer').callprop('raw').callprop('toString'))
            var.put('year', PyJsComma(Js(0.0), Js(None)))
            var.put('mon', PyJsComma(Js(0.0), Js(None)))
            var.put('day', PyJsComma(Js(0.0), Js(None)))
            var.put('hour', PyJsComma(Js(0.0), Js(None)))
            var.put('min', PyJsComma(Js(0.0), Js(None)))
            var.put('sec', PyJsComma(Js(0.0), Js(None)))
            if _seq(var.get('tag'),Js('gentime')):
                var.put('year', (var.get('str').callprop('slice', Js(0.0), Js(4.0))|Js(0.0)))
                var.put('mon', (var.get('str').callprop('slice', Js(4.0), Js(6.0))|Js(0.0)))
                var.put('day', (var.get('str').callprop('slice', Js(6.0), Js(8.0))|Js(0.0)))
                var.put('hour', (var.get('str').callprop('slice', Js(8.0), Js(10.0))|Js(0.0)))
                var.put('min', (var.get('str').callprop('slice', Js(10.0), Js(12.0))|Js(0.0)))
                var.put('sec', (var.get('str').callprop('slice', Js(12.0), Js(14.0))|Js(0.0)))
            else:
                if _seq(var.get('tag'),Js('utctime')):
                    var.put('year', (var.get('str').callprop('slice', Js(0.0), Js(2.0))|Js(0.0)))
                    var.put('mon', (var.get('str').callprop('slice', Js(2.0), Js(4.0))|Js(0.0)))
                    var.put('day', (var.get('str').callprop('slice', Js(4.0), Js(6.0))|Js(0.0)))
                    var.put('hour', (var.get('str').callprop('slice', Js(6.0), Js(8.0))|Js(0.0)))
                    var.put('min', (var.get('str').callprop('slice', Js(8.0), Js(10.0))|Js(0.0)))
                    var.put('sec', (var.get('str').callprop('slice', Js(10.0), Js(12.0))|Js(0.0)))
                    if (var.get('year')<Js(70.0)):
                        var.put('year', (Js(2000.0)+var.get('year')))
                    else:
                        var.put('year', (Js(1900.0)+var.get('year')))
                else:
                    return var.get('buffer').callprop('error', ((Js('Decoding ')+var.get('tag'))+Js(' time is not supported yet')))
            return var.get('Date').callprop('UTC', var.get('year'), (var.get('mon')-Js(1.0)), var.get('day'), var.get('hour'), var.get('min'), var.get('sec'), Js(0.0))
        PyJs_decodeTime_99_._set_name('decodeTime')
        var.get('DERNode').get('prototype').put('_decodeTime', PyJs_decodeTime_99_)
        @Js
        def PyJs_decodeNull_100_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'decodeNull':PyJs_decodeNull_100_}, var)
            var.registers([])
            return var.get(u"null")
        PyJs_decodeNull_100_._set_name('decodeNull')
        var.get('DERNode').get('prototype').put('_decodeNull', PyJs_decodeNull_100_)
        @Js
        def PyJs_decodeBool_101_(buffer, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments, 'decodeBool':PyJs_decodeBool_101_}, var)
            var.registers(['buffer', 'res'])
            var.put('res', var.get('buffer').callprop('readUInt8'))
            if var.get('buffer').callprop('isError', var.get('res')):
                return var.get('res')
            else:
                return PyJsStrictNeq(var.get('res'),Js(0.0))
        PyJs_decodeBool_101_._set_name('decodeBool')
        var.get('DERNode').get('prototype').put('_decodeBool', PyJs_decodeBool_101_)
        @Js
        def PyJs_decodeInt_102_(buffer, values, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'values':values, 'this':this, 'arguments':arguments, 'decodeInt':PyJs_decodeInt_102_}, var)
            var.registers(['raw', 'buffer', 'values', 'res'])
            var.put('raw', var.get('buffer').callprop('raw'))
            var.put('res', var.get('bignum').create(var.get('raw')))
            if var.get('values'):
                var.put('res', (var.get('values').get(var.get('res').callprop('toString', Js(10.0))) or var.get('res')))
            return var.get('res')
        PyJs_decodeInt_102_._set_name('decodeInt')
        var.get('DERNode').get('prototype').put('_decodeInt', PyJs_decodeInt_102_)
        @Js
        def PyJs_use_103_(entity, obj, this, arguments, var=var):
            var = Scope({'entity':entity, 'obj':obj, 'this':this, 'arguments':arguments, 'use':PyJs_use_103_}, var)
            var.registers(['entity', 'obj'])
            if _seq(var.get('entity',throw=False).typeof(),Js('function')):
                var.put('entity', var.get('entity')(var.get('obj')))
            return var.get('entity').callprop('_getDecoder', Js('der')).get('tree')
        PyJs_use_103_._set_name('use')
        var.get('DERNode').get('prototype').put('_use', PyJs_use_103_)
        pass
        pass
    PyJs_anonymous_91_._set_name('anonymous')
    @Js
    def PyJs_anonymous_104_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'decoders'])
        Js('use strict')
        var.put('decoders', var.get('exports'))
        var.get('decoders').put('der', var.get('require')(Js('./der')))
        var.get('decoders').put('pem', var.get('require')(Js('./pem')))
    PyJs_anonymous_104_._set_name('anonymous')
    @Js
    def PyJs_anonymous_105_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'PEMDecoder', 'DERDecoder', 'Buffer', 'require', 'module', 'inherits'])
        @Js
        def PyJsHoisted_PEMDecoder_(entity, this, arguments, var=var):
            var = Scope({'entity':entity, 'this':this, 'arguments':arguments}, var)
            var.registers(['entity'])
            var.get('DERDecoder').callprop('call', var.get(u"this"), var.get('entity'))
            var.get(u"this").put('enc', Js('pem'))
        PyJsHoisted_PEMDecoder_.func_name = 'PEMDecoder'
        var.put('PEMDecoder', PyJsHoisted_PEMDecoder_)
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Buffer', var.get('require')(Js('safer-buffer')).get('Buffer'))
        var.put('DERDecoder', var.get('require')(Js('./der')))
        pass
        var.get('inherits')(var.get('PEMDecoder'), var.get('DERDecoder'))
        var.get('module').put('exports', var.get('PEMDecoder'))
        @Js
        def PyJs_decode_106_(data, options, this, arguments, var=var):
            var = Scope({'data':data, 'options':options, 'this':this, 'arguments':arguments, 'decode':PyJs_decode_106_}, var)
            var.registers(['options', 'lines', 'i', 'label', 'start', 're', 'input', 'base64', 'match', 'end', 'data'])
            var.put('lines', var.get('data').callprop('toString').callprop('split', JsRegExp('/[\\r\\n]+/g')))
            var.put('label', var.get('options').get('label').callprop('toUpperCase'))
            var.put('re', JsRegExp('/^-----(BEGIN|END) ([^-]+)-----$/'))
            var.put('start', (-Js(1.0)))
            var.put('end', (-Js(1.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('lines').get('length')):
                try:
                    var.put('match', var.get('lines').get(var.get('i')).callprop('match', var.get('re')))
                    if _seq(var.get('match'),var.get(u"null")):
                        continue
                    if PyJsStrictNeq(var.get('match').get('2'),var.get('label')):
                        continue
                    if _seq(var.get('start'),(-Js(1.0))):
                        if PyJsStrictNeq(var.get('match').get('1'),Js('BEGIN')):
                            break
                        var.put('start', var.get('i'))
                    else:
                        if PyJsStrictNeq(var.get('match').get('1'),Js('END')):
                            break
                        var.put('end', var.get('i'))
                        break
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if (_seq(var.get('start'),(-Js(1.0))) or _seq(var.get('end'),(-Js(1.0)))):
                PyJsTempException = JsToPyException(var.get('Error').create((Js('PEM section not found for: ')+var.get('label'))))
                raise PyJsTempException
            var.put('base64', var.get('lines').callprop('slice', (var.get('start')+Js(1.0)), var.get('end')).callprop('join', Js('')))
            var.get('base64').callprop('replace', JsRegExp('/[^a-z0-9+/=]+/gi'), Js(''))
            var.put('input', var.get('Buffer').callprop('from', var.get('base64'), Js('base64')))
            return var.get('DERDecoder').get('prototype').get('decode').callprop('call', var.get(u"this"), var.get('input'), var.get('options'))
        PyJs_decode_106_._set_name('decode')
        var.get('PEMDecoder').get('prototype').put('decode', PyJs_decode_106_)
    PyJs_anonymous_105_._set_name('anonymous')
    @Js
    def PyJs_anonymous_107_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'DERNode', 'module', 'DEREncoder', 'two', 'Node', 'inherits', 'encodeTag', 'der'])
        @Js
        def PyJsHoisted_DEREncoder_(entity, this, arguments, var=var):
            var = Scope({'entity':entity, 'this':this, 'arguments':arguments}, var)
            var.registers(['entity'])
            var.get(u"this").put('enc', Js('der'))
            var.get(u"this").put('name', var.get('entity').get('name'))
            var.get(u"this").put('entity', var.get('entity'))
            var.get(u"this").put('tree', var.get('DERNode').create())
            var.get(u"this").get('tree').callprop('_init', var.get('entity').get('body'))
        PyJsHoisted_DEREncoder_.func_name = 'DEREncoder'
        var.put('DEREncoder', PyJsHoisted_DEREncoder_)
        @Js
        def PyJsHoisted_DERNode_(parent, this, arguments, var=var):
            var = Scope({'parent':parent, 'this':this, 'arguments':arguments}, var)
            var.registers(['parent'])
            var.get('Node').callprop('call', var.get(u"this"), Js('der'), var.get('parent'))
        PyJsHoisted_DERNode_.func_name = 'DERNode'
        var.put('DERNode', PyJsHoisted_DERNode_)
        @Js
        def PyJsHoisted_two_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['num'])
            if (var.get('num')<Js(10.0)):
                return (Js('0')+var.get('num'))
            else:
                return var.get('num')
        PyJsHoisted_two_.func_name = 'two'
        var.put('two', PyJsHoisted_two_)
        @Js
        def PyJsHoisted_encodeTag_(tag, primitive, cls, reporter, this, arguments, var=var):
            var = Scope({'tag':tag, 'primitive':primitive, 'cls':cls, 'reporter':reporter, 'this':this, 'arguments':arguments}, var)
            var.registers(['tag', 'reporter', 'primitive', 'cls', 'res'])
            var.put('res', PyJsComma(Js(0.0), Js(None)))
            if _seq(var.get('tag'),Js('seqof')):
                var.put('tag', Js('seq'))
            else:
                if _seq(var.get('tag'),Js('setof')):
                    var.put('tag', Js('set'))
            if var.get('der').get('tagByName').callprop('hasOwnProperty', var.get('tag')):
                var.put('res', var.get('der').get('tagByName').get(var.get('tag')))
            else:
                if (_seq(var.get('tag',throw=False).typeof(),Js('number')) and _seq((var.get('tag')|Js(0.0)),var.get('tag'))):
                    var.put('res', var.get('tag'))
                else:
                    return var.get('reporter').callprop('error', (Js('Unknown tag: ')+var.get('tag')))
            if (var.get('res')>=Js(31)):
                return var.get('reporter').callprop('error', Js('Multi-octet tag encoding unsupported'))
            if var.get('primitive').neg():
                var.put('res', Js(32), '|')
            var.put('res', (var.get('der').get('tagClassByName').get((var.get('cls') or Js('universal')))<<Js(6.0)), '|')
            return var.get('res')
        PyJsHoisted_encodeTag_.func_name = 'encodeTag'
        var.put('encodeTag', PyJsHoisted_encodeTag_)
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Buffer', var.get('require')(Js('safer-buffer')).get('Buffer'))
        var.put('Node', var.get('require')(Js('../base/node')))
        var.put('der', var.get('require')(Js('../constants/der')))
        pass
        var.get('module').put('exports', var.get('DEREncoder'))
        @Js
        def PyJs_encode_108_(data, reporter, this, arguments, var=var):
            var = Scope({'data':data, 'reporter':reporter, 'this':this, 'arguments':arguments, 'encode':PyJs_encode_108_}, var)
            var.registers(['data', 'reporter'])
            return var.get(u"this").get('tree').callprop('_encode', var.get('data'), var.get('reporter')).callprop('join')
        PyJs_encode_108_._set_name('encode')
        var.get('DEREncoder').get('prototype').put('encode', PyJs_encode_108_)
        pass
        var.get('inherits')(var.get('DERNode'), var.get('Node'))
        @Js
        def PyJs_encodeComposite_109_(tag, primitive, cls, content, this, arguments, var=var):
            var = Scope({'tag':tag, 'primitive':primitive, 'cls':cls, 'content':content, 'this':this, 'arguments':arguments, 'encodeComposite':PyJs_encodeComposite_109_}, var)
            var.registers(['_header', 'encodedTag', 'j', 'i', 'primitive', 'content', 'tag', 'lenOctets', 'header', '_i', 'cls'])
            var.put('encodedTag', var.get('encodeTag')(var.get('tag'), var.get('primitive'), var.get('cls'), var.get(u"this").get('reporter')))
            if (var.get('content').get('length')<Js(128)):
                var.put('_header', var.get('Buffer').callprop('alloc', Js(2.0)))
                var.get('_header').put('0', var.get('encodedTag'))
                var.get('_header').put('1', var.get('content').get('length'))
                return var.get(u"this").callprop('_createEncoderBuffer', Js([var.get('_header'), var.get('content')]))
            var.put('lenOctets', Js(1.0))
            #for JS loop
            var.put('i', var.get('content').get('length'))
            while (var.get('i')>=Js(256)):
                try:
                    (var.put('lenOctets',Js(var.get('lenOctets').to_number())+Js(1))-Js(1))
                finally:
                        var.put('i', Js(8.0), '>>')
            var.put('header', var.get('Buffer').callprop('alloc', ((Js(1.0)+Js(1.0))+var.get('lenOctets'))))
            var.get('header').put('0', var.get('encodedTag'))
            var.get('header').put('1', (Js(128)|var.get('lenOctets')))
            #for JS loop
            var.put('_i', (Js(1.0)+var.get('lenOctets')))
            var.put('j', var.get('content').get('length'))
            while (var.get('j')>Js(0.0)):
                try:
                    var.get('header').put(var.get('_i'), (var.get('j')&Js(255)))
                finally:
                        PyJsComma((var.put('_i',Js(var.get('_i').to_number())-Js(1))+Js(1)),var.put('j', Js(8.0), '>>'))
            return var.get(u"this").callprop('_createEncoderBuffer', Js([var.get('header'), var.get('content')]))
        PyJs_encodeComposite_109_._set_name('encodeComposite')
        var.get('DERNode').get('prototype').put('_encodeComposite', PyJs_encodeComposite_109_)
        @Js
        def PyJs_encodeStr_110_(str, tag, this, arguments, var=var):
            var = Scope({'str':str, 'tag':tag, 'this':this, 'arguments':arguments, 'encodeStr':PyJs_encodeStr_110_}, var)
            var.registers(['i', 'str', 'buf', 'tag'])
            if _seq(var.get('tag'),Js('bitstr')):
                return var.get(u"this").callprop('_createEncoderBuffer', Js([(var.get('str').get('unused')|Js(0.0)), var.get('str').get('data')]))
            else:
                if _seq(var.get('tag'),Js('bmpstr')):
                    var.put('buf', var.get('Buffer').callprop('alloc', (var.get('str').get('length')*Js(2.0))))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('str').get('length')):
                        try:
                            var.get('buf').callprop('writeUInt16BE', var.get('str').callprop('charCodeAt', var.get('i')), (var.get('i')*Js(2.0)))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get(u"this").callprop('_createEncoderBuffer', var.get('buf'))
                else:
                    if _seq(var.get('tag'),Js('numstr')):
                        if var.get(u"this").callprop('_isNumstr', var.get('str')).neg():
                            return var.get(u"this").get('reporter').callprop('error', (Js('Encoding of string type: numstr supports ')+Js('only digits and space')))
                        return var.get(u"this").callprop('_createEncoderBuffer', var.get('str'))
                    else:
                        if _seq(var.get('tag'),Js('printstr')):
                            if var.get(u"this").callprop('_isPrintstr', var.get('str')).neg():
                                return var.get(u"this").get('reporter').callprop('error', (((((Js('Encoding of string type: printstr supports ')+Js('only latin upper and lower case letters, '))+Js('digits, space, apostrophe, left and rigth '))+Js('parenthesis, plus sign, comma, hyphen, '))+Js('dot, slash, colon, equal sign, '))+Js('question mark')))
                            return var.get(u"this").callprop('_createEncoderBuffer', var.get('str'))
                        else:
                            if JsRegExp('/str$/').callprop('test', var.get('tag')):
                                return var.get(u"this").callprop('_createEncoderBuffer', var.get('str'))
                            else:
                                if _seq(var.get('tag'),Js('objDesc')):
                                    return var.get(u"this").callprop('_createEncoderBuffer', var.get('str'))
                                else:
                                    return var.get(u"this").get('reporter').callprop('error', ((Js('Encoding of string type: ')+var.get('tag'))+Js(' unsupported')))
        PyJs_encodeStr_110_._set_name('encodeStr')
        var.get('DERNode').get('prototype').put('_encodeStr', PyJs_encodeStr_110_)
        @Js
        def PyJs_encodeObjid_111_(id, values, relative, this, arguments, var=var):
            var = Scope({'id':id, 'values':values, 'relative':relative, 'this':this, 'arguments':arguments, 'encodeObjid':PyJs_encodeObjid_111_}, var)
            var.registers(['ident', '_i4', '_i3', '_ident', 'i', 'objid', 'values', 'relative', 'id', 'size', '_i2', 'offset'])
            if _seq(var.get('id',throw=False).typeof(),Js('string')):
                if var.get('values').neg():
                    return var.get(u"this").get('reporter').callprop('error', Js('string objid given, but no values map found'))
                if var.get('values').callprop('hasOwnProperty', var.get('id')).neg():
                    return var.get(u"this").get('reporter').callprop('error', Js('objid not found in values map'))
                var.put('id', var.get('values').get(var.get('id')).callprop('split', JsRegExp('/[\\s.]+/g')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('id').get('length')):
                    try:
                        var.get('id').put(var.get('i'), Js(0.0), '|')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            else:
                if var.get('Array').callprop('isArray', var.get('id')):
                    var.put('id', var.get('id').callprop('slice'))
                    #for JS loop
                    var.put('_i2', Js(0.0))
                    while (var.get('_i2')<var.get('id').get('length')):
                        try:
                            var.get('id').put(var.get('_i2'), Js(0.0), '|')
                        finally:
                                (var.put('_i2',Js(var.get('_i2').to_number())+Js(1))-Js(1))
            if var.get('Array').callprop('isArray', var.get('id')).neg():
                return var.get(u"this").get('reporter').callprop('error', ((Js('objid() should be either array or string, ')+Js('got: '))+var.get('JSON').callprop('stringify', var.get('id'))))
            if var.get('relative').neg():
                if (var.get('id').get('1')>=Js(40.0)):
                    return var.get(u"this").get('reporter').callprop('error', Js('Second objid identifier OOB'))
                var.get('id').callprop('splice', Js(0.0), Js(2.0), ((var.get('id').get('0')*Js(40.0))+var.get('id').get('1')))
            var.put('size', Js(0.0))
            #for JS loop
            var.put('_i3', Js(0.0))
            while (var.get('_i3')<var.get('id').get('length')):
                try:
                    var.put('ident', var.get('id').get(var.get('_i3')))
                    #for JS loop
                    (var.put('size',Js(var.get('size').to_number())+Js(1))-Js(1))
                    while (var.get('ident')>=Js(128)):
                        try:
                            (var.put('size',Js(var.get('size').to_number())+Js(1))-Js(1))
                        finally:
                                var.put('ident', Js(7.0), '>>')
                finally:
                        (var.put('_i3',Js(var.get('_i3').to_number())+Js(1))-Js(1))
            var.put('objid', var.get('Buffer').callprop('alloc', var.get('size')))
            var.put('offset', (var.get('objid').get('length')-Js(1.0)))
            #for JS loop
            var.put('_i4', (var.get('id').get('length')-Js(1.0)))
            while (var.get('_i4')>=Js(0.0)):
                try:
                    var.put('_ident', var.get('id').get(var.get('_i4')))
                    var.get('objid').put((var.put('offset',Js(var.get('offset').to_number())-Js(1))+Js(1)), (var.get('_ident')&Js(127)))
                    while (var.put('_ident', Js(7.0), '>>')>Js(0.0)):
                        var.get('objid').put((var.put('offset',Js(var.get('offset').to_number())-Js(1))+Js(1)), (Js(128)|(var.get('_ident')&Js(127))))
                finally:
                        (var.put('_i4',Js(var.get('_i4').to_number())-Js(1))+Js(1))
            return var.get(u"this").callprop('_createEncoderBuffer', var.get('objid'))
        PyJs_encodeObjid_111_._set_name('encodeObjid')
        var.get('DERNode').get('prototype').put('_encodeObjid', PyJs_encodeObjid_111_)
        pass
        @Js
        def PyJs_encodeTime_112_(time, tag, this, arguments, var=var):
            var = Scope({'time':time, 'tag':tag, 'this':this, 'arguments':arguments, 'encodeTime':PyJs_encodeTime_112_}, var)
            var.registers(['str', 'tag', 'date', 'time'])
            var.put('str', PyJsComma(Js(0.0), Js(None)))
            var.put('date', var.get('Date').create(var.get('time')))
            if _seq(var.get('tag'),Js('gentime')):
                def PyJs_LONG_113_(var=var):
                    return var.put('str', Js([var.get('two')(var.get('date').callprop('getUTCFullYear')), var.get('two')((var.get('date').callprop('getUTCMonth')+Js(1.0))), var.get('two')(var.get('date').callprop('getUTCDate')), var.get('two')(var.get('date').callprop('getUTCHours')), var.get('two')(var.get('date').callprop('getUTCMinutes')), var.get('two')(var.get('date').callprop('getUTCSeconds')), Js('Z')]).callprop('join', Js('')))
                PyJs_LONG_113_()
            else:
                if _seq(var.get('tag'),Js('utctime')):
                    def PyJs_LONG_114_(var=var):
                        return Js([var.get('two')((var.get('date').callprop('getUTCFullYear')%Js(100.0))), var.get('two')((var.get('date').callprop('getUTCMonth')+Js(1.0))), var.get('two')(var.get('date').callprop('getUTCDate')), var.get('two')(var.get('date').callprop('getUTCHours')), var.get('two')(var.get('date').callprop('getUTCMinutes')), var.get('two')(var.get('date').callprop('getUTCSeconds')), Js('Z')]).callprop('join', Js(''))
                    var.put('str', PyJs_LONG_114_())
                else:
                    var.get(u"this").get('reporter').callprop('error', ((Js('Encoding ')+var.get('tag'))+Js(' time is not supported yet')))
            return var.get(u"this").callprop('_encodeStr', var.get('str'), Js('octstr'))
        PyJs_encodeTime_112_._set_name('encodeTime')
        var.get('DERNode').get('prototype').put('_encodeTime', PyJs_encodeTime_112_)
        @Js
        def PyJs_encodeNull_115_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'encodeNull':PyJs_encodeNull_115_}, var)
            var.registers([])
            return var.get(u"this").callprop('_createEncoderBuffer', Js(''))
        PyJs_encodeNull_115_._set_name('encodeNull')
        var.get('DERNode').get('prototype').put('_encodeNull', PyJs_encodeNull_115_)
        @Js
        def PyJs_encodeInt_116_(num, values, this, arguments, var=var):
            var = Scope({'num':num, 'values':values, 'this':this, 'arguments':arguments, 'encodeInt':PyJs_encodeInt_116_}, var)
            var.registers(['_size', 'i', 'num', 'out', 'values', 'size', '_i5', '_out', 'numArray'])
            if _seq(var.get('num',throw=False).typeof(),Js('string')):
                if var.get('values').neg():
                    return var.get(u"this").get('reporter').callprop('error', Js('String int or enum given, but no values map'))
                if var.get('values').callprop('hasOwnProperty', var.get('num')).neg():
                    return var.get(u"this").get('reporter').callprop('error', (Js("Values map doesn't contain: ")+var.get('JSON').callprop('stringify', var.get('num'))))
                var.put('num', var.get('values').get(var.get('num')))
            if (PyJsStrictNeq(var.get('num',throw=False).typeof(),Js('number')) and var.get('Buffer').callprop('isBuffer', var.get('num')).neg()):
                var.put('numArray', var.get('num').callprop('toArray'))
                if (var.get('num').get('sign').neg() and (var.get('numArray').get('0')&Js(128))):
                    var.get('numArray').callprop('unshift', Js(0.0))
                var.put('num', var.get('Buffer').callprop('from', var.get('numArray')))
            if var.get('Buffer').callprop('isBuffer', var.get('num')):
                var.put('_size', var.get('num').get('length'))
                if _seq(var.get('num').get('length'),Js(0.0)):
                    (var.put('_size',Js(var.get('_size').to_number())+Js(1))-Js(1))
                var.put('_out', var.get('Buffer').callprop('alloc', var.get('_size')))
                var.get('num').callprop('copy', var.get('_out'))
                if _seq(var.get('num').get('length'),Js(0.0)):
                    var.get('_out').put('0', Js(0.0))
                return var.get(u"this").callprop('_createEncoderBuffer', var.get('_out'))
            if (var.get('num')<Js(128)):
                return var.get(u"this").callprop('_createEncoderBuffer', var.get('num'))
            if (var.get('num')<Js(256)):
                return var.get(u"this").callprop('_createEncoderBuffer', Js([Js(0.0), var.get('num')]))
            var.put('size', Js(1.0))
            #for JS loop
            var.put('i', var.get('num'))
            while (var.get('i')>=Js(256)):
                try:
                    (var.put('size',Js(var.get('size').to_number())+Js(1))-Js(1))
                finally:
                        var.put('i', Js(8.0), '>>')
            var.put('out', var.get('Array').create(var.get('size')))
            #for JS loop
            var.put('_i5', (var.get('out').get('length')-Js(1.0)))
            while (var.get('_i5')>=Js(0.0)):
                try:
                    var.get('out').put(var.get('_i5'), (var.get('num')&Js(255)))
                    var.put('num', Js(8.0), '>>')
                finally:
                        (var.put('_i5',Js(var.get('_i5').to_number())-Js(1))+Js(1))
            if (var.get('out').get('0')&Js(128)):
                var.get('out').callprop('unshift', Js(0.0))
            return var.get(u"this").callprop('_createEncoderBuffer', var.get('Buffer').callprop('from', var.get('out')))
        PyJs_encodeInt_116_._set_name('encodeInt')
        var.get('DERNode').get('prototype').put('_encodeInt', PyJs_encodeInt_116_)
        @Js
        def PyJs_encodeBool_117_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'encodeBool':PyJs_encodeBool_117_}, var)
            var.registers(['value'])
            return var.get(u"this").callprop('_createEncoderBuffer', (Js(255) if var.get('value') else Js(0.0)))
        PyJs_encodeBool_117_._set_name('encodeBool')
        var.get('DERNode').get('prototype').put('_encodeBool', PyJs_encodeBool_117_)
        @Js
        def PyJs_use_118_(entity, obj, this, arguments, var=var):
            var = Scope({'entity':entity, 'obj':obj, 'this':this, 'arguments':arguments, 'use':PyJs_use_118_}, var)
            var.registers(['entity', 'obj'])
            if _seq(var.get('entity',throw=False).typeof(),Js('function')):
                var.put('entity', var.get('entity')(var.get('obj')))
            return var.get('entity').callprop('_getEncoder', Js('der')).get('tree')
        PyJs_use_118_._set_name('use')
        var.get('DERNode').get('prototype').put('_use', PyJs_use_118_)
        @Js
        def PyJs_skipDefault_119_(dataBuffer, reporter, parent, this, arguments, var=var):
            var = Scope({'dataBuffer':dataBuffer, 'reporter':reporter, 'parent':parent, 'this':this, 'arguments':arguments, 'skipDefault':PyJs_skipDefault_119_}, var)
            var.registers(['i', 'dataBuffer', 'state', 'parent', 'reporter', 'data'])
            var.put('state', var.get(u"this").get('_baseState'))
            var.put('i', PyJsComma(Js(0.0), Js(None)))
            if _seq(var.get('state').get('default'),var.get(u"null")):
                return Js(False)
            var.put('data', var.get('dataBuffer').callprop('join'))
            if _seq(var.get('state').get('defaultBuffer'),var.get('undefined')):
                var.get('state').put('defaultBuffer', var.get(u"this").callprop('_encodeValue', var.get('state').get('default'), var.get('reporter'), var.get('parent')).callprop('join'))
            if PyJsStrictNeq(var.get('data').get('length'),var.get('state').get('defaultBuffer').get('length')):
                return Js(False)
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('data').get('length')):
                try:
                    if PyJsStrictNeq(var.get('data').get(var.get('i')),var.get('state').get('defaultBuffer').get(var.get('i'))):
                        return Js(False)
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return Js(True)
        PyJs_skipDefault_119_._set_name('skipDefault')
        var.get('DERNode').get('prototype').put('_skipDefault', PyJs_skipDefault_119_)
        pass
    PyJs_anonymous_107_._set_name('anonymous')
    @Js
    def PyJs_anonymous_120_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['encoders', 'require', 'exports', 'module'])
        Js('use strict')
        var.put('encoders', var.get('exports'))
        var.get('encoders').put('der', var.get('require')(Js('./der')))
        var.get('encoders').put('pem', var.get('require')(Js('./pem')))
    PyJs_anonymous_120_._set_name('anonymous')
    @Js
    def PyJs_anonymous_121_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'DEREncoder', 'inherits', 'PEMEncoder'])
        @Js
        def PyJsHoisted_PEMEncoder_(entity, this, arguments, var=var):
            var = Scope({'entity':entity, 'this':this, 'arguments':arguments}, var)
            var.registers(['entity'])
            var.get('DEREncoder').callprop('call', var.get(u"this"), var.get('entity'))
            var.get(u"this").put('enc', Js('pem'))
        PyJsHoisted_PEMEncoder_.func_name = 'PEMEncoder'
        var.put('PEMEncoder', PyJsHoisted_PEMEncoder_)
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('DEREncoder', var.get('require')(Js('./der')))
        pass
        var.get('inherits')(var.get('PEMEncoder'), var.get('DEREncoder'))
        var.get('module').put('exports', var.get('PEMEncoder'))
        @Js
        def PyJs_encode_122_(data, options, this, arguments, var=var):
            var = Scope({'data':data, 'options':options, 'this':this, 'arguments':arguments, 'encode':PyJs_encode_122_}, var)
            var.registers(['options', 'i', 'out', 'buf', 'p', 'data'])
            var.put('buf', var.get('DEREncoder').get('prototype').get('encode').callprop('call', var.get(u"this"), var.get('data')))
            var.put('p', var.get('buf').callprop('toString', Js('base64')))
            var.put('out', Js([((Js('-----BEGIN ')+var.get('options').get('label'))+Js('-----'))]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('p').get('length')):
                try:
                    var.get('out').callprop('push', var.get('p').callprop('slice', var.get('i'), (var.get('i')+Js(64.0))))
                finally:
                        var.put('i', Js(64.0), '+')
            var.get('out').callprop('push', ((Js('-----END ')+var.get('options').get('label'))+Js('-----')))
            return var.get('out').callprop('join', Js('\n'))
        PyJs_encode_122_._set_name('encode')
        var.get('PEMEncoder').get('prototype').put('encode', PyJs_encode_122_)
    PyJs_anonymous_121_._set_name('anonymous')
    @Js
    def PyJs_anonymous_123_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_124_(module, exports, this, arguments, var=var):
            var = Scope({'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
            var.registers(['module', 'bigMulTo', 'parseHex', 'BN', 'Red', 'zeros', 'P224', 'inherits', 'jumboMulTo', 'comb10MulTo', 'Buffer', 'parseBase', 'P25519', 'FFTM', 'groupBases', 'K256', 'Mont', 'assert', 'groupSizes', 'toBitArray', 'exports', 'MPrime', 'primes', 'P192', 'smallMulTo'])
            @Js
            def PyJsHoisted_assert_(val, msg, this, arguments, var=var):
                var = Scope({'val':val, 'msg':msg, 'this':this, 'arguments':arguments}, var)
                var.registers(['msg', 'val'])
                if var.get('val').neg():
                    PyJsTempException = JsToPyException(var.get('Error').create((var.get('msg') or Js('Assertion failed'))))
                    raise PyJsTempException
            PyJsHoisted_assert_.func_name = 'assert'
            var.put('assert', PyJsHoisted_assert_)
            @Js
            def PyJsHoisted_inherits_(ctor, superCtor, this, arguments, var=var):
                var = Scope({'ctor':ctor, 'superCtor':superCtor, 'this':this, 'arguments':arguments}, var)
                var.registers(['ctor', 'TempCtor', 'superCtor'])
                var.get('ctor').put('super_', var.get('superCtor'))
                @Js
                def PyJs_TempCtor_125_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'TempCtor':PyJs_TempCtor_125_}, var)
                    var.registers([])
                    pass
                PyJs_TempCtor_125_._set_name('TempCtor')
                var.put('TempCtor', PyJs_TempCtor_125_)
                var.get('TempCtor').put('prototype', var.get('superCtor').get('prototype'))
                var.get('ctor').put('prototype', var.get('TempCtor').create())
                var.get('ctor').get('prototype').put('constructor', var.get('ctor'))
            PyJsHoisted_inherits_.func_name = 'inherits'
            var.put('inherits', PyJsHoisted_inherits_)
            @Js
            def PyJsHoisted_BN_(number, base, endian, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'endian':endian, 'this':this, 'arguments':arguments}, var)
                var.registers(['number', 'base', 'endian'])
                if var.get('BN').callprop('isBN', var.get('number')):
                    return var.get('number')
                var.get(u"this").put('negative', Js(0.0))
                var.get(u"this").put('words', var.get(u"null"))
                var.get(u"this").put('length', Js(0.0))
                var.get(u"this").put('red', var.get(u"null"))
                if PyJsStrictNeq(var.get('number'),var.get(u"null")):
                    if (_seq(var.get('base'),Js('le')) or _seq(var.get('base'),Js('be'))):
                        var.put('endian', var.get('base'))
                        var.put('base', Js(10.0))
                    var.get(u"this").callprop('_init', (var.get('number') or Js(0.0)), (var.get('base') or Js(10.0)), (var.get('endian') or Js('be')))
            PyJsHoisted_BN_.func_name = 'BN'
            var.put('BN', PyJsHoisted_BN_)
            @Js
            def PyJsHoisted_parseHex_(str, start, end, this, arguments, var=var):
                var = Scope({'str':str, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                var.registers(['str', 'r', 'len', 'c', 'i', 'start', 'end'])
                var.put('r', Js(0.0))
                var.put('len', var.get('Math').callprop('min', var.get('str').get('length'), var.get('end')))
                #for JS loop
                var.put('i', var.get('start'))
                while (var.get('i')<var.get('len')):
                    try:
                        var.put('c', (var.get('str').callprop('charCodeAt', var.get('i'))-Js(48.0)))
                        var.put('r', Js(4.0), '<<')
                        if ((var.get('c')>=Js(49.0)) and (var.get('c')<=Js(54.0))):
                            var.put('r', ((var.get('c')-Js(49.0))+Js(10)), '|')
                        else:
                            if ((var.get('c')>=Js(17.0)) and (var.get('c')<=Js(22.0))):
                                var.put('r', ((var.get('c')-Js(17.0))+Js(10)), '|')
                            else:
                                var.put('r', (var.get('c')&Js(15)), '|')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('r')
            PyJsHoisted_parseHex_.func_name = 'parseHex'
            var.put('parseHex', PyJsHoisted_parseHex_)
            @Js
            def PyJsHoisted_parseBase_(str, start, end, mul, this, arguments, var=var):
                var = Scope({'str':str, 'start':start, 'end':end, 'mul':mul, 'this':this, 'arguments':arguments}, var)
                var.registers(['str', 'r', 'len', 'c', 'i', 'start', 'end', 'mul'])
                var.put('r', Js(0.0))
                var.put('len', var.get('Math').callprop('min', var.get('str').get('length'), var.get('end')))
                #for JS loop
                var.put('i', var.get('start'))
                while (var.get('i')<var.get('len')):
                    try:
                        var.put('c', (var.get('str').callprop('charCodeAt', var.get('i'))-Js(48.0)))
                        var.put('r', var.get('mul'), '*')
                        if (var.get('c')>=Js(49.0)):
                            var.put('r', ((var.get('c')-Js(49.0))+Js(10)), '+')
                        else:
                            if (var.get('c')>=Js(17.0)):
                                var.put('r', ((var.get('c')-Js(17.0))+Js(10)), '+')
                            else:
                                var.put('r', var.get('c'), '+')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('r')
            PyJsHoisted_parseBase_.func_name = 'parseBase'
            var.put('parseBase', PyJsHoisted_parseBase_)
            @Js
            def PyJsHoisted_toBitArray_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
                var.registers(['w', 'bit', 'wbit', 'off', 'num'])
                var.put('w', var.get('Array').create(var.get('num').callprop('bitLength')))
                #for JS loop
                var.put('bit', Js(0.0))
                while (var.get('bit')<var.get('w').get('length')):
                    try:
                        var.put('off', ((var.get('bit')/Js(26.0))|Js(0.0)))
                        var.put('wbit', (var.get('bit')%Js(26.0)))
                        var.get('w').put(var.get('bit'), PyJsBshift((var.get('num').get('words').get(var.get('off'))&(Js(1.0)<<var.get('wbit'))),var.get('wbit')))
                    finally:
                            (var.put('bit',Js(var.get('bit').to_number())+Js(1))-Js(1))
                return var.get('w')
            PyJsHoisted_toBitArray_.func_name = 'toBitArray'
            var.put('toBitArray', PyJsHoisted_toBitArray_)
            @Js
            def PyJsHoisted_smallMulTo_(self, num, out, this, arguments, var=var):
                var = Scope({'self':self, 'num':num, 'out':out, 'this':this, 'arguments':arguments}, var)
                var.registers(['self', 'a', 'r', 'j', 'len', 'i', 'num', 'out', 'lo', 'k', 'b', 'maxJ', 'rword', 'carry', 'ncarry'])
                var.get('out').put('negative', (var.get('num').get('negative')^var.get('self').get('negative')))
                var.put('len', ((var.get('self').get('length')+var.get('num').get('length'))|Js(0.0)))
                var.get('out').put('length', var.get('len'))
                var.put('len', ((var.get('len')-Js(1.0))|Js(0.0)))
                var.put('a', (var.get('self').get('words').get('0')|Js(0.0)))
                var.put('b', (var.get('num').get('words').get('0')|Js(0.0)))
                var.put('r', (var.get('a')*var.get('b')))
                var.put('lo', (var.get('r')&Js(67108863)))
                var.put('carry', ((var.get('r')/Js(67108864))|Js(0.0)))
                var.get('out').get('words').put('0', var.get('lo'))
                #for JS loop
                var.put('k', Js(1.0))
                while (var.get('k')<var.get('len')):
                    try:
                        var.put('ncarry', PyJsBshift(var.get('carry'),Js(26.0)))
                        var.put('rword', (var.get('carry')&Js(67108863)))
                        var.put('maxJ', var.get('Math').callprop('min', var.get('k'), (var.get('num').get('length')-Js(1.0))))
                        #for JS loop
                        var.put('j', var.get('Math').callprop('max', Js(0.0), ((var.get('k')-var.get('self').get('length'))+Js(1.0))))
                        while (var.get('j')<=var.get('maxJ')):
                            try:
                                var.put('i', ((var.get('k')-var.get('j'))|Js(0.0)))
                                var.put('a', (var.get('self').get('words').get(var.get('i'))|Js(0.0)))
                                var.put('b', (var.get('num').get('words').get(var.get('j'))|Js(0.0)))
                                var.put('r', ((var.get('a')*var.get('b'))+var.get('rword')))
                                var.put('ncarry', ((var.get('r')/Js(67108864))|Js(0.0)), '+')
                                var.put('rword', (var.get('r')&Js(67108863)))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        var.get('out').get('words').put(var.get('k'), (var.get('rword')|Js(0.0)))
                        var.put('carry', (var.get('ncarry')|Js(0.0)))
                    finally:
                            (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get('out').get('words').put(var.get('k'), (var.get('carry')|Js(0.0)))
                else:
                    (var.get('out').put('length',Js(var.get('out').get('length').to_number())-Js(1))+Js(1))
                return var.get('out').callprop('strip')
            PyJsHoisted_smallMulTo_.func_name = 'smallMulTo'
            var.put('smallMulTo', PyJsHoisted_smallMulTo_)
            @Js
            def PyJsHoisted_bigMulTo_(self, num, out, this, arguments, var=var):
                var = Scope({'self':self, 'num':num, 'out':out, 'this':this, 'arguments':arguments}, var)
                var.registers(['self', 'a', 'r', 'hncarry', 'j', 'i', 'num', 'out', 'k', 'lo', 'b', 'maxJ', 'rword', 'carry', 'ncarry'])
                var.get('out').put('negative', (var.get('num').get('negative')^var.get('self').get('negative')))
                var.get('out').put('length', (var.get('self').get('length')+var.get('num').get('length')))
                var.put('carry', Js(0.0))
                var.put('hncarry', Js(0.0))
                #for JS loop
                var.put('k', Js(0.0))
                while (var.get('k')<(var.get('out').get('length')-Js(1.0))):
                    try:
                        var.put('ncarry', var.get('hncarry'))
                        var.put('hncarry', Js(0.0))
                        var.put('rword', (var.get('carry')&Js(67108863)))
                        var.put('maxJ', var.get('Math').callprop('min', var.get('k'), (var.get('num').get('length')-Js(1.0))))
                        #for JS loop
                        var.put('j', var.get('Math').callprop('max', Js(0.0), ((var.get('k')-var.get('self').get('length'))+Js(1.0))))
                        while (var.get('j')<=var.get('maxJ')):
                            try:
                                var.put('i', (var.get('k')-var.get('j')))
                                var.put('a', (var.get('self').get('words').get(var.get('i'))|Js(0.0)))
                                var.put('b', (var.get('num').get('words').get(var.get('j'))|Js(0.0)))
                                var.put('r', (var.get('a')*var.get('b')))
                                var.put('lo', (var.get('r')&Js(67108863)))
                                var.put('ncarry', ((var.get('ncarry')+((var.get('r')/Js(67108864))|Js(0.0)))|Js(0.0)))
                                var.put('lo', ((var.get('lo')+var.get('rword'))|Js(0.0)))
                                var.put('rword', (var.get('lo')&Js(67108863)))
                                var.put('ncarry', ((var.get('ncarry')+PyJsBshift(var.get('lo'),Js(26.0)))|Js(0.0)))
                                var.put('hncarry', PyJsBshift(var.get('ncarry'),Js(26.0)), '+')
                                var.put('ncarry', Js(67108863), '&')
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        var.get('out').get('words').put(var.get('k'), var.get('rword'))
                        var.put('carry', var.get('ncarry'))
                        var.put('ncarry', var.get('hncarry'))
                    finally:
                            (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get('out').get('words').put(var.get('k'), var.get('carry'))
                else:
                    (var.get('out').put('length',Js(var.get('out').get('length').to_number())-Js(1))+Js(1))
                return var.get('out').callprop('strip')
            PyJsHoisted_bigMulTo_.func_name = 'bigMulTo'
            var.put('bigMulTo', PyJsHoisted_bigMulTo_)
            @Js
            def PyJsHoisted_jumboMulTo_(self, num, out, this, arguments, var=var):
                var = Scope({'self':self, 'num':num, 'out':out, 'this':this, 'arguments':arguments}, var)
                var.registers(['num', 'self', 'out', 'fftm'])
                var.put('fftm', var.get('FFTM').create())
                return var.get('fftm').callprop('mulp', var.get('self'), var.get('num'), var.get('out'))
            PyJsHoisted_jumboMulTo_.func_name = 'jumboMulTo'
            var.put('jumboMulTo', PyJsHoisted_jumboMulTo_)
            @Js
            def PyJsHoisted_FFTM_(x, y, this, arguments, var=var):
                var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments}, var)
                var.registers(['x', 'y'])
                var.get(u"this").put('x', var.get('x'))
                var.get(u"this").put('y', var.get('y'))
            PyJsHoisted_FFTM_.func_name = 'FFTM'
            var.put('FFTM', PyJsHoisted_FFTM_)
            @Js
            def PyJsHoisted_MPrime_(name, p, this, arguments, var=var):
                var = Scope({'name':name, 'p':p, 'this':this, 'arguments':arguments}, var)
                var.registers(['name', 'p'])
                var.get(u"this").put('name', var.get('name'))
                var.get(u"this").put('p', var.get('BN').create(var.get('p'), Js(16.0)))
                var.get(u"this").put('n', var.get(u"this").get('p').callprop('bitLength'))
                var.get(u"this").put('k', var.get('BN').create(Js(1.0)).callprop('iushln', var.get(u"this").get('n')).callprop('isub', var.get(u"this").get('p')))
                var.get(u"this").put('tmp', var.get(u"this").callprop('_tmp'))
            PyJsHoisted_MPrime_.func_name = 'MPrime'
            var.put('MPrime', PyJsHoisted_MPrime_)
            @Js
            def PyJsHoisted_K256_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('MPrime').callprop('call', var.get(u"this"), Js('k256'), Js('ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f'))
            PyJsHoisted_K256_.func_name = 'K256'
            var.put('K256', PyJsHoisted_K256_)
            @Js
            def PyJsHoisted_P224_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('MPrime').callprop('call', var.get(u"this"), Js('p224'), Js('ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001'))
            PyJsHoisted_P224_.func_name = 'P224'
            var.put('P224', PyJsHoisted_P224_)
            @Js
            def PyJsHoisted_P192_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('MPrime').callprop('call', var.get(u"this"), Js('p192'), Js('ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff'))
            PyJsHoisted_P192_.func_name = 'P192'
            var.put('P192', PyJsHoisted_P192_)
            @Js
            def PyJsHoisted_P25519_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('MPrime').callprop('call', var.get(u"this"), Js('25519'), Js('7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed'))
            PyJsHoisted_P25519_.func_name = 'P25519'
            var.put('P25519', PyJsHoisted_P25519_)
            @Js
            def PyJsHoisted_Red_(m, this, arguments, var=var):
                var = Scope({'m':m, 'this':this, 'arguments':arguments}, var)
                var.registers(['prime', 'm'])
                if _seq(var.get('m',throw=False).typeof(),Js('string')):
                    var.put('prime', var.get('BN').callprop('_prime', var.get('m')))
                    var.get(u"this").put('m', var.get('prime').get('p'))
                    var.get(u"this").put('prime', var.get('prime'))
                else:
                    var.get('assert')(var.get('m').callprop('gtn', Js(1.0)), Js('modulus must be greater than 1'))
                    var.get(u"this").put('m', var.get('m'))
                    var.get(u"this").put('prime', var.get(u"null"))
            PyJsHoisted_Red_.func_name = 'Red'
            var.put('Red', PyJsHoisted_Red_)
            @Js
            def PyJsHoisted_Mont_(m, this, arguments, var=var):
                var = Scope({'m':m, 'this':this, 'arguments':arguments}, var)
                var.registers(['m'])
                var.get('Red').callprop('call', var.get(u"this"), var.get('m'))
                var.get(u"this").put('shift', var.get(u"this").get('m').callprop('bitLength'))
                if PyJsStrictNeq((var.get(u"this").get('shift')%Js(26.0)),Js(0.0)):
                    var.get(u"this").put('shift', (Js(26.0)-(var.get(u"this").get('shift')%Js(26.0))), '+')
                var.get(u"this").put('r', var.get('BN').create(Js(1.0)).callprop('iushln', var.get(u"this").get('shift')))
                var.get(u"this").put('r2', var.get(u"this").callprop('imod', var.get(u"this").get('r').callprop('sqr')))
                var.get(u"this").put('rinv', var.get(u"this").get('r').callprop('_invmp', var.get(u"this").get('m')))
                var.get(u"this").put('minv', var.get(u"this").get('rinv').callprop('mul', var.get(u"this").get('r')).callprop('isubn', Js(1.0)).callprop('div', var.get(u"this").get('m')))
                var.get(u"this").put('minv', var.get(u"this").get('minv').callprop('umod', var.get(u"this").get('r')))
                var.get(u"this").put('minv', var.get(u"this").get('r').callprop('sub', var.get(u"this").get('minv')))
            PyJsHoisted_Mont_.func_name = 'Mont'
            var.put('Mont', PyJsHoisted_Mont_)
            Js('use strict')
            pass
            pass
            pass
            if _seq((Js('undefined') if _seq(var.get('module',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('module'))),Js('object')):
                var.get('module').put('exports', var.get('BN'))
            else:
                var.get('exports').put('BN', var.get('BN'))
            var.get('BN').put('BN', var.get('BN'))
            var.get('BN').put('wordSize', Js(26.0))
            pass
            try:
                var.put('Buffer', var.get('require')(Js('buffer')).get('Buffer'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_65463211 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_65463211 is not None:
                        var.own['e'] = PyJsHolder_65_65463211
                    else:
                        del var.own['e']
                    del PyJsHolder_65_65463211
            @Js
            def PyJs_isBN_126_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'isBN':PyJs_isBN_126_}, var)
                var.registers(['num'])
                if var.get('num').instanceof(var.get('BN')):
                    return Js(True)
                return (((PyJsStrictNeq(var.get('num'),var.get(u"null")) and _seq((Js('undefined') if _seq(var.get('num',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('num'))),Js('object'))) and _seq(var.get('num').get('constructor').get('wordSize'),var.get('BN').get('wordSize'))) and var.get('Array').callprop('isArray', var.get('num').get('words')))
            PyJs_isBN_126_._set_name('isBN')
            var.get('BN').put('isBN', PyJs_isBN_126_)
            @Js
            def PyJs_max_127_(left, right, this, arguments, var=var):
                var = Scope({'left':left, 'right':right, 'this':this, 'arguments':arguments, 'max':PyJs_max_127_}, var)
                var.registers(['left', 'right'])
                if (var.get('left').callprop('cmp', var.get('right'))>Js(0.0)):
                    return var.get('left')
                return var.get('right')
            PyJs_max_127_._set_name('max')
            var.get('BN').put('max', PyJs_max_127_)
            @Js
            def PyJs_min_128_(left, right, this, arguments, var=var):
                var = Scope({'left':left, 'right':right, 'this':this, 'arguments':arguments, 'min':PyJs_min_128_}, var)
                var.registers(['left', 'right'])
                if (var.get('left').callprop('cmp', var.get('right'))<Js(0.0)):
                    return var.get('left')
                return var.get('right')
            PyJs_min_128_._set_name('min')
            var.get('BN').put('min', PyJs_min_128_)
            @Js
            def PyJs_init_129_(number, base, endian, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'endian':endian, 'this':this, 'arguments':arguments, 'init':PyJs_init_129_}, var)
                var.registers(['number', 'base', 'start', 'endian'])
                if _seq(var.get('number',throw=False).typeof(),Js('number')):
                    return var.get(u"this").callprop('_initNumber', var.get('number'), var.get('base'), var.get('endian'))
                if _seq((Js('undefined') if _seq(var.get('number',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('number'))),Js('object')):
                    return var.get(u"this").callprop('_initArray', var.get('number'), var.get('base'), var.get('endian'))
                if _seq(var.get('base'),Js('hex')):
                    var.put('base', Js(16.0))
                var.get('assert')(((_seq(var.get('base'),(var.get('base')|Js(0.0))) and (var.get('base')>=Js(2.0))) and (var.get('base')<=Js(36.0))))
                var.put('number', var.get('number').callprop('toString').callprop('replace', JsRegExp('/\\s+/g'), Js('')))
                var.put('start', Js(0.0))
                if _seq(var.get('number').get('0'),Js('-')):
                    (var.put('start',Js(var.get('start').to_number())+Js(1))-Js(1))
                if _seq(var.get('base'),Js(16.0)):
                    var.get(u"this").callprop('_parseHex', var.get('number'), var.get('start'))
                else:
                    var.get(u"this").callprop('_parseBase', var.get('number'), var.get('base'), var.get('start'))
                if _seq(var.get('number').get('0'),Js('-')):
                    var.get(u"this").put('negative', Js(1.0))
                var.get(u"this").callprop('strip')
                if PyJsStrictNeq(var.get('endian'),Js('le')):
                    return var.get('undefined')
                var.get(u"this").callprop('_initArray', var.get(u"this").callprop('toArray'), var.get('base'), var.get('endian'))
            PyJs_init_129_._set_name('init')
            var.get('BN').get('prototype').put('_init', PyJs_init_129_)
            @Js
            def PyJs__initNumber_130_(number, base, endian, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'endian':endian, 'this':this, 'arguments':arguments, '_initNumber':PyJs__initNumber_130_}, var)
                var.registers(['number', 'base', 'endian'])
                if (var.get('number')<Js(0.0)):
                    var.get(u"this").put('negative', Js(1.0))
                    var.put('number', (-var.get('number')))
                if (var.get('number')<Js(67108864)):
                    var.get(u"this").put('words', Js([(var.get('number')&Js(67108863))]))
                    var.get(u"this").put('length', Js(1.0))
                else:
                    if (var.get('number')<Js(4503599627370496)):
                        var.get(u"this").put('words', Js([(var.get('number')&Js(67108863)), ((var.get('number')/Js(67108864))&Js(67108863))]))
                        var.get(u"this").put('length', Js(2.0))
                    else:
                        var.get('assert')((var.get('number')<Js(9007199254740992)))
                        var.get(u"this").put('words', Js([(var.get('number')&Js(67108863)), ((var.get('number')/Js(67108864))&Js(67108863)), Js(1.0)]))
                        var.get(u"this").put('length', Js(3.0))
                if PyJsStrictNeq(var.get('endian'),Js('le')):
                    return var.get('undefined')
                var.get(u"this").callprop('_initArray', var.get(u"this").callprop('toArray'), var.get('base'), var.get('endian'))
            PyJs__initNumber_130_._set_name('_initNumber')
            var.get('BN').get('prototype').put('_initNumber', PyJs__initNumber_130_)
            @Js
            def PyJs__initArray_131_(number, base, endian, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'endian':endian, 'this':this, 'arguments':arguments, '_initArray':PyJs__initArray_131_}, var)
                var.registers(['w', 'base', 'j', 'i', 'off', 'number', 'endian'])
                var.get('assert')(_seq(var.get('number').get('length').typeof(),Js('number')))
                if (var.get('number').get('length')<=Js(0.0)):
                    var.get(u"this").put('words', Js([Js(0.0)]))
                    var.get(u"this").put('length', Js(1.0))
                    return var.get(u"this")
                var.get(u"this").put('length', var.get('Math').callprop('ceil', (var.get('number').get('length')/Js(3.0))))
                var.get(u"this").put('words', var.get('Array').create(var.get(u"this").get('length')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), Js(0.0))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                pass
                var.put('off', Js(0.0))
                if _seq(var.get('endian'),Js('be')):
                    #for JS loop
                    PyJsComma(var.put('i', (var.get('number').get('length')-Js(1.0))),var.put('j', Js(0.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.put('w', ((var.get('number').get(var.get('i'))|(var.get('number').get((var.get('i')-Js(1.0)))<<Js(8.0)))|(var.get('number').get((var.get('i')-Js(2.0)))<<Js(16.0))))
                            var.get(u"this").get('words').put(var.get('j'), ((var.get('w')<<var.get('off'))&Js(67108863)), '|')
                            var.get(u"this").get('words').put((var.get('j')+Js(1.0)), (PyJsBshift(var.get('w'),(Js(26.0)-var.get('off')))&Js(67108863)))
                            var.put('off', Js(24.0), '+')
                            if (var.get('off')>=Js(26.0)):
                                var.put('off', Js(26.0), '-')
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        finally:
                                var.put('i', Js(3.0), '-')
                else:
                    if _seq(var.get('endian'),Js('le')):
                        #for JS loop
                        PyJsComma(var.put('i', Js(0.0)),var.put('j', Js(0.0)))
                        while (var.get('i')<var.get('number').get('length')):
                            try:
                                var.put('w', ((var.get('number').get(var.get('i'))|(var.get('number').get((var.get('i')+Js(1.0)))<<Js(8.0)))|(var.get('number').get((var.get('i')+Js(2.0)))<<Js(16.0))))
                                var.get(u"this").get('words').put(var.get('j'), ((var.get('w')<<var.get('off'))&Js(67108863)), '|')
                                var.get(u"this").get('words').put((var.get('j')+Js(1.0)), (PyJsBshift(var.get('w'),(Js(26.0)-var.get('off')))&Js(67108863)))
                                var.put('off', Js(24.0), '+')
                                if (var.get('off')>=Js(26.0)):
                                    var.put('off', Js(26.0), '-')
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                            finally:
                                    var.put('i', Js(3.0), '+')
                return var.get(u"this").callprop('strip')
            PyJs__initArray_131_._set_name('_initArray')
            var.get('BN').get('prototype').put('_initArray', PyJs__initArray_131_)
            pass
            @Js
            def PyJs__parseHex_132_(number, start, this, arguments, var=var):
                var = Scope({'number':number, 'start':start, 'this':this, 'arguments':arguments, '_parseHex':PyJs__parseHex_132_}, var)
                var.registers(['w', 'j', 'i', 'off', 'start', 'number'])
                var.get(u"this").put('length', var.get('Math').callprop('ceil', ((var.get('number').get('length')-var.get('start'))/Js(6.0))))
                var.get(u"this").put('words', var.get('Array').create(var.get(u"this").get('length')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), Js(0.0))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                pass
                var.put('off', Js(0.0))
                #for JS loop
                PyJsComma(var.put('i', (var.get('number').get('length')-Js(6.0))),var.put('j', Js(0.0)))
                while (var.get('i')>=var.get('start')):
                    try:
                        var.put('w', var.get('parseHex')(var.get('number'), var.get('i'), (var.get('i')+Js(6.0))))
                        var.get(u"this").get('words').put(var.get('j'), ((var.get('w')<<var.get('off'))&Js(67108863)), '|')
                        var.get(u"this").get('words').put((var.get('j')+Js(1.0)), (PyJsBshift(var.get('w'),(Js(26.0)-var.get('off')))&Js(4194303)), '|')
                        var.put('off', Js(24.0), '+')
                        if (var.get('off')>=Js(26.0)):
                            var.put('off', Js(26.0), '-')
                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    finally:
                            var.put('i', Js(6.0), '-')
                if PyJsStrictNeq((var.get('i')+Js(6.0)),var.get('start')):
                    var.put('w', var.get('parseHex')(var.get('number'), var.get('start'), (var.get('i')+Js(6.0))))
                    var.get(u"this").get('words').put(var.get('j'), ((var.get('w')<<var.get('off'))&Js(67108863)), '|')
                    var.get(u"this").get('words').put((var.get('j')+Js(1.0)), (PyJsBshift(var.get('w'),(Js(26.0)-var.get('off')))&Js(4194303)), '|')
                var.get(u"this").callprop('strip')
            PyJs__parseHex_132_._set_name('_parseHex')
            var.get('BN').get('prototype').put('_parseHex', PyJs__parseHex_132_)
            pass
            @Js
            def PyJs__parseBase_133_(number, base, start, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'start':start, 'this':this, 'arguments':arguments, '_parseBase':PyJs__parseBase_133_}, var)
                var.registers(['total', 'base', 'i', 'limbPow', 'word', 'start', 'pow', 'number', 'end', 'mod', 'limbLen'])
                var.get(u"this").put('words', Js([Js(0.0)]))
                var.get(u"this").put('length', Js(1.0))
                #for JS loop
                var.put('limbLen', Js(0.0))
                var.put('limbPow', Js(1.0))
                while (var.get('limbPow')<=Js(67108863)):
                    try:
                        (var.put('limbLen',Js(var.get('limbLen').to_number())+Js(1))-Js(1))
                    finally:
                            var.put('limbPow', var.get('base'), '*')
                (var.put('limbLen',Js(var.get('limbLen').to_number())-Js(1))+Js(1))
                var.put('limbPow', ((var.get('limbPow')/var.get('base'))|Js(0.0)))
                var.put('total', (var.get('number').get('length')-var.get('start')))
                var.put('mod', (var.get('total')%var.get('limbLen')))
                var.put('end', (var.get('Math').callprop('min', var.get('total'), (var.get('total')-var.get('mod')))+var.get('start')))
                var.put('word', Js(0.0))
                #for JS loop
                var.put('i', var.get('start'))
                while (var.get('i')<var.get('end')):
                    try:
                        var.put('word', var.get('parseBase')(var.get('number'), var.get('i'), (var.get('i')+var.get('limbLen')), var.get('base')))
                        var.get(u"this").callprop('imuln', var.get('limbPow'))
                        if ((var.get(u"this").get('words').get('0')+var.get('word'))<Js(67108864)):
                            var.get(u"this").get('words').put('0', var.get('word'), '+')
                        else:
                            var.get(u"this").callprop('_iaddn', var.get('word'))
                    finally:
                            var.put('i', var.get('limbLen'), '+')
                if PyJsStrictNeq(var.get('mod'),Js(0.0)):
                    var.put('pow', Js(1.0))
                    var.put('word', var.get('parseBase')(var.get('number'), var.get('i'), var.get('number').get('length'), var.get('base')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('mod')):
                        try:
                            var.put('pow', var.get('base'), '*')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get(u"this").callprop('imuln', var.get('pow'))
                    if ((var.get(u"this").get('words').get('0')+var.get('word'))<Js(67108864)):
                        var.get(u"this").get('words').put('0', var.get('word'), '+')
                    else:
                        var.get(u"this").callprop('_iaddn', var.get('word'))
            PyJs__parseBase_133_._set_name('_parseBase')
            var.get('BN').get('prototype').put('_parseBase', PyJs__parseBase_133_)
            @Js
            def PyJs_copy_134_(dest, this, arguments, var=var):
                var = Scope({'dest':dest, 'this':this, 'arguments':arguments, 'copy':PyJs_copy_134_}, var)
                var.registers(['i', 'dest'])
                var.get('dest').put('words', var.get('Array').create(var.get(u"this").get('length')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.get('dest').get('words').put(var.get('i'), var.get(u"this").get('words').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('dest').put('length', var.get(u"this").get('length'))
                var.get('dest').put('negative', var.get(u"this").get('negative'))
                var.get('dest').put('red', var.get(u"this").get('red'))
            PyJs_copy_134_._set_name('copy')
            var.get('BN').get('prototype').put('copy', PyJs_copy_134_)
            @Js
            def PyJs_clone_135_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_135_}, var)
                var.registers(['r'])
                var.put('r', var.get('BN').create(var.get(u"null")))
                var.get(u"this").callprop('copy', var.get('r'))
                return var.get('r')
            PyJs_clone_135_._set_name('clone')
            var.get('BN').get('prototype').put('clone', PyJs_clone_135_)
            @Js
            def PyJs__expand_136_(size, this, arguments, var=var):
                var = Scope({'size':size, 'this':this, 'arguments':arguments, '_expand':PyJs__expand_136_}, var)
                var.registers(['size'])
                while (var.get(u"this").get('length')<var.get('size')):
                    var.get(u"this").get('words').put((var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1)), Js(0.0))
                return var.get(u"this")
            PyJs__expand_136_._set_name('_expand')
            var.get('BN').get('prototype').put('_expand', PyJs__expand_136_)
            @Js
            def PyJs_strip_137_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'strip':PyJs_strip_137_}, var)
                var.registers([])
                while ((var.get(u"this").get('length')>Js(1.0)) and _seq(var.get(u"this").get('words').get((var.get(u"this").get('length')-Js(1.0))),Js(0.0))):
                    (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())-Js(1))+Js(1))
                return var.get(u"this").callprop('_normSign')
            PyJs_strip_137_._set_name('strip')
            var.get('BN').get('prototype').put('strip', PyJs_strip_137_)
            @Js
            def PyJs__normSign_138_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, '_normSign':PyJs__normSign_138_}, var)
                var.registers([])
                if (_seq(var.get(u"this").get('length'),Js(1.0)) and _seq(var.get(u"this").get('words').get('0'),Js(0.0))):
                    var.get(u"this").put('negative', Js(0.0))
                return var.get(u"this")
            PyJs__normSign_138_._set_name('_normSign')
            var.get('BN').get('prototype').put('_normSign', PyJs__normSign_138_)
            @Js
            def PyJs_inspect_139_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'inspect':PyJs_inspect_139_}, var)
                var.registers([])
                return (((Js('<BN-R: ') if var.get(u"this").get('red') else Js('<BN: '))+var.get(u"this").callprop('toString', Js(16.0)))+Js('>'))
            PyJs_inspect_139_._set_name('inspect')
            var.get('BN').get('prototype').put('inspect', PyJs_inspect_139_)
            var.put('zeros', Js([Js(''), Js('0'), Js('00'), Js('000'), Js('0000'), Js('00000'), Js('000000'), Js('0000000'), Js('00000000'), Js('000000000'), Js('0000000000'), Js('00000000000'), Js('000000000000'), Js('0000000000000'), Js('00000000000000'), Js('000000000000000'), Js('0000000000000000'), Js('00000000000000000'), Js('000000000000000000'), Js('0000000000000000000'), Js('00000000000000000000'), Js('000000000000000000000'), Js('0000000000000000000000'), Js('00000000000000000000000'), Js('000000000000000000000000'), Js('0000000000000000000000000')]))
            var.put('groupSizes', Js([Js(0.0), Js(0.0), Js(25.0), Js(16.0), Js(12.0), Js(11.0), Js(10.0), Js(9.0), Js(8.0), Js(8.0), Js(7.0), Js(7.0), Js(7.0), Js(7.0), Js(6.0), Js(6.0), Js(6.0), Js(6.0), Js(6.0), Js(6.0), Js(6.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0)]))
            var.put('groupBases', Js([Js(0.0), Js(0.0), Js(33554432.0), Js(43046721.0), Js(16777216.0), Js(48828125.0), Js(60466176.0), Js(40353607.0), Js(16777216.0), Js(43046721.0), Js(10000000.0), Js(19487171.0), Js(35831808.0), Js(62748517.0), Js(7529536.0), Js(11390625.0), Js(16777216.0), Js(24137569.0), Js(34012224.0), Js(47045881.0), Js(64000000.0), Js(4084101.0), Js(5153632.0), Js(6436343.0), Js(7962624.0), Js(9765625.0), Js(11881376.0), Js(14348907.0), Js(17210368.0), Js(20511149.0), Js(24300000.0), Js(28629151.0), Js(33554432.0), Js(39135393.0), Js(45435424.0), Js(52521875.0), Js(60466176.0)]))
            @Js
            def PyJs_toString_140_(base, padding, this, arguments, var=var):
                var = Scope({'base':base, 'padding':padding, 'this':this, 'arguments':arguments, 'toString':PyJs_toString_140_}, var)
                var.registers(['groupSize', 'w', 'r', 'base', 'i', 'off', 'out', 'c', 'word', 'padding', 'groupBase', 'carry'])
                var.put('base', (var.get('base') or Js(10.0)))
                var.put('padding', ((var.get('padding')|Js(0.0)) or Js(1.0)))
                pass
                if (_seq(var.get('base'),Js(16.0)) or _seq(var.get('base'),Js('hex'))):
                    var.put('out', Js(''))
                    var.put('off', Js(0.0))
                    var.put('carry', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get(u"this").get('length')):
                        try:
                            var.put('w', var.get(u"this").get('words').get(var.get('i')))
                            var.put('word', (((var.get('w')<<var.get('off'))|var.get('carry'))&Js(16777215)).callprop('toString', Js(16.0)))
                            var.put('carry', (PyJsBshift(var.get('w'),(Js(24.0)-var.get('off')))&Js(16777215)))
                            if (PyJsStrictNeq(var.get('carry'),Js(0.0)) or PyJsStrictNeq(var.get('i'),(var.get(u"this").get('length')-Js(1.0)))):
                                var.put('out', ((var.get('zeros').get((Js(6.0)-var.get('word').get('length')))+var.get('word'))+var.get('out')))
                            else:
                                var.put('out', (var.get('word')+var.get('out')))
                            var.put('off', Js(2.0), '+')
                            if (var.get('off')>=Js(26.0)):
                                var.put('off', Js(26.0), '-')
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                        var.put('out', (var.get('carry').callprop('toString', Js(16.0))+var.get('out')))
                    while PyJsStrictNeq((var.get('out').get('length')%var.get('padding')),Js(0.0)):
                        var.put('out', (Js('0')+var.get('out')))
                    if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                        var.put('out', (Js('-')+var.get('out')))
                    return var.get('out')
                if ((_seq(var.get('base'),(var.get('base')|Js(0.0))) and (var.get('base')>=Js(2.0))) and (var.get('base')<=Js(36.0))):
                    var.put('groupSize', var.get('groupSizes').get(var.get('base')))
                    var.put('groupBase', var.get('groupBases').get(var.get('base')))
                    var.put('out', Js(''))
                    var.put('c', var.get(u"this").callprop('clone'))
                    var.get('c').put('negative', Js(0.0))
                    while var.get('c').callprop('isZero').neg():
                        var.put('r', var.get('c').callprop('modn', var.get('groupBase')).callprop('toString', var.get('base')))
                        var.put('c', var.get('c').callprop('idivn', var.get('groupBase')))
                        if var.get('c').callprop('isZero').neg():
                            var.put('out', ((var.get('zeros').get((var.get('groupSize')-var.get('r').get('length')))+var.get('r'))+var.get('out')))
                        else:
                            var.put('out', (var.get('r')+var.get('out')))
                    if var.get(u"this").callprop('isZero'):
                        var.put('out', (Js('0')+var.get('out')))
                    while PyJsStrictNeq((var.get('out').get('length')%var.get('padding')),Js(0.0)):
                        var.put('out', (Js('0')+var.get('out')))
                    if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                        var.put('out', (Js('-')+var.get('out')))
                    return var.get('out')
                var.get('assert')(Js(False), Js('Base should be between 2 and 36'))
            PyJs_toString_140_._set_name('toString')
            var.get('BN').get('prototype').put('toString', PyJs_toString_140_)
            @Js
            def PyJs_toNumber_141_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toNumber':PyJs_toNumber_141_}, var)
                var.registers(['ret'])
                var.put('ret', var.get(u"this").get('words').get('0'))
                if _seq(var.get(u"this").get('length'),Js(2.0)):
                    var.put('ret', (var.get(u"this").get('words').get('1')*Js(67108864)), '+')
                else:
                    if (_seq(var.get(u"this").get('length'),Js(3.0)) and _seq(var.get(u"this").get('words').get('2'),Js(1))):
                        var.put('ret', (Js(4503599627370496)+(var.get(u"this").get('words').get('1')*Js(67108864))), '+')
                    else:
                        if (var.get(u"this").get('length')>Js(2.0)):
                            var.get('assert')(Js(False), Js('Number can only safely store up to 53 bits'))
                return ((-var.get('ret')) if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) else var.get('ret'))
            PyJs_toNumber_141_._set_name('toNumber')
            var.get('BN').get('prototype').put('toNumber', PyJs_toNumber_141_)
            @Js
            def PyJs_toJSON_142_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_142_}, var)
                var.registers([])
                return var.get(u"this").callprop('toString', Js(16.0))
            PyJs_toJSON_142_._set_name('toJSON')
            var.get('BN').get('prototype').put('toJSON', PyJs_toJSON_142_)
            @Js
            def PyJs_toBuffer_143_(endian, length, this, arguments, var=var):
                var = Scope({'endian':endian, 'length':length, 'this':this, 'arguments':arguments, 'toBuffer':PyJs_toBuffer_143_}, var)
                var.registers(['length', 'endian'])
                var.get('assert')(PyJsStrictNeq(var.get('Buffer',throw=False).typeof(),Js('undefined')))
                return var.get(u"this").callprop('toArrayLike', var.get('Buffer'), var.get('endian'), var.get('length'))
            PyJs_toBuffer_143_._set_name('toBuffer')
            var.get('BN').get('prototype').put('toBuffer', PyJs_toBuffer_143_)
            @Js
            def PyJs_toArray_144_(endian, length, this, arguments, var=var):
                var = Scope({'endian':endian, 'length':length, 'this':this, 'arguments':arguments, 'toArray':PyJs_toArray_144_}, var)
                var.registers(['length', 'endian'])
                return var.get(u"this").callprop('toArrayLike', var.get('Array'), var.get('endian'), var.get('length'))
            PyJs_toArray_144_._set_name('toArray')
            var.get('BN').get('prototype').put('toArray', PyJs_toArray_144_)
            @Js
            def PyJs_toArrayLike_145_(ArrayType, endian, length, this, arguments, var=var):
                var = Scope({'ArrayType':ArrayType, 'endian':endian, 'length':length, 'this':this, 'arguments':arguments, 'toArrayLike':PyJs_toArrayLike_145_}, var)
                var.registers(['littleEndian', 'ArrayType', 'i', 'length', 'byteLength', 'b', 'q', 'reqLength', 'endian', 'res'])
                var.put('byteLength', var.get(u"this").callprop('byteLength'))
                var.put('reqLength', (var.get('length') or var.get('Math').callprop('max', Js(1.0), var.get('byteLength'))))
                var.get('assert')((var.get('byteLength')<=var.get('reqLength')), Js('byte array longer than desired length'))
                var.get('assert')((var.get('reqLength')>Js(0.0)), Js('Requested array length <= 0'))
                var.get(u"this").callprop('strip')
                var.put('littleEndian', _seq(var.get('endian'),Js('le')))
                var.put('res', var.get('ArrayType').create(var.get('reqLength')))
                pass
                var.put('q', var.get(u"this").callprop('clone'))
                if var.get('littleEndian').neg():
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<(var.get('reqLength')-var.get('byteLength'))):
                        try:
                            var.get('res').put(var.get('i'), Js(0.0))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while var.get('q').callprop('isZero').neg():
                        try:
                            var.put('b', var.get('q').callprop('andln', Js(255)))
                            var.get('q').callprop('iushrn', Js(8.0))
                            var.get('res').put(((var.get('reqLength')-var.get('i'))-Js(1.0)), var.get('b'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                else:
                    #for JS loop
                    var.put('i', Js(0.0))
                    while var.get('q').callprop('isZero').neg():
                        try:
                            var.put('b', var.get('q').callprop('andln', Js(255)))
                            var.get('q').callprop('iushrn', Js(8.0))
                            var.get('res').put(var.get('i'), var.get('b'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    #for JS loop

                    while (var.get('i')<var.get('reqLength')):
                        try:
                            var.get('res').put(var.get('i'), Js(0.0))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('res')
            PyJs_toArrayLike_145_._set_name('toArrayLike')
            var.get('BN').get('prototype').put('toArrayLike', PyJs_toArrayLike_145_)
            if var.get('Math').get('clz32'):
                @Js
                def PyJs__countBits_146_(w, this, arguments, var=var):
                    var = Scope({'w':w, 'this':this, 'arguments':arguments, '_countBits':PyJs__countBits_146_}, var)
                    var.registers(['w'])
                    return (Js(32.0)-var.get('Math').callprop('clz32', var.get('w')))
                PyJs__countBits_146_._set_name('_countBits')
                var.get('BN').get('prototype').put('_countBits', PyJs__countBits_146_)
            else:
                @Js
                def PyJs__countBits_147_(w, this, arguments, var=var):
                    var = Scope({'w':w, 'this':this, 'arguments':arguments, '_countBits':PyJs__countBits_147_}, var)
                    var.registers(['w', 'r', 't'])
                    var.put('t', var.get('w'))
                    var.put('r', Js(0.0))
                    if (var.get('t')>=Js(4096)):
                        var.put('r', Js(13.0), '+')
                        var.put('t', Js(13.0), '>>>')
                    if (var.get('t')>=Js(64)):
                        var.put('r', Js(7.0), '+')
                        var.put('t', Js(7.0), '>>>')
                    if (var.get('t')>=Js(8)):
                        var.put('r', Js(4.0), '+')
                        var.put('t', Js(4.0), '>>>')
                    if (var.get('t')>=Js(2)):
                        var.put('r', Js(2.0), '+')
                        var.put('t', Js(2.0), '>>>')
                    return (var.get('r')+var.get('t'))
                PyJs__countBits_147_._set_name('_countBits')
                var.get('BN').get('prototype').put('_countBits', PyJs__countBits_147_)
            @Js
            def PyJs__zeroBits_148_(w, this, arguments, var=var):
                var = Scope({'w':w, 'this':this, 'arguments':arguments, '_zeroBits':PyJs__zeroBits_148_}, var)
                var.registers(['w', 'r', 't'])
                if _seq(var.get('w'),Js(0.0)):
                    return Js(26.0)
                var.put('t', var.get('w'))
                var.put('r', Js(0.0))
                if _seq((var.get('t')&Js(8191)),Js(0.0)):
                    var.put('r', Js(13.0), '+')
                    var.put('t', Js(13.0), '>>>')
                if _seq((var.get('t')&Js(127)),Js(0.0)):
                    var.put('r', Js(7.0), '+')
                    var.put('t', Js(7.0), '>>>')
                if _seq((var.get('t')&Js(15)),Js(0.0)):
                    var.put('r', Js(4.0), '+')
                    var.put('t', Js(4.0), '>>>')
                if _seq((var.get('t')&Js(3)),Js(0.0)):
                    var.put('r', Js(2.0), '+')
                    var.put('t', Js(2.0), '>>>')
                if _seq((var.get('t')&Js(1)),Js(0.0)):
                    (var.put('r',Js(var.get('r').to_number())+Js(1))-Js(1))
                return var.get('r')
            PyJs__zeroBits_148_._set_name('_zeroBits')
            var.get('BN').get('prototype').put('_zeroBits', PyJs__zeroBits_148_)
            @Js
            def PyJs_bitLength_149_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'bitLength':PyJs_bitLength_149_}, var)
                var.registers(['w', 'hi'])
                var.put('w', var.get(u"this").get('words').get((var.get(u"this").get('length')-Js(1.0))))
                var.put('hi', var.get(u"this").callprop('_countBits', var.get('w')))
                return (((var.get(u"this").get('length')-Js(1.0))*Js(26.0))+var.get('hi'))
            PyJs_bitLength_149_._set_name('bitLength')
            var.get('BN').get('prototype').put('bitLength', PyJs_bitLength_149_)
            pass
            @Js
            def PyJs_zeroBits_150_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'zeroBits':PyJs_zeroBits_150_}, var)
                var.registers(['i', 'r', 'b'])
                if var.get(u"this").callprop('isZero'):
                    return Js(0.0)
                var.put('r', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.put('b', var.get(u"this").callprop('_zeroBits', var.get(u"this").get('words').get(var.get('i'))))
                        var.put('r', var.get('b'), '+')
                        if PyJsStrictNeq(var.get('b'),Js(26.0)):
                            break
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('r')
            PyJs_zeroBits_150_._set_name('zeroBits')
            var.get('BN').get('prototype').put('zeroBits', PyJs_zeroBits_150_)
            @Js
            def PyJs_byteLength_151_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'byteLength':PyJs_byteLength_151_}, var)
                var.registers([])
                return var.get('Math').callprop('ceil', (var.get(u"this").callprop('bitLength')/Js(8.0)))
            PyJs_byteLength_151_._set_name('byteLength')
            var.get('BN').get('prototype').put('byteLength', PyJs_byteLength_151_)
            @Js
            def PyJs_toTwos_152_(width, this, arguments, var=var):
                var = Scope({'width':width, 'this':this, 'arguments':arguments, 'toTwos':PyJs_toTwos_152_}, var)
                var.registers(['width'])
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    return var.get(u"this").callprop('abs').callprop('inotn', var.get('width')).callprop('iaddn', Js(1.0))
                return var.get(u"this").callprop('clone')
            PyJs_toTwos_152_._set_name('toTwos')
            var.get('BN').get('prototype').put('toTwos', PyJs_toTwos_152_)
            @Js
            def PyJs_fromTwos_153_(width, this, arguments, var=var):
                var = Scope({'width':width, 'this':this, 'arguments':arguments, 'fromTwos':PyJs_fromTwos_153_}, var)
                var.registers(['width'])
                if var.get(u"this").callprop('testn', (var.get('width')-Js(1.0))):
                    return var.get(u"this").callprop('notn', var.get('width')).callprop('iaddn', Js(1.0)).callprop('ineg')
                return var.get(u"this").callprop('clone')
            PyJs_fromTwos_153_._set_name('fromTwos')
            var.get('BN').get('prototype').put('fromTwos', PyJs_fromTwos_153_)
            @Js
            def PyJs_isNeg_154_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isNeg':PyJs_isNeg_154_}, var)
                var.registers([])
                return PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0))
            PyJs_isNeg_154_._set_name('isNeg')
            var.get('BN').get('prototype').put('isNeg', PyJs_isNeg_154_)
            @Js
            def PyJs_neg_155_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'neg':PyJs_neg_155_}, var)
                var.registers([])
                return var.get(u"this").callprop('clone').callprop('ineg')
            PyJs_neg_155_._set_name('neg')
            var.get('BN').get('prototype').put('neg', PyJs_neg_155_)
            @Js
            def PyJs_ineg_156_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'ineg':PyJs_ineg_156_}, var)
                var.registers([])
                if var.get(u"this").callprop('isZero').neg():
                    var.get(u"this").put('negative', Js(1.0), '^')
                return var.get(u"this")
            PyJs_ineg_156_._set_name('ineg')
            var.get('BN').get('prototype').put('ineg', PyJs_ineg_156_)
            @Js
            def PyJs_iuor_157_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iuor':PyJs_iuor_157_}, var)
                var.registers(['i', 'num'])
                while (var.get(u"this").get('length')<var.get('num').get('length')):
                    var.get(u"this").get('words').put((var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1)), Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('num').get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), (var.get(u"this").get('words').get(var.get('i'))|var.get('num').get('words').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get(u"this").callprop('strip')
            PyJs_iuor_157_._set_name('iuor')
            var.get('BN').get('prototype').put('iuor', PyJs_iuor_157_)
            @Js
            def PyJs_ior_158_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ior':PyJs_ior_158_}, var)
                var.registers(['num'])
                var.get('assert')(_seq((var.get(u"this").get('negative')|var.get('num').get('negative')),Js(0.0)))
                return var.get(u"this").callprop('iuor', var.get('num'))
            PyJs_ior_158_._set_name('ior')
            var.get('BN').get('prototype').put('ior', PyJs_ior_158_)
            @Js
            def PyJs_InlineNonPyName_159_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'or':PyJs_InlineNonPyName_159_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('ior', var.get('num'))
                return var.get('num').callprop('clone').callprop('ior', var.get(u"this"))
            PyJs_InlineNonPyName_159_._set_name('or')
            var.get('BN').get('prototype').put('or', PyJs_InlineNonPyName_159_)
            @Js
            def PyJs_uor_160_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'uor':PyJs_uor_160_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iuor', var.get('num'))
                return var.get('num').callprop('clone').callprop('iuor', var.get(u"this"))
            PyJs_uor_160_._set_name('uor')
            var.get('BN').get('prototype').put('uor', PyJs_uor_160_)
            @Js
            def PyJs_iuand_161_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iuand':PyJs_iuand_161_}, var)
                var.registers(['i', 'num', 'b'])
                pass
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    var.put('b', var.get('num'))
                else:
                    var.put('b', var.get(u"this"))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('b').get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), (var.get(u"this").get('words').get(var.get('i'))&var.get('num').get('words').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('b').get('length'))
                return var.get(u"this").callprop('strip')
            PyJs_iuand_161_._set_name('iuand')
            var.get('BN').get('prototype').put('iuand', PyJs_iuand_161_)
            @Js
            def PyJs_iand_162_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iand':PyJs_iand_162_}, var)
                var.registers(['num'])
                var.get('assert')(_seq((var.get(u"this").get('negative')|var.get('num').get('negative')),Js(0.0)))
                return var.get(u"this").callprop('iuand', var.get('num'))
            PyJs_iand_162_._set_name('iand')
            var.get('BN').get('prototype').put('iand', PyJs_iand_162_)
            @Js
            def PyJs_InlineNonPyName_163_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'and':PyJs_InlineNonPyName_163_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iand', var.get('num'))
                return var.get('num').callprop('clone').callprop('iand', var.get(u"this"))
            PyJs_InlineNonPyName_163_._set_name('and')
            var.get('BN').get('prototype').put('and', PyJs_InlineNonPyName_163_)
            @Js
            def PyJs_uand_164_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'uand':PyJs_uand_164_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iuand', var.get('num'))
                return var.get('num').callprop('clone').callprop('iuand', var.get(u"this"))
            PyJs_uand_164_._set_name('uand')
            var.get('BN').get('prototype').put('uand', PyJs_uand_164_)
            @Js
            def PyJs_iuxor_165_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iuxor':PyJs_iuxor_165_}, var)
                var.registers(['i', 'a', 'num', 'b'])
                pass
                pass
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    var.put('a', var.get(u"this"))
                    var.put('b', var.get('num'))
                else:
                    var.put('a', var.get('num'))
                    var.put('b', var.get(u"this"))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('b').get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), (var.get('a').get('words').get(var.get('i'))^var.get('b').get('words').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get(u"this"),var.get('a')):
                    #for JS loop

                    while (var.get('i')<var.get('a').get('length')):
                        try:
                            var.get(u"this").get('words').put(var.get('i'), var.get('a').get('words').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('a').get('length'))
                return var.get(u"this").callprop('strip')
            PyJs_iuxor_165_._set_name('iuxor')
            var.get('BN').get('prototype').put('iuxor', PyJs_iuxor_165_)
            @Js
            def PyJs_ixor_166_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ixor':PyJs_ixor_166_}, var)
                var.registers(['num'])
                var.get('assert')(_seq((var.get(u"this").get('negative')|var.get('num').get('negative')),Js(0.0)))
                return var.get(u"this").callprop('iuxor', var.get('num'))
            PyJs_ixor_166_._set_name('ixor')
            var.get('BN').get('prototype').put('ixor', PyJs_ixor_166_)
            @Js
            def PyJs_xor_167_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'xor':PyJs_xor_167_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('ixor', var.get('num'))
                return var.get('num').callprop('clone').callprop('ixor', var.get(u"this"))
            PyJs_xor_167_._set_name('xor')
            var.get('BN').get('prototype').put('xor', PyJs_xor_167_)
            @Js
            def PyJs_uxor_168_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'uxor':PyJs_uxor_168_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iuxor', var.get('num'))
                return var.get('num').callprop('clone').callprop('iuxor', var.get(u"this"))
            PyJs_uxor_168_._set_name('uxor')
            var.get('BN').get('prototype').put('uxor', PyJs_uxor_168_)
            @Js
            def PyJs_inotn_169_(width, this, arguments, var=var):
                var = Scope({'width':width, 'this':this, 'arguments':arguments, 'inotn':PyJs_inotn_169_}, var)
                var.registers(['i', 'width', 'bytesNeeded', 'bitsLeft'])
                var.get('assert')((_seq(var.get('width',throw=False).typeof(),Js('number')) and (var.get('width')>=Js(0.0))))
                var.put('bytesNeeded', (var.get('Math').callprop('ceil', (var.get('width')/Js(26.0)))|Js(0.0)))
                var.put('bitsLeft', (var.get('width')%Js(26.0)))
                var.get(u"this").callprop('_expand', var.get('bytesNeeded'))
                if (var.get('bitsLeft')>Js(0.0)):
                    (var.put('bytesNeeded',Js(var.get('bytesNeeded').to_number())-Js(1))+Js(1))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('bytesNeeded')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), ((~var.get(u"this").get('words').get(var.get('i')))&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if (var.get('bitsLeft')>Js(0.0)):
                    var.get(u"this").get('words').put(var.get('i'), ((~var.get(u"this").get('words').get(var.get('i')))&(Js(67108863)>>(Js(26.0)-var.get('bitsLeft')))))
                return var.get(u"this").callprop('strip')
            PyJs_inotn_169_._set_name('inotn')
            var.get('BN').get('prototype').put('inotn', PyJs_inotn_169_)
            @Js
            def PyJs_notn_170_(width, this, arguments, var=var):
                var = Scope({'width':width, 'this':this, 'arguments':arguments, 'notn':PyJs_notn_170_}, var)
                var.registers(['width'])
                return var.get(u"this").callprop('clone').callprop('inotn', var.get('width'))
            PyJs_notn_170_._set_name('notn')
            var.get('BN').get('prototype').put('notn', PyJs_notn_170_)
            @Js
            def PyJs_setn_171_(bit, val, this, arguments, var=var):
                var = Scope({'bit':bit, 'val':val, 'this':this, 'arguments':arguments, 'setn':PyJs_setn_171_}, var)
                var.registers(['wbit', 'off', 'bit', 'val'])
                var.get('assert')((_seq(var.get('bit',throw=False).typeof(),Js('number')) and (var.get('bit')>=Js(0.0))))
                var.put('off', ((var.get('bit')/Js(26.0))|Js(0.0)))
                var.put('wbit', (var.get('bit')%Js(26.0)))
                var.get(u"this").callprop('_expand', (var.get('off')+Js(1.0)))
                if var.get('val'):
                    var.get(u"this").get('words').put(var.get('off'), (var.get(u"this").get('words').get(var.get('off'))|(Js(1.0)<<var.get('wbit'))))
                else:
                    var.get(u"this").get('words').put(var.get('off'), (var.get(u"this").get('words').get(var.get('off'))&(~(Js(1.0)<<var.get('wbit')))))
                return var.get(u"this").callprop('strip')
            PyJs_setn_171_._set_name('setn')
            var.get('BN').get('prototype').put('setn', PyJs_setn_171_)
            @Js
            def PyJs_iadd_172_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iadd':PyJs_iadd_172_}, var)
                var.registers(['a', 'r', 'i', 'num', 'b', 'carry'])
                pass
                if (PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) and _seq(var.get('num').get('negative'),Js(0.0))):
                    var.get(u"this").put('negative', Js(0.0))
                    var.put('r', var.get(u"this").callprop('isub', var.get('num')))
                    var.get(u"this").put('negative', Js(1.0), '^')
                    return var.get(u"this").callprop('_normSign')
                else:
                    if (_seq(var.get(u"this").get('negative'),Js(0.0)) and PyJsStrictNeq(var.get('num').get('negative'),Js(0.0))):
                        var.get('num').put('negative', Js(0.0))
                        var.put('r', var.get(u"this").callprop('isub', var.get('num')))
                        var.get('num').put('negative', Js(1.0))
                        return var.get('r').callprop('_normSign')
                pass
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    var.put('a', var.get(u"this"))
                    var.put('b', var.get('num'))
                else:
                    var.put('a', var.get('num'))
                    var.put('b', var.get(u"this"))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('b').get('length')):
                    try:
                        var.put('r', (((var.get('a').get('words').get(var.get('i'))|Js(0.0))+(var.get('b').get('words').get(var.get('i'))|Js(0.0)))+var.get('carry')))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('r')&Js(67108863)))
                        var.put('carry', PyJsBshift(var.get('r'),Js(26.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                #for JS loop

                while (PyJsStrictNeq(var.get('carry'),Js(0.0)) and (var.get('i')<var.get('a').get('length'))):
                    try:
                        var.put('r', ((var.get('a').get('words').get(var.get('i'))|Js(0.0))+var.get('carry')))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('r')&Js(67108863)))
                        var.put('carry', PyJsBshift(var.get('r'),Js(26.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('a').get('length'))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get(u"this").get('words').put(var.get(u"this").get('length'), var.get('carry'))
                    (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1))
                else:
                    if PyJsStrictNeq(var.get('a'),var.get(u"this")):
                        #for JS loop

                        while (var.get('i')<var.get('a').get('length')):
                            try:
                                var.get(u"this").get('words').put(var.get('i'), var.get('a').get('words').get(var.get('i')))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get(u"this")
            PyJs_iadd_172_._set_name('iadd')
            var.get('BN').get('prototype').put('iadd', PyJs_iadd_172_)
            @Js
            def PyJs_add_173_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'add':PyJs_add_173_}, var)
                var.registers(['num', 'res'])
                pass
                if (PyJsStrictNeq(var.get('num').get('negative'),Js(0.0)) and _seq(var.get(u"this").get('negative'),Js(0.0))):
                    var.get('num').put('negative', Js(0.0))
                    var.put('res', var.get(u"this").callprop('sub', var.get('num')))
                    var.get('num').put('negative', Js(1.0), '^')
                    return var.get('res')
                else:
                    if (_seq(var.get('num').get('negative'),Js(0.0)) and PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0))):
                        var.get(u"this").put('negative', Js(0.0))
                        var.put('res', var.get('num').callprop('sub', var.get(u"this")))
                        var.get(u"this").put('negative', Js(1.0))
                        return var.get('res')
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iadd', var.get('num'))
                return var.get('num').callprop('clone').callprop('iadd', var.get(u"this"))
            PyJs_add_173_._set_name('add')
            var.get('BN').get('prototype').put('add', PyJs_add_173_)
            @Js
            def PyJs_isub_174_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'isub':PyJs_isub_174_}, var)
                var.registers(['a', 'r', 'i', 'num', 'b', 'cmp', 'carry'])
                if PyJsStrictNeq(var.get('num').get('negative'),Js(0.0)):
                    var.get('num').put('negative', Js(0.0))
                    var.put('r', var.get(u"this").callprop('iadd', var.get('num')))
                    var.get('num').put('negative', Js(1.0))
                    return var.get('r').callprop('_normSign')
                else:
                    if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                        var.get(u"this").put('negative', Js(0.0))
                        var.get(u"this").callprop('iadd', var.get('num'))
                        var.get(u"this").put('negative', Js(1.0))
                        return var.get(u"this").callprop('_normSign')
                var.put('cmp', var.get(u"this").callprop('cmp', var.get('num')))
                if _seq(var.get('cmp'),Js(0.0)):
                    var.get(u"this").put('negative', Js(0.0))
                    var.get(u"this").put('length', Js(1.0))
                    var.get(u"this").get('words').put('0', Js(0.0))
                    return var.get(u"this")
                pass
                if (var.get('cmp')>Js(0.0)):
                    var.put('a', var.get(u"this"))
                    var.put('b', var.get('num'))
                else:
                    var.put('a', var.get('num'))
                    var.put('b', var.get(u"this"))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('b').get('length')):
                    try:
                        var.put('r', (((var.get('a').get('words').get(var.get('i'))|Js(0.0))-(var.get('b').get('words').get(var.get('i'))|Js(0.0)))+var.get('carry')))
                        var.put('carry', (var.get('r')>>Js(26.0)))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('r')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                #for JS loop

                while (PyJsStrictNeq(var.get('carry'),Js(0.0)) and (var.get('i')<var.get('a').get('length'))):
                    try:
                        var.put('r', ((var.get('a').get('words').get(var.get('i'))|Js(0.0))+var.get('carry')))
                        var.put('carry', (var.get('r')>>Js(26.0)))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('r')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if ((_seq(var.get('carry'),Js(0.0)) and (var.get('i')<var.get('a').get('length'))) and PyJsStrictNeq(var.get('a'),var.get(u"this"))):
                    #for JS loop

                    while (var.get('i')<var.get('a').get('length')):
                        try:
                            var.get(u"this").get('words').put(var.get('i'), var.get('a').get('words').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('Math').callprop('max', var.get(u"this").get('length'), var.get('i')))
                if PyJsStrictNeq(var.get('a'),var.get(u"this")):
                    var.get(u"this").put('negative', Js(1.0))
                return var.get(u"this").callprop('strip')
            PyJs_isub_174_._set_name('isub')
            var.get('BN').get('prototype').put('isub', PyJs_isub_174_)
            @Js
            def PyJs_sub_175_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'sub':PyJs_sub_175_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('isub', var.get('num'))
            PyJs_sub_175_._set_name('sub')
            var.get('BN').get('prototype').put('sub', PyJs_sub_175_)
            pass
            @Js
            def PyJs_comb10MulTo_176_(self, num, out, this, arguments, var=var):
                var = Scope({'self':self, 'num':num, 'out':out, 'this':this, 'arguments':arguments, 'comb10MulTo':PyJs_comb10MulTo_176_}, var)
                var.registers(['a', 'bh1', 'bh8', 'bl8', 'bh9', 'al4', 'bh2', 'w5', 'al3', 'b9', 'bh0', 'w11', 'w9', 'ah0', 'bl1', 'w0', 'lo', 'al7', 'b8', 'bh3', 'w3', 'bl3', 'a8', 'a1', 'bh6', 'a2', 'b0', 'a9', 'b6', 'w1', 'ah9', 'w12', 'a5', 'b1', 'al0', 'ah5', 'bh5', 'ah6', 'bh4', 'w18', 'al1', 'bl4', 'ah8', 'bl6', 'b7', 'out', 'ah1', 'al5', 'bl7', 'a4', 'ah7', 'o', 'w7', 'al2', 'w14', 'self', 'w10', 'hi', 'bl2', 'mid', 'w13', 'bl5', 'al9', 'w17', 'ah2', 'al8', 'a0', 'ah4', 'al6', 'b4', 'b5', 'bh7', 'b', 'ah3', 'bl9', 'w16', 'w6', 'c', 'a3', 'w8', 'b3', 'b2', 'bl0', 'w2', 'a7', 'w4', 'a6', 'num', 'w15'])
                var.put('a', var.get('self').get('words'))
                var.put('b', var.get('num').get('words'))
                var.put('o', var.get('out').get('words'))
                var.put('c', Js(0.0))
                pass
                pass
                pass
                var.put('a0', (var.get('a').get('0')|Js(0.0)))
                var.put('al0', (var.get('a0')&Js(8191)))
                var.put('ah0', PyJsBshift(var.get('a0'),Js(13.0)))
                var.put('a1', (var.get('a').get('1')|Js(0.0)))
                var.put('al1', (var.get('a1')&Js(8191)))
                var.put('ah1', PyJsBshift(var.get('a1'),Js(13.0)))
                var.put('a2', (var.get('a').get('2')|Js(0.0)))
                var.put('al2', (var.get('a2')&Js(8191)))
                var.put('ah2', PyJsBshift(var.get('a2'),Js(13.0)))
                var.put('a3', (var.get('a').get('3')|Js(0.0)))
                var.put('al3', (var.get('a3')&Js(8191)))
                var.put('ah3', PyJsBshift(var.get('a3'),Js(13.0)))
                var.put('a4', (var.get('a').get('4')|Js(0.0)))
                var.put('al4', (var.get('a4')&Js(8191)))
                var.put('ah4', PyJsBshift(var.get('a4'),Js(13.0)))
                var.put('a5', (var.get('a').get('5')|Js(0.0)))
                var.put('al5', (var.get('a5')&Js(8191)))
                var.put('ah5', PyJsBshift(var.get('a5'),Js(13.0)))
                var.put('a6', (var.get('a').get('6')|Js(0.0)))
                var.put('al6', (var.get('a6')&Js(8191)))
                var.put('ah6', PyJsBshift(var.get('a6'),Js(13.0)))
                var.put('a7', (var.get('a').get('7')|Js(0.0)))
                var.put('al7', (var.get('a7')&Js(8191)))
                var.put('ah7', PyJsBshift(var.get('a7'),Js(13.0)))
                var.put('a8', (var.get('a').get('8')|Js(0.0)))
                var.put('al8', (var.get('a8')&Js(8191)))
                var.put('ah8', PyJsBshift(var.get('a8'),Js(13.0)))
                var.put('a9', (var.get('a').get('9')|Js(0.0)))
                var.put('al9', (var.get('a9')&Js(8191)))
                var.put('ah9', PyJsBshift(var.get('a9'),Js(13.0)))
                var.put('b0', (var.get('b').get('0')|Js(0.0)))
                var.put('bl0', (var.get('b0')&Js(8191)))
                var.put('bh0', PyJsBshift(var.get('b0'),Js(13.0)))
                var.put('b1', (var.get('b').get('1')|Js(0.0)))
                var.put('bl1', (var.get('b1')&Js(8191)))
                var.put('bh1', PyJsBshift(var.get('b1'),Js(13.0)))
                var.put('b2', (var.get('b').get('2')|Js(0.0)))
                var.put('bl2', (var.get('b2')&Js(8191)))
                var.put('bh2', PyJsBshift(var.get('b2'),Js(13.0)))
                var.put('b3', (var.get('b').get('3')|Js(0.0)))
                var.put('bl3', (var.get('b3')&Js(8191)))
                var.put('bh3', PyJsBshift(var.get('b3'),Js(13.0)))
                var.put('b4', (var.get('b').get('4')|Js(0.0)))
                var.put('bl4', (var.get('b4')&Js(8191)))
                var.put('bh4', PyJsBshift(var.get('b4'),Js(13.0)))
                var.put('b5', (var.get('b').get('5')|Js(0.0)))
                var.put('bl5', (var.get('b5')&Js(8191)))
                var.put('bh5', PyJsBshift(var.get('b5'),Js(13.0)))
                var.put('b6', (var.get('b').get('6')|Js(0.0)))
                var.put('bl6', (var.get('b6')&Js(8191)))
                var.put('bh6', PyJsBshift(var.get('b6'),Js(13.0)))
                var.put('b7', (var.get('b').get('7')|Js(0.0)))
                var.put('bl7', (var.get('b7')&Js(8191)))
                var.put('bh7', PyJsBshift(var.get('b7'),Js(13.0)))
                var.put('b8', (var.get('b').get('8')|Js(0.0)))
                var.put('bl8', (var.get('b8')&Js(8191)))
                var.put('bh8', PyJsBshift(var.get('b8'),Js(13.0)))
                var.put('b9', (var.get('b').get('9')|Js(0.0)))
                var.put('bl9', (var.get('b9')&Js(8191)))
                var.put('bh9', PyJsBshift(var.get('b9'),Js(13.0)))
                var.get('out').put('negative', (var.get('self').get('negative')^var.get('num').get('negative')))
                var.get('out').put('length', Js(19.0))
                var.put('lo', var.get('Math').callprop('imul', var.get('al0'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al0'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah0'), var.get('bh0')))
                var.put('w0', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w0'),Js(26.0)))|Js(0.0)))
                var.put('w0', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al1'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al1'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah1'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh1')))|Js(0.0)))
                var.put('w1', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w1'),Js(26.0)))|Js(0.0)))
                var.put('w1', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al2'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al2'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah2'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh2')))|Js(0.0)))
                var.put('w2', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w2'),Js(26.0)))|Js(0.0)))
                var.put('w2', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al3'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al3'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah3'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh3')))|Js(0.0)))
                var.put('w3', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w3'),Js(26.0)))|Js(0.0)))
                var.put('w3', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al4'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al4'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah4'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh4')))|Js(0.0)))
                var.put('w4', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w4'),Js(26.0)))|Js(0.0)))
                var.put('w4', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al5'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al5'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah5'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh5')))|Js(0.0)))
                var.put('w5', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w5'),Js(26.0)))|Js(0.0)))
                var.put('w5', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al6'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al6'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah6'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh6')))|Js(0.0)))
                var.put('w6', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w6'),Js(26.0)))|Js(0.0)))
                var.put('w6', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al7'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al7'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah7'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh7')))|Js(0.0)))
                var.put('w7', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w7'),Js(26.0)))|Js(0.0)))
                var.put('w7', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al8'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al8'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah8'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh8')))|Js(0.0)))
                var.put('w8', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w8'),Js(26.0)))|Js(0.0)))
                var.put('w8', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh9')))|Js(0.0)))
                var.put('w9', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w9'),Js(26.0)))|Js(0.0)))
                var.put('w9', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl1')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh1')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl1')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh1')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh9')))|Js(0.0)))
                var.put('w10', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w10'),Js(26.0)))|Js(0.0)))
                var.put('w10', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl2')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh2')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl2')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh2')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh9')))|Js(0.0)))
                var.put('w11', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w11'),Js(26.0)))|Js(0.0)))
                var.put('w11', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl3')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh3')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl3')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh3')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh9')))|Js(0.0)))
                var.put('w12', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w12'),Js(26.0)))|Js(0.0)))
                var.put('w12', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl4')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh4')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl4')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh4')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh9')))|Js(0.0)))
                var.put('w13', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w13'),Js(26.0)))|Js(0.0)))
                var.put('w13', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl5')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh5')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl5')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh5')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh9')))|Js(0.0)))
                var.put('w14', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w14'),Js(26.0)))|Js(0.0)))
                var.put('w14', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl6')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh6')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl6')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh6')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh9')))|Js(0.0)))
                var.put('w15', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w15'),Js(26.0)))|Js(0.0)))
                var.put('w15', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl7')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh7')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl7')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh7')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh9')))|Js(0.0)))
                var.put('w16', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w16'),Js(26.0)))|Js(0.0)))
                var.put('w16', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl8')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh8')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl8')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh8')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh9')))|Js(0.0)))
                var.put('w17', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w17'),Js(26.0)))|Js(0.0)))
                var.put('w17', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl9')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh9')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl9')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh9')))
                var.put('w18', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w18'),Js(26.0)))|Js(0.0)))
                var.put('w18', Js(67108863), '&')
                var.get('o').put('0', var.get('w0'))
                var.get('o').put('1', var.get('w1'))
                var.get('o').put('2', var.get('w2'))
                var.get('o').put('3', var.get('w3'))
                var.get('o').put('4', var.get('w4'))
                var.get('o').put('5', var.get('w5'))
                var.get('o').put('6', var.get('w6'))
                var.get('o').put('7', var.get('w7'))
                var.get('o').put('8', var.get('w8'))
                var.get('o').put('9', var.get('w9'))
                var.get('o').put('10', var.get('w10'))
                var.get('o').put('11', var.get('w11'))
                var.get('o').put('12', var.get('w12'))
                var.get('o').put('13', var.get('w13'))
                var.get('o').put('14', var.get('w14'))
                var.get('o').put('15', var.get('w15'))
                var.get('o').put('16', var.get('w16'))
                var.get('o').put('17', var.get('w17'))
                var.get('o').put('18', var.get('w18'))
                if PyJsStrictNeq(var.get('c'),Js(0.0)):
                    var.get('o').put('19', var.get('c'))
                    (var.get('out').put('length',Js(var.get('out').get('length').to_number())+Js(1))-Js(1))
                return var.get('out')
            PyJs_comb10MulTo_176_._set_name('comb10MulTo')
            var.put('comb10MulTo', PyJs_comb10MulTo_176_)
            if var.get('Math').get('imul').neg():
                var.put('comb10MulTo', var.get('smallMulTo'))
            pass
            pass
            @Js
            def PyJs_mulTo_177_(num, out, this, arguments, var=var):
                var = Scope({'num':num, 'out':out, 'this':this, 'arguments':arguments, 'mulTo':PyJs_mulTo_177_}, var)
                var.registers(['len', 'out', 'num', 'res'])
                pass
                var.put('len', (var.get(u"this").get('length')+var.get('num').get('length')))
                if (_seq(var.get(u"this").get('length'),Js(10.0)) and _seq(var.get('num').get('length'),Js(10.0))):
                    var.put('res', var.get('comb10MulTo')(var.get(u"this"), var.get('num'), var.get('out')))
                else:
                    if (var.get('len')<Js(63.0)):
                        var.put('res', var.get('smallMulTo')(var.get(u"this"), var.get('num'), var.get('out')))
                    else:
                        if (var.get('len')<Js(1024.0)):
                            var.put('res', var.get('bigMulTo')(var.get(u"this"), var.get('num'), var.get('out')))
                        else:
                            var.put('res', var.get('jumboMulTo')(var.get(u"this"), var.get('num'), var.get('out')))
                return var.get('res')
            PyJs_mulTo_177_._set_name('mulTo')
            var.get('BN').get('prototype').put('mulTo', PyJs_mulTo_177_)
            pass
            @Js
            def PyJs_makeRBT_178_(N, this, arguments, var=var):
                var = Scope({'N':N, 'this':this, 'arguments':arguments, 'makeRBT':PyJs_makeRBT_178_}, var)
                var.registers(['i', 'l', 'N', 't'])
                var.put('t', var.get('Array').create(var.get('N')))
                var.put('l', (var.get('BN').get('prototype').callprop('_countBits', var.get('N'))-Js(1.0)))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('N')):
                    try:
                        var.get('t').put(var.get('i'), var.get(u"this").callprop('revBin', var.get('i'), var.get('l'), var.get('N')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('t')
            PyJs_makeRBT_178_._set_name('makeRBT')
            var.get('FFTM').get('prototype').put('makeRBT', PyJs_makeRBT_178_)
            @Js
            def PyJs_revBin_179_(x, l, N, this, arguments, var=var):
                var = Scope({'x':x, 'l':l, 'N':N, 'this':this, 'arguments':arguments, 'revBin':PyJs_revBin_179_}, var)
                var.registers(['N', 'i', 'x', 'l', 'rb'])
                if (_seq(var.get('x'),Js(0.0)) or _seq(var.get('x'),(var.get('N')-Js(1.0)))):
                    return var.get('x')
                var.put('rb', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('l')):
                    try:
                        var.put('rb', ((var.get('x')&Js(1.0))<<((var.get('l')-var.get('i'))-Js(1.0))), '|')
                        var.put('x', Js(1.0), '>>')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('rb')
            PyJs_revBin_179_._set_name('revBin')
            var.get('FFTM').get('prototype').put('revBin', PyJs_revBin_179_)
            @Js
            def PyJs_permute_180_(rbt, rws, iws, rtws, itws, N, this, arguments, var=var):
                var = Scope({'rbt':rbt, 'rws':rws, 'iws':iws, 'rtws':rtws, 'itws':itws, 'N':N, 'this':this, 'arguments':arguments, 'permute':PyJs_permute_180_}, var)
                var.registers(['itws', 'rws', 'N', 'rbt', 'i', 'rtws', 'iws'])
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('N')):
                    try:
                        var.get('rtws').put(var.get('i'), var.get('rws').get(var.get('rbt').get(var.get('i'))))
                        var.get('itws').put(var.get('i'), var.get('iws').get(var.get('rbt').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJs_permute_180_._set_name('permute')
            var.get('FFTM').get('prototype').put('permute', PyJs_permute_180_)
            @Js
            def PyJs_transform_181_(rws, iws, rtws, itws, N, rbt, this, arguments, var=var):
                var = Scope({'rws':rws, 'iws':iws, 'rtws':rtws, 'itws':itws, 'N':N, 'rbt':rbt, 'this':this, 'arguments':arguments, 'transform':PyJs_transform_181_}, var)
                var.registers(['itws', 'j', 'rtwdf', 'itwdf', 'iws', 'rtwdf_', 'ro', 'rws', 'rtws', 's', 'rbt', 'itwdf_', 'p', 're', 'ie', 'rx', 'N', 'l', 'io'])
                var.get(u"this").callprop('permute', var.get('rbt'), var.get('rws'), var.get('iws'), var.get('rtws'), var.get('itws'), var.get('N'))
                #for JS loop
                var.put('s', Js(1.0))
                while (var.get('s')<var.get('N')):
                    try:
                        var.put('l', (var.get('s')<<Js(1.0)))
                        var.put('rtwdf', var.get('Math').callprop('cos', ((Js(2.0)*var.get('Math').get('PI'))/var.get('l'))))
                        var.put('itwdf', var.get('Math').callprop('sin', ((Js(2.0)*var.get('Math').get('PI'))/var.get('l'))))
                        #for JS loop
                        var.put('p', Js(0.0))
                        while (var.get('p')<var.get('N')):
                            try:
                                var.put('rtwdf_', var.get('rtwdf'))
                                var.put('itwdf_', var.get('itwdf'))
                                #for JS loop
                                var.put('j', Js(0.0))
                                while (var.get('j')<var.get('s')):
                                    try:
                                        var.put('re', var.get('rtws').get((var.get('p')+var.get('j'))))
                                        var.put('ie', var.get('itws').get((var.get('p')+var.get('j'))))
                                        var.put('ro', var.get('rtws').get(((var.get('p')+var.get('j'))+var.get('s'))))
                                        var.put('io', var.get('itws').get(((var.get('p')+var.get('j'))+var.get('s'))))
                                        var.put('rx', ((var.get('rtwdf_')*var.get('ro'))-(var.get('itwdf_')*var.get('io'))))
                                        var.put('io', ((var.get('rtwdf_')*var.get('io'))+(var.get('itwdf_')*var.get('ro'))))
                                        var.put('ro', var.get('rx'))
                                        var.get('rtws').put((var.get('p')+var.get('j')), (var.get('re')+var.get('ro')))
                                        var.get('itws').put((var.get('p')+var.get('j')), (var.get('ie')+var.get('io')))
                                        var.get('rtws').put(((var.get('p')+var.get('j'))+var.get('s')), (var.get('re')-var.get('ro')))
                                        var.get('itws').put(((var.get('p')+var.get('j'))+var.get('s')), (var.get('ie')-var.get('io')))
                                        if PyJsStrictNeq(var.get('j'),var.get('l')):
                                            var.put('rx', ((var.get('rtwdf')*var.get('rtwdf_'))-(var.get('itwdf')*var.get('itwdf_'))))
                                            var.put('itwdf_', ((var.get('rtwdf')*var.get('itwdf_'))+(var.get('itwdf')*var.get('rtwdf_'))))
                                            var.put('rtwdf_', var.get('rx'))
                                    finally:
                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                            finally:
                                    var.put('p', var.get('l'), '+')
                    finally:
                            var.put('s', Js(1.0), '<<')
            PyJs_transform_181_._set_name('transform')
            var.get('FFTM').get('prototype').put('transform', PyJs_transform_181_)
            @Js
            def PyJs_guessLen13b_182_(n, m, this, arguments, var=var):
                var = Scope({'n':n, 'm':m, 'this':this, 'arguments':arguments, 'guessLen13b':PyJs_guessLen13b_182_}, var)
                var.registers(['N', 'i', 'n', 'm', 'odd'])
                var.put('N', (var.get('Math').callprop('max', var.get('m'), var.get('n'))|Js(1.0)))
                var.put('odd', (var.get('N')&Js(1.0)))
                var.put('i', Js(0.0))
                #for JS loop
                var.put('N', ((var.get('N')/Js(2.0))|Js(0.0)))
                while var.get('N'):
                    try:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    finally:
                            var.put('N', PyJsBshift(var.get('N'),Js(1.0)))
                return (Js(1.0)<<((var.get('i')+Js(1.0))+var.get('odd')))
            PyJs_guessLen13b_182_._set_name('guessLen13b')
            var.get('FFTM').get('prototype').put('guessLen13b', PyJs_guessLen13b_182_)
            @Js
            def PyJs_conjugate_183_(rws, iws, N, this, arguments, var=var):
                var = Scope({'rws':rws, 'iws':iws, 'N':N, 'this':this, 'arguments':arguments, 'conjugate':PyJs_conjugate_183_}, var)
                var.registers(['N', 'rws', 'i', 't', 'iws'])
                if (var.get('N')<=Js(1.0)):
                    return var.get('undefined')
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<(var.get('N')/Js(2.0))):
                    try:
                        var.put('t', var.get('rws').get(var.get('i')))
                        var.get('rws').put(var.get('i'), var.get('rws').get(((var.get('N')-var.get('i'))-Js(1.0))))
                        var.get('rws').put(((var.get('N')-var.get('i'))-Js(1.0)), var.get('t'))
                        var.put('t', var.get('iws').get(var.get('i')))
                        var.get('iws').put(var.get('i'), (-var.get('iws').get(((var.get('N')-var.get('i'))-Js(1.0)))))
                        var.get('iws').put(((var.get('N')-var.get('i'))-Js(1.0)), (-var.get('t')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJs_conjugate_183_._set_name('conjugate')
            var.get('FFTM').get('prototype').put('conjugate', PyJs_conjugate_183_)
            @Js
            def PyJs_normalize13b_184_(ws, N, this, arguments, var=var):
                var = Scope({'ws':ws, 'N':N, 'this':this, 'arguments':arguments, 'normalize13b':PyJs_normalize13b_184_}, var)
                var.registers(['w', 'N', 'i', 'ws', 'carry'])
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<(var.get('N')/Js(2.0))):
                    try:
                        var.put('w', (((var.get('Math').callprop('round', (var.get('ws').get(((Js(2.0)*var.get('i'))+Js(1.0)))/var.get('N')))*Js(8192))+var.get('Math').callprop('round', (var.get('ws').get((Js(2.0)*var.get('i')))/var.get('N'))))+var.get('carry')))
                        var.get('ws').put(var.get('i'), (var.get('w')&Js(67108863)))
                        if (var.get('w')<Js(67108864)):
                            var.put('carry', Js(0.0))
                        else:
                            var.put('carry', ((var.get('w')/Js(67108864))|Js(0.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('ws')
            PyJs_normalize13b_184_._set_name('normalize13b')
            var.get('FFTM').get('prototype').put('normalize13b', PyJs_normalize13b_184_)
            @Js
            def PyJs_convert13b_185_(ws, len, rws, N, this, arguments, var=var):
                var = Scope({'ws':ws, 'len':len, 'rws':rws, 'N':N, 'this':this, 'arguments':arguments, 'convert13b':PyJs_convert13b_185_}, var)
                var.registers(['rws', 'N', 'i', 'len', 'ws', 'carry'])
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('len')):
                    try:
                        var.put('carry', (var.get('carry')+(var.get('ws').get(var.get('i'))|Js(0.0))))
                        var.get('rws').put((Js(2.0)*var.get('i')), (var.get('carry')&Js(8191)))
                        var.put('carry', PyJsBshift(var.get('carry'),Js(13.0)))
                        var.get('rws').put(((Js(2.0)*var.get('i'))+Js(1.0)), (var.get('carry')&Js(8191)))
                        var.put('carry', PyJsBshift(var.get('carry'),Js(13.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                #for JS loop
                var.put('i', (Js(2.0)*var.get('len')))
                while (var.get('i')<var.get('N')):
                    try:
                        var.get('rws').put(var.get('i'), Js(0.0))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                var.get('assert')(_seq(var.get('carry'),Js(0.0)))
                var.get('assert')(_seq((var.get('carry')&(~Js(8191))),Js(0.0)))
            PyJs_convert13b_185_._set_name('convert13b')
            var.get('FFTM').get('prototype').put('convert13b', PyJs_convert13b_185_)
            @Js
            def PyJs_stub_186_(N, this, arguments, var=var):
                var = Scope({'N':N, 'this':this, 'arguments':arguments, 'stub':PyJs_stub_186_}, var)
                var.registers(['i', 'ph', 'N'])
                var.put('ph', var.get('Array').create(var.get('N')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('N')):
                    try:
                        var.get('ph').put(var.get('i'), Js(0.0))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('ph')
            PyJs_stub_186_._set_name('stub')
            var.get('FFTM').get('prototype').put('stub', PyJs_stub_186_)
            @Js
            def PyJs_mulp_187_(x, y, out, this, arguments, var=var):
                var = Scope({'x':x, 'y':y, 'out':out, 'this':this, 'arguments':arguments, 'mulp':PyJs_mulp_187_}, var)
                var.registers(['_', 'nrws', 'rws', 'N', 'rwst', 'rbt', 'i', 'x', 'rmws', 'y', 'out', 'iwst', 'rx', 'niwst', 'nrwst'])
                var.put('N', (Js(2.0)*var.get(u"this").callprop('guessLen13b', var.get('x').get('length'), var.get('y').get('length'))))
                var.put('rbt', var.get(u"this").callprop('makeRBT', var.get('N')))
                var.put('_', var.get(u"this").callprop('stub', var.get('N')))
                var.put('rws', var.get('Array').create(var.get('N')))
                var.put('rwst', var.get('Array').create(var.get('N')))
                var.put('iwst', var.get('Array').create(var.get('N')))
                var.put('nrws', var.get('Array').create(var.get('N')))
                var.put('nrwst', var.get('Array').create(var.get('N')))
                var.put('niwst', var.get('Array').create(var.get('N')))
                var.put('rmws', var.get('out').get('words'))
                var.get('rmws').put('length', var.get('N'))
                var.get(u"this").callprop('convert13b', var.get('x').get('words'), var.get('x').get('length'), var.get('rws'), var.get('N'))
                var.get(u"this").callprop('convert13b', var.get('y').get('words'), var.get('y').get('length'), var.get('nrws'), var.get('N'))
                var.get(u"this").callprop('transform', var.get('rws'), var.get('_'), var.get('rwst'), var.get('iwst'), var.get('N'), var.get('rbt'))
                var.get(u"this").callprop('transform', var.get('nrws'), var.get('_'), var.get('nrwst'), var.get('niwst'), var.get('N'), var.get('rbt'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('N')):
                    try:
                        var.put('rx', ((var.get('rwst').get(var.get('i'))*var.get('nrwst').get(var.get('i')))-(var.get('iwst').get(var.get('i'))*var.get('niwst').get(var.get('i')))))
                        var.get('iwst').put(var.get('i'), ((var.get('rwst').get(var.get('i'))*var.get('niwst').get(var.get('i')))+(var.get('iwst').get(var.get('i'))*var.get('nrwst').get(var.get('i')))))
                        var.get('rwst').put(var.get('i'), var.get('rx'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").callprop('conjugate', var.get('rwst'), var.get('iwst'), var.get('N'))
                var.get(u"this").callprop('transform', var.get('rwst'), var.get('iwst'), var.get('rmws'), var.get('_'), var.get('N'), var.get('rbt'))
                var.get(u"this").callprop('conjugate', var.get('rmws'), var.get('_'), var.get('N'))
                var.get(u"this").callprop('normalize13b', var.get('rmws'), var.get('N'))
                var.get('out').put('negative', (var.get('x').get('negative')^var.get('y').get('negative')))
                var.get('out').put('length', (var.get('x').get('length')+var.get('y').get('length')))
                return var.get('out').callprop('strip')
            PyJs_mulp_187_._set_name('mulp')
            var.get('FFTM').get('prototype').put('mulp', PyJs_mulp_187_)
            @Js
            def PyJs_mul_188_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_188_}, var)
                var.registers(['num', 'out'])
                var.put('out', var.get('BN').create(var.get(u"null")))
                var.get('out').put('words', var.get('Array').create((var.get(u"this").get('length')+var.get('num').get('length'))))
                return var.get(u"this").callprop('mulTo', var.get('num'), var.get('out'))
            PyJs_mul_188_._set_name('mul')
            var.get('BN').get('prototype').put('mul', PyJs_mul_188_)
            @Js
            def PyJs_mulf_189_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'mulf':PyJs_mulf_189_}, var)
                var.registers(['num', 'out'])
                var.put('out', var.get('BN').create(var.get(u"null")))
                var.get('out').put('words', var.get('Array').create((var.get(u"this").get('length')+var.get('num').get('length'))))
                return var.get('jumboMulTo')(var.get(u"this"), var.get('num'), var.get('out'))
            PyJs_mulf_189_._set_name('mulf')
            var.get('BN').get('prototype').put('mulf', PyJs_mulf_189_)
            @Js
            def PyJs_imul_190_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imul':PyJs_imul_190_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('mulTo', var.get('num'), var.get(u"this"))
            PyJs_imul_190_._set_name('imul')
            var.get('BN').get('prototype').put('imul', PyJs_imul_190_)
            @Js
            def PyJs_imuln_191_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imuln':PyJs_imuln_191_}, var)
                var.registers(['w', 'i', 'num', 'lo', 'carry'])
                var.get('assert')(_seq(var.get('num',throw=False).typeof(),Js('number')))
                var.get('assert')((var.get('num')<Js(67108864)))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.put('w', ((var.get(u"this").get('words').get(var.get('i'))|Js(0.0))*var.get('num')))
                        var.put('lo', ((var.get('w')&Js(67108863))+(var.get('carry')&Js(67108863))))
                        var.put('carry', Js(26.0), '>>')
                        var.put('carry', ((var.get('w')/Js(67108864))|Js(0.0)), '+')
                        var.put('carry', PyJsBshift(var.get('lo'),Js(26.0)), '+')
                        var.get(u"this").get('words').put(var.get('i'), (var.get('lo')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get(u"this").get('words').put(var.get('i'), var.get('carry'))
                    (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1))
                return var.get(u"this")
            PyJs_imuln_191_._set_name('imuln')
            var.get('BN').get('prototype').put('imuln', PyJs_imuln_191_)
            @Js
            def PyJs_muln_192_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'muln':PyJs_muln_192_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('imuln', var.get('num'))
            PyJs_muln_192_._set_name('muln')
            var.get('BN').get('prototype').put('muln', PyJs_muln_192_)
            @Js
            def PyJs_sqr_193_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'sqr':PyJs_sqr_193_}, var)
                var.registers([])
                return var.get(u"this").callprop('mul', var.get(u"this"))
            PyJs_sqr_193_._set_name('sqr')
            var.get('BN').get('prototype').put('sqr', PyJs_sqr_193_)
            @Js
            def PyJs_isqr_194_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isqr':PyJs_isqr_194_}, var)
                var.registers([])
                return var.get(u"this").callprop('imul', var.get(u"this").callprop('clone'))
            PyJs_isqr_194_._set_name('isqr')
            var.get('BN').get('prototype').put('isqr', PyJs_isqr_194_)
            @Js
            def PyJs_pow_195_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'pow':PyJs_pow_195_}, var)
                var.registers(['w', 'i', 'num', 'q', 'res'])
                var.put('w', var.get('toBitArray')(var.get('num')))
                if _seq(var.get('w').get('length'),Js(0.0)):
                    return var.get('BN').create(Js(1.0))
                var.put('res', var.get(u"this"))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('w').get('length')):
                    try:
                        if PyJsStrictNeq(var.get('w').get(var.get('i')),Js(0.0)):
                            break
                    finally:
                            PyJsComma((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)),var.put('res', var.get('res').callprop('sqr')))
                if (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('w').get('length')):
                    #for JS loop
                    var.put('q', var.get('res').callprop('sqr'))
                    while (var.get('i')<var.get('w').get('length')):
                        try:
                            if _seq(var.get('w').get(var.get('i')),Js(0.0)):
                                continue
                            var.put('res', var.get('res').callprop('mul', var.get('q')))
                        finally:
                                PyJsComma((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)),var.put('q', var.get('q').callprop('sqr')))
                return var.get('res')
            PyJs_pow_195_._set_name('pow')
            var.get('BN').get('prototype').put('pow', PyJs_pow_195_)
            @Js
            def PyJs_iushln_196_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'iushln':PyJs_iushln_196_}, var)
                var.registers(['newCarry', 'bits', 'carryMask', 'r', 'i', 'c', 'carry', 's'])
                var.get('assert')((_seq(var.get('bits',throw=False).typeof(),Js('number')) and (var.get('bits')>=Js(0.0))))
                var.put('r', (var.get('bits')%Js(26.0)))
                var.put('s', ((var.get('bits')-var.get('r'))/Js(26.0)))
                var.put('carryMask', (PyJsBshift(Js(67108863),(Js(26.0)-var.get('r')))<<(Js(26.0)-var.get('r'))))
                pass
                if PyJsStrictNeq(var.get('r'),Js(0.0)):
                    var.put('carry', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get(u"this").get('length')):
                        try:
                            var.put('newCarry', (var.get(u"this").get('words').get(var.get('i'))&var.get('carryMask')))
                            var.put('c', (((var.get(u"this").get('words').get(var.get('i'))|Js(0.0))-var.get('newCarry'))<<var.get('r')))
                            var.get(u"this").get('words').put(var.get('i'), (var.get('c')|var.get('carry')))
                            var.put('carry', PyJsBshift(var.get('newCarry'),(Js(26.0)-var.get('r'))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    if var.get('carry'):
                        var.get(u"this").get('words').put(var.get('i'), var.get('carry'))
                        (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('s'),Js(0.0)):
                    #for JS loop
                    var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.get(u"this").get('words').put((var.get('i')+var.get('s')), var.get(u"this").get('words').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('s')):
                        try:
                            var.get(u"this").get('words').put(var.get('i'), Js(0.0))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get(u"this").put('length', var.get('s'), '+')
                return var.get(u"this").callprop('strip')
            PyJs_iushln_196_._set_name('iushln')
            var.get('BN').get('prototype').put('iushln', PyJs_iushln_196_)
            @Js
            def PyJs_ishln_197_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'ishln':PyJs_ishln_197_}, var)
                var.registers(['bits'])
                var.get('assert')(_seq(var.get(u"this").get('negative'),Js(0.0)))
                return var.get(u"this").callprop('iushln', var.get('bits'))
            PyJs_ishln_197_._set_name('ishln')
            var.get('BN').get('prototype').put('ishln', PyJs_ishln_197_)
            @Js
            def PyJs_iushrn_198_(bits, hint, extended, this, arguments, var=var):
                var = Scope({'bits':bits, 'hint':hint, 'extended':extended, 'this':this, 'arguments':arguments, 'iushrn':PyJs_iushrn_198_}, var)
                var.registers(['bits', 'maskedWords', 'hint', 'r', 'i', 'h', 'word', 'extended', 'mask', 'carry', 's'])
                var.get('assert')((_seq(var.get('bits',throw=False).typeof(),Js('number')) and (var.get('bits')>=Js(0.0))))
                pass
                if var.get('hint'):
                    var.put('h', ((var.get('hint')-(var.get('hint')%Js(26.0)))/Js(26.0)))
                else:
                    var.put('h', Js(0.0))
                var.put('r', (var.get('bits')%Js(26.0)))
                var.put('s', var.get('Math').callprop('min', ((var.get('bits')-var.get('r'))/Js(26.0)), var.get(u"this").get('length')))
                var.put('mask', (Js(67108863)^(PyJsBshift(Js(67108863),var.get('r'))<<var.get('r'))))
                var.put('maskedWords', var.get('extended'))
                var.put('h', var.get('s'), '-')
                var.put('h', var.get('Math').callprop('max', Js(0.0), var.get('h')))
                if var.get('maskedWords'):
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('s')):
                        try:
                            var.get('maskedWords').get('words').put(var.get('i'), var.get(u"this").get('words').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('maskedWords').put('length', var.get('s'))
                if _seq(var.get('s'),Js(0.0)):
                    pass
                else:
                    if (var.get(u"this").get('length')>var.get('s')):
                        var.get(u"this").put('length', var.get('s'), '-')
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get(u"this").get('length')):
                            try:
                                var.get(u"this").get('words').put(var.get('i'), var.get(u"this").get('words').get((var.get('i')+var.get('s'))))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    else:
                        var.get(u"this").get('words').put('0', Js(0.0))
                        var.get(u"this").put('length', Js(1.0))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                while ((var.get('i')>=Js(0.0)) and (PyJsStrictNeq(var.get('carry'),Js(0.0)) or (var.get('i')>=var.get('h')))):
                    try:
                        var.put('word', (var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))
                        var.get(u"this").get('words').put(var.get('i'), ((var.get('carry')<<(Js(26.0)-var.get('r')))|PyJsBshift(var.get('word'),var.get('r'))))
                        var.put('carry', (var.get('word')&var.get('mask')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                if (var.get('maskedWords') and PyJsStrictNeq(var.get('carry'),Js(0.0))):
                    var.get('maskedWords').get('words').put((var.get('maskedWords').put('length',Js(var.get('maskedWords').get('length').to_number())+Js(1))-Js(1)), var.get('carry'))
                if _seq(var.get(u"this").get('length'),Js(0.0)):
                    var.get(u"this").get('words').put('0', Js(0.0))
                    var.get(u"this").put('length', Js(1.0))
                return var.get(u"this").callprop('strip')
            PyJs_iushrn_198_._set_name('iushrn')
            var.get('BN').get('prototype').put('iushrn', PyJs_iushrn_198_)
            @Js
            def PyJs_ishrn_199_(bits, hint, extended, this, arguments, var=var):
                var = Scope({'bits':bits, 'hint':hint, 'extended':extended, 'this':this, 'arguments':arguments, 'ishrn':PyJs_ishrn_199_}, var)
                var.registers(['bits', 'hint', 'extended'])
                var.get('assert')(_seq(var.get(u"this").get('negative'),Js(0.0)))
                return var.get(u"this").callprop('iushrn', var.get('bits'), var.get('hint'), var.get('extended'))
            PyJs_ishrn_199_._set_name('ishrn')
            var.get('BN').get('prototype').put('ishrn', PyJs_ishrn_199_)
            @Js
            def PyJs_shln_200_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'shln':PyJs_shln_200_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('ishln', var.get('bits'))
            PyJs_shln_200_._set_name('shln')
            var.get('BN').get('prototype').put('shln', PyJs_shln_200_)
            @Js
            def PyJs_ushln_201_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'ushln':PyJs_ushln_201_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('iushln', var.get('bits'))
            PyJs_ushln_201_._set_name('ushln')
            var.get('BN').get('prototype').put('ushln', PyJs_ushln_201_)
            @Js
            def PyJs_shrn_202_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'shrn':PyJs_shrn_202_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('ishrn', var.get('bits'))
            PyJs_shrn_202_._set_name('shrn')
            var.get('BN').get('prototype').put('shrn', PyJs_shrn_202_)
            @Js
            def PyJs_ushrn_203_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'ushrn':PyJs_ushrn_203_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('iushrn', var.get('bits'))
            PyJs_ushrn_203_._set_name('ushrn')
            var.get('BN').get('prototype').put('ushrn', PyJs_ushrn_203_)
            @Js
            def PyJs_testn_204_(bit, this, arguments, var=var):
                var = Scope({'bit':bit, 'this':this, 'arguments':arguments, 'testn':PyJs_testn_204_}, var)
                var.registers(['w', 'bit', 'r', 'q', 's'])
                var.get('assert')((_seq(var.get('bit',throw=False).typeof(),Js('number')) and (var.get('bit')>=Js(0.0))))
                var.put('r', (var.get('bit')%Js(26.0)))
                var.put('s', ((var.get('bit')-var.get('r'))/Js(26.0)))
                var.put('q', (Js(1.0)<<var.get('r')))
                if (var.get(u"this").get('length')<=var.get('s')):
                    return Js(False)
                var.put('w', var.get(u"this").get('words').get(var.get('s')))
                return (var.get('w')&var.get('q')).neg().neg()
            PyJs_testn_204_._set_name('testn')
            var.get('BN').get('prototype').put('testn', PyJs_testn_204_)
            @Js
            def PyJs_imaskn_205_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'imaskn':PyJs_imaskn_205_}, var)
                var.registers(['bits', 'mask', 'r', 's'])
                var.get('assert')((_seq(var.get('bits',throw=False).typeof(),Js('number')) and (var.get('bits')>=Js(0.0))))
                var.put('r', (var.get('bits')%Js(26.0)))
                var.put('s', ((var.get('bits')-var.get('r'))/Js(26.0)))
                var.get('assert')(_seq(var.get(u"this").get('negative'),Js(0.0)), Js('imaskn works only with positive numbers'))
                if (var.get(u"this").get('length')<=var.get('s')):
                    return var.get(u"this")
                if PyJsStrictNeq(var.get('r'),Js(0.0)):
                    (var.put('s',Js(var.get('s').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('Math').callprop('min', var.get('s'), var.get(u"this").get('length')))
                if PyJsStrictNeq(var.get('r'),Js(0.0)):
                    var.put('mask', (Js(67108863)^(PyJsBshift(Js(67108863),var.get('r'))<<var.get('r'))))
                    var.get(u"this").get('words').put((var.get(u"this").get('length')-Js(1.0)), var.get('mask'), '&')
                return var.get(u"this").callprop('strip')
            PyJs_imaskn_205_._set_name('imaskn')
            var.get('BN').get('prototype').put('imaskn', PyJs_imaskn_205_)
            @Js
            def PyJs_maskn_206_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'maskn':PyJs_maskn_206_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('imaskn', var.get('bits'))
            PyJs_maskn_206_._set_name('maskn')
            var.get('BN').get('prototype').put('maskn', PyJs_maskn_206_)
            @Js
            def PyJs_iaddn_207_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iaddn':PyJs_iaddn_207_}, var)
                var.registers(['num'])
                var.get('assert')(_seq(var.get('num',throw=False).typeof(),Js('number')))
                var.get('assert')((var.get('num')<Js(67108864)))
                if (var.get('num')<Js(0.0)):
                    return var.get(u"this").callprop('isubn', (-var.get('num')))
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    if (_seq(var.get(u"this").get('length'),Js(1.0)) and ((var.get(u"this").get('words').get('0')|Js(0.0))<var.get('num'))):
                        var.get(u"this").get('words').put('0', (var.get('num')-(var.get(u"this").get('words').get('0')|Js(0.0))))
                        var.get(u"this").put('negative', Js(0.0))
                        return var.get(u"this")
                    var.get(u"this").put('negative', Js(0.0))
                    var.get(u"this").callprop('isubn', var.get('num'))
                    var.get(u"this").put('negative', Js(1.0))
                    return var.get(u"this")
                return var.get(u"this").callprop('_iaddn', var.get('num'))
            PyJs_iaddn_207_._set_name('iaddn')
            var.get('BN').get('prototype').put('iaddn', PyJs_iaddn_207_)
            @Js
            def PyJs__iaddn_208_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, '_iaddn':PyJs__iaddn_208_}, var)
                var.registers(['i', 'num'])
                var.get(u"this").get('words').put('0', var.get('num'), '+')
                #for JS loop
                var.put('i', Js(0.0))
                while ((var.get('i')<var.get(u"this").get('length')) and (var.get(u"this").get('words').get(var.get('i'))>=Js(67108864))):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), Js(67108864), '-')
                        if _seq(var.get('i'),(var.get(u"this").get('length')-Js(1.0))):
                            var.get(u"this").get('words').put((var.get('i')+Js(1.0)), Js(1.0))
                        else:
                            (var.get(u"this").get('words').put((var.get('i')+Js(1.0)),Js(var.get(u"this").get('words').get((var.get('i')+Js(1.0))).to_number())+Js(1))-Js(1))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('Math').callprop('max', var.get(u"this").get('length'), (var.get('i')+Js(1.0))))
                return var.get(u"this")
            PyJs__iaddn_208_._set_name('_iaddn')
            var.get('BN').get('prototype').put('_iaddn', PyJs__iaddn_208_)
            @Js
            def PyJs_isubn_209_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'isubn':PyJs_isubn_209_}, var)
                var.registers(['i', 'num'])
                var.get('assert')(_seq(var.get('num',throw=False).typeof(),Js('number')))
                var.get('assert')((var.get('num')<Js(67108864)))
                if (var.get('num')<Js(0.0)):
                    return var.get(u"this").callprop('iaddn', (-var.get('num')))
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    var.get(u"this").put('negative', Js(0.0))
                    var.get(u"this").callprop('iaddn', var.get('num'))
                    var.get(u"this").put('negative', Js(1.0))
                    return var.get(u"this")
                var.get(u"this").get('words').put('0', var.get('num'), '-')
                if (_seq(var.get(u"this").get('length'),Js(1.0)) and (var.get(u"this").get('words').get('0')<Js(0.0))):
                    var.get(u"this").get('words').put('0', (-var.get(u"this").get('words').get('0')))
                    var.get(u"this").put('negative', Js(1.0))
                else:
                    #for JS loop
                    var.put('i', Js(0.0))
                    while ((var.get('i')<var.get(u"this").get('length')) and (var.get(u"this").get('words').get(var.get('i'))<Js(0.0))):
                        try:
                            var.get(u"this").get('words').put(var.get('i'), Js(67108864), '+')
                            var.get(u"this").get('words').put((var.get('i')+Js(1.0)), Js(1.0), '-')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get(u"this").callprop('strip')
            PyJs_isubn_209_._set_name('isubn')
            var.get('BN').get('prototype').put('isubn', PyJs_isubn_209_)
            @Js
            def PyJs_addn_210_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'addn':PyJs_addn_210_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('iaddn', var.get('num'))
            PyJs_addn_210_._set_name('addn')
            var.get('BN').get('prototype').put('addn', PyJs_addn_210_)
            @Js
            def PyJs_subn_211_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'subn':PyJs_subn_211_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('isubn', var.get('num'))
            PyJs_subn_211_._set_name('subn')
            var.get('BN').get('prototype').put('subn', PyJs_subn_211_)
            @Js
            def PyJs_iabs_212_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'iabs':PyJs_iabs_212_}, var)
                var.registers([])
                var.get(u"this").put('negative', Js(0.0))
                return var.get(u"this")
            PyJs_iabs_212_._set_name('iabs')
            var.get('BN').get('prototype').put('iabs', PyJs_iabs_212_)
            @Js
            def PyJs_abs_213_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'abs':PyJs_abs_213_}, var)
                var.registers([])
                return var.get(u"this").callprop('clone').callprop('iabs')
            PyJs_abs_213_._set_name('abs')
            var.get('BN').get('prototype').put('abs', PyJs_abs_213_)
            @Js
            def PyJs__ishlnsubmul_214_(num, mul, shift, this, arguments, var=var):
                var = Scope({'num':num, 'mul':mul, 'shift':shift, 'this':this, 'arguments':arguments, '_ishlnsubmul':PyJs__ishlnsubmul_214_}, var)
                var.registers(['w', 'len', 'i', 'num', 'right', 'shift', 'mul', 'carry'])
                var.put('len', (var.get('num').get('length')+var.get('shift')))
                pass
                var.get(u"this").callprop('_expand', var.get('len'))
                pass
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('num').get('length')):
                    try:
                        var.put('w', ((var.get(u"this").get('words').get((var.get('i')+var.get('shift')))|Js(0.0))+var.get('carry')))
                        var.put('right', ((var.get('num').get('words').get(var.get('i'))|Js(0.0))*var.get('mul')))
                        var.put('w', (var.get('right')&Js(67108863)), '-')
                        var.put('carry', ((var.get('w')>>Js(26.0))-((var.get('right')/Js(67108864))|Js(0.0))))
                        var.get(u"this").get('words').put((var.get('i')+var.get('shift')), (var.get('w')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                #for JS loop

                while (var.get('i')<(var.get(u"this").get('length')-var.get('shift'))):
                    try:
                        var.put('w', ((var.get(u"this").get('words').get((var.get('i')+var.get('shift')))|Js(0.0))+var.get('carry')))
                        var.put('carry', (var.get('w')>>Js(26.0)))
                        var.get(u"this").get('words').put((var.get('i')+var.get('shift')), (var.get('w')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if _seq(var.get('carry'),Js(0.0)):
                    return var.get(u"this").callprop('strip')
                var.get('assert')(_seq(var.get('carry'),(-Js(1.0))))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.put('w', ((-(var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))+var.get('carry')))
                        var.put('carry', (var.get('w')>>Js(26.0)))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('w')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('negative', Js(1.0))
                return var.get(u"this").callprop('strip')
            PyJs__ishlnsubmul_214_._set_name('_ishlnsubmul')
            var.get('BN').get('prototype').put('_ishlnsubmul', PyJs__ishlnsubmul_214_)
            @Js
            def PyJs__wordDiv_215_(num, mode, this, arguments, var=var):
                var = Scope({'num':num, 'mode':mode, 'this':this, 'arguments':arguments, '_wordDiv':PyJs__wordDiv_215_}, var)
                var.registers(['a', 'diff', 'j', 'i', 'num', 'm', 'bhi', 'b', 'shift', 'q', 'qj', 'bhiBits', 'mode'])
                var.put('shift', (var.get(u"this").get('length')-var.get('num').get('length')))
                var.put('a', var.get(u"this").callprop('clone'))
                var.put('b', var.get('num'))
                var.put('bhi', (var.get('b').get('words').get((var.get('b').get('length')-Js(1.0)))|Js(0.0)))
                var.put('bhiBits', var.get(u"this").callprop('_countBits', var.get('bhi')))
                var.put('shift', (Js(26.0)-var.get('bhiBits')))
                if PyJsStrictNeq(var.get('shift'),Js(0.0)):
                    var.put('b', var.get('b').callprop('ushln', var.get('shift')))
                    var.get('a').callprop('iushln', var.get('shift'))
                    var.put('bhi', (var.get('b').get('words').get((var.get('b').get('length')-Js(1.0)))|Js(0.0)))
                var.put('m', (var.get('a').get('length')-var.get('b').get('length')))
                pass
                if PyJsStrictNeq(var.get('mode'),Js('mod')):
                    var.put('q', var.get('BN').create(var.get(u"null")))
                    var.get('q').put('length', (var.get('m')+Js(1.0)))
                    var.get('q').put('words', var.get('Array').create(var.get('q').get('length')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('q').get('length')):
                        try:
                            var.get('q').get('words').put(var.get('i'), Js(0.0))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('diff', var.get('a').callprop('clone').callprop('_ishlnsubmul', var.get('b'), Js(1.0), var.get('m')))
                if _seq(var.get('diff').get('negative'),Js(0.0)):
                    var.put('a', var.get('diff'))
                    if var.get('q'):
                        var.get('q').get('words').put(var.get('m'), Js(1.0))
                #for JS loop
                var.put('j', (var.get('m')-Js(1.0)))
                while (var.get('j')>=Js(0.0)):
                    try:
                        var.put('qj', (((var.get('a').get('words').get((var.get('b').get('length')+var.get('j')))|Js(0.0))*Js(67108864))+(var.get('a').get('words').get(((var.get('b').get('length')+var.get('j'))-Js(1.0)))|Js(0.0))))
                        var.put('qj', var.get('Math').callprop('min', ((var.get('qj')/var.get('bhi'))|Js(0.0)), Js(67108863)))
                        var.get('a').callprop('_ishlnsubmul', var.get('b'), var.get('qj'), var.get('j'))
                        while PyJsStrictNeq(var.get('a').get('negative'),Js(0.0)):
                            (var.put('qj',Js(var.get('qj').to_number())-Js(1))+Js(1))
                            var.get('a').put('negative', Js(0.0))
                            var.get('a').callprop('_ishlnsubmul', var.get('b'), Js(1.0), var.get('j'))
                            if var.get('a').callprop('isZero').neg():
                                var.get('a').put('negative', Js(1.0), '^')
                        if var.get('q'):
                            var.get('q').get('words').put(var.get('j'), var.get('qj'))
                    finally:
                            (var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))
                if var.get('q'):
                    var.get('q').callprop('strip')
                var.get('a').callprop('strip')
                if (PyJsStrictNeq(var.get('mode'),Js('div')) and PyJsStrictNeq(var.get('shift'),Js(0.0))):
                    var.get('a').callprop('iushrn', var.get('shift'))
                return Js({'div':(var.get('q') or var.get(u"null")),'mod':var.get('a')})
            PyJs__wordDiv_215_._set_name('_wordDiv')
            var.get('BN').get('prototype').put('_wordDiv', PyJs__wordDiv_215_)
            @Js
            def PyJs_divmod_216_(num, mode, positive, this, arguments, var=var):
                var = Scope({'num':num, 'mode':mode, 'positive':positive, 'this':this, 'arguments':arguments, 'divmod':PyJs_divmod_216_}, var)
                var.registers(['num', 'mod', 'div', 'positive', 'res', 'mode'])
                var.get('assert')(var.get('num').callprop('isZero').neg())
                if var.get(u"this").callprop('isZero'):
                    return Js({'div':var.get('BN').create(Js(0.0)),'mod':var.get('BN').create(Js(0.0))})
                pass
                if (PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) and _seq(var.get('num').get('negative'),Js(0.0))):
                    var.put('res', var.get(u"this").callprop('neg').callprop('divmod', var.get('num'), var.get('mode')))
                    if PyJsStrictNeq(var.get('mode'),Js('mod')):
                        var.put('div', var.get('res').get('div').callprop('neg'))
                    if PyJsStrictNeq(var.get('mode'),Js('div')):
                        var.put('mod', var.get('res').get('mod').callprop('neg'))
                        if (var.get('positive') and PyJsStrictNeq(var.get('mod').get('negative'),Js(0.0))):
                            var.get('mod').callprop('iadd', var.get('num'))
                    return Js({'div':var.get('div'),'mod':var.get('mod')})
                if (_seq(var.get(u"this").get('negative'),Js(0.0)) and PyJsStrictNeq(var.get('num').get('negative'),Js(0.0))):
                    var.put('res', var.get(u"this").callprop('divmod', var.get('num').callprop('neg'), var.get('mode')))
                    if PyJsStrictNeq(var.get('mode'),Js('mod')):
                        var.put('div', var.get('res').get('div').callprop('neg'))
                    return Js({'div':var.get('div'),'mod':var.get('res').get('mod')})
                if PyJsStrictNeq((var.get(u"this").get('negative')&var.get('num').get('negative')),Js(0.0)):
                    var.put('res', var.get(u"this").callprop('neg').callprop('divmod', var.get('num').callprop('neg'), var.get('mode')))
                    if PyJsStrictNeq(var.get('mode'),Js('div')):
                        var.put('mod', var.get('res').get('mod').callprop('neg'))
                        if (var.get('positive') and PyJsStrictNeq(var.get('mod').get('negative'),Js(0.0))):
                            var.get('mod').callprop('isub', var.get('num'))
                    return Js({'div':var.get('res').get('div'),'mod':var.get('mod')})
                if ((var.get('num').get('length')>var.get(u"this").get('length')) or (var.get(u"this").callprop('cmp', var.get('num'))<Js(0.0))):
                    return Js({'div':var.get('BN').create(Js(0.0)),'mod':var.get(u"this")})
                if _seq(var.get('num').get('length'),Js(1.0)):
                    if _seq(var.get('mode'),Js('div')):
                        return Js({'div':var.get(u"this").callprop('divn', var.get('num').get('words').get('0')),'mod':var.get(u"null")})
                    if _seq(var.get('mode'),Js('mod')):
                        return Js({'div':var.get(u"null"),'mod':var.get('BN').create(var.get(u"this").callprop('modn', var.get('num').get('words').get('0')))})
                    return Js({'div':var.get(u"this").callprop('divn', var.get('num').get('words').get('0')),'mod':var.get('BN').create(var.get(u"this").callprop('modn', var.get('num').get('words').get('0')))})
                return var.get(u"this").callprop('_wordDiv', var.get('num'), var.get('mode'))
            PyJs_divmod_216_._set_name('divmod')
            var.get('BN').get('prototype').put('divmod', PyJs_divmod_216_)
            @Js
            def PyJs_div_217_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'div':PyJs_div_217_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('divmod', var.get('num'), Js('div'), Js(False)).get('div')
            PyJs_div_217_._set_name('div')
            var.get('BN').get('prototype').put('div', PyJs_div_217_)
            @Js
            def PyJs_mod_218_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'mod':PyJs_mod_218_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('divmod', var.get('num'), Js('mod'), Js(False)).get('mod')
            PyJs_mod_218_._set_name('mod')
            var.get('BN').get('prototype').put('mod', PyJs_mod_218_)
            @Js
            def PyJs_umod_219_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'umod':PyJs_umod_219_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('divmod', var.get('num'), Js('mod'), Js(True)).get('mod')
            PyJs_umod_219_._set_name('umod')
            var.get('BN').get('prototype').put('umod', PyJs_umod_219_)
            @Js
            def PyJs_divRound_220_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'divRound':PyJs_divRound_220_}, var)
                var.registers(['num', 'half', 'cmp', 'mod', 'dm', 'r2'])
                var.put('dm', var.get(u"this").callprop('divmod', var.get('num')))
                if var.get('dm').get('mod').callprop('isZero'):
                    return var.get('dm').get('div')
                var.put('mod', (var.get('dm').get('mod').callprop('isub', var.get('num')) if PyJsStrictNeq(var.get('dm').get('div').get('negative'),Js(0.0)) else var.get('dm').get('mod')))
                var.put('half', var.get('num').callprop('ushrn', Js(1.0)))
                var.put('r2', var.get('num').callprop('andln', Js(1.0)))
                var.put('cmp', var.get('mod').callprop('cmp', var.get('half')))
                if ((var.get('cmp')<Js(0.0)) or (_seq(var.get('r2'),Js(1.0)) and _seq(var.get('cmp'),Js(0.0)))):
                    return var.get('dm').get('div')
                return (var.get('dm').get('div').callprop('isubn', Js(1.0)) if PyJsStrictNeq(var.get('dm').get('div').get('negative'),Js(0.0)) else var.get('dm').get('div').callprop('iaddn', Js(1.0)))
            PyJs_divRound_220_._set_name('divRound')
            var.get('BN').get('prototype').put('divRound', PyJs_divRound_220_)
            @Js
            def PyJs_modn_221_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'modn':PyJs_modn_221_}, var)
                var.registers(['i', 'acc', 'num', 'p'])
                var.get('assert')((var.get('num')<=Js(67108863)))
                var.put('p', ((Js(1.0)<<Js(26.0))%var.get('num')))
                var.put('acc', Js(0.0))
                #for JS loop
                var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('acc', (((var.get('p')*var.get('acc'))+(var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))%var.get('num')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                return var.get('acc')
            PyJs_modn_221_._set_name('modn')
            var.get('BN').get('prototype').put('modn', PyJs_modn_221_)
            @Js
            def PyJs_idivn_222_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'idivn':PyJs_idivn_222_}, var)
                var.registers(['i', 'w', 'carry', 'num'])
                var.get('assert')((var.get('num')<=Js(67108863)))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('w', ((var.get(u"this").get('words').get(var.get('i'))|Js(0.0))+(var.get('carry')*Js(67108864))))
                        var.get(u"this").get('words').put(var.get('i'), ((var.get('w')/var.get('num'))|Js(0.0)))
                        var.put('carry', (var.get('w')%var.get('num')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                return var.get(u"this").callprop('strip')
            PyJs_idivn_222_._set_name('idivn')
            var.get('BN').get('prototype').put('idivn', PyJs_idivn_222_)
            @Js
            def PyJs_divn_223_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'divn':PyJs_divn_223_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('idivn', var.get('num'))
            PyJs_divn_223_._set_name('divn')
            var.get('BN').get('prototype').put('divn', PyJs_divn_223_)
            @Js
            def PyJs_egcd_224_(p, this, arguments, var=var):
                var = Scope({'p':p, 'this':this, 'arguments':arguments, 'egcd':PyJs_egcd_224_}, var)
                var.registers(['D', 'C', 'j', 'i', 'x', 'y', 'B', 'im', 'p', 'g', 'jm', 'yp', 'xp', 'A'])
                var.get('assert')(_seq(var.get('p').get('negative'),Js(0.0)))
                var.get('assert')(var.get('p').callprop('isZero').neg())
                var.put('x', var.get(u"this"))
                var.put('y', var.get('p').callprop('clone'))
                if PyJsStrictNeq(var.get('x').get('negative'),Js(0.0)):
                    var.put('x', var.get('x').callprop('umod', var.get('p')))
                else:
                    var.put('x', var.get('x').callprop('clone'))
                var.put('A', var.get('BN').create(Js(1.0)))
                var.put('B', var.get('BN').create(Js(0.0)))
                var.put('C', var.get('BN').create(Js(0.0)))
                var.put('D', var.get('BN').create(Js(1.0)))
                var.put('g', Js(0.0))
                while (var.get('x').callprop('isEven') and var.get('y').callprop('isEven')):
                    var.get('x').callprop('iushrn', Js(1.0))
                    var.get('y').callprop('iushrn', Js(1.0))
                    var.put('g',Js(var.get('g').to_number())+Js(1))
                var.put('yp', var.get('y').callprop('clone'))
                var.put('xp', var.get('x').callprop('clone'))
                while var.get('x').callprop('isZero').neg():
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('im', Js(1.0))
                    while (_seq((var.get('x').get('words').get('0')&var.get('im')),Js(0.0)) and (var.get('i')<Js(26.0))):
                        try:
                            pass
                        finally:
                                PyJsComma(var.put('i',Js(var.get('i').to_number())+Js(1)),var.put('im', Js(1.0), '<<'))
                    if (var.get('i')>Js(0.0)):
                        var.get('x').callprop('iushrn', var.get('i'))
                        while ((var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))>Js(0.0)):
                            if (var.get('A').callprop('isOdd') or var.get('B').callprop('isOdd')):
                                var.get('A').callprop('iadd', var.get('yp'))
                                var.get('B').callprop('isub', var.get('xp'))
                            var.get('A').callprop('iushrn', Js(1.0))
                            var.get('B').callprop('iushrn', Js(1.0))
                    #for JS loop
                    var.put('j', Js(0.0))
                    var.put('jm', Js(1.0))
                    while (_seq((var.get('y').get('words').get('0')&var.get('jm')),Js(0.0)) and (var.get('j')<Js(26.0))):
                        try:
                            pass
                        finally:
                                PyJsComma(var.put('j',Js(var.get('j').to_number())+Js(1)),var.put('jm', Js(1.0), '<<'))
                    if (var.get('j')>Js(0.0)):
                        var.get('y').callprop('iushrn', var.get('j'))
                        while ((var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))>Js(0.0)):
                            if (var.get('C').callprop('isOdd') or var.get('D').callprop('isOdd')):
                                var.get('C').callprop('iadd', var.get('yp'))
                                var.get('D').callprop('isub', var.get('xp'))
                            var.get('C').callprop('iushrn', Js(1.0))
                            var.get('D').callprop('iushrn', Js(1.0))
                    if (var.get('x').callprop('cmp', var.get('y'))>=Js(0.0)):
                        var.get('x').callprop('isub', var.get('y'))
                        var.get('A').callprop('isub', var.get('C'))
                        var.get('B').callprop('isub', var.get('D'))
                    else:
                        var.get('y').callprop('isub', var.get('x'))
                        var.get('C').callprop('isub', var.get('A'))
                        var.get('D').callprop('isub', var.get('B'))
                return Js({'a':var.get('C'),'b':var.get('D'),'gcd':var.get('y').callprop('iushln', var.get('g'))})
            PyJs_egcd_224_._set_name('egcd')
            var.get('BN').get('prototype').put('egcd', PyJs_egcd_224_)
            @Js
            def PyJs__invmp_225_(p, this, arguments, var=var):
                var = Scope({'p':p, 'this':this, 'arguments':arguments, '_invmp':PyJs__invmp_225_}, var)
                var.registers(['x2', 'delta', 'a', 'j', 'i', 'im', 'b', 'jm', 'p', 'res', 'x1'])
                var.get('assert')(_seq(var.get('p').get('negative'),Js(0.0)))
                var.get('assert')(var.get('p').callprop('isZero').neg())
                var.put('a', var.get(u"this"))
                var.put('b', var.get('p').callprop('clone'))
                if PyJsStrictNeq(var.get('a').get('negative'),Js(0.0)):
                    var.put('a', var.get('a').callprop('umod', var.get('p')))
                else:
                    var.put('a', var.get('a').callprop('clone'))
                var.put('x1', var.get('BN').create(Js(1.0)))
                var.put('x2', var.get('BN').create(Js(0.0)))
                var.put('delta', var.get('b').callprop('clone'))
                while ((var.get('a').callprop('cmpn', Js(1.0))>Js(0.0)) and (var.get('b').callprop('cmpn', Js(1.0))>Js(0.0))):
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('im', Js(1.0))
                    while (_seq((var.get('a').get('words').get('0')&var.get('im')),Js(0.0)) and (var.get('i')<Js(26.0))):
                        try:
                            pass
                        finally:
                                PyJsComma(var.put('i',Js(var.get('i').to_number())+Js(1)),var.put('im', Js(1.0), '<<'))
                    if (var.get('i')>Js(0.0)):
                        var.get('a').callprop('iushrn', var.get('i'))
                        while ((var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))>Js(0.0)):
                            if var.get('x1').callprop('isOdd'):
                                var.get('x1').callprop('iadd', var.get('delta'))
                            var.get('x1').callprop('iushrn', Js(1.0))
                    #for JS loop
                    var.put('j', Js(0.0))
                    var.put('jm', Js(1.0))
                    while (_seq((var.get('b').get('words').get('0')&var.get('jm')),Js(0.0)) and (var.get('j')<Js(26.0))):
                        try:
                            pass
                        finally:
                                PyJsComma(var.put('j',Js(var.get('j').to_number())+Js(1)),var.put('jm', Js(1.0), '<<'))
                    if (var.get('j')>Js(0.0)):
                        var.get('b').callprop('iushrn', var.get('j'))
                        while ((var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))>Js(0.0)):
                            if var.get('x2').callprop('isOdd'):
                                var.get('x2').callprop('iadd', var.get('delta'))
                            var.get('x2').callprop('iushrn', Js(1.0))
                    if (var.get('a').callprop('cmp', var.get('b'))>=Js(0.0)):
                        var.get('a').callprop('isub', var.get('b'))
                        var.get('x1').callprop('isub', var.get('x2'))
                    else:
                        var.get('b').callprop('isub', var.get('a'))
                        var.get('x2').callprop('isub', var.get('x1'))
                pass
                if _seq(var.get('a').callprop('cmpn', Js(1.0)),Js(0.0)):
                    var.put('res', var.get('x1'))
                else:
                    var.put('res', var.get('x2'))
                if (var.get('res').callprop('cmpn', Js(0.0))<Js(0.0)):
                    var.get('res').callprop('iadd', var.get('p'))
                return var.get('res')
            PyJs__invmp_225_._set_name('_invmp')
            var.get('BN').get('prototype').put('_invmp', PyJs__invmp_225_)
            @Js
            def PyJs_gcd_226_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gcd':PyJs_gcd_226_}, var)
                var.registers(['a', 'r', 'num', 'b', 'shift', 't'])
                if var.get(u"this").callprop('isZero'):
                    return var.get('num').callprop('abs')
                if var.get('num').callprop('isZero'):
                    return var.get(u"this").callprop('abs')
                var.put('a', var.get(u"this").callprop('clone'))
                var.put('b', var.get('num').callprop('clone'))
                var.get('a').put('negative', Js(0.0))
                var.get('b').put('negative', Js(0.0))
                #for JS loop
                var.put('shift', Js(0.0))
                while (var.get('a').callprop('isEven') and var.get('b').callprop('isEven')):
                    try:
                        var.get('a').callprop('iushrn', Js(1.0))
                        var.get('b').callprop('iushrn', Js(1.0))
                    finally:
                            (var.put('shift',Js(var.get('shift').to_number())+Js(1))-Js(1))
                while 1:
                    while var.get('a').callprop('isEven'):
                        var.get('a').callprop('iushrn', Js(1.0))
                    while var.get('b').callprop('isEven'):
                        var.get('b').callprop('iushrn', Js(1.0))
                    var.put('r', var.get('a').callprop('cmp', var.get('b')))
                    if (var.get('r')<Js(0.0)):
                        var.put('t', var.get('a'))
                        var.put('a', var.get('b'))
                        var.put('b', var.get('t'))
                    else:
                        if (_seq(var.get('r'),Js(0.0)) or _seq(var.get('b').callprop('cmpn', Js(1.0)),Js(0.0))):
                            break
                    var.get('a').callprop('isub', var.get('b'))
                    if not Js(True):
                        break
                return var.get('b').callprop('iushln', var.get('shift'))
            PyJs_gcd_226_._set_name('gcd')
            var.get('BN').get('prototype').put('gcd', PyJs_gcd_226_)
            @Js
            def PyJs_invm_227_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'invm':PyJs_invm_227_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('egcd', var.get('num')).get('a').callprop('umod', var.get('num'))
            PyJs_invm_227_._set_name('invm')
            var.get('BN').get('prototype').put('invm', PyJs_invm_227_)
            @Js
            def PyJs_isEven_228_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isEven':PyJs_isEven_228_}, var)
                var.registers([])
                return _seq((var.get(u"this").get('words').get('0')&Js(1.0)),Js(0.0))
            PyJs_isEven_228_._set_name('isEven')
            var.get('BN').get('prototype').put('isEven', PyJs_isEven_228_)
            @Js
            def PyJs_isOdd_229_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isOdd':PyJs_isOdd_229_}, var)
                var.registers([])
                return _seq((var.get(u"this").get('words').get('0')&Js(1.0)),Js(1.0))
            PyJs_isOdd_229_._set_name('isOdd')
            var.get('BN').get('prototype').put('isOdd', PyJs_isOdd_229_)
            @Js
            def PyJs_andln_230_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'andln':PyJs_andln_230_}, var)
                var.registers(['num'])
                return (var.get(u"this").get('words').get('0')&var.get('num'))
            PyJs_andln_230_._set_name('andln')
            var.get('BN').get('prototype').put('andln', PyJs_andln_230_)
            @Js
            def PyJs_bincn_231_(bit, this, arguments, var=var):
                var = Scope({'bit':bit, 'this':this, 'arguments':arguments, 'bincn':PyJs_bincn_231_}, var)
                var.registers(['w', 'bit', 'r', 'i', 'q', 'carry', 's'])
                var.get('assert')(_seq(var.get('bit',throw=False).typeof(),Js('number')))
                var.put('r', (var.get('bit')%Js(26.0)))
                var.put('s', ((var.get('bit')-var.get('r'))/Js(26.0)))
                var.put('q', (Js(1.0)<<var.get('r')))
                if (var.get(u"this").get('length')<=var.get('s')):
                    var.get(u"this").callprop('_expand', (var.get('s')+Js(1.0)))
                    var.get(u"this").get('words').put(var.get('s'), var.get('q'), '|')
                    return var.get(u"this")
                var.put('carry', var.get('q'))
                #for JS loop
                var.put('i', var.get('s'))
                while (PyJsStrictNeq(var.get('carry'),Js(0.0)) and (var.get('i')<var.get(u"this").get('length'))):
                    try:
                        var.put('w', (var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))
                        var.put('w', var.get('carry'), '+')
                        var.put('carry', PyJsBshift(var.get('w'),Js(26.0)))
                        var.put('w', Js(67108863), '&')
                        var.get(u"this").get('words').put(var.get('i'), var.get('w'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get(u"this").get('words').put(var.get('i'), var.get('carry'))
                    (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1))
                return var.get(u"this")
            PyJs_bincn_231_._set_name('bincn')
            var.get('BN').get('prototype').put('bincn', PyJs_bincn_231_)
            @Js
            def PyJs_isZero_232_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isZero':PyJs_isZero_232_}, var)
                var.registers([])
                return (_seq(var.get(u"this").get('length'),Js(1.0)) and _seq(var.get(u"this").get('words').get('0'),Js(0.0)))
            PyJs_isZero_232_._set_name('isZero')
            var.get('BN').get('prototype').put('isZero', PyJs_isZero_232_)
            @Js
            def PyJs_cmpn_233_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'cmpn':PyJs_cmpn_233_}, var)
                var.registers(['num', 'w', 'negative', 'res'])
                var.put('negative', (var.get('num')<Js(0.0)))
                if (PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) and var.get('negative').neg()):
                    return (-Js(1.0))
                if (_seq(var.get(u"this").get('negative'),Js(0.0)) and var.get('negative')):
                    return Js(1.0)
                var.get(u"this").callprop('strip')
                pass
                if (var.get(u"this").get('length')>Js(1.0)):
                    var.put('res', Js(1.0))
                else:
                    if var.get('negative'):
                        var.put('num', (-var.get('num')))
                    var.get('assert')((var.get('num')<=Js(67108863)), Js('Number is too big'))
                    var.put('w', (var.get(u"this").get('words').get('0')|Js(0.0)))
                    var.put('res', (Js(0.0) if _seq(var.get('w'),var.get('num')) else ((-Js(1.0)) if (var.get('w')<var.get('num')) else Js(1.0))))
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    return ((-var.get('res'))|Js(0.0))
                return var.get('res')
            PyJs_cmpn_233_._set_name('cmpn')
            var.get('BN').get('prototype').put('cmpn', PyJs_cmpn_233_)
            @Js
            def PyJs_cmp_234_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'cmp':PyJs_cmp_234_}, var)
                var.registers(['num', 'res'])
                if (PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) and _seq(var.get('num').get('negative'),Js(0.0))):
                    return (-Js(1.0))
                if (_seq(var.get(u"this").get('negative'),Js(0.0)) and PyJsStrictNeq(var.get('num').get('negative'),Js(0.0))):
                    return Js(1.0)
                var.put('res', var.get(u"this").callprop('ucmp', var.get('num')))
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    return ((-var.get('res'))|Js(0.0))
                return var.get('res')
            PyJs_cmp_234_._set_name('cmp')
            var.get('BN').get('prototype').put('cmp', PyJs_cmp_234_)
            @Js
            def PyJs_ucmp_235_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ucmp':PyJs_ucmp_235_}, var)
                var.registers(['a', 'i', 'num', 'b', 'res'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return Js(1.0)
                if (var.get(u"this").get('length')<var.get('num').get('length')):
                    return (-Js(1.0))
                var.put('res', Js(0.0))
                #for JS loop
                var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('a', (var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))
                        var.put('b', (var.get('num').get('words').get(var.get('i'))|Js(0.0)))
                        if _seq(var.get('a'),var.get('b')):
                            continue
                        if (var.get('a')<var.get('b')):
                            var.put('res', (-Js(1.0)))
                        else:
                            if (var.get('a')>var.get('b')):
                                var.put('res', Js(1.0))
                        break
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                return var.get('res')
            PyJs_ucmp_235_._set_name('ucmp')
            var.get('BN').get('prototype').put('ucmp', PyJs_ucmp_235_)
            @Js
            def PyJs_gtn_236_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gtn':PyJs_gtn_236_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmpn', var.get('num')),Js(1.0))
            PyJs_gtn_236_._set_name('gtn')
            var.get('BN').get('prototype').put('gtn', PyJs_gtn_236_)
            @Js
            def PyJs_gt_237_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gt':PyJs_gt_237_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmp', var.get('num')),Js(1.0))
            PyJs_gt_237_._set_name('gt')
            var.get('BN').get('prototype').put('gt', PyJs_gt_237_)
            @Js
            def PyJs_gten_238_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gten':PyJs_gten_238_}, var)
                var.registers(['num'])
                return (var.get(u"this").callprop('cmpn', var.get('num'))>=Js(0.0))
            PyJs_gten_238_._set_name('gten')
            var.get('BN').get('prototype').put('gten', PyJs_gten_238_)
            @Js
            def PyJs_gte_239_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gte':PyJs_gte_239_}, var)
                var.registers(['num'])
                return (var.get(u"this").callprop('cmp', var.get('num'))>=Js(0.0))
            PyJs_gte_239_._set_name('gte')
            var.get('BN').get('prototype').put('gte', PyJs_gte_239_)
            @Js
            def PyJs_ltn_240_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ltn':PyJs_ltn_240_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmpn', var.get('num')),(-Js(1.0)))
            PyJs_ltn_240_._set_name('ltn')
            var.get('BN').get('prototype').put('ltn', PyJs_ltn_240_)
            @Js
            def PyJs_lt_241_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lt':PyJs_lt_241_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmp', var.get('num')),(-Js(1.0)))
            PyJs_lt_241_._set_name('lt')
            var.get('BN').get('prototype').put('lt', PyJs_lt_241_)
            @Js
            def PyJs_lten_242_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lten':PyJs_lten_242_}, var)
                var.registers(['num'])
                return (var.get(u"this").callprop('cmpn', var.get('num'))<=Js(0.0))
            PyJs_lten_242_._set_name('lten')
            var.get('BN').get('prototype').put('lten', PyJs_lten_242_)
            @Js
            def PyJs_lte_243_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lte':PyJs_lte_243_}, var)
                var.registers(['num'])
                return (var.get(u"this").callprop('cmp', var.get('num'))<=Js(0.0))
            PyJs_lte_243_._set_name('lte')
            var.get('BN').get('prototype').put('lte', PyJs_lte_243_)
            @Js
            def PyJs_eqn_244_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'eqn':PyJs_eqn_244_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmpn', var.get('num')),Js(0.0))
            PyJs_eqn_244_._set_name('eqn')
            var.get('BN').get('prototype').put('eqn', PyJs_eqn_244_)
            @Js
            def PyJs_eq_245_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'eq':PyJs_eq_245_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmp', var.get('num')),Js(0.0))
            PyJs_eq_245_._set_name('eq')
            var.get('BN').get('prototype').put('eq', PyJs_eq_245_)
            @Js
            def PyJs_red_246_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'red':PyJs_red_246_}, var)
                var.registers(['num'])
                return var.get('Red').create(var.get('num'))
            PyJs_red_246_._set_name('red')
            var.get('BN').put('red', PyJs_red_246_)
            @Js
            def PyJs_toRed_247_(ctx, this, arguments, var=var):
                var = Scope({'ctx':ctx, 'this':this, 'arguments':arguments, 'toRed':PyJs_toRed_247_}, var)
                var.registers(['ctx'])
                var.get('assert')(var.get(u"this").get('red').neg(), Js('Already a number in reduction context'))
                var.get('assert')(_seq(var.get(u"this").get('negative'),Js(0.0)), Js('red works only with positives'))
                return var.get('ctx').callprop('convertTo', var.get(u"this")).callprop('_forceRed', var.get('ctx'))
            PyJs_toRed_247_._set_name('toRed')
            var.get('BN').get('prototype').put('toRed', PyJs_toRed_247_)
            @Js
            def PyJs_fromRed_248_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'fromRed':PyJs_fromRed_248_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('fromRed works only with numbers in reduction context'))
                return var.get(u"this").get('red').callprop('convertFrom', var.get(u"this"))
            PyJs_fromRed_248_._set_name('fromRed')
            var.get('BN').get('prototype').put('fromRed', PyJs_fromRed_248_)
            @Js
            def PyJs__forceRed_249_(ctx, this, arguments, var=var):
                var = Scope({'ctx':ctx, 'this':this, 'arguments':arguments, '_forceRed':PyJs__forceRed_249_}, var)
                var.registers(['ctx'])
                var.get(u"this").put('red', var.get('ctx'))
                return var.get(u"this")
            PyJs__forceRed_249_._set_name('_forceRed')
            var.get('BN').get('prototype').put('_forceRed', PyJs__forceRed_249_)
            @Js
            def PyJs_forceRed_250_(ctx, this, arguments, var=var):
                var = Scope({'ctx':ctx, 'this':this, 'arguments':arguments, 'forceRed':PyJs_forceRed_250_}, var)
                var.registers(['ctx'])
                var.get('assert')(var.get(u"this").get('red').neg(), Js('Already a number in reduction context'))
                return var.get(u"this").callprop('_forceRed', var.get('ctx'))
            PyJs_forceRed_250_._set_name('forceRed')
            var.get('BN').get('prototype').put('forceRed', PyJs_forceRed_250_)
            @Js
            def PyJs_redAdd_251_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redAdd':PyJs_redAdd_251_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redAdd works only with red numbers'))
                return var.get(u"this").get('red').callprop('add', var.get(u"this"), var.get('num'))
            PyJs_redAdd_251_._set_name('redAdd')
            var.get('BN').get('prototype').put('redAdd', PyJs_redAdd_251_)
            @Js
            def PyJs_redIAdd_252_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redIAdd':PyJs_redIAdd_252_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redIAdd works only with red numbers'))
                return var.get(u"this").get('red').callprop('iadd', var.get(u"this"), var.get('num'))
            PyJs_redIAdd_252_._set_name('redIAdd')
            var.get('BN').get('prototype').put('redIAdd', PyJs_redIAdd_252_)
            @Js
            def PyJs_redSub_253_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redSub':PyJs_redSub_253_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redSub works only with red numbers'))
                return var.get(u"this").get('red').callprop('sub', var.get(u"this"), var.get('num'))
            PyJs_redSub_253_._set_name('redSub')
            var.get('BN').get('prototype').put('redSub', PyJs_redSub_253_)
            @Js
            def PyJs_redISub_254_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redISub':PyJs_redISub_254_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redISub works only with red numbers'))
                return var.get(u"this").get('red').callprop('isub', var.get(u"this"), var.get('num'))
            PyJs_redISub_254_._set_name('redISub')
            var.get('BN').get('prototype').put('redISub', PyJs_redISub_254_)
            @Js
            def PyJs_redShl_255_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redShl':PyJs_redShl_255_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redShl works only with red numbers'))
                return var.get(u"this").get('red').callprop('shl', var.get(u"this"), var.get('num'))
            PyJs_redShl_255_._set_name('redShl')
            var.get('BN').get('prototype').put('redShl', PyJs_redShl_255_)
            @Js
            def PyJs_redMul_256_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redMul':PyJs_redMul_256_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redMul works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify2', var.get(u"this"), var.get('num'))
                return var.get(u"this").get('red').callprop('mul', var.get(u"this"), var.get('num'))
            PyJs_redMul_256_._set_name('redMul')
            var.get('BN').get('prototype').put('redMul', PyJs_redMul_256_)
            @Js
            def PyJs_redIMul_257_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redIMul':PyJs_redIMul_257_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redMul works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify2', var.get(u"this"), var.get('num'))
                return var.get(u"this").get('red').callprop('imul', var.get(u"this"), var.get('num'))
            PyJs_redIMul_257_._set_name('redIMul')
            var.get('BN').get('prototype').put('redIMul', PyJs_redIMul_257_)
            @Js
            def PyJs_redSqr_258_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redSqr':PyJs_redSqr_258_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redSqr works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('sqr', var.get(u"this"))
            PyJs_redSqr_258_._set_name('redSqr')
            var.get('BN').get('prototype').put('redSqr', PyJs_redSqr_258_)
            @Js
            def PyJs_redISqr_259_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redISqr':PyJs_redISqr_259_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redISqr works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('isqr', var.get(u"this"))
            PyJs_redISqr_259_._set_name('redISqr')
            var.get('BN').get('prototype').put('redISqr', PyJs_redISqr_259_)
            @Js
            def PyJs_redSqrt_260_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redSqrt':PyJs_redSqrt_260_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redSqrt works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('sqrt', var.get(u"this"))
            PyJs_redSqrt_260_._set_name('redSqrt')
            var.get('BN').get('prototype').put('redSqrt', PyJs_redSqrt_260_)
            @Js
            def PyJs_redInvm_261_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redInvm':PyJs_redInvm_261_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redInvm works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('invm', var.get(u"this"))
            PyJs_redInvm_261_._set_name('redInvm')
            var.get('BN').get('prototype').put('redInvm', PyJs_redInvm_261_)
            @Js
            def PyJs_redNeg_262_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redNeg':PyJs_redNeg_262_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redNeg works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('neg', var.get(u"this"))
            PyJs_redNeg_262_._set_name('redNeg')
            var.get('BN').get('prototype').put('redNeg', PyJs_redNeg_262_)
            @Js
            def PyJs_redPow_263_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redPow':PyJs_redPow_263_}, var)
                var.registers(['num'])
                var.get('assert')((var.get(u"this").get('red') and var.get('num').get('red').neg()), Js('redPow(normalNum)'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('pow', var.get(u"this"), var.get('num'))
            PyJs_redPow_263_._set_name('redPow')
            var.get('BN').get('prototype').put('redPow', PyJs_redPow_263_)
            var.put('primes', Js({'k256':var.get(u"null"),'p224':var.get(u"null"),'p192':var.get(u"null"),'p25519':var.get(u"null")}))
            pass
            @Js
            def PyJs__tmp_264_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, '_tmp':PyJs__tmp_264_}, var)
                var.registers(['tmp'])
                var.put('tmp', var.get('BN').create(var.get(u"null")))
                var.get('tmp').put('words', var.get('Array').create(var.get('Math').callprop('ceil', (var.get(u"this").get('n')/Js(13.0)))))
                return var.get('tmp')
            PyJs__tmp_264_._set_name('_tmp')
            var.get('MPrime').get('prototype').put('_tmp', PyJs__tmp_264_)
            @Js
            def PyJs_ireduce_265_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ireduce':PyJs_ireduce_265_}, var)
                var.registers(['num', 'rlen', 'r', 'cmp'])
                var.put('r', var.get('num'))
                pass
                while 1:
                    var.get(u"this").callprop('split', var.get('r'), var.get(u"this").get('tmp'))
                    var.put('r', var.get(u"this").callprop('imulK', var.get('r')))
                    var.put('r', var.get('r').callprop('iadd', var.get(u"this").get('tmp')))
                    var.put('rlen', var.get('r').callprop('bitLength'))
                    if not (var.get('rlen')>var.get(u"this").get('n')):
                        break
                var.put('cmp', ((-Js(1.0)) if (var.get('rlen')<var.get(u"this").get('n')) else var.get('r').callprop('ucmp', var.get(u"this").get('p'))))
                if _seq(var.get('cmp'),Js(0.0)):
                    var.get('r').get('words').put('0', Js(0.0))
                    var.get('r').put('length', Js(1.0))
                else:
                    if (var.get('cmp')>Js(0.0)):
                        var.get('r').callprop('isub', var.get(u"this").get('p'))
                    else:
                        if PyJsStrictNeq(var.get('r').get('strip'),var.get('undefined')):
                            var.get('r').callprop('strip')
                        else:
                            var.get('r').callprop('_strip')
                return var.get('r')
            PyJs_ireduce_265_._set_name('ireduce')
            var.get('MPrime').get('prototype').put('ireduce', PyJs_ireduce_265_)
            @Js
            def PyJs_split_266_(input, out, this, arguments, var=var):
                var = Scope({'input':input, 'out':out, 'this':this, 'arguments':arguments, 'split':PyJs_split_266_}, var)
                var.registers(['out', 'input'])
                var.get('input').callprop('iushrn', var.get(u"this").get('n'), Js(0.0), var.get('out'))
            PyJs_split_266_._set_name('split')
            var.get('MPrime').get('prototype').put('split', PyJs_split_266_)
            @Js
            def PyJs_imulK_267_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imulK':PyJs_imulK_267_}, var)
                var.registers(['num'])
                return var.get('num').callprop('imul', var.get(u"this").get('k'))
            PyJs_imulK_267_._set_name('imulK')
            var.get('MPrime').get('prototype').put('imulK', PyJs_imulK_267_)
            pass
            var.get('inherits')(var.get('K256'), var.get('MPrime'))
            @Js
            def PyJs_split_268_(input, output, this, arguments, var=var):
                var = Scope({'input':input, 'output':output, 'this':this, 'arguments':arguments, 'split':PyJs_split_268_}, var)
                var.registers(['outLen', 'i', 'next', 'input', 'output', 'mask', 'prev'])
                var.put('mask', Js(4194303))
                var.put('outLen', var.get('Math').callprop('min', var.get('input').get('length'), Js(9.0)))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('outLen')):
                    try:
                        var.get('output').get('words').put(var.get('i'), var.get('input').get('words').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('output').put('length', var.get('outLen'))
                if (var.get('input').get('length')<=Js(9.0)):
                    var.get('input').get('words').put('0', Js(0.0))
                    var.get('input').put('length', Js(1.0))
                    return var.get('undefined')
                var.put('prev', var.get('input').get('words').get('9'))
                var.get('output').get('words').put((var.get('output').put('length',Js(var.get('output').get('length').to_number())+Js(1))-Js(1)), (var.get('prev')&var.get('mask')))
                #for JS loop
                var.put('i', Js(10.0))
                while (var.get('i')<var.get('input').get('length')):
                    try:
                        var.put('next', (var.get('input').get('words').get(var.get('i'))|Js(0.0)))
                        var.get('input').get('words').put((var.get('i')-Js(10.0)), (((var.get('next')&var.get('mask'))<<Js(4.0))|PyJsBshift(var.get('prev'),Js(22.0))))
                        var.put('prev', var.get('next'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('prev', Js(22.0), '>>>')
                var.get('input').get('words').put((var.get('i')-Js(10.0)), var.get('prev'))
                if (_seq(var.get('prev'),Js(0.0)) and (var.get('input').get('length')>Js(10.0))):
                    var.get('input').put('length', Js(10.0), '-')
                else:
                    var.get('input').put('length', Js(9.0), '-')
            PyJs_split_268_._set_name('split')
            var.get('K256').get('prototype').put('split', PyJs_split_268_)
            @Js
            def PyJs_imulK_269_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imulK':PyJs_imulK_269_}, var)
                var.registers(['i', 'w', 'num', 'lo'])
                var.get('num').get('words').put(var.get('num').get('length'), Js(0.0))
                var.get('num').get('words').put((var.get('num').get('length')+Js(1.0)), Js(0.0))
                var.get('num').put('length', Js(2.0), '+')
                var.put('lo', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('num').get('length')):
                    try:
                        var.put('w', (var.get('num').get('words').get(var.get('i'))|Js(0.0)))
                        var.put('lo', (var.get('w')*Js(977)), '+')
                        var.get('num').get('words').put(var.get('i'), (var.get('lo')&Js(67108863)))
                        var.put('lo', ((var.get('w')*Js(64))+((var.get('lo')/Js(67108864))|Js(0.0))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if _seq(var.get('num').get('words').get((var.get('num').get('length')-Js(1.0))),Js(0.0)):
                    (var.get('num').put('length',Js(var.get('num').get('length').to_number())-Js(1))+Js(1))
                    if _seq(var.get('num').get('words').get((var.get('num').get('length')-Js(1.0))),Js(0.0)):
                        (var.get('num').put('length',Js(var.get('num').get('length').to_number())-Js(1))+Js(1))
                return var.get('num')
            PyJs_imulK_269_._set_name('imulK')
            var.get('K256').get('prototype').put('imulK', PyJs_imulK_269_)
            pass
            var.get('inherits')(var.get('P224'), var.get('MPrime'))
            pass
            var.get('inherits')(var.get('P192'), var.get('MPrime'))
            pass
            var.get('inherits')(var.get('P25519'), var.get('MPrime'))
            @Js
            def PyJs_imulK_270_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imulK':PyJs_imulK_270_}, var)
                var.registers(['i', 'num', 'lo', 'hi', 'carry'])
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('num').get('length')):
                    try:
                        var.put('hi', (((var.get('num').get('words').get(var.get('i'))|Js(0.0))*Js(19))+var.get('carry')))
                        var.put('lo', (var.get('hi')&Js(67108863)))
                        var.put('hi', Js(26.0), '>>>')
                        var.get('num').get('words').put(var.get('i'), var.get('lo'))
                        var.put('carry', var.get('hi'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get('num').get('words').put((var.get('num').put('length',Js(var.get('num').get('length').to_number())+Js(1))-Js(1)), var.get('carry'))
                return var.get('num')
            PyJs_imulK_270_._set_name('imulK')
            var.get('P25519').get('prototype').put('imulK', PyJs_imulK_270_)
            @Js
            def PyJs_prime_271_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments, 'prime':PyJs_prime_271_}, var)
                var.registers(['name', 'prime'])
                if var.get('primes').get(var.get('name')):
                    return var.get('primes').get(var.get('name'))
                pass
                if _seq(var.get('name'),Js('k256')):
                    var.put('prime', var.get('K256').create())
                else:
                    if _seq(var.get('name'),Js('p224')):
                        var.put('prime', var.get('P224').create())
                    else:
                        if _seq(var.get('name'),Js('p192')):
                            var.put('prime', var.get('P192').create())
                        else:
                            if _seq(var.get('name'),Js('p25519')):
                                var.put('prime', var.get('P25519').create())
                            else:
                                PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown prime ')+var.get('name'))))
                                raise PyJsTempException
                var.get('primes').put(var.get('name'), var.get('prime'))
                return var.get('prime')
            PyJs_prime_271_._set_name('prime')
            var.get('BN').put('_prime', PyJs_prime_271_)
            pass
            @Js
            def PyJs__verify1_272_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, '_verify1':PyJs__verify1_272_}, var)
                var.registers(['a'])
                var.get('assert')(_seq(var.get('a').get('negative'),Js(0.0)), Js('red works only with positives'))
                var.get('assert')(var.get('a').get('red'), Js('red works only with red numbers'))
            PyJs__verify1_272_._set_name('_verify1')
            var.get('Red').get('prototype').put('_verify1', PyJs__verify1_272_)
            @Js
            def PyJs__verify2_273_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, '_verify2':PyJs__verify2_273_}, var)
                var.registers(['a', 'b'])
                var.get('assert')(_seq((var.get('a').get('negative')|var.get('b').get('negative')),Js(0.0)), Js('red works only with positives'))
                var.get('assert')((var.get('a').get('red') and _seq(var.get('a').get('red'),var.get('b').get('red'))), Js('red works only with red numbers'))
            PyJs__verify2_273_._set_name('_verify2')
            var.get('Red').get('prototype').put('_verify2', PyJs__verify2_273_)
            @Js
            def PyJs_imod_274_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'imod':PyJs_imod_274_}, var)
                var.registers(['a'])
                if var.get(u"this").get('prime'):
                    return var.get(u"this").get('prime').callprop('ireduce', var.get('a')).callprop('_forceRed', var.get(u"this"))
                return var.get('a').callprop('umod', var.get(u"this").get('m')).callprop('_forceRed', var.get(u"this"))
            PyJs_imod_274_._set_name('imod')
            var.get('Red').get('prototype').put('imod', PyJs_imod_274_)
            @Js
            def PyJs_neg_275_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'neg':PyJs_neg_275_}, var)
                var.registers(['a'])
                if var.get('a').callprop('isZero'):
                    return var.get('a').callprop('clone')
                return var.get(u"this").get('m').callprop('sub', var.get('a')).callprop('_forceRed', var.get(u"this"))
            PyJs_neg_275_._set_name('neg')
            var.get('Red').get('prototype').put('neg', PyJs_neg_275_)
            @Js
            def PyJs_add_276_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'add':PyJs_add_276_}, var)
                var.registers(['b', 'a', 'res'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                var.put('res', var.get('a').callprop('add', var.get('b')))
                if (var.get('res').callprop('cmp', var.get(u"this").get('m'))>=Js(0.0)):
                    var.get('res').callprop('isub', var.get(u"this").get('m'))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_add_276_._set_name('add')
            var.get('Red').get('prototype').put('add', PyJs_add_276_)
            @Js
            def PyJs_iadd_277_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'iadd':PyJs_iadd_277_}, var)
                var.registers(['b', 'a', 'res'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                var.put('res', var.get('a').callprop('iadd', var.get('b')))
                if (var.get('res').callprop('cmp', var.get(u"this").get('m'))>=Js(0.0)):
                    var.get('res').callprop('isub', var.get(u"this").get('m'))
                return var.get('res')
            PyJs_iadd_277_._set_name('iadd')
            var.get('Red').get('prototype').put('iadd', PyJs_iadd_277_)
            @Js
            def PyJs_sub_278_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'sub':PyJs_sub_278_}, var)
                var.registers(['b', 'a', 'res'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                var.put('res', var.get('a').callprop('sub', var.get('b')))
                if (var.get('res').callprop('cmpn', Js(0.0))<Js(0.0)):
                    var.get('res').callprop('iadd', var.get(u"this").get('m'))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_sub_278_._set_name('sub')
            var.get('Red').get('prototype').put('sub', PyJs_sub_278_)
            @Js
            def PyJs_isub_279_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'isub':PyJs_isub_279_}, var)
                var.registers(['b', 'a', 'res'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                var.put('res', var.get('a').callprop('isub', var.get('b')))
                if (var.get('res').callprop('cmpn', Js(0.0))<Js(0.0)):
                    var.get('res').callprop('iadd', var.get(u"this").get('m'))
                return var.get('res')
            PyJs_isub_279_._set_name('isub')
            var.get('Red').get('prototype').put('isub', PyJs_isub_279_)
            @Js
            def PyJs_shl_280_(a, num, this, arguments, var=var):
                var = Scope({'a':a, 'num':num, 'this':this, 'arguments':arguments, 'shl':PyJs_shl_280_}, var)
                var.registers(['num', 'a'])
                var.get(u"this").callprop('_verify1', var.get('a'))
                return var.get(u"this").callprop('imod', var.get('a').callprop('ushln', var.get('num')))
            PyJs_shl_280_._set_name('shl')
            var.get('Red').get('prototype').put('shl', PyJs_shl_280_)
            @Js
            def PyJs_imul_281_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'imul':PyJs_imul_281_}, var)
                var.registers(['a', 'b'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                return var.get(u"this").callprop('imod', var.get('a').callprop('imul', var.get('b')))
            PyJs_imul_281_._set_name('imul')
            var.get('Red').get('prototype').put('imul', PyJs_imul_281_)
            @Js
            def PyJs_mul_282_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_282_}, var)
                var.registers(['a', 'b'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                return var.get(u"this").callprop('imod', var.get('a').callprop('mul', var.get('b')))
            PyJs_mul_282_._set_name('mul')
            var.get('Red').get('prototype').put('mul', PyJs_mul_282_)
            @Js
            def PyJs_isqr_283_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'isqr':PyJs_isqr_283_}, var)
                var.registers(['a'])
                return var.get(u"this").callprop('imul', var.get('a'), var.get('a').callprop('clone'))
            PyJs_isqr_283_._set_name('isqr')
            var.get('Red').get('prototype').put('isqr', PyJs_isqr_283_)
            @Js
            def PyJs_sqr_284_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'sqr':PyJs_sqr_284_}, var)
                var.registers(['a'])
                return var.get(u"this").callprop('mul', var.get('a'), var.get('a'))
            PyJs_sqr_284_._set_name('sqr')
            var.get('Red').get('prototype').put('sqr', PyJs_sqr_284_)
            @Js
            def PyJs_sqrt_285_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'sqrt':PyJs_sqrt_285_}, var)
                var.registers(['a', 'z', 'r', 'tmp', 'i', 'mod3', 'one', 'nOne', 'c', 't', 'lpow', 'pow', 'm', 'b', 'q', 's'])
                if var.get('a').callprop('isZero'):
                    return var.get('a').callprop('clone')
                var.put('mod3', var.get(u"this").get('m').callprop('andln', Js(3.0)))
                var.get('assert')(_seq((var.get('mod3')%Js(2.0)),Js(1.0)))
                if _seq(var.get('mod3'),Js(3.0)):
                    var.put('pow', var.get(u"this").get('m').callprop('add', var.get('BN').create(Js(1.0))).callprop('iushrn', Js(2.0)))
                    return var.get(u"this").callprop('pow', var.get('a'), var.get('pow'))
                var.put('q', var.get(u"this").get('m').callprop('subn', Js(1.0)))
                var.put('s', Js(0.0))
                while (var.get('q').callprop('isZero').neg() and _seq(var.get('q').callprop('andln', Js(1.0)),Js(0.0))):
                    (var.put('s',Js(var.get('s').to_number())+Js(1))-Js(1))
                    var.get('q').callprop('iushrn', Js(1.0))
                var.get('assert')(var.get('q').callprop('isZero').neg())
                var.put('one', var.get('BN').create(Js(1.0)).callprop('toRed', var.get(u"this")))
                var.put('nOne', var.get('one').callprop('redNeg'))
                var.put('lpow', var.get(u"this").get('m').callprop('subn', Js(1.0)).callprop('iushrn', Js(1.0)))
                var.put('z', var.get(u"this").get('m').callprop('bitLength'))
                var.put('z', var.get('BN').create(((Js(2.0)*var.get('z'))*var.get('z'))).callprop('toRed', var.get(u"this")))
                while PyJsStrictNeq(var.get(u"this").callprop('pow', var.get('z'), var.get('lpow')).callprop('cmp', var.get('nOne')),Js(0.0)):
                    var.get('z').callprop('redIAdd', var.get('nOne'))
                var.put('c', var.get(u"this").callprop('pow', var.get('z'), var.get('q')))
                var.put('r', var.get(u"this").callprop('pow', var.get('a'), var.get('q').callprop('addn', Js(1.0)).callprop('iushrn', Js(1.0))))
                var.put('t', var.get(u"this").callprop('pow', var.get('a'), var.get('q')))
                var.put('m', var.get('s'))
                while PyJsStrictNeq(var.get('t').callprop('cmp', var.get('one')),Js(0.0)):
                    var.put('tmp', var.get('t'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while PyJsStrictNeq(var.get('tmp').callprop('cmp', var.get('one')),Js(0.0)):
                        try:
                            var.put('tmp', var.get('tmp').callprop('redSqr'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('assert')((var.get('i')<var.get('m')))
                    var.put('b', var.get(u"this").callprop('pow', var.get('c'), var.get('BN').create(Js(1.0)).callprop('iushln', ((var.get('m')-var.get('i'))-Js(1.0)))))
                    var.put('r', var.get('r').callprop('redMul', var.get('b')))
                    var.put('c', var.get('b').callprop('redSqr'))
                    var.put('t', var.get('t').callprop('redMul', var.get('c')))
                    var.put('m', var.get('i'))
                return var.get('r')
            PyJs_sqrt_285_._set_name('sqrt')
            var.get('Red').get('prototype').put('sqrt', PyJs_sqrt_285_)
            @Js
            def PyJs_invm_286_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'invm':PyJs_invm_286_}, var)
                var.registers(['a', 'inv'])
                var.put('inv', var.get('a').callprop('_invmp', var.get(u"this").get('m')))
                if PyJsStrictNeq(var.get('inv').get('negative'),Js(0.0)):
                    var.get('inv').put('negative', Js(0.0))
                    return var.get(u"this").callprop('imod', var.get('inv')).callprop('redNeg')
                else:
                    return var.get(u"this").callprop('imod', var.get('inv'))
            PyJs_invm_286_._set_name('invm')
            var.get('Red').get('prototype').put('invm', PyJs_invm_286_)
            @Js
            def PyJs_pow_287_(a, num, this, arguments, var=var):
                var = Scope({'a':a, 'num':num, 'this':this, 'arguments':arguments, 'pow':PyJs_pow_287_}, var)
                var.registers(['a', 'bit', 'j', 'i', 'num', 'windowSize', 'start', 'word', 'current', 'currentLen', 'wnd', 'res'])
                if var.get('num').callprop('isZero'):
                    return var.get('BN').create(Js(1.0)).callprop('toRed', var.get(u"this"))
                if _seq(var.get('num').callprop('cmpn', Js(1.0)),Js(0.0)):
                    return var.get('a').callprop('clone')
                var.put('windowSize', Js(4.0))
                var.put('wnd', var.get('Array').create((Js(1.0)<<var.get('windowSize'))))
                var.get('wnd').put('0', var.get('BN').create(Js(1.0)).callprop('toRed', var.get(u"this")))
                var.get('wnd').put('1', var.get('a'))
                #for JS loop
                var.put('i', Js(2.0))
                while (var.get('i')<var.get('wnd').get('length')):
                    try:
                        var.get('wnd').put(var.get('i'), var.get(u"this").callprop('mul', var.get('wnd').get((var.get('i')-Js(1.0))), var.get('a')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('res', var.get('wnd').get('0'))
                var.put('current', Js(0.0))
                var.put('currentLen', Js(0.0))
                var.put('start', (var.get('num').callprop('bitLength')%Js(26.0)))
                if _seq(var.get('start'),Js(0.0)):
                    var.put('start', Js(26.0))
                #for JS loop
                var.put('i', (var.get('num').get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('word', var.get('num').get('words').get(var.get('i')))
                        #for JS loop
                        var.put('j', (var.get('start')-Js(1.0)))
                        while (var.get('j')>=Js(0.0)):
                            try:
                                var.put('bit', ((var.get('word')>>var.get('j'))&Js(1.0)))
                                if PyJsStrictNeq(var.get('res'),var.get('wnd').get('0')):
                                    var.put('res', var.get(u"this").callprop('sqr', var.get('res')))
                                if (_seq(var.get('bit'),Js(0.0)) and _seq(var.get('current'),Js(0.0))):
                                    var.put('currentLen', Js(0.0))
                                    continue
                                var.put('current', Js(1.0), '<<')
                                var.put('current', var.get('bit'), '|')
                                (var.put('currentLen',Js(var.get('currentLen').to_number())+Js(1))-Js(1))
                                if (PyJsStrictNeq(var.get('currentLen'),var.get('windowSize')) and (PyJsStrictNeq(var.get('i'),Js(0.0)) or PyJsStrictNeq(var.get('j'),Js(0.0)))):
                                    continue
                                var.put('res', var.get(u"this").callprop('mul', var.get('res'), var.get('wnd').get(var.get('current'))))
                                var.put('currentLen', Js(0.0))
                                var.put('current', Js(0.0))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))
                        var.put('start', Js(26.0))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                return var.get('res')
            PyJs_pow_287_._set_name('pow')
            var.get('Red').get('prototype').put('pow', PyJs_pow_287_)
            @Js
            def PyJs_convertTo_288_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'convertTo':PyJs_convertTo_288_}, var)
                var.registers(['num', 'r'])
                var.put('r', var.get('num').callprop('umod', var.get(u"this").get('m')))
                return (var.get('r').callprop('clone') if _seq(var.get('r'),var.get('num')) else var.get('r'))
            PyJs_convertTo_288_._set_name('convertTo')
            var.get('Red').get('prototype').put('convertTo', PyJs_convertTo_288_)
            @Js
            def PyJs_convertFrom_289_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'convertFrom':PyJs_convertFrom_289_}, var)
                var.registers(['num', 'res'])
                var.put('res', var.get('num').callprop('clone'))
                var.get('res').put('red', var.get(u"null"))
                return var.get('res')
            PyJs_convertFrom_289_._set_name('convertFrom')
            var.get('Red').get('prototype').put('convertFrom', PyJs_convertFrom_289_)
            @Js
            def PyJs_mont_290_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'mont':PyJs_mont_290_}, var)
                var.registers(['num'])
                return var.get('Mont').create(var.get('num'))
            PyJs_mont_290_._set_name('mont')
            var.get('BN').put('mont', PyJs_mont_290_)
            pass
            var.get('inherits')(var.get('Mont'), var.get('Red'))
            @Js
            def PyJs_convertTo_291_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'convertTo':PyJs_convertTo_291_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('imod', var.get('num').callprop('ushln', var.get(u"this").get('shift')))
            PyJs_convertTo_291_._set_name('convertTo')
            var.get('Mont').get('prototype').put('convertTo', PyJs_convertTo_291_)
            @Js
            def PyJs_convertFrom_292_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'convertFrom':PyJs_convertFrom_292_}, var)
                var.registers(['num', 'r'])
                var.put('r', var.get(u"this").callprop('imod', var.get('num').callprop('mul', var.get(u"this").get('rinv'))))
                var.get('r').put('red', var.get(u"null"))
                return var.get('r')
            PyJs_convertFrom_292_._set_name('convertFrom')
            var.get('Mont').get('prototype').put('convertFrom', PyJs_convertFrom_292_)
            @Js
            def PyJs_imul_293_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'imul':PyJs_imul_293_}, var)
                var.registers(['u', 'a', 'c', 'b', 't', 'res'])
                if (var.get('a').callprop('isZero') or var.get('b').callprop('isZero')):
                    var.get('a').get('words').put('0', Js(0.0))
                    var.get('a').put('length', Js(1.0))
                    return var.get('a')
                var.put('t', var.get('a').callprop('imul', var.get('b')))
                var.put('c', var.get('t').callprop('maskn', var.get(u"this").get('shift')).callprop('mul', var.get(u"this").get('minv')).callprop('imaskn', var.get(u"this").get('shift')).callprop('mul', var.get(u"this").get('m')))
                var.put('u', var.get('t').callprop('isub', var.get('c')).callprop('iushrn', var.get(u"this").get('shift')))
                var.put('res', var.get('u'))
                if (var.get('u').callprop('cmp', var.get(u"this").get('m'))>=Js(0.0)):
                    var.put('res', var.get('u').callprop('isub', var.get(u"this").get('m')))
                else:
                    if (var.get('u').callprop('cmpn', Js(0.0))<Js(0.0)):
                        var.put('res', var.get('u').callprop('iadd', var.get(u"this").get('m')))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_imul_293_._set_name('imul')
            var.get('Mont').get('prototype').put('imul', PyJs_imul_293_)
            @Js
            def PyJs_mul_294_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_294_}, var)
                var.registers(['u', 'a', 'c', 'b', 't', 'res'])
                if (var.get('a').callprop('isZero') or var.get('b').callprop('isZero')):
                    return var.get('BN').create(Js(0.0)).callprop('_forceRed', var.get(u"this"))
                var.put('t', var.get('a').callprop('mul', var.get('b')))
                var.put('c', var.get('t').callprop('maskn', var.get(u"this").get('shift')).callprop('mul', var.get(u"this").get('minv')).callprop('imaskn', var.get(u"this").get('shift')).callprop('mul', var.get(u"this").get('m')))
                var.put('u', var.get('t').callprop('isub', var.get('c')).callprop('iushrn', var.get(u"this").get('shift')))
                var.put('res', var.get('u'))
                if (var.get('u').callprop('cmp', var.get(u"this").get('m'))>=Js(0.0)):
                    var.put('res', var.get('u').callprop('isub', var.get(u"this").get('m')))
                else:
                    if (var.get('u').callprop('cmpn', Js(0.0))<Js(0.0)):
                        var.put('res', var.get('u').callprop('iadd', var.get(u"this").get('m')))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_mul_294_._set_name('mul')
            var.get('Mont').get('prototype').put('mul', PyJs_mul_294_)
            @Js
            def PyJs_invm_295_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'invm':PyJs_invm_295_}, var)
                var.registers(['a', 'res'])
                var.put('res', var.get(u"this").callprop('imod', var.get('a').callprop('_invmp', var.get(u"this").get('m')).callprop('mul', var.get(u"this").get('r2'))))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_invm_295_._set_name('invm')
            var.get('Mont').get('prototype').put('invm', PyJs_invm_295_)
        PyJs_anonymous_124_._set_name('anonymous')
        PyJs_anonymous_124_((_seq(var.get('module',throw=False).typeof(),Js('undefined')) or var.get('module')), var.get(u"this"))
    PyJs_anonymous_123_._set_name('anonymous')
    @Js
    def PyJs_anonymous_296_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_297_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_298_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['DEFINE_PROPERTY', 'define'])
                @Js
                def PyJsHoisted_define_(O, key, value, this, arguments, var=var):
                    var = Scope({'O':O, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key', 'value', 'O'])
                    (var.get('O').get(var.get('key')) or var.get('Object').callprop(var.get('DEFINE_PROPERTY'), var.get('O'), var.get('key'), Js({'writable':Js(True),'configurable':Js(True),'value':var.get('value')})))
                PyJsHoisted_define_.func_name = 'define'
                var.put('define', PyJsHoisted_define_)
                Js('use strict')
                var.get('require')(Js('core-js/shim'))
                var.get('require')(Js('regenerator-runtime/runtime'))
                var.get('require')(Js('core-js/fn/regexp/escape'))
                if var.get('global').get('_babelPolyfill'):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('only one instance of babel-polyfill is allowed')))
                    raise PyJsTempException
                var.get('global').put('_babelPolyfill', Js(True))
                var.put('DEFINE_PROPERTY', Js('defineProperty'))
                pass
                var.get('define')(var.get('String').get('prototype'), Js('padLeft'), Js('').get('padStart'))
                var.get('define')(var.get('String').get('prototype'), Js('padRight'), Js('').get('padEnd'))
                @Js
                def PyJs_anonymous_299_(key, this, arguments, var=var):
                    var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key'])
                    (Js([]).get(var.get('key')) and var.get('define')(var.get('Array'), var.get('key'), var.get('Function').get('call').callprop('bind', Js([]).get(var.get('key')))))
                PyJs_anonymous_299_._set_name('anonymous')
                Js('pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill').callprop('split', Js(',')).callprop('forEach', PyJs_anonymous_299_)
            PyJs_anonymous_298_._set_name('anonymous')
            PyJs_anonymous_298_.callprop('call', var.get(u"this"))
        PyJs_anonymous_297_._set_name('anonymous')
        PyJs_anonymous_297_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_296_._set_name('anonymous')
    @Js
    def PyJs_anonymous_300_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_301_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_302_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                def PyJs_LONG_303_(var=var):
                    return (var.get('global') if _seq((Js('undefined') if _seq(var.get('global',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('global'))),Js('object')) else (var.get('window') if _seq((Js('undefined') if _seq(var.get('window',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('window'))),Js('object')) else (var.get('self') if _seq((Js('undefined') if _seq(var.get('self',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('self'))),Js('object')) else var.get(u"this"))))
                @Js
                def PyJs_anonymous_304_(PyJsArg_676c6f62616c_, this, arguments, var=var):
                    var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
                    var.registers(['runtime', 'GeneratorFunctionPrototype', 'GenStateExecuting', 'Generator', 'toStringTagSymbol', 'getProto', 'IteratorPrototype', 'GeneratorFunction', 'asyncIteratorSymbol', 'makeInvokeMethod', 'defineIteratorMethods', 'undefined', 'GenStateSuspendedStart', 'maybeInvokeDelegate', 'iteratorSymbol', 'pushTryEntry', 'Gp', 'wrap', '$Symbol', 'Context', 'hasOwn', 'inModule', 'GenStateCompleted', 'doneResult', 'AsyncIterator', 'NativeIteratorPrototype', 'resetTryEntry', 'Op', 'values', 'ContinueSentinel', 'GenStateSuspendedYield', 'global', 'tryCatch'])
                    @Js
                    def PyJsHoisted_wrap_(innerFn, outerFn, self, tryLocsList, this, arguments, var=var):
                        var = Scope({'innerFn':innerFn, 'outerFn':outerFn, 'self':self, 'tryLocsList':tryLocsList, 'this':this, 'arguments':arguments}, var)
                        var.registers(['self', 'outerFn', 'tryLocsList', 'protoGenerator', 'innerFn', 'context', 'generator'])
                        var.put('protoGenerator', (var.get('outerFn') if (var.get('outerFn') and var.get('outerFn').get('prototype').instanceof(var.get('Generator'))) else var.get('Generator')))
                        var.put('generator', var.get('Object').callprop('create', var.get('protoGenerator').get('prototype')))
                        var.put('context', var.get('Context').create((var.get('tryLocsList') or Js([]))))
                        var.get('generator').put('_invoke', var.get('makeInvokeMethod')(var.get('innerFn'), var.get('self'), var.get('context')))
                        return var.get('generator')
                    PyJsHoisted_wrap_.func_name = 'wrap'
                    var.put('wrap', PyJsHoisted_wrap_)
                    @Js
                    def PyJsHoisted_tryCatch_(fn, obj, arg, this, arguments, var=var):
                        var = Scope({'fn':fn, 'obj':obj, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fn', 'arg', 'obj'])
                        try:
                            return Js({'type':Js('normal'),'arg':var.get('fn').callprop('call', var.get('obj'), var.get('arg'))})
                        except PyJsException as PyJsTempException:
                            PyJsHolder_657272_88935454 = var.own.get('err')
                            var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                            try:
                                return Js({'type':Js('throw'),'arg':var.get('err')})
                            finally:
                                if PyJsHolder_657272_88935454 is not None:
                                    var.own['err'] = PyJsHolder_657272_88935454
                                else:
                                    del var.own['err']
                                del PyJsHolder_657272_88935454
                    PyJsHoisted_tryCatch_.func_name = 'tryCatch'
                    var.put('tryCatch', PyJsHoisted_tryCatch_)
                    @Js
                    def PyJsHoisted_Generator_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_Generator_.func_name = 'Generator'
                    var.put('Generator', PyJsHoisted_Generator_)
                    @Js
                    def PyJsHoisted_GeneratorFunction_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_GeneratorFunction_.func_name = 'GeneratorFunction'
                    var.put('GeneratorFunction', PyJsHoisted_GeneratorFunction_)
                    @Js
                    def PyJsHoisted_GeneratorFunctionPrototype_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_GeneratorFunctionPrototype_.func_name = 'GeneratorFunctionPrototype'
                    var.put('GeneratorFunctionPrototype', PyJsHoisted_GeneratorFunctionPrototype_)
                    @Js
                    def PyJsHoisted_defineIteratorMethods_(prototype, this, arguments, var=var):
                        var = Scope({'prototype':prototype, 'this':this, 'arguments':arguments}, var)
                        var.registers(['prototype'])
                        @Js
                        def PyJs_anonymous_306_(method, this, arguments, var=var):
                            var = Scope({'method':method, 'this':this, 'arguments':arguments}, var)
                            var.registers(['method'])
                            @Js
                            def PyJs_anonymous_307_(arg, this, arguments, var=var):
                                var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                                var.registers(['arg'])
                                return var.get(u"this").callprop('_invoke', var.get('method'), var.get('arg'))
                            PyJs_anonymous_307_._set_name('anonymous')
                            var.get('prototype').put(var.get('method'), PyJs_anonymous_307_)
                        PyJs_anonymous_306_._set_name('anonymous')
                        Js([Js('next'), Js('throw'), Js('return')]).callprop('forEach', PyJs_anonymous_306_)
                    PyJsHoisted_defineIteratorMethods_.func_name = 'defineIteratorMethods'
                    var.put('defineIteratorMethods', PyJsHoisted_defineIteratorMethods_)
                    @Js
                    def PyJsHoisted_AsyncIterator_(generator, this, arguments, var=var):
                        var = Scope({'generator':generator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['previousPromise', 'generator', 'invoke', 'enqueue'])
                        @Js
                        def PyJsHoisted_invoke_(method, arg, resolve, reject, this, arguments, var=var):
                            var = Scope({'method':method, 'arg':arg, 'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                            var.registers(['reject', 'arg', 'value', 'record', 'method', 'resolve', 'result'])
                            var.put('record', var.get('tryCatch')(var.get('generator').get(var.get('method')), var.get('generator'), var.get('arg')))
                            if _seq(var.get('record').get('type'),Js('throw')):
                                var.get('reject')(var.get('record').get('arg'))
                            else:
                                var.put('result', var.get('record').get('arg'))
                                var.put('value', var.get('result').get('value'))
                                if ((var.get('value') and _seq((Js('undefined') if _seq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))),Js('object'))) and var.get('hasOwn').callprop('call', var.get('value'), Js('__await'))):
                                    @Js
                                    def PyJs_anonymous_311_(value, this, arguments, var=var):
                                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['value'])
                                        var.get('invoke')(Js('next'), var.get('value'), var.get('resolve'), var.get('reject'))
                                    PyJs_anonymous_311_._set_name('anonymous')
                                    @Js
                                    def PyJs_anonymous_312_(err, this, arguments, var=var):
                                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                        var.registers(['err'])
                                        var.get('invoke')(Js('throw'), var.get('err'), var.get('resolve'), var.get('reject'))
                                    PyJs_anonymous_312_._set_name('anonymous')
                                    return var.get('Promise').callprop('resolve', var.get('value').get('__await')).callprop('then', PyJs_anonymous_311_, PyJs_anonymous_312_)
                                @Js
                                def PyJs_anonymous_313_(unwrapped, this, arguments, var=var):
                                    var = Scope({'unwrapped':unwrapped, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['unwrapped'])
                                    var.get('result').put('value', var.get('unwrapped'))
                                    var.get('resolve')(var.get('result'))
                                PyJs_anonymous_313_._set_name('anonymous')
                                return var.get('Promise').callprop('resolve', var.get('value')).callprop('then', PyJs_anonymous_313_, var.get('reject'))
                        PyJsHoisted_invoke_.func_name = 'invoke'
                        var.put('invoke', PyJsHoisted_invoke_)
                        @Js
                        def PyJsHoisted_enqueue_(method, arg, this, arguments, var=var):
                            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                            var.registers(['arg', 'callInvokeWithMethodAndArg', 'method'])
                            @Js
                            def PyJsHoisted_callInvokeWithMethodAndArg_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                @Js
                                def PyJs_anonymous_314_(resolve, reject, this, arguments, var=var):
                                    var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['resolve', 'reject'])
                                    var.get('invoke')(var.get('method'), var.get('arg'), var.get('resolve'), var.get('reject'))
                                PyJs_anonymous_314_._set_name('anonymous')
                                return var.get('Promise').create(PyJs_anonymous_314_)
                            PyJsHoisted_callInvokeWithMethodAndArg_.func_name = 'callInvokeWithMethodAndArg'
                            var.put('callInvokeWithMethodAndArg', PyJsHoisted_callInvokeWithMethodAndArg_)
                            pass
                            return var.put('previousPromise', (var.get('previousPromise').callprop('then', var.get('callInvokeWithMethodAndArg'), var.get('callInvokeWithMethodAndArg')) if var.get('previousPromise') else var.get('callInvokeWithMethodAndArg')()))
                        PyJsHoisted_enqueue_.func_name = 'enqueue'
                        var.put('enqueue', PyJsHoisted_enqueue_)
                        pass
                        if (_seq(var.get('_typeof')(var.get('global').get('process')),Js('object')) and var.get('global').get('process').get('domain')):
                            var.put('invoke', var.get('global').get('process').get('domain').callprop('bind', var.get('invoke')))
                        pass
                        pass
                        var.get(u"this").put('_invoke', var.get('enqueue'))
                    PyJsHoisted_AsyncIterator_.func_name = 'AsyncIterator'
                    var.put('AsyncIterator', PyJsHoisted_AsyncIterator_)
                    @Js
                    def PyJsHoisted_makeInvokeMethod_(innerFn, self, context, this, arguments, var=var):
                        var = Scope({'innerFn':innerFn, 'self':self, 'context':context, 'this':this, 'arguments':arguments}, var)
                        var.registers(['state', 'innerFn', 'context', 'self'])
                        var.put('state', var.get('GenStateSuspendedStart'))
                        @Js
                        def PyJs_invoke_318_(method, arg, this, arguments, var=var):
                            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments, 'invoke':PyJs_invoke_318_}, var)
                            var.registers(['delegate', 'arg', 'record', 'method', 'delegateResult'])
                            if _seq(var.get('state'),var.get('GenStateExecuting')):
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('Generator is already running')))
                                raise PyJsTempException
                            if _seq(var.get('state'),var.get('GenStateCompleted')):
                                if _seq(var.get('method'),Js('throw')):
                                    PyJsTempException = JsToPyException(var.get('arg'))
                                    raise PyJsTempException
                                return var.get('doneResult')()
                            var.get('context').put('method', var.get('method'))
                            var.get('context').put('arg', var.get('arg'))
                            while Js(True):
                                var.put('delegate', var.get('context').get('delegate'))
                                if var.get('delegate'):
                                    var.put('delegateResult', var.get('maybeInvokeDelegate')(var.get('delegate'), var.get('context')))
                                    if var.get('delegateResult'):
                                        if _seq(var.get('delegateResult'),var.get('ContinueSentinel')):
                                            continue
                                        return var.get('delegateResult')
                                if _seq(var.get('context').get('method'),Js('next')):
                                    var.get('context').put('sent', var.get('context').put('_sent', var.get('context').get('arg')))
                                else:
                                    if _seq(var.get('context').get('method'),Js('throw')):
                                        if _seq(var.get('state'),var.get('GenStateSuspendedStart')):
                                            var.put('state', var.get('GenStateCompleted'))
                                            PyJsTempException = JsToPyException(var.get('context').get('arg'))
                                            raise PyJsTempException
                                        var.get('context').callprop('dispatchException', var.get('context').get('arg'))
                                    else:
                                        if _seq(var.get('context').get('method'),Js('return')):
                                            var.get('context').callprop('abrupt', Js('return'), var.get('context').get('arg'))
                                var.put('state', var.get('GenStateExecuting'))
                                var.put('record', var.get('tryCatch')(var.get('innerFn'), var.get('self'), var.get('context')))
                                if _seq(var.get('record').get('type'),Js('normal')):
                                    var.put('state', (var.get('GenStateCompleted') if var.get('context').get('done') else var.get('GenStateSuspendedYield')))
                                    if _seq(var.get('record').get('arg'),var.get('ContinueSentinel')):
                                        continue
                                    return Js({'value':var.get('record').get('arg'),'done':var.get('context').get('done')})
                                else:
                                    if _seq(var.get('record').get('type'),Js('throw')):
                                        var.put('state', var.get('GenStateCompleted'))
                                        var.get('context').put('method', Js('throw'))
                                        var.get('context').put('arg', var.get('record').get('arg'))
                        PyJs_invoke_318_._set_name('invoke')
                        return PyJs_invoke_318_
                    PyJsHoisted_makeInvokeMethod_.func_name = 'makeInvokeMethod'
                    var.put('makeInvokeMethod', PyJsHoisted_makeInvokeMethod_)
                    @Js
                    def PyJsHoisted_maybeInvokeDelegate_(delegate, context, this, arguments, var=var):
                        var = Scope({'delegate':delegate, 'context':context, 'this':this, 'arguments':arguments}, var)
                        var.registers(['info', 'delegate', 'record', 'method', 'context'])
                        var.put('method', var.get('delegate').get('iterator').get(var.get('context').get('method')))
                        if _seq(var.get('method'),var.get('undefined')):
                            var.get('context').put('delegate', var.get(u"null"))
                            if _seq(var.get('context').get('method'),Js('throw')):
                                if var.get('delegate').get('iterator').get('return'):
                                    var.get('context').put('method', Js('return'))
                                    var.get('context').put('arg', var.get('undefined'))
                                    var.get('maybeInvokeDelegate')(var.get('delegate'), var.get('context'))
                                    if _seq(var.get('context').get('method'),Js('throw')):
                                        return var.get('ContinueSentinel')
                                var.get('context').put('method', Js('throw'))
                                var.get('context').put('arg', var.get('TypeError').create(Js("The iterator does not provide a 'throw' method")))
                            return var.get('ContinueSentinel')
                        var.put('record', var.get('tryCatch')(var.get('method'), var.get('delegate').get('iterator'), var.get('context').get('arg')))
                        if _seq(var.get('record').get('type'),Js('throw')):
                            var.get('context').put('method', Js('throw'))
                            var.get('context').put('arg', var.get('record').get('arg'))
                            var.get('context').put('delegate', var.get(u"null"))
                            return var.get('ContinueSentinel')
                        var.put('info', var.get('record').get('arg'))
                        if var.get('info').neg():
                            var.get('context').put('method', Js('throw'))
                            var.get('context').put('arg', var.get('TypeError').create(Js('iterator result is not an object')))
                            var.get('context').put('delegate', var.get(u"null"))
                            return var.get('ContinueSentinel')
                        if var.get('info').get('done'):
                            var.get('context').put(var.get('delegate').get('resultName'), var.get('info').get('value'))
                            var.get('context').put('next', var.get('delegate').get('nextLoc'))
                            if PyJsStrictNeq(var.get('context').get('method'),Js('return')):
                                var.get('context').put('method', Js('next'))
                                var.get('context').put('arg', var.get('undefined'))
                        else:
                            return var.get('info')
                        var.get('context').put('delegate', var.get(u"null"))
                        return var.get('ContinueSentinel')
                    PyJsHoisted_maybeInvokeDelegate_.func_name = 'maybeInvokeDelegate'
                    var.put('maybeInvokeDelegate', PyJsHoisted_maybeInvokeDelegate_)
                    @Js
                    def PyJsHoisted_pushTryEntry_(locs, this, arguments, var=var):
                        var = Scope({'locs':locs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entry', 'locs'])
                        var.put('entry', Js({'tryLoc':var.get('locs').get('0')}))
                        if var.get('locs').contains(Js(1.0)):
                            var.get('entry').put('catchLoc', var.get('locs').get('1'))
                        if var.get('locs').contains(Js(2.0)):
                            var.get('entry').put('finallyLoc', var.get('locs').get('2'))
                            var.get('entry').put('afterLoc', var.get('locs').get('3'))
                        var.get(u"this").get('tryEntries').callprop('push', var.get('entry'))
                    PyJsHoisted_pushTryEntry_.func_name = 'pushTryEntry'
                    var.put('pushTryEntry', PyJsHoisted_pushTryEntry_)
                    @Js
                    def PyJsHoisted_resetTryEntry_(entry, this, arguments, var=var):
                        var = Scope({'entry':entry, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entry', 'record'])
                        var.put('record', (var.get('entry').get('completion') or Js({})))
                        var.get('record').put('type', Js('normal'))
                        var.get('record').delete('arg')
                        var.get('entry').put('completion', var.get('record'))
                    PyJsHoisted_resetTryEntry_.func_name = 'resetTryEntry'
                    var.put('resetTryEntry', PyJsHoisted_resetTryEntry_)
                    @Js
                    def PyJsHoisted_Context_(tryLocsList, this, arguments, var=var):
                        var = Scope({'tryLocsList':tryLocsList, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tryLocsList'])
                        var.get(u"this").put('tryEntries', Js([Js({'tryLoc':Js('root')})]))
                        var.get('tryLocsList').callprop('forEach', var.get('pushTryEntry'), var.get(u"this"))
                        var.get(u"this").callprop('reset', Js(True))
                    PyJsHoisted_Context_.func_name = 'Context'
                    var.put('Context', PyJsHoisted_Context_)
                    @Js
                    def PyJsHoisted_values_(iterable, this, arguments, var=var):
                        var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i', 'iterable', 'next', 'iteratorMethod'])
                        if var.get('iterable'):
                            var.put('iteratorMethod', var.get('iterable').get(var.get('iteratorSymbol')))
                            if var.get('iteratorMethod'):
                                return var.get('iteratorMethod').callprop('call', var.get('iterable'))
                            if _seq(var.get('iterable').get('next').typeof(),Js('function')):
                                return var.get('iterable')
                            if var.get('isNaN')(var.get('iterable').get('length')).neg():
                                var.put('i', (-Js(1.0)))
                                @Js
                                def PyJs_next_323_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_323_}, var)
                                    var.registers([])
                                    while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('iterable').get('length')):
                                        if var.get('hasOwn').callprop('call', var.get('iterable'), var.get('i')):
                                            var.get('next').put('value', var.get('iterable').get(var.get('i')))
                                            var.get('next').put('done', Js(False))
                                            return var.get('next')
                                    var.get('next').put('value', var.get('undefined'))
                                    var.get('next').put('done', Js(True))
                                    return var.get('next')
                                PyJs_next_323_._set_name('next')
                                var.put('next', PyJs_next_323_)
                                return var.get('next').put('next', var.get('next'))
                        return Js({'next':var.get('doneResult')})
                    PyJsHoisted_values_.func_name = 'values'
                    var.put('values', PyJsHoisted_values_)
                    @Js
                    def PyJsHoisted_doneResult_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js({'value':var.get('undefined'),'done':Js(True)})
                    PyJsHoisted_doneResult_.func_name = 'doneResult'
                    var.put('doneResult', PyJsHoisted_doneResult_)
                    Js('use strict')
                    var.put('Op', var.get('Object').get('prototype'))
                    var.put('hasOwn', var.get('Op').get('hasOwnProperty'))
                    pass
                    var.put('$Symbol', (var.get('Symbol') if _seq(var.get('Symbol',throw=False).typeof(),Js('function')) else Js({})))
                    var.put('iteratorSymbol', (var.get('$Symbol').get('iterator') or Js('@@iterator')))
                    var.put('asyncIteratorSymbol', (var.get('$Symbol').get('asyncIterator') or Js('@@asyncIterator')))
                    var.put('toStringTagSymbol', (var.get('$Symbol').get('toStringTag') or Js('@@toStringTag')))
                    var.put('inModule', _seq((Js('undefined') if _seq(var.get('module',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('module'))),Js('object')))
                    var.put('runtime', var.get('global').get('regeneratorRuntime'))
                    if var.get('runtime'):
                        if var.get('inModule'):
                            var.get('module').put('exports', var.get('runtime'))
                        return var.get('undefined')
                    var.put('runtime', var.get('global').put('regeneratorRuntime', (var.get('module').get('exports') if var.get('inModule') else Js({}))))
                    pass
                    var.get('runtime').put('wrap', var.get('wrap'))
                    pass
                    var.put('GenStateSuspendedStart', Js('suspendedStart'))
                    var.put('GenStateSuspendedYield', Js('suspendedYield'))
                    var.put('GenStateExecuting', Js('executing'))
                    var.put('GenStateCompleted', Js('completed'))
                    var.put('ContinueSentinel', Js({}))
                    pass
                    pass
                    pass
                    var.put('IteratorPrototype', Js({}))
                    @Js
                    def PyJs_anonymous_305_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_305_._set_name('anonymous')
                    var.get('IteratorPrototype').put(var.get('iteratorSymbol'), PyJs_anonymous_305_)
                    var.put('getProto', var.get('Object').get('getPrototypeOf'))
                    var.put('NativeIteratorPrototype', (var.get('getProto') and var.get('getProto')(var.get('getProto')(var.get('values')(Js([]))))))
                    if ((var.get('NativeIteratorPrototype') and PyJsStrictNeq(var.get('NativeIteratorPrototype'),var.get('Op'))) and var.get('hasOwn').callprop('call', var.get('NativeIteratorPrototype'), var.get('iteratorSymbol'))):
                        var.put('IteratorPrototype', var.get('NativeIteratorPrototype'))
                    var.put('Gp', var.get('GeneratorFunctionPrototype').put('prototype', var.get('Generator').put('prototype', var.get('Object').callprop('create', var.get('IteratorPrototype')))))
                    var.get('GeneratorFunction').put('prototype', var.get('Gp').put('constructor', var.get('GeneratorFunctionPrototype')))
                    var.get('GeneratorFunctionPrototype').put('constructor', var.get('GeneratorFunction'))
                    var.get('GeneratorFunctionPrototype').put(var.get('toStringTagSymbol'), var.get('GeneratorFunction').put('displayName', Js('GeneratorFunction')))
                    pass
                    @Js
                    def PyJs_anonymous_308_(genFun, this, arguments, var=var):
                        var = Scope({'genFun':genFun, 'this':this, 'arguments':arguments}, var)
                        var.registers(['ctor', 'genFun'])
                        var.put('ctor', (_seq(var.get('genFun',throw=False).typeof(),Js('function')) and var.get('genFun').get('constructor')))
                        return ((_seq(var.get('ctor'),var.get('GeneratorFunction')) or _seq((var.get('ctor').get('displayName') or var.get('ctor').get('name')),Js('GeneratorFunction'))) if var.get('ctor') else Js(False))
                    PyJs_anonymous_308_._set_name('anonymous')
                    var.get('runtime').put('isGeneratorFunction', PyJs_anonymous_308_)
                    @Js
                    def PyJs_anonymous_309_(genFun, this, arguments, var=var):
                        var = Scope({'genFun':genFun, 'this':this, 'arguments':arguments}, var)
                        var.registers(['genFun'])
                        if var.get('Object').get('setPrototypeOf'):
                            var.get('Object').callprop('setPrototypeOf', var.get('genFun'), var.get('GeneratorFunctionPrototype'))
                        else:
                            var.get('genFun').put('__proto__', var.get('GeneratorFunctionPrototype'))
                            if var.get('genFun').contains(var.get('toStringTagSymbol')).neg():
                                var.get('genFun').put(var.get('toStringTagSymbol'), Js('GeneratorFunction'))
                        var.get('genFun').put('prototype', var.get('Object').callprop('create', var.get('Gp')))
                        return var.get('genFun')
                    PyJs_anonymous_309_._set_name('anonymous')
                    var.get('runtime').put('mark', PyJs_anonymous_309_)
                    @Js
                    def PyJs_anonymous_310_(arg, this, arguments, var=var):
                        var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arg'])
                        return Js({'__await':var.get('arg')})
                    PyJs_anonymous_310_._set_name('anonymous')
                    var.get('runtime').put('awrap', PyJs_anonymous_310_)
                    pass
                    var.get('defineIteratorMethods')(var.get('AsyncIterator').get('prototype'))
                    @Js
                    def PyJs_anonymous_315_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_315_._set_name('anonymous')
                    var.get('AsyncIterator').get('prototype').put(var.get('asyncIteratorSymbol'), PyJs_anonymous_315_)
                    var.get('runtime').put('AsyncIterator', var.get('AsyncIterator'))
                    @Js
                    def PyJs_anonymous_316_(innerFn, outerFn, self, tryLocsList, this, arguments, var=var):
                        var = Scope({'innerFn':innerFn, 'outerFn':outerFn, 'self':self, 'tryLocsList':tryLocsList, 'this':this, 'arguments':arguments}, var)
                        var.registers(['self', 'outerFn', 'tryLocsList', 'iter', 'innerFn'])
                        var.put('iter', var.get('AsyncIterator').create(var.get('wrap')(var.get('innerFn'), var.get('outerFn'), var.get('self'), var.get('tryLocsList'))))
                        @Js
                        def PyJs_anonymous_317_(result, this, arguments, var=var):
                            var = Scope({'result':result, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result'])
                            return (var.get('result').get('value') if var.get('result').get('done') else var.get('iter').callprop('next'))
                        PyJs_anonymous_317_._set_name('anonymous')
                        return (var.get('iter') if var.get('runtime').callprop('isGeneratorFunction', var.get('outerFn')) else var.get('iter').callprop('next').callprop('then', PyJs_anonymous_317_))
                    PyJs_anonymous_316_._set_name('anonymous')
                    var.get('runtime').put('async', PyJs_anonymous_316_)
                    pass
                    pass
                    var.get('defineIteratorMethods')(var.get('Gp'))
                    var.get('Gp').put(var.get('toStringTagSymbol'), Js('Generator'))
                    @Js
                    def PyJs_anonymous_319_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_319_._set_name('anonymous')
                    var.get('Gp').put(var.get('iteratorSymbol'), PyJs_anonymous_319_)
                    @Js
                    def PyJs_anonymous_320_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js('[object Generator]')
                    PyJs_anonymous_320_._set_name('anonymous')
                    var.get('Gp').put('toString', PyJs_anonymous_320_)
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_321_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'keys', 'key'])
                        var.put('keys', Js([]))
                        for PyJsTemp in var.get('object'):
                            var.put('key', PyJsTemp)
                            var.get('keys').callprop('push', var.get('key'))
                        var.get('keys').callprop('reverse')
                        @Js
                        def PyJs_next_322_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_322_}, var)
                            var.registers(['key'])
                            while var.get('keys').get('length'):
                                var.put('key', var.get('keys').callprop('pop'))
                                if var.get('object').contains(var.get('key')):
                                    var.get('next').put('value', var.get('key'))
                                    var.get('next').put('done', Js(False))
                                    return var.get('next')
                            var.get('next').put('done', Js(True))
                            return var.get('next')
                        PyJs_next_322_._set_name('next')
                        return PyJs_next_322_
                    PyJs_anonymous_321_._set_name('anonymous')
                    var.get('runtime').put('keys', PyJs_anonymous_321_)
                    pass
                    var.get('runtime').put('values', var.get('values'))
                    pass
                    @Js
                    def PyJs_reset_324_(skipTempReset, this, arguments, var=var):
                        var = Scope({'skipTempReset':skipTempReset, 'this':this, 'arguments':arguments, 'reset':PyJs_reset_324_}, var)
                        var.registers(['name', 'skipTempReset'])
                        var.get(u"this").put('prev', Js(0.0))
                        var.get(u"this").put('next', Js(0.0))
                        var.get(u"this").put('sent', var.get(u"this").put('_sent', var.get('undefined')))
                        var.get(u"this").put('done', Js(False))
                        var.get(u"this").put('delegate', var.get(u"null"))
                        var.get(u"this").put('method', Js('next'))
                        var.get(u"this").put('arg', var.get('undefined'))
                        var.get(u"this").get('tryEntries').callprop('forEach', var.get('resetTryEntry'))
                        if var.get('skipTempReset').neg():
                            for PyJsTemp in var.get(u"this"):
                                var.put('name', PyJsTemp)
                                if ((_seq(var.get('name').callprop('charAt', Js(0.0)),Js('t')) and var.get('hasOwn').callprop('call', var.get(u"this"), var.get('name'))) and var.get('isNaN')((+var.get('name').callprop('slice', Js(1.0)))).neg()):
                                    var.get(u"this").put(var.get('name'), var.get('undefined'))
                    PyJs_reset_324_._set_name('reset')
                    @Js
                    def PyJs_stop_325_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'stop':PyJs_stop_325_}, var)
                        var.registers(['rootEntry', 'rootRecord'])
                        var.get(u"this").put('done', Js(True))
                        var.put('rootEntry', var.get(u"this").get('tryEntries').get('0'))
                        var.put('rootRecord', var.get('rootEntry').get('completion'))
                        if _seq(var.get('rootRecord').get('type'),Js('throw')):
                            PyJsTempException = JsToPyException(var.get('rootRecord').get('arg'))
                            raise PyJsTempException
                        return var.get(u"this").get('rval')
                    PyJs_stop_325_._set_name('stop')
                    @Js
                    def PyJs_dispatchException_326_(exception, this, arguments, var=var):
                        var = Scope({'exception':exception, 'this':this, 'arguments':arguments, 'dispatchException':PyJs_dispatchException_326_}, var)
                        var.registers(['hasCatch', 'handle', 'i', 'hasFinally', 'entry', 'record', 'context', 'exception'])
                        @Js
                        def PyJsHoisted_handle_(loc, caught, this, arguments, var=var):
                            var = Scope({'loc':loc, 'caught':caught, 'this':this, 'arguments':arguments}, var)
                            var.registers(['loc', 'caught'])
                            var.get('record').put('type', Js('throw'))
                            var.get('record').put('arg', var.get('exception'))
                            var.get('context').put('next', var.get('loc'))
                            if var.get('caught'):
                                var.get('context').put('method', Js('next'))
                                var.get('context').put('arg', var.get('undefined'))
                            return var.get('caught').neg().neg()
                        PyJsHoisted_handle_.func_name = 'handle'
                        var.put('handle', PyJsHoisted_handle_)
                        if var.get(u"this").get('done'):
                            PyJsTempException = JsToPyException(var.get('exception'))
                            raise PyJsTempException
                        var.put('context', var.get(u"this"))
                        pass
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                var.put('record', var.get('entry').get('completion'))
                                if _seq(var.get('entry').get('tryLoc'),Js('root')):
                                    return var.get('handle')(Js('end'))
                                if (var.get('entry').get('tryLoc')<=var.get(u"this").get('prev')):
                                    var.put('hasCatch', var.get('hasOwn').callprop('call', var.get('entry'), Js('catchLoc')))
                                    var.put('hasFinally', var.get('hasOwn').callprop('call', var.get('entry'), Js('finallyLoc')))
                                    if (var.get('hasCatch') and var.get('hasFinally')):
                                        if (var.get(u"this").get('prev')<var.get('entry').get('catchLoc')):
                                            return var.get('handle')(var.get('entry').get('catchLoc'), Js(True))
                                        else:
                                            if (var.get(u"this").get('prev')<var.get('entry').get('finallyLoc')):
                                                return var.get('handle')(var.get('entry').get('finallyLoc'))
                                    else:
                                        if var.get('hasCatch'):
                                            if (var.get(u"this").get('prev')<var.get('entry').get('catchLoc')):
                                                return var.get('handle')(var.get('entry').get('catchLoc'), Js(True))
                                        else:
                                            if var.get('hasFinally'):
                                                if (var.get(u"this").get('prev')<var.get('entry').get('finallyLoc')):
                                                    return var.get('handle')(var.get('entry').get('finallyLoc'))
                                            else:
                                                PyJsTempException = JsToPyException(var.get('Error').create(Js('try statement without catch or finally')))
                                                raise PyJsTempException
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                    PyJs_dispatchException_326_._set_name('dispatchException')
                    @Js
                    def PyJs_abrupt_327_(type, arg, this, arguments, var=var):
                        var = Scope({'type':type, 'arg':arg, 'this':this, 'arguments':arguments, 'abrupt':PyJs_abrupt_327_}, var)
                        var.registers(['i', 'arg', 'entry', 'record', 'finallyEntry', 'type'])
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                if (((var.get('entry').get('tryLoc')<=var.get(u"this").get('prev')) and var.get('hasOwn').callprop('call', var.get('entry'), Js('finallyLoc'))) and (var.get(u"this").get('prev')<var.get('entry').get('finallyLoc'))):
                                    var.put('finallyEntry', var.get('entry'))
                                    break
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        if (((var.get('finallyEntry') and (_seq(var.get('type'),Js('break')) or _seq(var.get('type'),Js('continue')))) and (var.get('finallyEntry').get('tryLoc')<=var.get('arg'))) and (var.get('arg')<=var.get('finallyEntry').get('finallyLoc'))):
                            var.put('finallyEntry', var.get(u"null"))
                        var.put('record', (var.get('finallyEntry').get('completion') if var.get('finallyEntry') else Js({})))
                        var.get('record').put('type', var.get('type'))
                        var.get('record').put('arg', var.get('arg'))
                        if var.get('finallyEntry'):
                            var.get(u"this").put('method', Js('next'))
                            var.get(u"this").put('next', var.get('finallyEntry').get('finallyLoc'))
                            return var.get('ContinueSentinel')
                        return var.get(u"this").callprop('complete', var.get('record'))
                    PyJs_abrupt_327_._set_name('abrupt')
                    @Js
                    def PyJs_complete_328_(record, afterLoc, this, arguments, var=var):
                        var = Scope({'record':record, 'afterLoc':afterLoc, 'this':this, 'arguments':arguments, 'complete':PyJs_complete_328_}, var)
                        var.registers(['record', 'afterLoc'])
                        if _seq(var.get('record').get('type'),Js('throw')):
                            PyJsTempException = JsToPyException(var.get('record').get('arg'))
                            raise PyJsTempException
                        if (_seq(var.get('record').get('type'),Js('break')) or _seq(var.get('record').get('type'),Js('continue'))):
                            var.get(u"this").put('next', var.get('record').get('arg'))
                        else:
                            if _seq(var.get('record').get('type'),Js('return')):
                                var.get(u"this").put('rval', var.get(u"this").put('arg', var.get('record').get('arg')))
                                var.get(u"this").put('method', Js('return'))
                                var.get(u"this").put('next', Js('end'))
                            else:
                                if (_seq(var.get('record').get('type'),Js('normal')) and var.get('afterLoc')):
                                    var.get(u"this").put('next', var.get('afterLoc'))
                        return var.get('ContinueSentinel')
                    PyJs_complete_328_._set_name('complete')
                    @Js
                    def PyJs_finish_329_(finallyLoc, this, arguments, var=var):
                        var = Scope({'finallyLoc':finallyLoc, 'this':this, 'arguments':arguments, 'finish':PyJs_finish_329_}, var)
                        var.registers(['i', 'entry', 'finallyLoc'])
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                if _seq(var.get('entry').get('finallyLoc'),var.get('finallyLoc')):
                                    var.get(u"this").callprop('complete', var.get('entry').get('completion'), var.get('entry').get('afterLoc'))
                                    var.get('resetTryEntry')(var.get('entry'))
                                    return var.get('ContinueSentinel')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                    PyJs_finish_329_._set_name('finish')
                    @Js
                    def PyJs__catch_330_(tryLoc, this, arguments, var=var):
                        var = Scope({'tryLoc':tryLoc, 'this':this, 'arguments':arguments, '_catch':PyJs__catch_330_}, var)
                        var.registers(['tryLoc', 'i', 'thrown', 'entry', 'record'])
                        #for JS loop
                        var.put('i', (var.get(u"this").get('tryEntries').get('length')-Js(1.0)))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('entry', var.get(u"this").get('tryEntries').get(var.get('i')))
                                if _seq(var.get('entry').get('tryLoc'),var.get('tryLoc')):
                                    var.put('record', var.get('entry').get('completion'))
                                    if _seq(var.get('record').get('type'),Js('throw')):
                                        var.put('thrown', var.get('record').get('arg'))
                                        var.get('resetTryEntry')(var.get('entry'))
                                    return var.get('thrown')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())-Js(1))
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('illegal catch attempt')))
                        raise PyJsTempException
                    PyJs__catch_330_._set_name('_catch')
                    @Js
                    def PyJs_delegateYield_331_(iterable, resultName, nextLoc, this, arguments, var=var):
                        var = Scope({'iterable':iterable, 'resultName':resultName, 'nextLoc':nextLoc, 'this':this, 'arguments':arguments, 'delegateYield':PyJs_delegateYield_331_}, var)
                        var.registers(['resultName', 'iterable', 'nextLoc'])
                        var.get(u"this").put('delegate', Js({'iterator':var.get('values')(var.get('iterable')),'resultName':var.get('resultName'),'nextLoc':var.get('nextLoc')}))
                        if _seq(var.get(u"this").get('method'),Js('next')):
                            var.get(u"this").put('arg', var.get('undefined'))
                        return var.get('ContinueSentinel')
                    PyJs_delegateYield_331_._set_name('delegateYield')
                    var.get('Context').put('prototype', Js({'constructor':var.get('Context'),'reset':PyJs_reset_324_,'stop':PyJs_stop_325_,'dispatchException':PyJs_dispatchException_326_,'abrupt':PyJs_abrupt_327_,'complete':PyJs_complete_328_,'finish':PyJs_finish_329_,'catch':PyJs__catch_330_,'delegateYield':PyJs_delegateYield_331_}))
                PyJs_anonymous_304_._set_name('anonymous')
                PyJs_anonymous_304_(PyJs_LONG_303_()).neg()
            PyJs_anonymous_302_._set_name('anonymous')
            PyJs_anonymous_302_.callprop('call', var.get(u"this"))
        PyJs_anonymous_301_._set_name('anonymous')
        PyJs_anonymous_301_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_300_._set_name('anonymous')
    @Js
    def PyJs_anonymous_332_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', '_byteLength', 'module', 'i', 'len', 'lookup', 'getLens', 'toByteArray', 'byteLength', 'encodeChunk', 'revLookup', 'fromByteArray', 'code', 'Arr', 'tripletToBase64'])
        @Js
        def PyJsHoisted_getLens_(b64, this, arguments, var=var):
            var = Scope({'b64':b64, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'b64', 'validLen', 'placeHoldersLen'])
            var.put('len', var.get('b64').get('length'))
            if ((var.get('len')%Js(4.0))>Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid string. Length must be a multiple of 4')))
                raise PyJsTempException
            var.put('validLen', var.get('b64').callprop('indexOf', Js('=')))
            if _seq(var.get('validLen'),(-Js(1.0))):
                var.put('validLen', var.get('len'))
            var.put('placeHoldersLen', (Js(0.0) if _seq(var.get('validLen'),var.get('len')) else (Js(4.0)-(var.get('validLen')%Js(4.0)))))
            return Js([var.get('validLen'), var.get('placeHoldersLen')])
        PyJsHoisted_getLens_.func_name = 'getLens'
        var.put('getLens', PyJsHoisted_getLens_)
        @Js
        def PyJsHoisted_byteLength_(b64, this, arguments, var=var):
            var = Scope({'b64':b64, 'this':this, 'arguments':arguments}, var)
            var.registers(['lens', 'b64', 'validLen', 'placeHoldersLen'])
            var.put('lens', var.get('getLens')(var.get('b64')))
            var.put('validLen', var.get('lens').get('0'))
            var.put('placeHoldersLen', var.get('lens').get('1'))
            return ((((var.get('validLen')+var.get('placeHoldersLen'))*Js(3.0))/Js(4.0))-var.get('placeHoldersLen'))
        PyJsHoisted_byteLength_.func_name = 'byteLength'
        var.put('byteLength', PyJsHoisted_byteLength_)
        @Js
        def PyJsHoisted__byteLength_(b64, validLen, placeHoldersLen, this, arguments, var=var):
            var = Scope({'b64':b64, 'validLen':validLen, 'placeHoldersLen':placeHoldersLen, 'this':this, 'arguments':arguments}, var)
            var.registers(['placeHoldersLen', 'validLen', 'b64'])
            return ((((var.get('validLen')+var.get('placeHoldersLen'))*Js(3.0))/Js(4.0))-var.get('placeHoldersLen'))
        PyJsHoisted__byteLength_.func_name = '_byteLength'
        var.put('_byteLength', PyJsHoisted__byteLength_)
        @Js
        def PyJsHoisted_toByteArray_(b64, this, arguments, var=var):
            var = Scope({'b64':b64, 'this':this, 'arguments':arguments}, var)
            var.registers(['lens', 'curByte', 'tmp', 'placeHoldersLen', 'len', 'i', 'arr', 'validLen', 'b64'])
            pass
            var.put('lens', var.get('getLens')(var.get('b64')))
            var.put('validLen', var.get('lens').get('0'))
            var.put('placeHoldersLen', var.get('lens').get('1'))
            var.put('arr', var.get('Arr').create(var.get('_byteLength')(var.get('b64'), var.get('validLen'), var.get('placeHoldersLen'))))
            var.put('curByte', Js(0.0))
            var.put('len', ((var.get('validLen')-Js(4.0)) if (var.get('placeHoldersLen')>Js(0.0)) else var.get('validLen')))
            pass
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.put('tmp', ((((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(18.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))<<Js(12.0)))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(2.0))))<<Js(6.0)))|var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(3.0))))))
                    var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(16.0))&Js(255)))
                    var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(8.0))&Js(255)))
                    var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
                finally:
                        var.put('i', Js(4.0), '+')
            if _seq(var.get('placeHoldersLen'),Js(2.0)):
                var.put('tmp', ((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(2.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))>>Js(4.0))))
                var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
            if _seq(var.get('placeHoldersLen'),Js(1.0)):
                var.put('tmp', (((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(10.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))<<Js(4.0)))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(2.0))))>>Js(2.0))))
                var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(8.0))&Js(255)))
                var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
            return var.get('arr')
        PyJsHoisted_toByteArray_.func_name = 'toByteArray'
        var.put('toByteArray', PyJsHoisted_toByteArray_)
        @Js
        def PyJsHoisted_tripletToBase64_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['num'])
            return (((var.get('lookup').get(((var.get('num')>>Js(18.0))&Js(63)))+var.get('lookup').get(((var.get('num')>>Js(12.0))&Js(63))))+var.get('lookup').get(((var.get('num')>>Js(6.0))&Js(63))))+var.get('lookup').get((var.get('num')&Js(63))))
        PyJsHoisted_tripletToBase64_.func_name = 'tripletToBase64'
        var.put('tripletToBase64', PyJsHoisted_tripletToBase64_)
        @Js
        def PyJsHoisted_encodeChunk_(uint8, start, end, this, arguments, var=var):
            var = Scope({'uint8':uint8, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['tmp', 'i', 'start', 'output', 'end', 'uint8'])
            pass
            var.put('output', Js([]))
            #for JS loop
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('tmp', ((((var.get('uint8').get(var.get('i'))<<Js(16.0))&Js(16711680))+((var.get('uint8').get((var.get('i')+Js(1.0)))<<Js(8.0))&Js(65280)))+(var.get('uint8').get((var.get('i')+Js(2.0)))&Js(255))))
                    var.get('output').callprop('push', var.get('tripletToBase64')(var.get('tmp')))
                finally:
                        var.put('i', Js(3.0), '+')
            return var.get('output').callprop('join', Js(''))
        PyJsHoisted_encodeChunk_.func_name = 'encodeChunk'
        var.put('encodeChunk', PyJsHoisted_encodeChunk_)
        @Js
        def PyJsHoisted_fromByteArray_(uint8, this, arguments, var=var):
            var = Scope({'uint8':uint8, 'this':this, 'arguments':arguments}, var)
            var.registers(['parts', 'tmp', 'len', 'i', 'maxChunkLength', 'len2', 'extraBytes', 'uint8'])
            pass
            var.put('len', var.get('uint8').get('length'))
            var.put('extraBytes', (var.get('len')%Js(3.0)))
            var.put('parts', Js([]))
            var.put('maxChunkLength', Js(16383.0))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('len2', (var.get('len')-var.get('extraBytes')))
            while (var.get('i')<var.get('len2')):
                try:
                    var.get('parts').callprop('push', var.get('encodeChunk')(var.get('uint8'), var.get('i'), (var.get('len2') if ((var.get('i')+var.get('maxChunkLength'))>var.get('len2')) else (var.get('i')+var.get('maxChunkLength')))))
                finally:
                        var.put('i', var.get('maxChunkLength'), '+')
            if _seq(var.get('extraBytes'),Js(1.0)):
                var.put('tmp', var.get('uint8').get((var.get('len')-Js(1.0))))
                var.get('parts').callprop('push', ((var.get('lookup').get((var.get('tmp')>>Js(2.0)))+var.get('lookup').get(((var.get('tmp')<<Js(4.0))&Js(63))))+Js('==')))
            else:
                if _seq(var.get('extraBytes'),Js(2.0)):
                    var.put('tmp', ((var.get('uint8').get((var.get('len')-Js(2.0)))<<Js(8.0))+var.get('uint8').get((var.get('len')-Js(1.0)))))
                    var.get('parts').callprop('push', (((var.get('lookup').get((var.get('tmp')>>Js(10.0)))+var.get('lookup').get(((var.get('tmp')>>Js(4.0))&Js(63))))+var.get('lookup').get(((var.get('tmp')<<Js(2.0))&Js(63))))+Js('=')))
            return var.get('parts').callprop('join', Js(''))
        PyJsHoisted_fromByteArray_.func_name = 'fromByteArray'
        var.put('fromByteArray', PyJsHoisted_fromByteArray_)
        Js('use strict')
        var.get('exports').put('byteLength', var.get('byteLength'))
        var.get('exports').put('toByteArray', var.get('toByteArray'))
        var.get('exports').put('fromByteArray', var.get('fromByteArray'))
        var.put('lookup', Js([]))
        var.put('revLookup', Js([]))
        var.put('Arr', (var.get('Uint8Array') if PyJsStrictNeq(var.get('Uint8Array',throw=False).typeof(),Js('undefined')) else var.get('Array')))
        var.put('code', Js('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'))
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get('code').get('length'))
        while (var.get('i')<var.get('len')):
            try:
                var.get('lookup').put(var.get('i'), var.get('code').get(var.get('i')))
                var.get('revLookup').put(var.get('code').callprop('charCodeAt', var.get('i')), var.get('i'))
            finally:
                    var.put('i',Js(var.get('i').to_number())+Js(1))
        var.get('revLookup').put(Js('-').callprop('charCodeAt', Js(0.0)), Js(62.0))
        var.get('revLookup').put(Js('_').callprop('charCodeAt', Js(0.0)), Js(63.0))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_332_._set_name('anonymous')
    @Js
    def PyJs_anonymous_333_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_334_(module, exports, this, arguments, var=var):
            var = Scope({'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
            var.registers(['module', 'bigMulTo', 'parseHex', 'move', 'BN', 'Red', 'zeros', 'P224', 'inherits', 'jumboMulTo', 'comb10MulTo', 'Buffer', 'parseBase', 'inspect', 'P25519', 'FFTM', 'groupBases', 'K256', 'Mont', 'assert', 'groupSizes', 'toBitArray', 'exports', 'MPrime', 'primes', 'allocate', 'P192', 'smallMulTo'])
            @Js
            def PyJsHoisted_assert_(val, msg, this, arguments, var=var):
                var = Scope({'val':val, 'msg':msg, 'this':this, 'arguments':arguments}, var)
                var.registers(['msg', 'val'])
                if var.get('val').neg():
                    PyJsTempException = JsToPyException(var.get('Error').create((var.get('msg') or Js('Assertion failed'))))
                    raise PyJsTempException
            PyJsHoisted_assert_.func_name = 'assert'
            var.put('assert', PyJsHoisted_assert_)
            @Js
            def PyJsHoisted_inherits_(ctor, superCtor, this, arguments, var=var):
                var = Scope({'ctor':ctor, 'superCtor':superCtor, 'this':this, 'arguments':arguments}, var)
                var.registers(['ctor', 'TempCtor', 'superCtor'])
                var.get('ctor').put('super_', var.get('superCtor'))
                @Js
                def PyJs_TempCtor_335_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'TempCtor':PyJs_TempCtor_335_}, var)
                    var.registers([])
                    pass
                PyJs_TempCtor_335_._set_name('TempCtor')
                var.put('TempCtor', PyJs_TempCtor_335_)
                var.get('TempCtor').put('prototype', var.get('superCtor').get('prototype'))
                var.get('ctor').put('prototype', var.get('TempCtor').create())
                var.get('ctor').get('prototype').put('constructor', var.get('ctor'))
            PyJsHoisted_inherits_.func_name = 'inherits'
            var.put('inherits', PyJsHoisted_inherits_)
            @Js
            def PyJsHoisted_BN_(number, base, endian, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'endian':endian, 'this':this, 'arguments':arguments}, var)
                var.registers(['number', 'base', 'endian'])
                if var.get('BN').callprop('isBN', var.get('number')):
                    return var.get('number')
                var.get(u"this").put('negative', Js(0.0))
                var.get(u"this").put('words', var.get(u"null"))
                var.get(u"this").put('length', Js(0.0))
                var.get(u"this").put('red', var.get(u"null"))
                if PyJsStrictNeq(var.get('number'),var.get(u"null")):
                    if (_seq(var.get('base'),Js('le')) or _seq(var.get('base'),Js('be'))):
                        var.put('endian', var.get('base'))
                        var.put('base', Js(10.0))
                    var.get(u"this").callprop('_init', (var.get('number') or Js(0.0)), (var.get('base') or Js(10.0)), (var.get('endian') or Js('be')))
            PyJsHoisted_BN_.func_name = 'BN'
            var.put('BN', PyJsHoisted_BN_)
            @Js
            def PyJsHoisted_parseHex_(str, start, end, this, arguments, var=var):
                var = Scope({'str':str, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                var.registers(['str', 'r', 'z', 'len', 'c', 'i', 'start', 'b', 'end'])
                var.put('r', Js(0.0))
                var.put('len', var.get('Math').callprop('min', var.get('str').get('length'), var.get('end')))
                var.put('z', Js(0.0))
                #for JS loop
                var.put('i', var.get('start'))
                while (var.get('i')<var.get('len')):
                    try:
                        var.put('c', (var.get('str').callprop('charCodeAt', var.get('i'))-Js(48.0)))
                        var.put('r', Js(4.0), '<<')
                        pass
                        if ((var.get('c')>=Js(49.0)) and (var.get('c')<=Js(54.0))):
                            var.put('b', ((var.get('c')-Js(49.0))+Js(10)))
                        else:
                            if ((var.get('c')>=Js(17.0)) and (var.get('c')<=Js(22.0))):
                                var.put('b', ((var.get('c')-Js(17.0))+Js(10)))
                            else:
                                var.put('b', var.get('c'))
                        var.put('r', var.get('b'), '|')
                        var.put('z', var.get('b'), '|')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('assert')((var.get('z')&Js(240)).neg(), (Js('Invalid character in ')+var.get('str')))
                return var.get('r')
            PyJsHoisted_parseHex_.func_name = 'parseHex'
            var.put('parseHex', PyJsHoisted_parseHex_)
            @Js
            def PyJsHoisted_parseBase_(str, start, end, mul, this, arguments, var=var):
                var = Scope({'str':str, 'start':start, 'end':end, 'mul':mul, 'this':this, 'arguments':arguments}, var)
                var.registers(['str', 'r', 'len', 'c', 'i', 'start', 'b', 'end', 'mul'])
                var.put('r', Js(0.0))
                var.put('b', Js(0.0))
                var.put('len', var.get('Math').callprop('min', var.get('str').get('length'), var.get('end')))
                #for JS loop
                var.put('i', var.get('start'))
                while (var.get('i')<var.get('len')):
                    try:
                        var.put('c', (var.get('str').callprop('charCodeAt', var.get('i'))-Js(48.0)))
                        var.put('r', var.get('mul'), '*')
                        if (var.get('c')>=Js(49.0)):
                            var.put('b', ((var.get('c')-Js(49.0))+Js(10)))
                        else:
                            if (var.get('c')>=Js(17.0)):
                                var.put('b', ((var.get('c')-Js(17.0))+Js(10)))
                            else:
                                var.put('b', var.get('c'))
                        var.get('assert')(((var.get('c')>=Js(0.0)) and (var.get('b')<var.get('mul'))), Js('Invalid character'))
                        var.put('r', var.get('b'), '+')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('r')
            PyJsHoisted_parseBase_.func_name = 'parseBase'
            var.put('parseBase', PyJsHoisted_parseBase_)
            @Js
            def PyJsHoisted_move_(dest, src, this, arguments, var=var):
                var = Scope({'dest':dest, 'src':src, 'this':this, 'arguments':arguments}, var)
                var.registers(['src', 'dest'])
                var.get('dest').put('words', var.get('src').get('words'))
                var.get('dest').put('length', var.get('src').get('length'))
                var.get('dest').put('negative', var.get('src').get('negative'))
                var.get('dest').put('red', var.get('src').get('red'))
            PyJsHoisted_move_.func_name = 'move'
            var.put('move', PyJsHoisted_move_)
            @Js
            def PyJsHoisted_inspect_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return (((Js('<BN-R: ') if var.get(u"this").get('red') else Js('<BN: '))+var.get(u"this").callprop('toString', Js(16.0)))+Js('>'))
            PyJsHoisted_inspect_.func_name = 'inspect'
            var.put('inspect', PyJsHoisted_inspect_)
            @Js
            def PyJsHoisted_toBitArray_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
                var.registers(['w', 'bit', 'wbit', 'off', 'num'])
                var.put('w', var.get('Array').create(var.get('num').callprop('bitLength')))
                #for JS loop
                var.put('bit', Js(0.0))
                while (var.get('bit')<var.get('w').get('length')):
                    try:
                        var.put('off', ((var.get('bit')/Js(26.0))|Js(0.0)))
                        var.put('wbit', (var.get('bit')%Js(26.0)))
                        var.get('w').put(var.get('bit'), (PyJsBshift(var.get('num').get('words').get(var.get('off')),var.get('wbit'))&Js(1)))
                    finally:
                            (var.put('bit',Js(var.get('bit').to_number())+Js(1))-Js(1))
                return var.get('w')
            PyJsHoisted_toBitArray_.func_name = 'toBitArray'
            var.put('toBitArray', PyJsHoisted_toBitArray_)
            @Js
            def PyJsHoisted_smallMulTo_(self, num, out, this, arguments, var=var):
                var = Scope({'self':self, 'num':num, 'out':out, 'this':this, 'arguments':arguments}, var)
                var.registers(['self', 'a', 'r', 'j', 'len', 'i', 'num', 'out', 'lo', 'k', 'b', 'maxJ', 'rword', 'carry', 'ncarry'])
                var.get('out').put('negative', (var.get('num').get('negative')^var.get('self').get('negative')))
                var.put('len', ((var.get('self').get('length')+var.get('num').get('length'))|Js(0.0)))
                var.get('out').put('length', var.get('len'))
                var.put('len', ((var.get('len')-Js(1.0))|Js(0.0)))
                var.put('a', (var.get('self').get('words').get('0')|Js(0.0)))
                var.put('b', (var.get('num').get('words').get('0')|Js(0.0)))
                var.put('r', (var.get('a')*var.get('b')))
                var.put('lo', (var.get('r')&Js(67108863)))
                var.put('carry', ((var.get('r')/Js(67108864))|Js(0.0)))
                var.get('out').get('words').put('0', var.get('lo'))
                #for JS loop
                var.put('k', Js(1.0))
                while (var.get('k')<var.get('len')):
                    try:
                        var.put('ncarry', PyJsBshift(var.get('carry'),Js(26.0)))
                        var.put('rword', (var.get('carry')&Js(67108863)))
                        var.put('maxJ', var.get('Math').callprop('min', var.get('k'), (var.get('num').get('length')-Js(1.0))))
                        #for JS loop
                        var.put('j', var.get('Math').callprop('max', Js(0.0), ((var.get('k')-var.get('self').get('length'))+Js(1.0))))
                        while (var.get('j')<=var.get('maxJ')):
                            try:
                                var.put('i', ((var.get('k')-var.get('j'))|Js(0.0)))
                                var.put('a', (var.get('self').get('words').get(var.get('i'))|Js(0.0)))
                                var.put('b', (var.get('num').get('words').get(var.get('j'))|Js(0.0)))
                                var.put('r', ((var.get('a')*var.get('b'))+var.get('rword')))
                                var.put('ncarry', ((var.get('r')/Js(67108864))|Js(0.0)), '+')
                                var.put('rword', (var.get('r')&Js(67108863)))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        var.get('out').get('words').put(var.get('k'), (var.get('rword')|Js(0.0)))
                        var.put('carry', (var.get('ncarry')|Js(0.0)))
                    finally:
                            (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get('out').get('words').put(var.get('k'), (var.get('carry')|Js(0.0)))
                else:
                    (var.get('out').put('length',Js(var.get('out').get('length').to_number())-Js(1))+Js(1))
                return var.get('out').callprop('_strip')
            PyJsHoisted_smallMulTo_.func_name = 'smallMulTo'
            var.put('smallMulTo', PyJsHoisted_smallMulTo_)
            @Js
            def PyJsHoisted_bigMulTo_(self, num, out, this, arguments, var=var):
                var = Scope({'self':self, 'num':num, 'out':out, 'this':this, 'arguments':arguments}, var)
                var.registers(['self', 'a', 'r', 'hncarry', 'j', 'i', 'num', 'out', 'k', 'lo', 'b', 'maxJ', 'rword', 'carry', 'ncarry'])
                var.get('out').put('negative', (var.get('num').get('negative')^var.get('self').get('negative')))
                var.get('out').put('length', (var.get('self').get('length')+var.get('num').get('length')))
                var.put('carry', Js(0.0))
                var.put('hncarry', Js(0.0))
                #for JS loop
                var.put('k', Js(0.0))
                while (var.get('k')<(var.get('out').get('length')-Js(1.0))):
                    try:
                        var.put('ncarry', var.get('hncarry'))
                        var.put('hncarry', Js(0.0))
                        var.put('rword', (var.get('carry')&Js(67108863)))
                        var.put('maxJ', var.get('Math').callprop('min', var.get('k'), (var.get('num').get('length')-Js(1.0))))
                        #for JS loop
                        var.put('j', var.get('Math').callprop('max', Js(0.0), ((var.get('k')-var.get('self').get('length'))+Js(1.0))))
                        while (var.get('j')<=var.get('maxJ')):
                            try:
                                var.put('i', (var.get('k')-var.get('j')))
                                var.put('a', (var.get('self').get('words').get(var.get('i'))|Js(0.0)))
                                var.put('b', (var.get('num').get('words').get(var.get('j'))|Js(0.0)))
                                var.put('r', (var.get('a')*var.get('b')))
                                var.put('lo', (var.get('r')&Js(67108863)))
                                var.put('ncarry', ((var.get('ncarry')+((var.get('r')/Js(67108864))|Js(0.0)))|Js(0.0)))
                                var.put('lo', ((var.get('lo')+var.get('rword'))|Js(0.0)))
                                var.put('rword', (var.get('lo')&Js(67108863)))
                                var.put('ncarry', ((var.get('ncarry')+PyJsBshift(var.get('lo'),Js(26.0)))|Js(0.0)))
                                var.put('hncarry', PyJsBshift(var.get('ncarry'),Js(26.0)), '+')
                                var.put('ncarry', Js(67108863), '&')
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        var.get('out').get('words').put(var.get('k'), var.get('rword'))
                        var.put('carry', var.get('ncarry'))
                        var.put('ncarry', var.get('hncarry'))
                    finally:
                            (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get('out').get('words').put(var.get('k'), var.get('carry'))
                else:
                    (var.get('out').put('length',Js(var.get('out').get('length').to_number())-Js(1))+Js(1))
                return var.get('out').callprop('_strip')
            PyJsHoisted_bigMulTo_.func_name = 'bigMulTo'
            var.put('bigMulTo', PyJsHoisted_bigMulTo_)
            @Js
            def PyJsHoisted_jumboMulTo_(self, num, out, this, arguments, var=var):
                var = Scope({'self':self, 'num':num, 'out':out, 'this':this, 'arguments':arguments}, var)
                var.registers(['num', 'self', 'out'])
                return var.get('bigMulTo')(var.get('self'), var.get('num'), var.get('out'))
            PyJsHoisted_jumboMulTo_.func_name = 'jumboMulTo'
            var.put('jumboMulTo', PyJsHoisted_jumboMulTo_)
            @Js
            def PyJsHoisted_FFTM_(x, y, this, arguments, var=var):
                var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments}, var)
                var.registers(['x', 'y'])
                var.get(u"this").put('x', var.get('x'))
                var.get(u"this").put('y', var.get('y'))
            PyJsHoisted_FFTM_.func_name = 'FFTM'
            var.put('FFTM', PyJsHoisted_FFTM_)
            @Js
            def PyJsHoisted_MPrime_(name, p, this, arguments, var=var):
                var = Scope({'name':name, 'p':p, 'this':this, 'arguments':arguments}, var)
                var.registers(['name', 'p'])
                var.get(u"this").put('name', var.get('name'))
                var.get(u"this").put('p', var.get('BN').create(var.get('p'), Js(16.0)))
                var.get(u"this").put('n', var.get(u"this").get('p').callprop('bitLength'))
                var.get(u"this").put('k', var.get('BN').create(Js(1.0)).callprop('iushln', var.get(u"this").get('n')).callprop('isub', var.get(u"this").get('p')))
                var.get(u"this").put('tmp', var.get(u"this").callprop('_tmp'))
            PyJsHoisted_MPrime_.func_name = 'MPrime'
            var.put('MPrime', PyJsHoisted_MPrime_)
            @Js
            def PyJsHoisted_K256_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('MPrime').callprop('call', var.get(u"this"), Js('k256'), Js('ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f'))
            PyJsHoisted_K256_.func_name = 'K256'
            var.put('K256', PyJsHoisted_K256_)
            @Js
            def PyJsHoisted_P224_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('MPrime').callprop('call', var.get(u"this"), Js('p224'), Js('ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001'))
            PyJsHoisted_P224_.func_name = 'P224'
            var.put('P224', PyJsHoisted_P224_)
            @Js
            def PyJsHoisted_P192_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('MPrime').callprop('call', var.get(u"this"), Js('p192'), Js('ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff'))
            PyJsHoisted_P192_.func_name = 'P192'
            var.put('P192', PyJsHoisted_P192_)
            @Js
            def PyJsHoisted_P25519_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('MPrime').callprop('call', var.get(u"this"), Js('25519'), Js('7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed'))
            PyJsHoisted_P25519_.func_name = 'P25519'
            var.put('P25519', PyJsHoisted_P25519_)
            @Js
            def PyJsHoisted_Red_(m, this, arguments, var=var):
                var = Scope({'m':m, 'this':this, 'arguments':arguments}, var)
                var.registers(['prime', 'm'])
                if _seq(var.get('m',throw=False).typeof(),Js('string')):
                    var.put('prime', var.get('BN').callprop('_prime', var.get('m')))
                    var.get(u"this").put('m', var.get('prime').get('p'))
                    var.get(u"this").put('prime', var.get('prime'))
                else:
                    var.get('assert')(var.get('m').callprop('gtn', Js(1.0)), Js('modulus must be greater than 1'))
                    var.get(u"this").put('m', var.get('m'))
                    var.get(u"this").put('prime', var.get(u"null"))
            PyJsHoisted_Red_.func_name = 'Red'
            var.put('Red', PyJsHoisted_Red_)
            @Js
            def PyJsHoisted_Mont_(m, this, arguments, var=var):
                var = Scope({'m':m, 'this':this, 'arguments':arguments}, var)
                var.registers(['m'])
                var.get('Red').callprop('call', var.get(u"this"), var.get('m'))
                var.get(u"this").put('shift', var.get(u"this").get('m').callprop('bitLength'))
                if PyJsStrictNeq((var.get(u"this").get('shift')%Js(26.0)),Js(0.0)):
                    var.get(u"this").put('shift', (Js(26.0)-(var.get(u"this").get('shift')%Js(26.0))), '+')
                var.get(u"this").put('r', var.get('BN').create(Js(1.0)).callprop('iushln', var.get(u"this").get('shift')))
                var.get(u"this").put('r2', var.get(u"this").callprop('imod', var.get(u"this").get('r').callprop('sqr')))
                var.get(u"this").put('rinv', var.get(u"this").get('r').callprop('_invmp', var.get(u"this").get('m')))
                var.get(u"this").put('minv', var.get(u"this").get('rinv').callprop('mul', var.get(u"this").get('r')).callprop('isubn', Js(1.0)).callprop('div', var.get(u"this").get('m')))
                var.get(u"this").put('minv', var.get(u"this").get('minv').callprop('umod', var.get(u"this").get('r')))
                var.get(u"this").put('minv', var.get(u"this").get('r').callprop('sub', var.get(u"this").get('minv')))
            PyJsHoisted_Mont_.func_name = 'Mont'
            var.put('Mont', PyJsHoisted_Mont_)
            Js('use strict')
            pass
            pass
            pass
            if _seq((Js('undefined') if _seq(var.get('module',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('module'))),Js('object')):
                var.get('module').put('exports', var.get('BN'))
            else:
                var.get('exports').put('BN', var.get('BN'))
            var.get('BN').put('BN', var.get('BN'))
            var.get('BN').put('wordSize', Js(26.0))
            pass
            try:
                var.put('Buffer', var.get('require')(Js('buffer')).get('Buffer'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_9319541 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_9319541 is not None:
                        var.own['e'] = PyJsHolder_65_9319541
                    else:
                        del var.own['e']
                    del PyJsHolder_65_9319541
            @Js
            def PyJs_isBN_336_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'isBN':PyJs_isBN_336_}, var)
                var.registers(['num'])
                if var.get('num').instanceof(var.get('BN')):
                    return Js(True)
                return (((PyJsStrictNeq(var.get('num'),var.get(u"null")) and _seq((Js('undefined') if _seq(var.get('num',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('num'))),Js('object'))) and _seq(var.get('num').get('constructor').get('wordSize'),var.get('BN').get('wordSize'))) and var.get('Array').callprop('isArray', var.get('num').get('words')))
            PyJs_isBN_336_._set_name('isBN')
            var.get('BN').put('isBN', PyJs_isBN_336_)
            @Js
            def PyJs_max_337_(left, right, this, arguments, var=var):
                var = Scope({'left':left, 'right':right, 'this':this, 'arguments':arguments, 'max':PyJs_max_337_}, var)
                var.registers(['left', 'right'])
                if (var.get('left').callprop('cmp', var.get('right'))>Js(0.0)):
                    return var.get('left')
                return var.get('right')
            PyJs_max_337_._set_name('max')
            var.get('BN').put('max', PyJs_max_337_)
            @Js
            def PyJs_min_338_(left, right, this, arguments, var=var):
                var = Scope({'left':left, 'right':right, 'this':this, 'arguments':arguments, 'min':PyJs_min_338_}, var)
                var.registers(['left', 'right'])
                if (var.get('left').callprop('cmp', var.get('right'))<Js(0.0)):
                    return var.get('left')
                return var.get('right')
            PyJs_min_338_._set_name('min')
            var.get('BN').put('min', PyJs_min_338_)
            @Js
            def PyJs_init_339_(number, base, endian, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'endian':endian, 'this':this, 'arguments':arguments, 'init':PyJs_init_339_}, var)
                var.registers(['number', 'base', 'start', 'endian'])
                if _seq(var.get('number',throw=False).typeof(),Js('number')):
                    return var.get(u"this").callprop('_initNumber', var.get('number'), var.get('base'), var.get('endian'))
                if _seq((Js('undefined') if _seq(var.get('number',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('number'))),Js('object')):
                    return var.get(u"this").callprop('_initArray', var.get('number'), var.get('base'), var.get('endian'))
                if _seq(var.get('base'),Js('hex')):
                    var.put('base', Js(16.0))
                var.get('assert')(((_seq(var.get('base'),(var.get('base')|Js(0.0))) and (var.get('base')>=Js(2.0))) and (var.get('base')<=Js(36.0))))
                var.put('number', var.get('number').callprop('toString').callprop('replace', JsRegExp('/\\s+/g'), Js('')))
                var.put('start', Js(0.0))
                if _seq(var.get('number').get('0'),Js('-')):
                    (var.put('start',Js(var.get('start').to_number())+Js(1))-Js(1))
                if _seq(var.get('base'),Js(16.0)):
                    var.get(u"this").callprop('_parseHex', var.get('number'), var.get('start'))
                else:
                    var.get(u"this").callprop('_parseBase', var.get('number'), var.get('base'), var.get('start'))
                if _seq(var.get('number').get('0'),Js('-')):
                    var.get(u"this").put('negative', Js(1.0))
                var.get(u"this").callprop('_strip')
                if PyJsStrictNeq(var.get('endian'),Js('le')):
                    return var.get('undefined')
                var.get(u"this").callprop('_initArray', var.get(u"this").callprop('toArray'), var.get('base'), var.get('endian'))
            PyJs_init_339_._set_name('init')
            var.get('BN').get('prototype').put('_init', PyJs_init_339_)
            @Js
            def PyJs__initNumber_340_(number, base, endian, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'endian':endian, 'this':this, 'arguments':arguments, '_initNumber':PyJs__initNumber_340_}, var)
                var.registers(['number', 'base', 'endian'])
                if (var.get('number')<Js(0.0)):
                    var.get(u"this").put('negative', Js(1.0))
                    var.put('number', (-var.get('number')))
                if (var.get('number')<Js(67108864)):
                    var.get(u"this").put('words', Js([(var.get('number')&Js(67108863))]))
                    var.get(u"this").put('length', Js(1.0))
                else:
                    if (var.get('number')<Js(4503599627370496)):
                        var.get(u"this").put('words', Js([(var.get('number')&Js(67108863)), ((var.get('number')/Js(67108864))&Js(67108863))]))
                        var.get(u"this").put('length', Js(2.0))
                    else:
                        var.get('assert')((var.get('number')<Js(9007199254740992)))
                        var.get(u"this").put('words', Js([(var.get('number')&Js(67108863)), ((var.get('number')/Js(67108864))&Js(67108863)), Js(1.0)]))
                        var.get(u"this").put('length', Js(3.0))
                if PyJsStrictNeq(var.get('endian'),Js('le')):
                    return var.get('undefined')
                var.get(u"this").callprop('_initArray', var.get(u"this").callprop('toArray'), var.get('base'), var.get('endian'))
            PyJs__initNumber_340_._set_name('_initNumber')
            var.get('BN').get('prototype').put('_initNumber', PyJs__initNumber_340_)
            @Js
            def PyJs__initArray_341_(number, base, endian, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'endian':endian, 'this':this, 'arguments':arguments, '_initArray':PyJs__initArray_341_}, var)
                var.registers(['w', 'base', 'j', 'i', 'off', 'number', 'endian'])
                var.get('assert')(_seq(var.get('number').get('length').typeof(),Js('number')))
                if (var.get('number').get('length')<=Js(0.0)):
                    var.get(u"this").put('words', Js([Js(0.0)]))
                    var.get(u"this").put('length', Js(1.0))
                    return var.get(u"this")
                var.get(u"this").put('length', var.get('Math').callprop('ceil', (var.get('number').get('length')/Js(3.0))))
                var.get(u"this").put('words', var.get('Array').create(var.get(u"this").get('length')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), Js(0.0))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                pass
                var.put('off', Js(0.0))
                if _seq(var.get('endian'),Js('be')):
                    #for JS loop
                    PyJsComma(var.put('i', (var.get('number').get('length')-Js(1.0))),var.put('j', Js(0.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.put('w', ((var.get('number').get(var.get('i'))|(var.get('number').get((var.get('i')-Js(1.0)))<<Js(8.0)))|(var.get('number').get((var.get('i')-Js(2.0)))<<Js(16.0))))
                            var.get(u"this").get('words').put(var.get('j'), ((var.get('w')<<var.get('off'))&Js(67108863)), '|')
                            var.get(u"this").get('words').put((var.get('j')+Js(1.0)), (PyJsBshift(var.get('w'),(Js(26.0)-var.get('off')))&Js(67108863)))
                            var.put('off', Js(24.0), '+')
                            if (var.get('off')>=Js(26.0)):
                                var.put('off', Js(26.0), '-')
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        finally:
                                var.put('i', Js(3.0), '-')
                else:
                    if _seq(var.get('endian'),Js('le')):
                        #for JS loop
                        PyJsComma(var.put('i', Js(0.0)),var.put('j', Js(0.0)))
                        while (var.get('i')<var.get('number').get('length')):
                            try:
                                var.put('w', ((var.get('number').get(var.get('i'))|(var.get('number').get((var.get('i')+Js(1.0)))<<Js(8.0)))|(var.get('number').get((var.get('i')+Js(2.0)))<<Js(16.0))))
                                var.get(u"this").get('words').put(var.get('j'), ((var.get('w')<<var.get('off'))&Js(67108863)), '|')
                                var.get(u"this").get('words').put((var.get('j')+Js(1.0)), (PyJsBshift(var.get('w'),(Js(26.0)-var.get('off')))&Js(67108863)))
                                var.put('off', Js(24.0), '+')
                                if (var.get('off')>=Js(26.0)):
                                    var.put('off', Js(26.0), '-')
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                            finally:
                                    var.put('i', Js(3.0), '+')
                return var.get(u"this").callprop('_strip')
            PyJs__initArray_341_._set_name('_initArray')
            var.get('BN').get('prototype').put('_initArray', PyJs__initArray_341_)
            pass
            @Js
            def PyJs__parseHex_342_(number, start, this, arguments, var=var):
                var = Scope({'number':number, 'start':start, 'this':this, 'arguments':arguments, '_parseHex':PyJs__parseHex_342_}, var)
                var.registers(['w', 'j', 'i', 'off', 'start', 'number'])
                var.get(u"this").put('length', var.get('Math').callprop('ceil', ((var.get('number').get('length')-var.get('start'))/Js(6.0))))
                var.get(u"this").put('words', var.get('Array').create(var.get(u"this").get('length')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), Js(0.0))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                pass
                var.put('off', Js(0.0))
                #for JS loop
                PyJsComma(var.put('i', (var.get('number').get('length')-Js(6.0))),var.put('j', Js(0.0)))
                while (var.get('i')>=var.get('start')):
                    try:
                        var.put('w', var.get('parseHex')(var.get('number'), var.get('i'), (var.get('i')+Js(6.0))))
                        var.get(u"this").get('words').put(var.get('j'), ((var.get('w')<<var.get('off'))&Js(67108863)), '|')
                        var.get(u"this").get('words').put((var.get('j')+Js(1.0)), (PyJsBshift(var.get('w'),(Js(26.0)-var.get('off')))&Js(4194303)), '|')
                        var.put('off', Js(24.0), '+')
                        if (var.get('off')>=Js(26.0)):
                            var.put('off', Js(26.0), '-')
                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    finally:
                            var.put('i', Js(6.0), '-')
                if PyJsStrictNeq((var.get('i')+Js(6.0)),var.get('start')):
                    var.put('w', var.get('parseHex')(var.get('number'), var.get('start'), (var.get('i')+Js(6.0))))
                    var.get(u"this").get('words').put(var.get('j'), ((var.get('w')<<var.get('off'))&Js(67108863)), '|')
                    var.get(u"this").get('words').put((var.get('j')+Js(1.0)), (PyJsBshift(var.get('w'),(Js(26.0)-var.get('off')))&Js(4194303)), '|')
                var.get(u"this").callprop('_strip')
            PyJs__parseHex_342_._set_name('_parseHex')
            var.get('BN').get('prototype').put('_parseHex', PyJs__parseHex_342_)
            pass
            @Js
            def PyJs__parseBase_343_(number, base, start, this, arguments, var=var):
                var = Scope({'number':number, 'base':base, 'start':start, 'this':this, 'arguments':arguments, '_parseBase':PyJs__parseBase_343_}, var)
                var.registers(['total', 'base', 'i', 'limbPow', 'word', 'start', 'pow', 'number', 'end', 'mod', 'limbLen'])
                var.get(u"this").put('words', Js([Js(0.0)]))
                var.get(u"this").put('length', Js(1.0))
                #for JS loop
                var.put('limbLen', Js(0.0))
                var.put('limbPow', Js(1.0))
                while (var.get('limbPow')<=Js(67108863)):
                    try:
                        (var.put('limbLen',Js(var.get('limbLen').to_number())+Js(1))-Js(1))
                    finally:
                            var.put('limbPow', var.get('base'), '*')
                (var.put('limbLen',Js(var.get('limbLen').to_number())-Js(1))+Js(1))
                var.put('limbPow', ((var.get('limbPow')/var.get('base'))|Js(0.0)))
                var.put('total', (var.get('number').get('length')-var.get('start')))
                var.put('mod', (var.get('total')%var.get('limbLen')))
                var.put('end', (var.get('Math').callprop('min', var.get('total'), (var.get('total')-var.get('mod')))+var.get('start')))
                var.put('word', Js(0.0))
                #for JS loop
                var.put('i', var.get('start'))
                while (var.get('i')<var.get('end')):
                    try:
                        var.put('word', var.get('parseBase')(var.get('number'), var.get('i'), (var.get('i')+var.get('limbLen')), var.get('base')))
                        var.get(u"this").callprop('imuln', var.get('limbPow'))
                        if ((var.get(u"this").get('words').get('0')+var.get('word'))<Js(67108864)):
                            var.get(u"this").get('words').put('0', var.get('word'), '+')
                        else:
                            var.get(u"this").callprop('_iaddn', var.get('word'))
                    finally:
                            var.put('i', var.get('limbLen'), '+')
                if PyJsStrictNeq(var.get('mod'),Js(0.0)):
                    var.put('pow', Js(1.0))
                    var.put('word', var.get('parseBase')(var.get('number'), var.get('i'), var.get('number').get('length'), var.get('base')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('mod')):
                        try:
                            var.put('pow', var.get('base'), '*')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get(u"this").callprop('imuln', var.get('pow'))
                    if ((var.get(u"this").get('words').get('0')+var.get('word'))<Js(67108864)):
                        var.get(u"this").get('words').put('0', var.get('word'), '+')
                    else:
                        var.get(u"this").callprop('_iaddn', var.get('word'))
            PyJs__parseBase_343_._set_name('_parseBase')
            var.get('BN').get('prototype').put('_parseBase', PyJs__parseBase_343_)
            @Js
            def PyJs_copy_344_(dest, this, arguments, var=var):
                var = Scope({'dest':dest, 'this':this, 'arguments':arguments, 'copy':PyJs_copy_344_}, var)
                var.registers(['i', 'dest'])
                var.get('dest').put('words', var.get('Array').create(var.get(u"this").get('length')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.get('dest').get('words').put(var.get('i'), var.get(u"this").get('words').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('dest').put('length', var.get(u"this").get('length'))
                var.get('dest').put('negative', var.get(u"this").get('negative'))
                var.get('dest').put('red', var.get(u"this").get('red'))
            PyJs_copy_344_._set_name('copy')
            var.get('BN').get('prototype').put('copy', PyJs_copy_344_)
            pass
            @Js
            def PyJs__move_345_(dest, this, arguments, var=var):
                var = Scope({'dest':dest, 'this':this, 'arguments':arguments, '_move':PyJs__move_345_}, var)
                var.registers(['dest'])
                var.get('move')(var.get('dest'), var.get(u"this"))
            PyJs__move_345_._set_name('_move')
            var.get('BN').get('prototype').put('_move', PyJs__move_345_)
            @Js
            def PyJs_clone_346_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_346_}, var)
                var.registers(['r'])
                var.put('r', var.get('BN').create(var.get(u"null")))
                var.get(u"this").callprop('copy', var.get('r'))
                return var.get('r')
            PyJs_clone_346_._set_name('clone')
            var.get('BN').get('prototype').put('clone', PyJs_clone_346_)
            @Js
            def PyJs__expand_347_(size, this, arguments, var=var):
                var = Scope({'size':size, 'this':this, 'arguments':arguments, '_expand':PyJs__expand_347_}, var)
                var.registers(['size'])
                while (var.get(u"this").get('length')<var.get('size')):
                    var.get(u"this").get('words').put((var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1)), Js(0.0))
                return var.get(u"this")
            PyJs__expand_347_._set_name('_expand')
            var.get('BN').get('prototype').put('_expand', PyJs__expand_347_)
            @Js
            def PyJs_strip_348_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'strip':PyJs_strip_348_}, var)
                var.registers([])
                while ((var.get(u"this").get('length')>Js(1.0)) and _seq(var.get(u"this").get('words').get((var.get(u"this").get('length')-Js(1.0))),Js(0.0))):
                    (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())-Js(1))+Js(1))
                return var.get(u"this").callprop('_normSign')
            PyJs_strip_348_._set_name('strip')
            var.get('BN').get('prototype').put('_strip', PyJs_strip_348_)
            @Js
            def PyJs__normSign_349_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, '_normSign':PyJs__normSign_349_}, var)
                var.registers([])
                if (_seq(var.get(u"this").get('length'),Js(1.0)) and _seq(var.get(u"this").get('words').get('0'),Js(0.0))):
                    var.get(u"this").put('negative', Js(0.0))
                return var.get(u"this")
            PyJs__normSign_349_._set_name('_normSign')
            var.get('BN').get('prototype').put('_normSign', PyJs__normSign_349_)
            if (PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and _seq(var.get('Symbol').get('for').typeof(),Js('function'))):
                try:
                    var.get('BN').get('prototype').put(var.get('Symbol').callprop('for', Js('nodejs.util.inspect.custom')), var.get('inspect'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_43971066 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get('BN').get('prototype').put('inspect', var.get('inspect'))
                    finally:
                        if PyJsHolder_65_43971066 is not None:
                            var.own['e'] = PyJsHolder_65_43971066
                        else:
                            del var.own['e']
                        del PyJsHolder_65_43971066
            else:
                var.get('BN').get('prototype').put('inspect', var.get('inspect'))
            pass
            var.put('zeros', Js([Js(''), Js('0'), Js('00'), Js('000'), Js('0000'), Js('00000'), Js('000000'), Js('0000000'), Js('00000000'), Js('000000000'), Js('0000000000'), Js('00000000000'), Js('000000000000'), Js('0000000000000'), Js('00000000000000'), Js('000000000000000'), Js('0000000000000000'), Js('00000000000000000'), Js('000000000000000000'), Js('0000000000000000000'), Js('00000000000000000000'), Js('000000000000000000000'), Js('0000000000000000000000'), Js('00000000000000000000000'), Js('000000000000000000000000'), Js('0000000000000000000000000')]))
            var.put('groupSizes', Js([Js(0.0), Js(0.0), Js(25.0), Js(16.0), Js(12.0), Js(11.0), Js(10.0), Js(9.0), Js(8.0), Js(8.0), Js(7.0), Js(7.0), Js(7.0), Js(7.0), Js(6.0), Js(6.0), Js(6.0), Js(6.0), Js(6.0), Js(6.0), Js(6.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0), Js(5.0)]))
            var.put('groupBases', Js([Js(0.0), Js(0.0), Js(33554432.0), Js(43046721.0), Js(16777216.0), Js(48828125.0), Js(60466176.0), Js(40353607.0), Js(16777216.0), Js(43046721.0), Js(10000000.0), Js(19487171.0), Js(35831808.0), Js(62748517.0), Js(7529536.0), Js(11390625.0), Js(16777216.0), Js(24137569.0), Js(34012224.0), Js(47045881.0), Js(64000000.0), Js(4084101.0), Js(5153632.0), Js(6436343.0), Js(7962624.0), Js(9765625.0), Js(11881376.0), Js(14348907.0), Js(17210368.0), Js(20511149.0), Js(24300000.0), Js(28629151.0), Js(33554432.0), Js(39135393.0), Js(45435424.0), Js(52521875.0), Js(60466176.0)]))
            @Js
            def PyJs_toString_350_(base, padding, this, arguments, var=var):
                var = Scope({'base':base, 'padding':padding, 'this':this, 'arguments':arguments, 'toString':PyJs_toString_350_}, var)
                var.registers(['groupSize', 'w', 'r', 'base', 'i', 'off', 'out', 'c', 'word', 'padding', 'groupBase', 'carry'])
                var.put('base', (var.get('base') or Js(10.0)))
                var.put('padding', ((var.get('padding')|Js(0.0)) or Js(1.0)))
                pass
                if (_seq(var.get('base'),Js(16.0)) or _seq(var.get('base'),Js('hex'))):
                    var.put('out', Js(''))
                    var.put('off', Js(0.0))
                    var.put('carry', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get(u"this").get('length')):
                        try:
                            var.put('w', var.get(u"this").get('words').get(var.get('i')))
                            var.put('word', (((var.get('w')<<var.get('off'))|var.get('carry'))&Js(16777215)).callprop('toString', Js(16.0)))
                            var.put('carry', (PyJsBshift(var.get('w'),(Js(24.0)-var.get('off')))&Js(16777215)))
                            if (PyJsStrictNeq(var.get('carry'),Js(0.0)) or PyJsStrictNeq(var.get('i'),(var.get(u"this").get('length')-Js(1.0)))):
                                var.put('out', ((var.get('zeros').get((Js(6.0)-var.get('word').get('length')))+var.get('word'))+var.get('out')))
                            else:
                                var.put('out', (var.get('word')+var.get('out')))
                            var.put('off', Js(2.0), '+')
                            if (var.get('off')>=Js(26.0)):
                                var.put('off', Js(26.0), '-')
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                        var.put('out', (var.get('carry').callprop('toString', Js(16.0))+var.get('out')))
                    while PyJsStrictNeq((var.get('out').get('length')%var.get('padding')),Js(0.0)):
                        var.put('out', (Js('0')+var.get('out')))
                    if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                        var.put('out', (Js('-')+var.get('out')))
                    return var.get('out')
                if ((_seq(var.get('base'),(var.get('base')|Js(0.0))) and (var.get('base')>=Js(2.0))) and (var.get('base')<=Js(36.0))):
                    var.put('groupSize', var.get('groupSizes').get(var.get('base')))
                    var.put('groupBase', var.get('groupBases').get(var.get('base')))
                    var.put('out', Js(''))
                    var.put('c', var.get(u"this").callprop('clone'))
                    var.get('c').put('negative', Js(0.0))
                    while var.get('c').callprop('isZero').neg():
                        var.put('r', var.get('c').callprop('modrn', var.get('groupBase')).callprop('toString', var.get('base')))
                        var.put('c', var.get('c').callprop('idivn', var.get('groupBase')))
                        if var.get('c').callprop('isZero').neg():
                            var.put('out', ((var.get('zeros').get((var.get('groupSize')-var.get('r').get('length')))+var.get('r'))+var.get('out')))
                        else:
                            var.put('out', (var.get('r')+var.get('out')))
                    if var.get(u"this").callprop('isZero'):
                        var.put('out', (Js('0')+var.get('out')))
                    while PyJsStrictNeq((var.get('out').get('length')%var.get('padding')),Js(0.0)):
                        var.put('out', (Js('0')+var.get('out')))
                    if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                        var.put('out', (Js('-')+var.get('out')))
                    return var.get('out')
                var.get('assert')(Js(False), Js('Base should be between 2 and 36'))
            PyJs_toString_350_._set_name('toString')
            var.get('BN').get('prototype').put('toString', PyJs_toString_350_)
            @Js
            def PyJs_toNumber_351_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toNumber':PyJs_toNumber_351_}, var)
                var.registers(['ret'])
                var.put('ret', var.get(u"this").get('words').get('0'))
                if _seq(var.get(u"this").get('length'),Js(2.0)):
                    var.put('ret', (var.get(u"this").get('words').get('1')*Js(67108864)), '+')
                else:
                    if (_seq(var.get(u"this").get('length'),Js(3.0)) and _seq(var.get(u"this").get('words').get('2'),Js(1))):
                        var.put('ret', (Js(4503599627370496)+(var.get(u"this").get('words').get('1')*Js(67108864))), '+')
                    else:
                        if (var.get(u"this").get('length')>Js(2.0)):
                            var.get('assert')(Js(False), Js('Number can only safely store up to 53 bits'))
                return ((-var.get('ret')) if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) else var.get('ret'))
            PyJs_toNumber_351_._set_name('toNumber')
            var.get('BN').get('prototype').put('toNumber', PyJs_toNumber_351_)
            @Js
            def PyJs_toJSON_352_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_352_}, var)
                var.registers([])
                return var.get(u"this").callprop('toString', Js(16.0), Js(2.0))
            PyJs_toJSON_352_._set_name('toJSON')
            var.get('BN').get('prototype').put('toJSON', PyJs_toJSON_352_)
            if var.get('Buffer'):
                @Js
                def PyJs_toBuffer_353_(endian, length, this, arguments, var=var):
                    var = Scope({'endian':endian, 'length':length, 'this':this, 'arguments':arguments, 'toBuffer':PyJs_toBuffer_353_}, var)
                    var.registers(['length', 'endian'])
                    return var.get(u"this").callprop('toArrayLike', var.get('Buffer'), var.get('endian'), var.get('length'))
                PyJs_toBuffer_353_._set_name('toBuffer')
                var.get('BN').get('prototype').put('toBuffer', PyJs_toBuffer_353_)
            @Js
            def PyJs_toArray_354_(endian, length, this, arguments, var=var):
                var = Scope({'endian':endian, 'length':length, 'this':this, 'arguments':arguments, 'toArray':PyJs_toArray_354_}, var)
                var.registers(['length', 'endian'])
                return var.get(u"this").callprop('toArrayLike', var.get('Array'), var.get('endian'), var.get('length'))
            PyJs_toArray_354_._set_name('toArray')
            var.get('BN').get('prototype').put('toArray', PyJs_toArray_354_)
            @Js
            def PyJs_allocate_355_(ArrayType, size, this, arguments, var=var):
                var = Scope({'ArrayType':ArrayType, 'size':size, 'this':this, 'arguments':arguments, 'allocate':PyJs_allocate_355_}, var)
                var.registers(['size', 'ArrayType'])
                if var.get('ArrayType').get('allocUnsafe'):
                    return var.get('ArrayType').callprop('allocUnsafe', var.get('size'))
                return var.get('ArrayType').create(var.get('size'))
            PyJs_allocate_355_._set_name('allocate')
            var.put('allocate', PyJs_allocate_355_)
            @Js
            def PyJs_toArrayLike_356_(ArrayType, endian, length, this, arguments, var=var):
                var = Scope({'ArrayType':ArrayType, 'endian':endian, 'length':length, 'this':this, 'arguments':arguments, 'toArrayLike':PyJs_toArrayLike_356_}, var)
                var.registers(['ArrayType', 'length', 'byteLength', 'postfix', 'reqLength', 'endian', 'res'])
                var.get(u"this").callprop('_strip')
                var.put('byteLength', var.get(u"this").callprop('byteLength'))
                var.put('reqLength', (var.get('length') or var.get('Math').callprop('max', Js(1.0), var.get('byteLength'))))
                var.get('assert')((var.get('byteLength')<=var.get('reqLength')), Js('byte array longer than desired length'))
                var.get('assert')((var.get('reqLength')>Js(0.0)), Js('Requested array length <= 0'))
                var.put('res', var.get('allocate')(var.get('ArrayType'), var.get('reqLength')))
                var.put('postfix', (Js('LE') if _seq(var.get('endian'),Js('le')) else Js('BE')))
                var.get(u"this").callprop((Js('_toArrayLike')+var.get('postfix')), var.get('res'), var.get('byteLength'))
                return var.get('res')
            PyJs_toArrayLike_356_._set_name('toArrayLike')
            var.get('BN').get('prototype').put('toArrayLike', PyJs_toArrayLike_356_)
            @Js
            def PyJs__toArrayLikeLE_357_(res, byteLength, this, arguments, var=var):
                var = Scope({'res':res, 'byteLength':byteLength, 'this':this, 'arguments':arguments, '_toArrayLikeLE':PyJs__toArrayLikeLE_357_}, var)
                var.registers(['i', 'word', 'byteLength', 'shift', 'carry', 'position', 'res'])
                var.put('position', Js(0.0))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                var.put('shift', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.put('word', ((var.get(u"this").get('words').get(var.get('i'))<<var.get('shift'))|var.get('carry')))
                        var.get('res').put((var.put('position',Js(var.get('position').to_number())+Js(1))-Js(1)), (var.get('word')&Js(255)))
                        if (var.get('position')<var.get('res').get('length')):
                            var.get('res').put((var.put('position',Js(var.get('position').to_number())+Js(1))-Js(1)), ((var.get('word')>>Js(8.0))&Js(255)))
                        if (var.get('position')<var.get('res').get('length')):
                            var.get('res').put((var.put('position',Js(var.get('position').to_number())+Js(1))-Js(1)), ((var.get('word')>>Js(16.0))&Js(255)))
                        if _seq(var.get('shift'),Js(6.0)):
                            if (var.get('position')<var.get('res').get('length')):
                                var.get('res').put((var.put('position',Js(var.get('position').to_number())+Js(1))-Js(1)), ((var.get('word')>>Js(24.0))&Js(255)))
                            var.put('carry', Js(0.0))
                            var.put('shift', Js(0.0))
                        else:
                            var.put('carry', PyJsBshift(var.get('word'),Js(24.0)))
                            var.put('shift', Js(2.0), '+')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if (var.get('position')<var.get('res').get('length')):
                    var.get('res').put((var.put('position',Js(var.get('position').to_number())+Js(1))-Js(1)), var.get('carry'))
                    while (var.get('position')<var.get('res').get('length')):
                        var.get('res').put((var.put('position',Js(var.get('position').to_number())+Js(1))-Js(1)), Js(0.0))
            PyJs__toArrayLikeLE_357_._set_name('_toArrayLikeLE')
            var.get('BN').get('prototype').put('_toArrayLikeLE', PyJs__toArrayLikeLE_357_)
            @Js
            def PyJs__toArrayLikeBE_358_(res, byteLength, this, arguments, var=var):
                var = Scope({'res':res, 'byteLength':byteLength, 'this':this, 'arguments':arguments, '_toArrayLikeBE':PyJs__toArrayLikeBE_358_}, var)
                var.registers(['i', 'word', 'byteLength', 'shift', 'carry', 'position', 'res'])
                var.put('position', (var.get('res').get('length')-Js(1.0)))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                var.put('shift', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.put('word', ((var.get(u"this").get('words').get(var.get('i'))<<var.get('shift'))|var.get('carry')))
                        var.get('res').put((var.put('position',Js(var.get('position').to_number())-Js(1))+Js(1)), (var.get('word')&Js(255)))
                        if (var.get('position')>=Js(0.0)):
                            var.get('res').put((var.put('position',Js(var.get('position').to_number())-Js(1))+Js(1)), ((var.get('word')>>Js(8.0))&Js(255)))
                        if (var.get('position')>=Js(0.0)):
                            var.get('res').put((var.put('position',Js(var.get('position').to_number())-Js(1))+Js(1)), ((var.get('word')>>Js(16.0))&Js(255)))
                        if _seq(var.get('shift'),Js(6.0)):
                            if (var.get('position')>=Js(0.0)):
                                var.get('res').put((var.put('position',Js(var.get('position').to_number())-Js(1))+Js(1)), ((var.get('word')>>Js(24.0))&Js(255)))
                            var.put('carry', Js(0.0))
                            var.put('shift', Js(0.0))
                        else:
                            var.put('carry', PyJsBshift(var.get('word'),Js(24.0)))
                            var.put('shift', Js(2.0), '+')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if (var.get('position')>=Js(0.0)):
                    var.get('res').put((var.put('position',Js(var.get('position').to_number())-Js(1))+Js(1)), var.get('carry'))
                    while (var.get('position')>=Js(0.0)):
                        var.get('res').put((var.put('position',Js(var.get('position').to_number())-Js(1))+Js(1)), Js(0.0))
            PyJs__toArrayLikeBE_358_._set_name('_toArrayLikeBE')
            var.get('BN').get('prototype').put('_toArrayLikeBE', PyJs__toArrayLikeBE_358_)
            if var.get('Math').get('clz32'):
                @Js
                def PyJs__countBits_359_(w, this, arguments, var=var):
                    var = Scope({'w':w, 'this':this, 'arguments':arguments, '_countBits':PyJs__countBits_359_}, var)
                    var.registers(['w'])
                    return (Js(32.0)-var.get('Math').callprop('clz32', var.get('w')))
                PyJs__countBits_359_._set_name('_countBits')
                var.get('BN').get('prototype').put('_countBits', PyJs__countBits_359_)
            else:
                @Js
                def PyJs__countBits_360_(w, this, arguments, var=var):
                    var = Scope({'w':w, 'this':this, 'arguments':arguments, '_countBits':PyJs__countBits_360_}, var)
                    var.registers(['w', 'r', 't'])
                    var.put('t', var.get('w'))
                    var.put('r', Js(0.0))
                    if (var.get('t')>=Js(4096)):
                        var.put('r', Js(13.0), '+')
                        var.put('t', Js(13.0), '>>>')
                    if (var.get('t')>=Js(64)):
                        var.put('r', Js(7.0), '+')
                        var.put('t', Js(7.0), '>>>')
                    if (var.get('t')>=Js(8)):
                        var.put('r', Js(4.0), '+')
                        var.put('t', Js(4.0), '>>>')
                    if (var.get('t')>=Js(2)):
                        var.put('r', Js(2.0), '+')
                        var.put('t', Js(2.0), '>>>')
                    return (var.get('r')+var.get('t'))
                PyJs__countBits_360_._set_name('_countBits')
                var.get('BN').get('prototype').put('_countBits', PyJs__countBits_360_)
            @Js
            def PyJs__zeroBits_361_(w, this, arguments, var=var):
                var = Scope({'w':w, 'this':this, 'arguments':arguments, '_zeroBits':PyJs__zeroBits_361_}, var)
                var.registers(['w', 'r', 't'])
                if _seq(var.get('w'),Js(0.0)):
                    return Js(26.0)
                var.put('t', var.get('w'))
                var.put('r', Js(0.0))
                if _seq((var.get('t')&Js(8191)),Js(0.0)):
                    var.put('r', Js(13.0), '+')
                    var.put('t', Js(13.0), '>>>')
                if _seq((var.get('t')&Js(127)),Js(0.0)):
                    var.put('r', Js(7.0), '+')
                    var.put('t', Js(7.0), '>>>')
                if _seq((var.get('t')&Js(15)),Js(0.0)):
                    var.put('r', Js(4.0), '+')
                    var.put('t', Js(4.0), '>>>')
                if _seq((var.get('t')&Js(3)),Js(0.0)):
                    var.put('r', Js(2.0), '+')
                    var.put('t', Js(2.0), '>>>')
                if _seq((var.get('t')&Js(1)),Js(0.0)):
                    (var.put('r',Js(var.get('r').to_number())+Js(1))-Js(1))
                return var.get('r')
            PyJs__zeroBits_361_._set_name('_zeroBits')
            var.get('BN').get('prototype').put('_zeroBits', PyJs__zeroBits_361_)
            @Js
            def PyJs_bitLength_362_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'bitLength':PyJs_bitLength_362_}, var)
                var.registers(['w', 'hi'])
                var.put('w', var.get(u"this").get('words').get((var.get(u"this").get('length')-Js(1.0))))
                var.put('hi', var.get(u"this").callprop('_countBits', var.get('w')))
                return (((var.get(u"this").get('length')-Js(1.0))*Js(26.0))+var.get('hi'))
            PyJs_bitLength_362_._set_name('bitLength')
            var.get('BN').get('prototype').put('bitLength', PyJs_bitLength_362_)
            pass
            @Js
            def PyJs_zeroBits_363_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'zeroBits':PyJs_zeroBits_363_}, var)
                var.registers(['i', 'r', 'b'])
                if var.get(u"this").callprop('isZero'):
                    return Js(0.0)
                var.put('r', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.put('b', var.get(u"this").callprop('_zeroBits', var.get(u"this").get('words').get(var.get('i'))))
                        var.put('r', var.get('b'), '+')
                        if PyJsStrictNeq(var.get('b'),Js(26.0)):
                            break
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('r')
            PyJs_zeroBits_363_._set_name('zeroBits')
            var.get('BN').get('prototype').put('zeroBits', PyJs_zeroBits_363_)
            @Js
            def PyJs_byteLength_364_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'byteLength':PyJs_byteLength_364_}, var)
                var.registers([])
                return var.get('Math').callprop('ceil', (var.get(u"this").callprop('bitLength')/Js(8.0)))
            PyJs_byteLength_364_._set_name('byteLength')
            var.get('BN').get('prototype').put('byteLength', PyJs_byteLength_364_)
            @Js
            def PyJs_toTwos_365_(width, this, arguments, var=var):
                var = Scope({'width':width, 'this':this, 'arguments':arguments, 'toTwos':PyJs_toTwos_365_}, var)
                var.registers(['width'])
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    return var.get(u"this").callprop('abs').callprop('inotn', var.get('width')).callprop('iaddn', Js(1.0))
                return var.get(u"this").callprop('clone')
            PyJs_toTwos_365_._set_name('toTwos')
            var.get('BN').get('prototype').put('toTwos', PyJs_toTwos_365_)
            @Js
            def PyJs_fromTwos_366_(width, this, arguments, var=var):
                var = Scope({'width':width, 'this':this, 'arguments':arguments, 'fromTwos':PyJs_fromTwos_366_}, var)
                var.registers(['width'])
                if var.get(u"this").callprop('testn', (var.get('width')-Js(1.0))):
                    return var.get(u"this").callprop('notn', var.get('width')).callprop('iaddn', Js(1.0)).callprop('ineg')
                return var.get(u"this").callprop('clone')
            PyJs_fromTwos_366_._set_name('fromTwos')
            var.get('BN').get('prototype').put('fromTwos', PyJs_fromTwos_366_)
            @Js
            def PyJs_isNeg_367_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isNeg':PyJs_isNeg_367_}, var)
                var.registers([])
                return PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0))
            PyJs_isNeg_367_._set_name('isNeg')
            var.get('BN').get('prototype').put('isNeg', PyJs_isNeg_367_)
            @Js
            def PyJs_neg_368_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'neg':PyJs_neg_368_}, var)
                var.registers([])
                return var.get(u"this").callprop('clone').callprop('ineg')
            PyJs_neg_368_._set_name('neg')
            var.get('BN').get('prototype').put('neg', PyJs_neg_368_)
            @Js
            def PyJs_ineg_369_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'ineg':PyJs_ineg_369_}, var)
                var.registers([])
                if var.get(u"this").callprop('isZero').neg():
                    var.get(u"this").put('negative', Js(1.0), '^')
                return var.get(u"this")
            PyJs_ineg_369_._set_name('ineg')
            var.get('BN').get('prototype').put('ineg', PyJs_ineg_369_)
            @Js
            def PyJs_iuor_370_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iuor':PyJs_iuor_370_}, var)
                var.registers(['i', 'num'])
                while (var.get(u"this").get('length')<var.get('num').get('length')):
                    var.get(u"this").get('words').put((var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1)), Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('num').get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), (var.get(u"this").get('words').get(var.get('i'))|var.get('num').get('words').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get(u"this").callprop('_strip')
            PyJs_iuor_370_._set_name('iuor')
            var.get('BN').get('prototype').put('iuor', PyJs_iuor_370_)
            @Js
            def PyJs_ior_371_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ior':PyJs_ior_371_}, var)
                var.registers(['num'])
                var.get('assert')(_seq((var.get(u"this").get('negative')|var.get('num').get('negative')),Js(0.0)))
                return var.get(u"this").callprop('iuor', var.get('num'))
            PyJs_ior_371_._set_name('ior')
            var.get('BN').get('prototype').put('ior', PyJs_ior_371_)
            @Js
            def PyJs_InlineNonPyName_372_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'or':PyJs_InlineNonPyName_372_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('ior', var.get('num'))
                return var.get('num').callprop('clone').callprop('ior', var.get(u"this"))
            PyJs_InlineNonPyName_372_._set_name('or')
            var.get('BN').get('prototype').put('or', PyJs_InlineNonPyName_372_)
            @Js
            def PyJs_uor_373_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'uor':PyJs_uor_373_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iuor', var.get('num'))
                return var.get('num').callprop('clone').callprop('iuor', var.get(u"this"))
            PyJs_uor_373_._set_name('uor')
            var.get('BN').get('prototype').put('uor', PyJs_uor_373_)
            @Js
            def PyJs_iuand_374_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iuand':PyJs_iuand_374_}, var)
                var.registers(['i', 'num', 'b'])
                pass
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    var.put('b', var.get('num'))
                else:
                    var.put('b', var.get(u"this"))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('b').get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), (var.get(u"this").get('words').get(var.get('i'))&var.get('num').get('words').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('b').get('length'))
                return var.get(u"this").callprop('_strip')
            PyJs_iuand_374_._set_name('iuand')
            var.get('BN').get('prototype').put('iuand', PyJs_iuand_374_)
            @Js
            def PyJs_iand_375_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iand':PyJs_iand_375_}, var)
                var.registers(['num'])
                var.get('assert')(_seq((var.get(u"this").get('negative')|var.get('num').get('negative')),Js(0.0)))
                return var.get(u"this").callprop('iuand', var.get('num'))
            PyJs_iand_375_._set_name('iand')
            var.get('BN').get('prototype').put('iand', PyJs_iand_375_)
            @Js
            def PyJs_InlineNonPyName_376_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'and':PyJs_InlineNonPyName_376_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iand', var.get('num'))
                return var.get('num').callprop('clone').callprop('iand', var.get(u"this"))
            PyJs_InlineNonPyName_376_._set_name('and')
            var.get('BN').get('prototype').put('and', PyJs_InlineNonPyName_376_)
            @Js
            def PyJs_uand_377_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'uand':PyJs_uand_377_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iuand', var.get('num'))
                return var.get('num').callprop('clone').callprop('iuand', var.get(u"this"))
            PyJs_uand_377_._set_name('uand')
            var.get('BN').get('prototype').put('uand', PyJs_uand_377_)
            @Js
            def PyJs_iuxor_378_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iuxor':PyJs_iuxor_378_}, var)
                var.registers(['i', 'a', 'num', 'b'])
                pass
                pass
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    var.put('a', var.get(u"this"))
                    var.put('b', var.get('num'))
                else:
                    var.put('a', var.get('num'))
                    var.put('b', var.get(u"this"))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('b').get('length')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), (var.get('a').get('words').get(var.get('i'))^var.get('b').get('words').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get(u"this"),var.get('a')):
                    #for JS loop

                    while (var.get('i')<var.get('a').get('length')):
                        try:
                            var.get(u"this").get('words').put(var.get('i'), var.get('a').get('words').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('a').get('length'))
                return var.get(u"this").callprop('_strip')
            PyJs_iuxor_378_._set_name('iuxor')
            var.get('BN').get('prototype').put('iuxor', PyJs_iuxor_378_)
            @Js
            def PyJs_ixor_379_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ixor':PyJs_ixor_379_}, var)
                var.registers(['num'])
                var.get('assert')(_seq((var.get(u"this").get('negative')|var.get('num').get('negative')),Js(0.0)))
                return var.get(u"this").callprop('iuxor', var.get('num'))
            PyJs_ixor_379_._set_name('ixor')
            var.get('BN').get('prototype').put('ixor', PyJs_ixor_379_)
            @Js
            def PyJs_xor_380_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'xor':PyJs_xor_380_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('ixor', var.get('num'))
                return var.get('num').callprop('clone').callprop('ixor', var.get(u"this"))
            PyJs_xor_380_._set_name('xor')
            var.get('BN').get('prototype').put('xor', PyJs_xor_380_)
            @Js
            def PyJs_uxor_381_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'uxor':PyJs_uxor_381_}, var)
                var.registers(['num'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iuxor', var.get('num'))
                return var.get('num').callprop('clone').callprop('iuxor', var.get(u"this"))
            PyJs_uxor_381_._set_name('uxor')
            var.get('BN').get('prototype').put('uxor', PyJs_uxor_381_)
            @Js
            def PyJs_inotn_382_(width, this, arguments, var=var):
                var = Scope({'width':width, 'this':this, 'arguments':arguments, 'inotn':PyJs_inotn_382_}, var)
                var.registers(['i', 'width', 'bytesNeeded', 'bitsLeft'])
                var.get('assert')((_seq(var.get('width',throw=False).typeof(),Js('number')) and (var.get('width')>=Js(0.0))))
                var.put('bytesNeeded', (var.get('Math').callprop('ceil', (var.get('width')/Js(26.0)))|Js(0.0)))
                var.put('bitsLeft', (var.get('width')%Js(26.0)))
                var.get(u"this").callprop('_expand', var.get('bytesNeeded'))
                if (var.get('bitsLeft')>Js(0.0)):
                    (var.put('bytesNeeded',Js(var.get('bytesNeeded').to_number())-Js(1))+Js(1))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('bytesNeeded')):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), ((~var.get(u"this").get('words').get(var.get('i')))&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if (var.get('bitsLeft')>Js(0.0)):
                    var.get(u"this").get('words').put(var.get('i'), ((~var.get(u"this").get('words').get(var.get('i')))&(Js(67108863)>>(Js(26.0)-var.get('bitsLeft')))))
                return var.get(u"this").callprop('_strip')
            PyJs_inotn_382_._set_name('inotn')
            var.get('BN').get('prototype').put('inotn', PyJs_inotn_382_)
            @Js
            def PyJs_notn_383_(width, this, arguments, var=var):
                var = Scope({'width':width, 'this':this, 'arguments':arguments, 'notn':PyJs_notn_383_}, var)
                var.registers(['width'])
                return var.get(u"this").callprop('clone').callprop('inotn', var.get('width'))
            PyJs_notn_383_._set_name('notn')
            var.get('BN').get('prototype').put('notn', PyJs_notn_383_)
            @Js
            def PyJs_setn_384_(bit, val, this, arguments, var=var):
                var = Scope({'bit':bit, 'val':val, 'this':this, 'arguments':arguments, 'setn':PyJs_setn_384_}, var)
                var.registers(['wbit', 'off', 'bit', 'val'])
                var.get('assert')((_seq(var.get('bit',throw=False).typeof(),Js('number')) and (var.get('bit')>=Js(0.0))))
                var.put('off', ((var.get('bit')/Js(26.0))|Js(0.0)))
                var.put('wbit', (var.get('bit')%Js(26.0)))
                var.get(u"this").callprop('_expand', (var.get('off')+Js(1.0)))
                if var.get('val'):
                    var.get(u"this").get('words').put(var.get('off'), (var.get(u"this").get('words').get(var.get('off'))|(Js(1.0)<<var.get('wbit'))))
                else:
                    var.get(u"this").get('words').put(var.get('off'), (var.get(u"this").get('words').get(var.get('off'))&(~(Js(1.0)<<var.get('wbit')))))
                return var.get(u"this").callprop('_strip')
            PyJs_setn_384_._set_name('setn')
            var.get('BN').get('prototype').put('setn', PyJs_setn_384_)
            @Js
            def PyJs_iadd_385_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iadd':PyJs_iadd_385_}, var)
                var.registers(['a', 'r', 'i', 'num', 'b', 'carry'])
                pass
                if (PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) and _seq(var.get('num').get('negative'),Js(0.0))):
                    var.get(u"this").put('negative', Js(0.0))
                    var.put('r', var.get(u"this").callprop('isub', var.get('num')))
                    var.get(u"this").put('negative', Js(1.0), '^')
                    return var.get(u"this").callprop('_normSign')
                else:
                    if (_seq(var.get(u"this").get('negative'),Js(0.0)) and PyJsStrictNeq(var.get('num').get('negative'),Js(0.0))):
                        var.get('num').put('negative', Js(0.0))
                        var.put('r', var.get(u"this").callprop('isub', var.get('num')))
                        var.get('num').put('negative', Js(1.0))
                        return var.get('r').callprop('_normSign')
                pass
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    var.put('a', var.get(u"this"))
                    var.put('b', var.get('num'))
                else:
                    var.put('a', var.get('num'))
                    var.put('b', var.get(u"this"))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('b').get('length')):
                    try:
                        var.put('r', (((var.get('a').get('words').get(var.get('i'))|Js(0.0))+(var.get('b').get('words').get(var.get('i'))|Js(0.0)))+var.get('carry')))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('r')&Js(67108863)))
                        var.put('carry', PyJsBshift(var.get('r'),Js(26.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                #for JS loop

                while (PyJsStrictNeq(var.get('carry'),Js(0.0)) and (var.get('i')<var.get('a').get('length'))):
                    try:
                        var.put('r', ((var.get('a').get('words').get(var.get('i'))|Js(0.0))+var.get('carry')))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('r')&Js(67108863)))
                        var.put('carry', PyJsBshift(var.get('r'),Js(26.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('a').get('length'))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get(u"this").get('words').put(var.get(u"this").get('length'), var.get('carry'))
                    (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1))
                else:
                    if PyJsStrictNeq(var.get('a'),var.get(u"this")):
                        #for JS loop

                        while (var.get('i')<var.get('a').get('length')):
                            try:
                                var.get(u"this").get('words').put(var.get('i'), var.get('a').get('words').get(var.get('i')))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get(u"this")
            PyJs_iadd_385_._set_name('iadd')
            var.get('BN').get('prototype').put('iadd', PyJs_iadd_385_)
            @Js
            def PyJs_add_386_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'add':PyJs_add_386_}, var)
                var.registers(['num', 'res'])
                pass
                if (PyJsStrictNeq(var.get('num').get('negative'),Js(0.0)) and _seq(var.get(u"this").get('negative'),Js(0.0))):
                    var.get('num').put('negative', Js(0.0))
                    var.put('res', var.get(u"this").callprop('sub', var.get('num')))
                    var.get('num').put('negative', Js(1.0), '^')
                    return var.get('res')
                else:
                    if (_seq(var.get('num').get('negative'),Js(0.0)) and PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0))):
                        var.get(u"this").put('negative', Js(0.0))
                        var.put('res', var.get('num').callprop('sub', var.get(u"this")))
                        var.get(u"this").put('negative', Js(1.0))
                        return var.get('res')
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return var.get(u"this").callprop('clone').callprop('iadd', var.get('num'))
                return var.get('num').callprop('clone').callprop('iadd', var.get(u"this"))
            PyJs_add_386_._set_name('add')
            var.get('BN').get('prototype').put('add', PyJs_add_386_)
            @Js
            def PyJs_isub_387_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'isub':PyJs_isub_387_}, var)
                var.registers(['a', 'r', 'i', 'num', 'b', 'cmp', 'carry'])
                if PyJsStrictNeq(var.get('num').get('negative'),Js(0.0)):
                    var.get('num').put('negative', Js(0.0))
                    var.put('r', var.get(u"this").callprop('iadd', var.get('num')))
                    var.get('num').put('negative', Js(1.0))
                    return var.get('r').callprop('_normSign')
                else:
                    if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                        var.get(u"this").put('negative', Js(0.0))
                        var.get(u"this").callprop('iadd', var.get('num'))
                        var.get(u"this").put('negative', Js(1.0))
                        return var.get(u"this").callprop('_normSign')
                var.put('cmp', var.get(u"this").callprop('cmp', var.get('num')))
                if _seq(var.get('cmp'),Js(0.0)):
                    var.get(u"this").put('negative', Js(0.0))
                    var.get(u"this").put('length', Js(1.0))
                    var.get(u"this").get('words').put('0', Js(0.0))
                    return var.get(u"this")
                pass
                if (var.get('cmp')>Js(0.0)):
                    var.put('a', var.get(u"this"))
                    var.put('b', var.get('num'))
                else:
                    var.put('a', var.get('num'))
                    var.put('b', var.get(u"this"))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('b').get('length')):
                    try:
                        var.put('r', (((var.get('a').get('words').get(var.get('i'))|Js(0.0))-(var.get('b').get('words').get(var.get('i'))|Js(0.0)))+var.get('carry')))
                        var.put('carry', (var.get('r')>>Js(26.0)))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('r')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                #for JS loop

                while (PyJsStrictNeq(var.get('carry'),Js(0.0)) and (var.get('i')<var.get('a').get('length'))):
                    try:
                        var.put('r', ((var.get('a').get('words').get(var.get('i'))|Js(0.0))+var.get('carry')))
                        var.put('carry', (var.get('r')>>Js(26.0)))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('r')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if ((_seq(var.get('carry'),Js(0.0)) and (var.get('i')<var.get('a').get('length'))) and PyJsStrictNeq(var.get('a'),var.get(u"this"))):
                    #for JS loop

                    while (var.get('i')<var.get('a').get('length')):
                        try:
                            var.get(u"this").get('words').put(var.get('i'), var.get('a').get('words').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('Math').callprop('max', var.get(u"this").get('length'), var.get('i')))
                if PyJsStrictNeq(var.get('a'),var.get(u"this")):
                    var.get(u"this").put('negative', Js(1.0))
                return var.get(u"this").callprop('_strip')
            PyJs_isub_387_._set_name('isub')
            var.get('BN').get('prototype').put('isub', PyJs_isub_387_)
            @Js
            def PyJs_sub_388_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'sub':PyJs_sub_388_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('isub', var.get('num'))
            PyJs_sub_388_._set_name('sub')
            var.get('BN').get('prototype').put('sub', PyJs_sub_388_)
            pass
            @Js
            def PyJs_comb10MulTo_389_(self, num, out, this, arguments, var=var):
                var = Scope({'self':self, 'num':num, 'out':out, 'this':this, 'arguments':arguments, 'comb10MulTo':PyJs_comb10MulTo_389_}, var)
                var.registers(['a', 'bh1', 'bh8', 'bl8', 'bh9', 'al4', 'bh2', 'w5', 'al3', 'b9', 'bh0', 'w11', 'w9', 'ah0', 'bl1', 'w0', 'lo', 'al7', 'b8', 'bh3', 'w3', 'bl3', 'a8', 'a1', 'bh6', 'a2', 'b0', 'a9', 'b6', 'w1', 'ah9', 'w12', 'a5', 'b1', 'al0', 'ah5', 'bh5', 'ah6', 'bh4', 'w18', 'al1', 'bl4', 'ah8', 'bl6', 'b7', 'out', 'ah1', 'al5', 'bl7', 'a4', 'ah7', 'o', 'w7', 'al2', 'w14', 'self', 'w10', 'hi', 'bl2', 'mid', 'w13', 'bl5', 'al9', 'w17', 'ah2', 'al8', 'a0', 'ah4', 'al6', 'b4', 'b5', 'bh7', 'b', 'ah3', 'bl9', 'w16', 'w6', 'c', 'a3', 'w8', 'b3', 'b2', 'bl0', 'w2', 'a7', 'w4', 'a6', 'num', 'w15'])
                var.put('a', var.get('self').get('words'))
                var.put('b', var.get('num').get('words'))
                var.put('o', var.get('out').get('words'))
                var.put('c', Js(0.0))
                pass
                pass
                pass
                var.put('a0', (var.get('a').get('0')|Js(0.0)))
                var.put('al0', (var.get('a0')&Js(8191)))
                var.put('ah0', PyJsBshift(var.get('a0'),Js(13.0)))
                var.put('a1', (var.get('a').get('1')|Js(0.0)))
                var.put('al1', (var.get('a1')&Js(8191)))
                var.put('ah1', PyJsBshift(var.get('a1'),Js(13.0)))
                var.put('a2', (var.get('a').get('2')|Js(0.0)))
                var.put('al2', (var.get('a2')&Js(8191)))
                var.put('ah2', PyJsBshift(var.get('a2'),Js(13.0)))
                var.put('a3', (var.get('a').get('3')|Js(0.0)))
                var.put('al3', (var.get('a3')&Js(8191)))
                var.put('ah3', PyJsBshift(var.get('a3'),Js(13.0)))
                var.put('a4', (var.get('a').get('4')|Js(0.0)))
                var.put('al4', (var.get('a4')&Js(8191)))
                var.put('ah4', PyJsBshift(var.get('a4'),Js(13.0)))
                var.put('a5', (var.get('a').get('5')|Js(0.0)))
                var.put('al5', (var.get('a5')&Js(8191)))
                var.put('ah5', PyJsBshift(var.get('a5'),Js(13.0)))
                var.put('a6', (var.get('a').get('6')|Js(0.0)))
                var.put('al6', (var.get('a6')&Js(8191)))
                var.put('ah6', PyJsBshift(var.get('a6'),Js(13.0)))
                var.put('a7', (var.get('a').get('7')|Js(0.0)))
                var.put('al7', (var.get('a7')&Js(8191)))
                var.put('ah7', PyJsBshift(var.get('a7'),Js(13.0)))
                var.put('a8', (var.get('a').get('8')|Js(0.0)))
                var.put('al8', (var.get('a8')&Js(8191)))
                var.put('ah8', PyJsBshift(var.get('a8'),Js(13.0)))
                var.put('a9', (var.get('a').get('9')|Js(0.0)))
                var.put('al9', (var.get('a9')&Js(8191)))
                var.put('ah9', PyJsBshift(var.get('a9'),Js(13.0)))
                var.put('b0', (var.get('b').get('0')|Js(0.0)))
                var.put('bl0', (var.get('b0')&Js(8191)))
                var.put('bh0', PyJsBshift(var.get('b0'),Js(13.0)))
                var.put('b1', (var.get('b').get('1')|Js(0.0)))
                var.put('bl1', (var.get('b1')&Js(8191)))
                var.put('bh1', PyJsBshift(var.get('b1'),Js(13.0)))
                var.put('b2', (var.get('b').get('2')|Js(0.0)))
                var.put('bl2', (var.get('b2')&Js(8191)))
                var.put('bh2', PyJsBshift(var.get('b2'),Js(13.0)))
                var.put('b3', (var.get('b').get('3')|Js(0.0)))
                var.put('bl3', (var.get('b3')&Js(8191)))
                var.put('bh3', PyJsBshift(var.get('b3'),Js(13.0)))
                var.put('b4', (var.get('b').get('4')|Js(0.0)))
                var.put('bl4', (var.get('b4')&Js(8191)))
                var.put('bh4', PyJsBshift(var.get('b4'),Js(13.0)))
                var.put('b5', (var.get('b').get('5')|Js(0.0)))
                var.put('bl5', (var.get('b5')&Js(8191)))
                var.put('bh5', PyJsBshift(var.get('b5'),Js(13.0)))
                var.put('b6', (var.get('b').get('6')|Js(0.0)))
                var.put('bl6', (var.get('b6')&Js(8191)))
                var.put('bh6', PyJsBshift(var.get('b6'),Js(13.0)))
                var.put('b7', (var.get('b').get('7')|Js(0.0)))
                var.put('bl7', (var.get('b7')&Js(8191)))
                var.put('bh7', PyJsBshift(var.get('b7'),Js(13.0)))
                var.put('b8', (var.get('b').get('8')|Js(0.0)))
                var.put('bl8', (var.get('b8')&Js(8191)))
                var.put('bh8', PyJsBshift(var.get('b8'),Js(13.0)))
                var.put('b9', (var.get('b').get('9')|Js(0.0)))
                var.put('bl9', (var.get('b9')&Js(8191)))
                var.put('bh9', PyJsBshift(var.get('b9'),Js(13.0)))
                var.get('out').put('negative', (var.get('self').get('negative')^var.get('num').get('negative')))
                var.get('out').put('length', Js(19.0))
                var.put('lo', var.get('Math').callprop('imul', var.get('al0'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al0'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah0'), var.get('bh0')))
                var.put('w0', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w0'),Js(26.0)))|Js(0.0)))
                var.put('w0', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al1'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al1'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah1'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh1')))|Js(0.0)))
                var.put('w1', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w1'),Js(26.0)))|Js(0.0)))
                var.put('w1', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al2'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al2'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah2'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh2')))|Js(0.0)))
                var.put('w2', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w2'),Js(26.0)))|Js(0.0)))
                var.put('w2', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al3'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al3'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah3'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh3')))|Js(0.0)))
                var.put('w3', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w3'),Js(26.0)))|Js(0.0)))
                var.put('w3', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al4'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al4'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah4'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh4')))|Js(0.0)))
                var.put('w4', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w4'),Js(26.0)))|Js(0.0)))
                var.put('w4', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al5'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al5'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah5'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh5')))|Js(0.0)))
                var.put('w5', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w5'),Js(26.0)))|Js(0.0)))
                var.put('w5', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al6'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al6'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah6'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh6')))|Js(0.0)))
                var.put('w6', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w6'),Js(26.0)))|Js(0.0)))
                var.put('w6', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al7'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al7'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah7'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh7')))|Js(0.0)))
                var.put('w7', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w7'),Js(26.0)))|Js(0.0)))
                var.put('w7', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al8'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al8'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah8'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh8')))|Js(0.0)))
                var.put('w8', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w8'),Js(26.0)))|Js(0.0)))
                var.put('w8', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl0')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh0')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl0')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh0')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh1')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl1')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh1')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al0'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al0'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah0'), var.get('bh9')))|Js(0.0)))
                var.put('w9', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w9'),Js(26.0)))|Js(0.0)))
                var.put('w9', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl1')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh1')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl1')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh1')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh2')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl2')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh2')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al1'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al1'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah1'), var.get('bh9')))|Js(0.0)))
                var.put('w10', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w10'),Js(26.0)))|Js(0.0)))
                var.put('w10', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl2')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh2')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl2')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh2')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh3')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl3')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh3')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al2'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al2'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah2'), var.get('bh9')))|Js(0.0)))
                var.put('w11', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w11'),Js(26.0)))|Js(0.0)))
                var.put('w11', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl3')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh3')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl3')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh3')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh4')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl4')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh4')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al3'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al3'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah3'), var.get('bh9')))|Js(0.0)))
                var.put('w12', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w12'),Js(26.0)))|Js(0.0)))
                var.put('w12', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl4')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh4')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl4')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh4')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh5')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl5')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh5')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al4'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al4'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah4'), var.get('bh9')))|Js(0.0)))
                var.put('w13', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w13'),Js(26.0)))|Js(0.0)))
                var.put('w13', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl5')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh5')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl5')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh5')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh6')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl6')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh6')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al5'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al5'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah5'), var.get('bh9')))|Js(0.0)))
                var.put('w14', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w14'),Js(26.0)))|Js(0.0)))
                var.put('w14', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl6')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh6')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl6')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh6')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh7')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl7')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh7')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al6'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al6'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah6'), var.get('bh9')))|Js(0.0)))
                var.put('w15', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w15'),Js(26.0)))|Js(0.0)))
                var.put('w15', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl7')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh7')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl7')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh7')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh8')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl8')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh8')))|Js(0.0)))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al7'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al7'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah7'), var.get('bh9')))|Js(0.0)))
                var.put('w16', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w16'),Js(26.0)))|Js(0.0)))
                var.put('w16', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl8')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh8')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl8')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh8')))
                var.put('lo', ((var.get('lo')+var.get('Math').callprop('imul', var.get('al8'), var.get('bl9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('al8'), var.get('bh9')))|Js(0.0)))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bl9')))|Js(0.0)))
                var.put('hi', ((var.get('hi')+var.get('Math').callprop('imul', var.get('ah8'), var.get('bh9')))|Js(0.0)))
                var.put('w17', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w17'),Js(26.0)))|Js(0.0)))
                var.put('w17', Js(67108863), '&')
                var.put('lo', var.get('Math').callprop('imul', var.get('al9'), var.get('bl9')))
                var.put('mid', var.get('Math').callprop('imul', var.get('al9'), var.get('bh9')))
                var.put('mid', ((var.get('mid')+var.get('Math').callprop('imul', var.get('ah9'), var.get('bl9')))|Js(0.0)))
                var.put('hi', var.get('Math').callprop('imul', var.get('ah9'), var.get('bh9')))
                var.put('w18', ((((var.get('c')+var.get('lo'))|Js(0.0))+((var.get('mid')&Js(8191))<<Js(13.0)))|Js(0.0)))
                var.put('c', ((((var.get('hi')+PyJsBshift(var.get('mid'),Js(13.0)))|Js(0.0))+PyJsBshift(var.get('w18'),Js(26.0)))|Js(0.0)))
                var.put('w18', Js(67108863), '&')
                var.get('o').put('0', var.get('w0'))
                var.get('o').put('1', var.get('w1'))
                var.get('o').put('2', var.get('w2'))
                var.get('o').put('3', var.get('w3'))
                var.get('o').put('4', var.get('w4'))
                var.get('o').put('5', var.get('w5'))
                var.get('o').put('6', var.get('w6'))
                var.get('o').put('7', var.get('w7'))
                var.get('o').put('8', var.get('w8'))
                var.get('o').put('9', var.get('w9'))
                var.get('o').put('10', var.get('w10'))
                var.get('o').put('11', var.get('w11'))
                var.get('o').put('12', var.get('w12'))
                var.get('o').put('13', var.get('w13'))
                var.get('o').put('14', var.get('w14'))
                var.get('o').put('15', var.get('w15'))
                var.get('o').put('16', var.get('w16'))
                var.get('o').put('17', var.get('w17'))
                var.get('o').put('18', var.get('w18'))
                if PyJsStrictNeq(var.get('c'),Js(0.0)):
                    var.get('o').put('19', var.get('c'))
                    (var.get('out').put('length',Js(var.get('out').get('length').to_number())+Js(1))-Js(1))
                return var.get('out')
            PyJs_comb10MulTo_389_._set_name('comb10MulTo')
            var.put('comb10MulTo', PyJs_comb10MulTo_389_)
            if var.get('Math').get('imul').neg():
                var.put('comb10MulTo', var.get('smallMulTo'))
            pass
            pass
            @Js
            def PyJs_mulTo_390_(num, out, this, arguments, var=var):
                var = Scope({'num':num, 'out':out, 'this':this, 'arguments':arguments, 'mulTo':PyJs_mulTo_390_}, var)
                var.registers(['len', 'out', 'num', 'res'])
                pass
                var.put('len', (var.get(u"this").get('length')+var.get('num').get('length')))
                if (_seq(var.get(u"this").get('length'),Js(10.0)) and _seq(var.get('num').get('length'),Js(10.0))):
                    var.put('res', var.get('comb10MulTo')(var.get(u"this"), var.get('num'), var.get('out')))
                else:
                    if (var.get('len')<Js(63.0)):
                        var.put('res', var.get('smallMulTo')(var.get(u"this"), var.get('num'), var.get('out')))
                    else:
                        if (var.get('len')<Js(1024.0)):
                            var.put('res', var.get('bigMulTo')(var.get(u"this"), var.get('num'), var.get('out')))
                        else:
                            var.put('res', var.get('jumboMulTo')(var.get(u"this"), var.get('num'), var.get('out')))
                return var.get('res')
            PyJs_mulTo_390_._set_name('mulTo')
            var.get('BN').get('prototype').put('mulTo', PyJs_mulTo_390_)
            pass
            @Js
            def PyJs_makeRBT_391_(N, this, arguments, var=var):
                var = Scope({'N':N, 'this':this, 'arguments':arguments, 'makeRBT':PyJs_makeRBT_391_}, var)
                var.registers(['i', 'l', 'N', 't'])
                var.put('t', var.get('Array').create(var.get('N')))
                var.put('l', (var.get('BN').get('prototype').callprop('_countBits', var.get('N'))-Js(1.0)))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('N')):
                    try:
                        var.get('t').put(var.get('i'), var.get(u"this").callprop('revBin', var.get('i'), var.get('l'), var.get('N')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('t')
            PyJs_makeRBT_391_._set_name('makeRBT')
            var.get('FFTM').get('prototype').put('makeRBT', PyJs_makeRBT_391_)
            @Js
            def PyJs_revBin_392_(x, l, N, this, arguments, var=var):
                var = Scope({'x':x, 'l':l, 'N':N, 'this':this, 'arguments':arguments, 'revBin':PyJs_revBin_392_}, var)
                var.registers(['N', 'i', 'x', 'l', 'rb'])
                if (_seq(var.get('x'),Js(0.0)) or _seq(var.get('x'),(var.get('N')-Js(1.0)))):
                    return var.get('x')
                var.put('rb', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('l')):
                    try:
                        var.put('rb', ((var.get('x')&Js(1.0))<<((var.get('l')-var.get('i'))-Js(1.0))), '|')
                        var.put('x', Js(1.0), '>>')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('rb')
            PyJs_revBin_392_._set_name('revBin')
            var.get('FFTM').get('prototype').put('revBin', PyJs_revBin_392_)
            @Js
            def PyJs_permute_393_(rbt, rws, iws, rtws, itws, N, this, arguments, var=var):
                var = Scope({'rbt':rbt, 'rws':rws, 'iws':iws, 'rtws':rtws, 'itws':itws, 'N':N, 'this':this, 'arguments':arguments, 'permute':PyJs_permute_393_}, var)
                var.registers(['itws', 'rws', 'N', 'rbt', 'i', 'rtws', 'iws'])
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('N')):
                    try:
                        var.get('rtws').put(var.get('i'), var.get('rws').get(var.get('rbt').get(var.get('i'))))
                        var.get('itws').put(var.get('i'), var.get('iws').get(var.get('rbt').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJs_permute_393_._set_name('permute')
            var.get('FFTM').get('prototype').put('permute', PyJs_permute_393_)
            @Js
            def PyJs_transform_394_(rws, iws, rtws, itws, N, rbt, this, arguments, var=var):
                var = Scope({'rws':rws, 'iws':iws, 'rtws':rtws, 'itws':itws, 'N':N, 'rbt':rbt, 'this':this, 'arguments':arguments, 'transform':PyJs_transform_394_}, var)
                var.registers(['itws', 'j', 'rtwdf', 'itwdf', 'iws', 'rtwdf_', 'ro', 'rws', 'rtws', 's', 'rbt', 'itwdf_', 'p', 're', 'ie', 'rx', 'N', 'l', 'io'])
                var.get(u"this").callprop('permute', var.get('rbt'), var.get('rws'), var.get('iws'), var.get('rtws'), var.get('itws'), var.get('N'))
                #for JS loop
                var.put('s', Js(1.0))
                while (var.get('s')<var.get('N')):
                    try:
                        var.put('l', (var.get('s')<<Js(1.0)))
                        var.put('rtwdf', var.get('Math').callprop('cos', ((Js(2.0)*var.get('Math').get('PI'))/var.get('l'))))
                        var.put('itwdf', var.get('Math').callprop('sin', ((Js(2.0)*var.get('Math').get('PI'))/var.get('l'))))
                        #for JS loop
                        var.put('p', Js(0.0))
                        while (var.get('p')<var.get('N')):
                            try:
                                var.put('rtwdf_', var.get('rtwdf'))
                                var.put('itwdf_', var.get('itwdf'))
                                #for JS loop
                                var.put('j', Js(0.0))
                                while (var.get('j')<var.get('s')):
                                    try:
                                        var.put('re', var.get('rtws').get((var.get('p')+var.get('j'))))
                                        var.put('ie', var.get('itws').get((var.get('p')+var.get('j'))))
                                        var.put('ro', var.get('rtws').get(((var.get('p')+var.get('j'))+var.get('s'))))
                                        var.put('io', var.get('itws').get(((var.get('p')+var.get('j'))+var.get('s'))))
                                        var.put('rx', ((var.get('rtwdf_')*var.get('ro'))-(var.get('itwdf_')*var.get('io'))))
                                        var.put('io', ((var.get('rtwdf_')*var.get('io'))+(var.get('itwdf_')*var.get('ro'))))
                                        var.put('ro', var.get('rx'))
                                        var.get('rtws').put((var.get('p')+var.get('j')), (var.get('re')+var.get('ro')))
                                        var.get('itws').put((var.get('p')+var.get('j')), (var.get('ie')+var.get('io')))
                                        var.get('rtws').put(((var.get('p')+var.get('j'))+var.get('s')), (var.get('re')-var.get('ro')))
                                        var.get('itws').put(((var.get('p')+var.get('j'))+var.get('s')), (var.get('ie')-var.get('io')))
                                        if PyJsStrictNeq(var.get('j'),var.get('l')):
                                            var.put('rx', ((var.get('rtwdf')*var.get('rtwdf_'))-(var.get('itwdf')*var.get('itwdf_'))))
                                            var.put('itwdf_', ((var.get('rtwdf')*var.get('itwdf_'))+(var.get('itwdf')*var.get('rtwdf_'))))
                                            var.put('rtwdf_', var.get('rx'))
                                    finally:
                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                            finally:
                                    var.put('p', var.get('l'), '+')
                    finally:
                            var.put('s', Js(1.0), '<<')
            PyJs_transform_394_._set_name('transform')
            var.get('FFTM').get('prototype').put('transform', PyJs_transform_394_)
            @Js
            def PyJs_guessLen13b_395_(n, m, this, arguments, var=var):
                var = Scope({'n':n, 'm':m, 'this':this, 'arguments':arguments, 'guessLen13b':PyJs_guessLen13b_395_}, var)
                var.registers(['N', 'i', 'n', 'm', 'odd'])
                var.put('N', (var.get('Math').callprop('max', var.get('m'), var.get('n'))|Js(1.0)))
                var.put('odd', (var.get('N')&Js(1.0)))
                var.put('i', Js(0.0))
                #for JS loop
                var.put('N', ((var.get('N')/Js(2.0))|Js(0.0)))
                while var.get('N'):
                    try:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    finally:
                            var.put('N', PyJsBshift(var.get('N'),Js(1.0)))
                return (Js(1.0)<<((var.get('i')+Js(1.0))+var.get('odd')))
            PyJs_guessLen13b_395_._set_name('guessLen13b')
            var.get('FFTM').get('prototype').put('guessLen13b', PyJs_guessLen13b_395_)
            @Js
            def PyJs_conjugate_396_(rws, iws, N, this, arguments, var=var):
                var = Scope({'rws':rws, 'iws':iws, 'N':N, 'this':this, 'arguments':arguments, 'conjugate':PyJs_conjugate_396_}, var)
                var.registers(['N', 'rws', 'i', 't', 'iws'])
                if (var.get('N')<=Js(1.0)):
                    return var.get('undefined')
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<(var.get('N')/Js(2.0))):
                    try:
                        var.put('t', var.get('rws').get(var.get('i')))
                        var.get('rws').put(var.get('i'), var.get('rws').get(((var.get('N')-var.get('i'))-Js(1.0))))
                        var.get('rws').put(((var.get('N')-var.get('i'))-Js(1.0)), var.get('t'))
                        var.put('t', var.get('iws').get(var.get('i')))
                        var.get('iws').put(var.get('i'), (-var.get('iws').get(((var.get('N')-var.get('i'))-Js(1.0)))))
                        var.get('iws').put(((var.get('N')-var.get('i'))-Js(1.0)), (-var.get('t')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJs_conjugate_396_._set_name('conjugate')
            var.get('FFTM').get('prototype').put('conjugate', PyJs_conjugate_396_)
            @Js
            def PyJs_normalize13b_397_(ws, N, this, arguments, var=var):
                var = Scope({'ws':ws, 'N':N, 'this':this, 'arguments':arguments, 'normalize13b':PyJs_normalize13b_397_}, var)
                var.registers(['w', 'N', 'i', 'ws', 'carry'])
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<(var.get('N')/Js(2.0))):
                    try:
                        var.put('w', (((var.get('Math').callprop('round', (var.get('ws').get(((Js(2.0)*var.get('i'))+Js(1.0)))/var.get('N')))*Js(8192))+var.get('Math').callprop('round', (var.get('ws').get((Js(2.0)*var.get('i')))/var.get('N'))))+var.get('carry')))
                        var.get('ws').put(var.get('i'), (var.get('w')&Js(67108863)))
                        if (var.get('w')<Js(67108864)):
                            var.put('carry', Js(0.0))
                        else:
                            var.put('carry', ((var.get('w')/Js(67108864))|Js(0.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('ws')
            PyJs_normalize13b_397_._set_name('normalize13b')
            var.get('FFTM').get('prototype').put('normalize13b', PyJs_normalize13b_397_)
            @Js
            def PyJs_convert13b_398_(ws, len, rws, N, this, arguments, var=var):
                var = Scope({'ws':ws, 'len':len, 'rws':rws, 'N':N, 'this':this, 'arguments':arguments, 'convert13b':PyJs_convert13b_398_}, var)
                var.registers(['rws', 'N', 'i', 'len', 'ws', 'carry'])
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('len')):
                    try:
                        var.put('carry', (var.get('carry')+(var.get('ws').get(var.get('i'))|Js(0.0))))
                        var.get('rws').put((Js(2.0)*var.get('i')), (var.get('carry')&Js(8191)))
                        var.put('carry', PyJsBshift(var.get('carry'),Js(13.0)))
                        var.get('rws').put(((Js(2.0)*var.get('i'))+Js(1.0)), (var.get('carry')&Js(8191)))
                        var.put('carry', PyJsBshift(var.get('carry'),Js(13.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                #for JS loop
                var.put('i', (Js(2.0)*var.get('len')))
                while (var.get('i')<var.get('N')):
                    try:
                        var.get('rws').put(var.get('i'), Js(0.0))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                var.get('assert')(_seq(var.get('carry'),Js(0.0)))
                var.get('assert')(_seq((var.get('carry')&(~Js(8191))),Js(0.0)))
            PyJs_convert13b_398_._set_name('convert13b')
            var.get('FFTM').get('prototype').put('convert13b', PyJs_convert13b_398_)
            @Js
            def PyJs_stub_399_(N, this, arguments, var=var):
                var = Scope({'N':N, 'this':this, 'arguments':arguments, 'stub':PyJs_stub_399_}, var)
                var.registers(['i', 'ph', 'N'])
                var.put('ph', var.get('Array').create(var.get('N')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('N')):
                    try:
                        var.get('ph').put(var.get('i'), Js(0.0))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('ph')
            PyJs_stub_399_._set_name('stub')
            var.get('FFTM').get('prototype').put('stub', PyJs_stub_399_)
            @Js
            def PyJs_mulp_400_(x, y, out, this, arguments, var=var):
                var = Scope({'x':x, 'y':y, 'out':out, 'this':this, 'arguments':arguments, 'mulp':PyJs_mulp_400_}, var)
                var.registers(['_', 'nrws', 'rws', 'N', 'rwst', 'rbt', 'i', 'x', 'rmws', 'y', 'out', 'iwst', 'rx', 'niwst', 'nrwst'])
                var.put('N', (Js(2.0)*var.get(u"this").callprop('guessLen13b', var.get('x').get('length'), var.get('y').get('length'))))
                var.put('rbt', var.get(u"this").callprop('makeRBT', var.get('N')))
                var.put('_', var.get(u"this").callprop('stub', var.get('N')))
                var.put('rws', var.get('Array').create(var.get('N')))
                var.put('rwst', var.get('Array').create(var.get('N')))
                var.put('iwst', var.get('Array').create(var.get('N')))
                var.put('nrws', var.get('Array').create(var.get('N')))
                var.put('nrwst', var.get('Array').create(var.get('N')))
                var.put('niwst', var.get('Array').create(var.get('N')))
                var.put('rmws', var.get('out').get('words'))
                var.get('rmws').put('length', var.get('N'))
                var.get(u"this").callprop('convert13b', var.get('x').get('words'), var.get('x').get('length'), var.get('rws'), var.get('N'))
                var.get(u"this").callprop('convert13b', var.get('y').get('words'), var.get('y').get('length'), var.get('nrws'), var.get('N'))
                var.get(u"this").callprop('transform', var.get('rws'), var.get('_'), var.get('rwst'), var.get('iwst'), var.get('N'), var.get('rbt'))
                var.get(u"this").callprop('transform', var.get('nrws'), var.get('_'), var.get('nrwst'), var.get('niwst'), var.get('N'), var.get('rbt'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('N')):
                    try:
                        var.put('rx', ((var.get('rwst').get(var.get('i'))*var.get('nrwst').get(var.get('i')))-(var.get('iwst').get(var.get('i'))*var.get('niwst').get(var.get('i')))))
                        var.get('iwst').put(var.get('i'), ((var.get('rwst').get(var.get('i'))*var.get('niwst').get(var.get('i')))+(var.get('iwst').get(var.get('i'))*var.get('nrwst').get(var.get('i')))))
                        var.get('rwst').put(var.get('i'), var.get('rx'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").callprop('conjugate', var.get('rwst'), var.get('iwst'), var.get('N'))
                var.get(u"this").callprop('transform', var.get('rwst'), var.get('iwst'), var.get('rmws'), var.get('_'), var.get('N'), var.get('rbt'))
                var.get(u"this").callprop('conjugate', var.get('rmws'), var.get('_'), var.get('N'))
                var.get(u"this").callprop('normalize13b', var.get('rmws'), var.get('N'))
                var.get('out').put('negative', (var.get('x').get('negative')^var.get('y').get('negative')))
                var.get('out').put('length', (var.get('x').get('length')+var.get('y').get('length')))
                return var.get('out').callprop('_strip')
            PyJs_mulp_400_._set_name('mulp')
            var.get('FFTM').get('prototype').put('mulp', PyJs_mulp_400_)
            @Js
            def PyJs_mul_401_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_401_}, var)
                var.registers(['num', 'out'])
                var.put('out', var.get('BN').create(var.get(u"null")))
                var.get('out').put('words', var.get('Array').create((var.get(u"this").get('length')+var.get('num').get('length'))))
                return var.get(u"this").callprop('mulTo', var.get('num'), var.get('out'))
            PyJs_mul_401_._set_name('mul')
            var.get('BN').get('prototype').put('mul', PyJs_mul_401_)
            @Js
            def PyJs_mulf_402_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'mulf':PyJs_mulf_402_}, var)
                var.registers(['num', 'out'])
                var.put('out', var.get('BN').create(var.get(u"null")))
                var.get('out').put('words', var.get('Array').create((var.get(u"this").get('length')+var.get('num').get('length'))))
                return var.get('jumboMulTo')(var.get(u"this"), var.get('num'), var.get('out'))
            PyJs_mulf_402_._set_name('mulf')
            var.get('BN').get('prototype').put('mulf', PyJs_mulf_402_)
            @Js
            def PyJs_imul_403_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imul':PyJs_imul_403_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('mulTo', var.get('num'), var.get(u"this"))
            PyJs_imul_403_._set_name('imul')
            var.get('BN').get('prototype').put('imul', PyJs_imul_403_)
            @Js
            def PyJs_imuln_404_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imuln':PyJs_imuln_404_}, var)
                var.registers(['w', 'i', 'num', 'lo', 'isNegNum', 'carry'])
                var.put('isNegNum', (var.get('num')<Js(0.0)))
                if var.get('isNegNum'):
                    var.put('num', (-var.get('num')))
                var.get('assert')(_seq(var.get('num',throw=False).typeof(),Js('number')))
                var.get('assert')((var.get('num')<Js(67108864)))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.put('w', ((var.get(u"this").get('words').get(var.get('i'))|Js(0.0))*var.get('num')))
                        var.put('lo', ((var.get('w')&Js(67108863))+(var.get('carry')&Js(67108863))))
                        var.put('carry', Js(26.0), '>>')
                        var.put('carry', ((var.get('w')/Js(67108864))|Js(0.0)), '+')
                        var.put('carry', PyJsBshift(var.get('lo'),Js(26.0)), '+')
                        var.get(u"this").get('words').put(var.get('i'), (var.get('lo')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get(u"this").get('words').put(var.get('i'), var.get('carry'))
                    (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1))
                return (var.get(u"this").callprop('ineg') if var.get('isNegNum') else var.get(u"this"))
            PyJs_imuln_404_._set_name('imuln')
            var.get('BN').get('prototype').put('imuln', PyJs_imuln_404_)
            @Js
            def PyJs_muln_405_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'muln':PyJs_muln_405_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('imuln', var.get('num'))
            PyJs_muln_405_._set_name('muln')
            var.get('BN').get('prototype').put('muln', PyJs_muln_405_)
            @Js
            def PyJs_sqr_406_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'sqr':PyJs_sqr_406_}, var)
                var.registers([])
                return var.get(u"this").callprop('mul', var.get(u"this"))
            PyJs_sqr_406_._set_name('sqr')
            var.get('BN').get('prototype').put('sqr', PyJs_sqr_406_)
            @Js
            def PyJs_isqr_407_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isqr':PyJs_isqr_407_}, var)
                var.registers([])
                return var.get(u"this").callprop('imul', var.get(u"this").callprop('clone'))
            PyJs_isqr_407_._set_name('isqr')
            var.get('BN').get('prototype').put('isqr', PyJs_isqr_407_)
            @Js
            def PyJs_pow_408_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'pow':PyJs_pow_408_}, var)
                var.registers(['w', 'i', 'num', 'q', 'res'])
                var.put('w', var.get('toBitArray')(var.get('num')))
                if _seq(var.get('w').get('length'),Js(0.0)):
                    return var.get('BN').create(Js(1.0))
                var.put('res', var.get(u"this"))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('w').get('length')):
                    try:
                        if PyJsStrictNeq(var.get('w').get(var.get('i')),Js(0.0)):
                            break
                    finally:
                            PyJsComma((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)),var.put('res', var.get('res').callprop('sqr')))
                if (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('w').get('length')):
                    #for JS loop
                    var.put('q', var.get('res').callprop('sqr'))
                    while (var.get('i')<var.get('w').get('length')):
                        try:
                            if _seq(var.get('w').get(var.get('i')),Js(0.0)):
                                continue
                            var.put('res', var.get('res').callprop('mul', var.get('q')))
                        finally:
                                PyJsComma((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)),var.put('q', var.get('q').callprop('sqr')))
                return var.get('res')
            PyJs_pow_408_._set_name('pow')
            var.get('BN').get('prototype').put('pow', PyJs_pow_408_)
            @Js
            def PyJs_iushln_409_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'iushln':PyJs_iushln_409_}, var)
                var.registers(['newCarry', 'bits', 'carryMask', 'r', 'i', 'c', 'carry', 's'])
                var.get('assert')((_seq(var.get('bits',throw=False).typeof(),Js('number')) and (var.get('bits')>=Js(0.0))))
                var.put('r', (var.get('bits')%Js(26.0)))
                var.put('s', ((var.get('bits')-var.get('r'))/Js(26.0)))
                var.put('carryMask', (PyJsBshift(Js(67108863),(Js(26.0)-var.get('r')))<<(Js(26.0)-var.get('r'))))
                pass
                if PyJsStrictNeq(var.get('r'),Js(0.0)):
                    var.put('carry', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get(u"this").get('length')):
                        try:
                            var.put('newCarry', (var.get(u"this").get('words').get(var.get('i'))&var.get('carryMask')))
                            var.put('c', (((var.get(u"this").get('words').get(var.get('i'))|Js(0.0))-var.get('newCarry'))<<var.get('r')))
                            var.get(u"this").get('words').put(var.get('i'), (var.get('c')|var.get('carry')))
                            var.put('carry', PyJsBshift(var.get('newCarry'),(Js(26.0)-var.get('r'))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    if var.get('carry'):
                        var.get(u"this").get('words').put(var.get('i'), var.get('carry'))
                        (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('s'),Js(0.0)):
                    #for JS loop
                    var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.get(u"this").get('words').put((var.get('i')+var.get('s')), var.get(u"this").get('words').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('s')):
                        try:
                            var.get(u"this").get('words').put(var.get('i'), Js(0.0))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get(u"this").put('length', var.get('s'), '+')
                return var.get(u"this").callprop('_strip')
            PyJs_iushln_409_._set_name('iushln')
            var.get('BN').get('prototype').put('iushln', PyJs_iushln_409_)
            @Js
            def PyJs_ishln_410_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'ishln':PyJs_ishln_410_}, var)
                var.registers(['bits'])
                var.get('assert')(_seq(var.get(u"this").get('negative'),Js(0.0)))
                return var.get(u"this").callprop('iushln', var.get('bits'))
            PyJs_ishln_410_._set_name('ishln')
            var.get('BN').get('prototype').put('ishln', PyJs_ishln_410_)
            @Js
            def PyJs_iushrn_411_(bits, hint, extended, this, arguments, var=var):
                var = Scope({'bits':bits, 'hint':hint, 'extended':extended, 'this':this, 'arguments':arguments, 'iushrn':PyJs_iushrn_411_}, var)
                var.registers(['bits', 'maskedWords', 'hint', 'r', 'i', 'h', 'word', 'extended', 'mask', 'carry', 's'])
                var.get('assert')((_seq(var.get('bits',throw=False).typeof(),Js('number')) and (var.get('bits')>=Js(0.0))))
                pass
                if var.get('hint'):
                    var.put('h', ((var.get('hint')-(var.get('hint')%Js(26.0)))/Js(26.0)))
                else:
                    var.put('h', Js(0.0))
                var.put('r', (var.get('bits')%Js(26.0)))
                var.put('s', var.get('Math').callprop('min', ((var.get('bits')-var.get('r'))/Js(26.0)), var.get(u"this").get('length')))
                var.put('mask', (Js(67108863)^(PyJsBshift(Js(67108863),var.get('r'))<<var.get('r'))))
                var.put('maskedWords', var.get('extended'))
                var.put('h', var.get('s'), '-')
                var.put('h', var.get('Math').callprop('max', Js(0.0), var.get('h')))
                if var.get('maskedWords'):
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('s')):
                        try:
                            var.get('maskedWords').get('words').put(var.get('i'), var.get(u"this").get('words').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('maskedWords').put('length', var.get('s'))
                if _seq(var.get('s'),Js(0.0)):
                    pass
                else:
                    if (var.get(u"this").get('length')>var.get('s')):
                        var.get(u"this").put('length', var.get('s'), '-')
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get(u"this").get('length')):
                            try:
                                var.get(u"this").get('words').put(var.get('i'), var.get(u"this").get('words').get((var.get('i')+var.get('s'))))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    else:
                        var.get(u"this").get('words').put('0', Js(0.0))
                        var.get(u"this").put('length', Js(1.0))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                while ((var.get('i')>=Js(0.0)) and (PyJsStrictNeq(var.get('carry'),Js(0.0)) or (var.get('i')>=var.get('h')))):
                    try:
                        var.put('word', (var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))
                        var.get(u"this").get('words').put(var.get('i'), ((var.get('carry')<<(Js(26.0)-var.get('r')))|PyJsBshift(var.get('word'),var.get('r'))))
                        var.put('carry', (var.get('word')&var.get('mask')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                if (var.get('maskedWords') and PyJsStrictNeq(var.get('carry'),Js(0.0))):
                    var.get('maskedWords').get('words').put((var.get('maskedWords').put('length',Js(var.get('maskedWords').get('length').to_number())+Js(1))-Js(1)), var.get('carry'))
                if _seq(var.get(u"this").get('length'),Js(0.0)):
                    var.get(u"this").get('words').put('0', Js(0.0))
                    var.get(u"this").put('length', Js(1.0))
                return var.get(u"this").callprop('_strip')
            PyJs_iushrn_411_._set_name('iushrn')
            var.get('BN').get('prototype').put('iushrn', PyJs_iushrn_411_)
            @Js
            def PyJs_ishrn_412_(bits, hint, extended, this, arguments, var=var):
                var = Scope({'bits':bits, 'hint':hint, 'extended':extended, 'this':this, 'arguments':arguments, 'ishrn':PyJs_ishrn_412_}, var)
                var.registers(['bits', 'hint', 'extended'])
                var.get('assert')(_seq(var.get(u"this").get('negative'),Js(0.0)))
                return var.get(u"this").callprop('iushrn', var.get('bits'), var.get('hint'), var.get('extended'))
            PyJs_ishrn_412_._set_name('ishrn')
            var.get('BN').get('prototype').put('ishrn', PyJs_ishrn_412_)
            @Js
            def PyJs_shln_413_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'shln':PyJs_shln_413_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('ishln', var.get('bits'))
            PyJs_shln_413_._set_name('shln')
            var.get('BN').get('prototype').put('shln', PyJs_shln_413_)
            @Js
            def PyJs_ushln_414_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'ushln':PyJs_ushln_414_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('iushln', var.get('bits'))
            PyJs_ushln_414_._set_name('ushln')
            var.get('BN').get('prototype').put('ushln', PyJs_ushln_414_)
            @Js
            def PyJs_shrn_415_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'shrn':PyJs_shrn_415_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('ishrn', var.get('bits'))
            PyJs_shrn_415_._set_name('shrn')
            var.get('BN').get('prototype').put('shrn', PyJs_shrn_415_)
            @Js
            def PyJs_ushrn_416_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'ushrn':PyJs_ushrn_416_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('iushrn', var.get('bits'))
            PyJs_ushrn_416_._set_name('ushrn')
            var.get('BN').get('prototype').put('ushrn', PyJs_ushrn_416_)
            @Js
            def PyJs_testn_417_(bit, this, arguments, var=var):
                var = Scope({'bit':bit, 'this':this, 'arguments':arguments, 'testn':PyJs_testn_417_}, var)
                var.registers(['w', 'bit', 'r', 'q', 's'])
                var.get('assert')((_seq(var.get('bit',throw=False).typeof(),Js('number')) and (var.get('bit')>=Js(0.0))))
                var.put('r', (var.get('bit')%Js(26.0)))
                var.put('s', ((var.get('bit')-var.get('r'))/Js(26.0)))
                var.put('q', (Js(1.0)<<var.get('r')))
                if (var.get(u"this").get('length')<=var.get('s')):
                    return Js(False)
                var.put('w', var.get(u"this").get('words').get(var.get('s')))
                return (var.get('w')&var.get('q')).neg().neg()
            PyJs_testn_417_._set_name('testn')
            var.get('BN').get('prototype').put('testn', PyJs_testn_417_)
            @Js
            def PyJs_imaskn_418_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'imaskn':PyJs_imaskn_418_}, var)
                var.registers(['bits', 'mask', 'r', 's'])
                var.get('assert')((_seq(var.get('bits',throw=False).typeof(),Js('number')) and (var.get('bits')>=Js(0.0))))
                var.put('r', (var.get('bits')%Js(26.0)))
                var.put('s', ((var.get('bits')-var.get('r'))/Js(26.0)))
                var.get('assert')(_seq(var.get(u"this").get('negative'),Js(0.0)), Js('imaskn works only with positive numbers'))
                if (var.get(u"this").get('length')<=var.get('s')):
                    return var.get(u"this")
                if PyJsStrictNeq(var.get('r'),Js(0.0)):
                    (var.put('s',Js(var.get('s').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('Math').callprop('min', var.get('s'), var.get(u"this").get('length')))
                if PyJsStrictNeq(var.get('r'),Js(0.0)):
                    var.put('mask', (Js(67108863)^(PyJsBshift(Js(67108863),var.get('r'))<<var.get('r'))))
                    var.get(u"this").get('words').put((var.get(u"this").get('length')-Js(1.0)), var.get('mask'), '&')
                return var.get(u"this").callprop('_strip')
            PyJs_imaskn_418_._set_name('imaskn')
            var.get('BN').get('prototype').put('imaskn', PyJs_imaskn_418_)
            @Js
            def PyJs_maskn_419_(bits, this, arguments, var=var):
                var = Scope({'bits':bits, 'this':this, 'arguments':arguments, 'maskn':PyJs_maskn_419_}, var)
                var.registers(['bits'])
                return var.get(u"this").callprop('clone').callprop('imaskn', var.get('bits'))
            PyJs_maskn_419_._set_name('maskn')
            var.get('BN').get('prototype').put('maskn', PyJs_maskn_419_)
            @Js
            def PyJs_iaddn_420_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'iaddn':PyJs_iaddn_420_}, var)
                var.registers(['num'])
                var.get('assert')(_seq(var.get('num',throw=False).typeof(),Js('number')))
                var.get('assert')((var.get('num')<Js(67108864)))
                if (var.get('num')<Js(0.0)):
                    return var.get(u"this").callprop('isubn', (-var.get('num')))
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    if (_seq(var.get(u"this").get('length'),Js(1.0)) and ((var.get(u"this").get('words').get('0')|Js(0.0))<=var.get('num'))):
                        var.get(u"this").get('words').put('0', (var.get('num')-(var.get(u"this").get('words').get('0')|Js(0.0))))
                        var.get(u"this").put('negative', Js(0.0))
                        return var.get(u"this")
                    var.get(u"this").put('negative', Js(0.0))
                    var.get(u"this").callprop('isubn', var.get('num'))
                    var.get(u"this").put('negative', Js(1.0))
                    return var.get(u"this")
                return var.get(u"this").callprop('_iaddn', var.get('num'))
            PyJs_iaddn_420_._set_name('iaddn')
            var.get('BN').get('prototype').put('iaddn', PyJs_iaddn_420_)
            @Js
            def PyJs__iaddn_421_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, '_iaddn':PyJs__iaddn_421_}, var)
                var.registers(['i', 'num'])
                var.get(u"this").get('words').put('0', var.get('num'), '+')
                #for JS loop
                var.put('i', Js(0.0))
                while ((var.get('i')<var.get(u"this").get('length')) and (var.get(u"this").get('words').get(var.get('i'))>=Js(67108864))):
                    try:
                        var.get(u"this").get('words').put(var.get('i'), Js(67108864), '-')
                        if _seq(var.get('i'),(var.get(u"this").get('length')-Js(1.0))):
                            var.get(u"this").get('words').put((var.get('i')+Js(1.0)), Js(1.0))
                        else:
                            (var.get(u"this").get('words').put((var.get('i')+Js(1.0)),Js(var.get(u"this").get('words').get((var.get('i')+Js(1.0))).to_number())+Js(1))-Js(1))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('length', var.get('Math').callprop('max', var.get(u"this").get('length'), (var.get('i')+Js(1.0))))
                return var.get(u"this")
            PyJs__iaddn_421_._set_name('_iaddn')
            var.get('BN').get('prototype').put('_iaddn', PyJs__iaddn_421_)
            @Js
            def PyJs_isubn_422_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'isubn':PyJs_isubn_422_}, var)
                var.registers(['i', 'num'])
                var.get('assert')(_seq(var.get('num',throw=False).typeof(),Js('number')))
                var.get('assert')((var.get('num')<Js(67108864)))
                if (var.get('num')<Js(0.0)):
                    return var.get(u"this").callprop('iaddn', (-var.get('num')))
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    var.get(u"this").put('negative', Js(0.0))
                    var.get(u"this").callprop('iaddn', var.get('num'))
                    var.get(u"this").put('negative', Js(1.0))
                    return var.get(u"this")
                var.get(u"this").get('words').put('0', var.get('num'), '-')
                if (_seq(var.get(u"this").get('length'),Js(1.0)) and (var.get(u"this").get('words').get('0')<Js(0.0))):
                    var.get(u"this").get('words').put('0', (-var.get(u"this").get('words').get('0')))
                    var.get(u"this").put('negative', Js(1.0))
                else:
                    #for JS loop
                    var.put('i', Js(0.0))
                    while ((var.get('i')<var.get(u"this").get('length')) and (var.get(u"this").get('words').get(var.get('i'))<Js(0.0))):
                        try:
                            var.get(u"this").get('words').put(var.get('i'), Js(67108864), '+')
                            var.get(u"this").get('words').put((var.get('i')+Js(1.0)), Js(1.0), '-')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get(u"this").callprop('_strip')
            PyJs_isubn_422_._set_name('isubn')
            var.get('BN').get('prototype').put('isubn', PyJs_isubn_422_)
            @Js
            def PyJs_addn_423_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'addn':PyJs_addn_423_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('iaddn', var.get('num'))
            PyJs_addn_423_._set_name('addn')
            var.get('BN').get('prototype').put('addn', PyJs_addn_423_)
            @Js
            def PyJs_subn_424_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'subn':PyJs_subn_424_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('isubn', var.get('num'))
            PyJs_subn_424_._set_name('subn')
            var.get('BN').get('prototype').put('subn', PyJs_subn_424_)
            @Js
            def PyJs_iabs_425_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'iabs':PyJs_iabs_425_}, var)
                var.registers([])
                var.get(u"this").put('negative', Js(0.0))
                return var.get(u"this")
            PyJs_iabs_425_._set_name('iabs')
            var.get('BN').get('prototype').put('iabs', PyJs_iabs_425_)
            @Js
            def PyJs_abs_426_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'abs':PyJs_abs_426_}, var)
                var.registers([])
                return var.get(u"this").callprop('clone').callprop('iabs')
            PyJs_abs_426_._set_name('abs')
            var.get('BN').get('prototype').put('abs', PyJs_abs_426_)
            @Js
            def PyJs__ishlnsubmul_427_(num, mul, shift, this, arguments, var=var):
                var = Scope({'num':num, 'mul':mul, 'shift':shift, 'this':this, 'arguments':arguments, '_ishlnsubmul':PyJs__ishlnsubmul_427_}, var)
                var.registers(['w', 'len', 'i', 'num', 'right', 'shift', 'mul', 'carry'])
                var.put('len', (var.get('num').get('length')+var.get('shift')))
                pass
                var.get(u"this").callprop('_expand', var.get('len'))
                pass
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('num').get('length')):
                    try:
                        var.put('w', ((var.get(u"this").get('words').get((var.get('i')+var.get('shift')))|Js(0.0))+var.get('carry')))
                        var.put('right', ((var.get('num').get('words').get(var.get('i'))|Js(0.0))*var.get('mul')))
                        var.put('w', (var.get('right')&Js(67108863)), '-')
                        var.put('carry', ((var.get('w')>>Js(26.0))-((var.get('right')/Js(67108864))|Js(0.0))))
                        var.get(u"this").get('words').put((var.get('i')+var.get('shift')), (var.get('w')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                #for JS loop

                while (var.get('i')<(var.get(u"this").get('length')-var.get('shift'))):
                    try:
                        var.put('w', ((var.get(u"this").get('words').get((var.get('i')+var.get('shift')))|Js(0.0))+var.get('carry')))
                        var.put('carry', (var.get('w')>>Js(26.0)))
                        var.get(u"this").get('words').put((var.get('i')+var.get('shift')), (var.get('w')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if _seq(var.get('carry'),Js(0.0)):
                    return var.get(u"this").callprop('_strip')
                var.get('assert')(_seq(var.get('carry'),(-Js(1.0))))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('length')):
                    try:
                        var.put('w', ((-(var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))+var.get('carry')))
                        var.put('carry', (var.get('w')>>Js(26.0)))
                        var.get(u"this").get('words').put(var.get('i'), (var.get('w')&Js(67108863)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get(u"this").put('negative', Js(1.0))
                return var.get(u"this").callprop('_strip')
            PyJs__ishlnsubmul_427_._set_name('_ishlnsubmul')
            var.get('BN').get('prototype').put('_ishlnsubmul', PyJs__ishlnsubmul_427_)
            @Js
            def PyJs__wordDiv_428_(num, mode, this, arguments, var=var):
                var = Scope({'num':num, 'mode':mode, 'this':this, 'arguments':arguments, '_wordDiv':PyJs__wordDiv_428_}, var)
                var.registers(['a', 'diff', 'j', 'i', 'num', 'm', 'bhi', 'b', 'shift', 'q', 'qj', 'bhiBits', 'mode'])
                var.put('shift', (var.get(u"this").get('length')-var.get('num').get('length')))
                var.put('a', var.get(u"this").callprop('clone'))
                var.put('b', var.get('num'))
                var.put('bhi', (var.get('b').get('words').get((var.get('b').get('length')-Js(1.0)))|Js(0.0)))
                var.put('bhiBits', var.get(u"this").callprop('_countBits', var.get('bhi')))
                var.put('shift', (Js(26.0)-var.get('bhiBits')))
                if PyJsStrictNeq(var.get('shift'),Js(0.0)):
                    var.put('b', var.get('b').callprop('ushln', var.get('shift')))
                    var.get('a').callprop('iushln', var.get('shift'))
                    var.put('bhi', (var.get('b').get('words').get((var.get('b').get('length')-Js(1.0)))|Js(0.0)))
                var.put('m', (var.get('a').get('length')-var.get('b').get('length')))
                pass
                if PyJsStrictNeq(var.get('mode'),Js('mod')):
                    var.put('q', var.get('BN').create(var.get(u"null")))
                    var.get('q').put('length', (var.get('m')+Js(1.0)))
                    var.get('q').put('words', var.get('Array').create(var.get('q').get('length')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('q').get('length')):
                        try:
                            var.get('q').get('words').put(var.get('i'), Js(0.0))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('diff', var.get('a').callprop('clone').callprop('_ishlnsubmul', var.get('b'), Js(1.0), var.get('m')))
                if _seq(var.get('diff').get('negative'),Js(0.0)):
                    var.put('a', var.get('diff'))
                    if var.get('q'):
                        var.get('q').get('words').put(var.get('m'), Js(1.0))
                #for JS loop
                var.put('j', (var.get('m')-Js(1.0)))
                while (var.get('j')>=Js(0.0)):
                    try:
                        var.put('qj', (((var.get('a').get('words').get((var.get('b').get('length')+var.get('j')))|Js(0.0))*Js(67108864))+(var.get('a').get('words').get(((var.get('b').get('length')+var.get('j'))-Js(1.0)))|Js(0.0))))
                        var.put('qj', var.get('Math').callprop('min', ((var.get('qj')/var.get('bhi'))|Js(0.0)), Js(67108863)))
                        var.get('a').callprop('_ishlnsubmul', var.get('b'), var.get('qj'), var.get('j'))
                        while PyJsStrictNeq(var.get('a').get('negative'),Js(0.0)):
                            (var.put('qj',Js(var.get('qj').to_number())-Js(1))+Js(1))
                            var.get('a').put('negative', Js(0.0))
                            var.get('a').callprop('_ishlnsubmul', var.get('b'), Js(1.0), var.get('j'))
                            if var.get('a').callprop('isZero').neg():
                                var.get('a').put('negative', Js(1.0), '^')
                        if var.get('q'):
                            var.get('q').get('words').put(var.get('j'), var.get('qj'))
                    finally:
                            (var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))
                if var.get('q'):
                    var.get('q').callprop('_strip')
                var.get('a').callprop('_strip')
                if (PyJsStrictNeq(var.get('mode'),Js('div')) and PyJsStrictNeq(var.get('shift'),Js(0.0))):
                    var.get('a').callprop('iushrn', var.get('shift'))
                return Js({'div':(var.get('q') or var.get(u"null")),'mod':var.get('a')})
            PyJs__wordDiv_428_._set_name('_wordDiv')
            var.get('BN').get('prototype').put('_wordDiv', PyJs__wordDiv_428_)
            @Js
            def PyJs_divmod_429_(num, mode, positive, this, arguments, var=var):
                var = Scope({'num':num, 'mode':mode, 'positive':positive, 'this':this, 'arguments':arguments, 'divmod':PyJs_divmod_429_}, var)
                var.registers(['num', 'mod', 'div', 'positive', 'res', 'mode'])
                var.get('assert')(var.get('num').callprop('isZero').neg())
                if var.get(u"this").callprop('isZero'):
                    return Js({'div':var.get('BN').create(Js(0.0)),'mod':var.get('BN').create(Js(0.0))})
                pass
                if (PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) and _seq(var.get('num').get('negative'),Js(0.0))):
                    var.put('res', var.get(u"this").callprop('neg').callprop('divmod', var.get('num'), var.get('mode')))
                    if PyJsStrictNeq(var.get('mode'),Js('mod')):
                        var.put('div', var.get('res').get('div').callprop('neg'))
                    if PyJsStrictNeq(var.get('mode'),Js('div')):
                        var.put('mod', var.get('res').get('mod').callprop('neg'))
                        if (var.get('positive') and PyJsStrictNeq(var.get('mod').get('negative'),Js(0.0))):
                            var.get('mod').callprop('iadd', var.get('num'))
                    return Js({'div':var.get('div'),'mod':var.get('mod')})
                if (_seq(var.get(u"this").get('negative'),Js(0.0)) and PyJsStrictNeq(var.get('num').get('negative'),Js(0.0))):
                    var.put('res', var.get(u"this").callprop('divmod', var.get('num').callprop('neg'), var.get('mode')))
                    if PyJsStrictNeq(var.get('mode'),Js('mod')):
                        var.put('div', var.get('res').get('div').callprop('neg'))
                    return Js({'div':var.get('div'),'mod':var.get('res').get('mod')})
                if PyJsStrictNeq((var.get(u"this").get('negative')&var.get('num').get('negative')),Js(0.0)):
                    var.put('res', var.get(u"this").callprop('neg').callprop('divmod', var.get('num').callprop('neg'), var.get('mode')))
                    if PyJsStrictNeq(var.get('mode'),Js('div')):
                        var.put('mod', var.get('res').get('mod').callprop('neg'))
                        if (var.get('positive') and PyJsStrictNeq(var.get('mod').get('negative'),Js(0.0))):
                            var.get('mod').callprop('isub', var.get('num'))
                    return Js({'div':var.get('res').get('div'),'mod':var.get('mod')})
                if ((var.get('num').get('length')>var.get(u"this").get('length')) or (var.get(u"this").callprop('cmp', var.get('num'))<Js(0.0))):
                    return Js({'div':var.get('BN').create(Js(0.0)),'mod':var.get(u"this")})
                if _seq(var.get('num').get('length'),Js(1.0)):
                    if _seq(var.get('mode'),Js('div')):
                        return Js({'div':var.get(u"this").callprop('divn', var.get('num').get('words').get('0')),'mod':var.get(u"null")})
                    if _seq(var.get('mode'),Js('mod')):
                        return Js({'div':var.get(u"null"),'mod':var.get('BN').create(var.get(u"this").callprop('modrn', var.get('num').get('words').get('0')))})
                    return Js({'div':var.get(u"this").callprop('divn', var.get('num').get('words').get('0')),'mod':var.get('BN').create(var.get(u"this").callprop('modrn', var.get('num').get('words').get('0')))})
                return var.get(u"this").callprop('_wordDiv', var.get('num'), var.get('mode'))
            PyJs_divmod_429_._set_name('divmod')
            var.get('BN').get('prototype').put('divmod', PyJs_divmod_429_)
            @Js
            def PyJs_div_430_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'div':PyJs_div_430_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('divmod', var.get('num'), Js('div'), Js(False)).get('div')
            PyJs_div_430_._set_name('div')
            var.get('BN').get('prototype').put('div', PyJs_div_430_)
            @Js
            def PyJs_mod_431_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'mod':PyJs_mod_431_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('divmod', var.get('num'), Js('mod'), Js(False)).get('mod')
            PyJs_mod_431_._set_name('mod')
            var.get('BN').get('prototype').put('mod', PyJs_mod_431_)
            @Js
            def PyJs_umod_432_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'umod':PyJs_umod_432_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('divmod', var.get('num'), Js('mod'), Js(True)).get('mod')
            PyJs_umod_432_._set_name('umod')
            var.get('BN').get('prototype').put('umod', PyJs_umod_432_)
            @Js
            def PyJs_divRound_433_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'divRound':PyJs_divRound_433_}, var)
                var.registers(['num', 'half', 'cmp', 'mod', 'dm', 'r2'])
                var.put('dm', var.get(u"this").callprop('divmod', var.get('num')))
                if var.get('dm').get('mod').callprop('isZero'):
                    return var.get('dm').get('div')
                var.put('mod', (var.get('dm').get('mod').callprop('isub', var.get('num')) if PyJsStrictNeq(var.get('dm').get('div').get('negative'),Js(0.0)) else var.get('dm').get('mod')))
                var.put('half', var.get('num').callprop('ushrn', Js(1.0)))
                var.put('r2', var.get('num').callprop('andln', Js(1.0)))
                var.put('cmp', var.get('mod').callprop('cmp', var.get('half')))
                if ((var.get('cmp')<Js(0.0)) or (_seq(var.get('r2'),Js(1.0)) and _seq(var.get('cmp'),Js(0.0)))):
                    return var.get('dm').get('div')
                return (var.get('dm').get('div').callprop('isubn', Js(1.0)) if PyJsStrictNeq(var.get('dm').get('div').get('negative'),Js(0.0)) else var.get('dm').get('div').callprop('iaddn', Js(1.0)))
            PyJs_divRound_433_._set_name('divRound')
            var.get('BN').get('prototype').put('divRound', PyJs_divRound_433_)
            @Js
            def PyJs_modrn_434_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'modrn':PyJs_modrn_434_}, var)
                var.registers(['i', 'acc', 'num', 'isNegNum', 'p'])
                var.put('isNegNum', (var.get('num')<Js(0.0)))
                if var.get('isNegNum'):
                    var.put('num', (-var.get('num')))
                var.get('assert')((var.get('num')<=Js(67108863)))
                var.put('p', ((Js(1.0)<<Js(26.0))%var.get('num')))
                var.put('acc', Js(0.0))
                #for JS loop
                var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('acc', (((var.get('p')*var.get('acc'))+(var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))%var.get('num')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                return ((-var.get('acc')) if var.get('isNegNum') else var.get('acc'))
            PyJs_modrn_434_._set_name('modrn')
            var.get('BN').get('prototype').put('modrn', PyJs_modrn_434_)
            @Js
            def PyJs_modn_435_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'modn':PyJs_modn_435_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('modrn', var.get('num'))
            PyJs_modn_435_._set_name('modn')
            var.get('BN').get('prototype').put('modn', PyJs_modn_435_)
            @Js
            def PyJs_idivn_436_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'idivn':PyJs_idivn_436_}, var)
                var.registers(['w', 'i', 'num', 'isNegNum', 'carry'])
                var.put('isNegNum', (var.get('num')<Js(0.0)))
                if var.get('isNegNum'):
                    var.put('num', (-var.get('num')))
                var.get('assert')((var.get('num')<=Js(67108863)))
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('w', ((var.get(u"this").get('words').get(var.get('i'))|Js(0.0))+(var.get('carry')*Js(67108864))))
                        var.get(u"this").get('words').put(var.get('i'), ((var.get('w')/var.get('num'))|Js(0.0)))
                        var.put('carry', (var.get('w')%var.get('num')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                var.get(u"this").callprop('_strip')
                return (var.get(u"this").callprop('ineg') if var.get('isNegNum') else var.get(u"this"))
            PyJs_idivn_436_._set_name('idivn')
            var.get('BN').get('prototype').put('idivn', PyJs_idivn_436_)
            @Js
            def PyJs_divn_437_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'divn':PyJs_divn_437_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('clone').callprop('idivn', var.get('num'))
            PyJs_divn_437_._set_name('divn')
            var.get('BN').get('prototype').put('divn', PyJs_divn_437_)
            @Js
            def PyJs_egcd_438_(p, this, arguments, var=var):
                var = Scope({'p':p, 'this':this, 'arguments':arguments, 'egcd':PyJs_egcd_438_}, var)
                var.registers(['D', 'C', 'j', 'i', 'x', 'y', 'B', 'im', 'p', 'g', 'jm', 'yp', 'xp', 'A'])
                var.get('assert')(_seq(var.get('p').get('negative'),Js(0.0)))
                var.get('assert')(var.get('p').callprop('isZero').neg())
                var.put('x', var.get(u"this"))
                var.put('y', var.get('p').callprop('clone'))
                if PyJsStrictNeq(var.get('x').get('negative'),Js(0.0)):
                    var.put('x', var.get('x').callprop('umod', var.get('p')))
                else:
                    var.put('x', var.get('x').callprop('clone'))
                var.put('A', var.get('BN').create(Js(1.0)))
                var.put('B', var.get('BN').create(Js(0.0)))
                var.put('C', var.get('BN').create(Js(0.0)))
                var.put('D', var.get('BN').create(Js(1.0)))
                var.put('g', Js(0.0))
                while (var.get('x').callprop('isEven') and var.get('y').callprop('isEven')):
                    var.get('x').callprop('iushrn', Js(1.0))
                    var.get('y').callprop('iushrn', Js(1.0))
                    var.put('g',Js(var.get('g').to_number())+Js(1))
                var.put('yp', var.get('y').callprop('clone'))
                var.put('xp', var.get('x').callprop('clone'))
                while var.get('x').callprop('isZero').neg():
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('im', Js(1.0))
                    while (_seq((var.get('x').get('words').get('0')&var.get('im')),Js(0.0)) and (var.get('i')<Js(26.0))):
                        try:
                            pass
                        finally:
                                PyJsComma(var.put('i',Js(var.get('i').to_number())+Js(1)),var.put('im', Js(1.0), '<<'))
                    if (var.get('i')>Js(0.0)):
                        var.get('x').callprop('iushrn', var.get('i'))
                        while ((var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))>Js(0.0)):
                            if (var.get('A').callprop('isOdd') or var.get('B').callprop('isOdd')):
                                var.get('A').callprop('iadd', var.get('yp'))
                                var.get('B').callprop('isub', var.get('xp'))
                            var.get('A').callprop('iushrn', Js(1.0))
                            var.get('B').callprop('iushrn', Js(1.0))
                    #for JS loop
                    var.put('j', Js(0.0))
                    var.put('jm', Js(1.0))
                    while (_seq((var.get('y').get('words').get('0')&var.get('jm')),Js(0.0)) and (var.get('j')<Js(26.0))):
                        try:
                            pass
                        finally:
                                PyJsComma(var.put('j',Js(var.get('j').to_number())+Js(1)),var.put('jm', Js(1.0), '<<'))
                    if (var.get('j')>Js(0.0)):
                        var.get('y').callprop('iushrn', var.get('j'))
                        while ((var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))>Js(0.0)):
                            if (var.get('C').callprop('isOdd') or var.get('D').callprop('isOdd')):
                                var.get('C').callprop('iadd', var.get('yp'))
                                var.get('D').callprop('isub', var.get('xp'))
                            var.get('C').callprop('iushrn', Js(1.0))
                            var.get('D').callprop('iushrn', Js(1.0))
                    if (var.get('x').callprop('cmp', var.get('y'))>=Js(0.0)):
                        var.get('x').callprop('isub', var.get('y'))
                        var.get('A').callprop('isub', var.get('C'))
                        var.get('B').callprop('isub', var.get('D'))
                    else:
                        var.get('y').callprop('isub', var.get('x'))
                        var.get('C').callprop('isub', var.get('A'))
                        var.get('D').callprop('isub', var.get('B'))
                return Js({'a':var.get('C'),'b':var.get('D'),'gcd':var.get('y').callprop('iushln', var.get('g'))})
            PyJs_egcd_438_._set_name('egcd')
            var.get('BN').get('prototype').put('egcd', PyJs_egcd_438_)
            @Js
            def PyJs__invmp_439_(p, this, arguments, var=var):
                var = Scope({'p':p, 'this':this, 'arguments':arguments, '_invmp':PyJs__invmp_439_}, var)
                var.registers(['x2', 'delta', 'a', 'j', 'i', 'im', 'b', 'jm', 'p', 'res', 'x1'])
                var.get('assert')(_seq(var.get('p').get('negative'),Js(0.0)))
                var.get('assert')(var.get('p').callprop('isZero').neg())
                var.put('a', var.get(u"this"))
                var.put('b', var.get('p').callprop('clone'))
                if PyJsStrictNeq(var.get('a').get('negative'),Js(0.0)):
                    var.put('a', var.get('a').callprop('umod', var.get('p')))
                else:
                    var.put('a', var.get('a').callprop('clone'))
                var.put('x1', var.get('BN').create(Js(1.0)))
                var.put('x2', var.get('BN').create(Js(0.0)))
                var.put('delta', var.get('b').callprop('clone'))
                while ((var.get('a').callprop('cmpn', Js(1.0))>Js(0.0)) and (var.get('b').callprop('cmpn', Js(1.0))>Js(0.0))):
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('im', Js(1.0))
                    while (_seq((var.get('a').get('words').get('0')&var.get('im')),Js(0.0)) and (var.get('i')<Js(26.0))):
                        try:
                            pass
                        finally:
                                PyJsComma(var.put('i',Js(var.get('i').to_number())+Js(1)),var.put('im', Js(1.0), '<<'))
                    if (var.get('i')>Js(0.0)):
                        var.get('a').callprop('iushrn', var.get('i'))
                        while ((var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))>Js(0.0)):
                            if var.get('x1').callprop('isOdd'):
                                var.get('x1').callprop('iadd', var.get('delta'))
                            var.get('x1').callprop('iushrn', Js(1.0))
                    #for JS loop
                    var.put('j', Js(0.0))
                    var.put('jm', Js(1.0))
                    while (_seq((var.get('b').get('words').get('0')&var.get('jm')),Js(0.0)) and (var.get('j')<Js(26.0))):
                        try:
                            pass
                        finally:
                                PyJsComma(var.put('j',Js(var.get('j').to_number())+Js(1)),var.put('jm', Js(1.0), '<<'))
                    if (var.get('j')>Js(0.0)):
                        var.get('b').callprop('iushrn', var.get('j'))
                        while ((var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))>Js(0.0)):
                            if var.get('x2').callprop('isOdd'):
                                var.get('x2').callprop('iadd', var.get('delta'))
                            var.get('x2').callprop('iushrn', Js(1.0))
                    if (var.get('a').callprop('cmp', var.get('b'))>=Js(0.0)):
                        var.get('a').callprop('isub', var.get('b'))
                        var.get('x1').callprop('isub', var.get('x2'))
                    else:
                        var.get('b').callprop('isub', var.get('a'))
                        var.get('x2').callprop('isub', var.get('x1'))
                pass
                if _seq(var.get('a').callprop('cmpn', Js(1.0)),Js(0.0)):
                    var.put('res', var.get('x1'))
                else:
                    var.put('res', var.get('x2'))
                if (var.get('res').callprop('cmpn', Js(0.0))<Js(0.0)):
                    var.get('res').callprop('iadd', var.get('p'))
                return var.get('res')
            PyJs__invmp_439_._set_name('_invmp')
            var.get('BN').get('prototype').put('_invmp', PyJs__invmp_439_)
            @Js
            def PyJs_gcd_440_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gcd':PyJs_gcd_440_}, var)
                var.registers(['a', 'r', 'num', 'b', 'shift', 't'])
                if var.get(u"this").callprop('isZero'):
                    return var.get('num').callprop('abs')
                if var.get('num').callprop('isZero'):
                    return var.get(u"this").callprop('abs')
                var.put('a', var.get(u"this").callprop('clone'))
                var.put('b', var.get('num').callprop('clone'))
                var.get('a').put('negative', Js(0.0))
                var.get('b').put('negative', Js(0.0))
                #for JS loop
                var.put('shift', Js(0.0))
                while (var.get('a').callprop('isEven') and var.get('b').callprop('isEven')):
                    try:
                        var.get('a').callprop('iushrn', Js(1.0))
                        var.get('b').callprop('iushrn', Js(1.0))
                    finally:
                            (var.put('shift',Js(var.get('shift').to_number())+Js(1))-Js(1))
                while 1:
                    while var.get('a').callprop('isEven'):
                        var.get('a').callprop('iushrn', Js(1.0))
                    while var.get('b').callprop('isEven'):
                        var.get('b').callprop('iushrn', Js(1.0))
                    var.put('r', var.get('a').callprop('cmp', var.get('b')))
                    if (var.get('r')<Js(0.0)):
                        var.put('t', var.get('a'))
                        var.put('a', var.get('b'))
                        var.put('b', var.get('t'))
                    else:
                        if (_seq(var.get('r'),Js(0.0)) or _seq(var.get('b').callprop('cmpn', Js(1.0)),Js(0.0))):
                            break
                    var.get('a').callprop('isub', var.get('b'))
                    if not Js(True):
                        break
                return var.get('b').callprop('iushln', var.get('shift'))
            PyJs_gcd_440_._set_name('gcd')
            var.get('BN').get('prototype').put('gcd', PyJs_gcd_440_)
            @Js
            def PyJs_invm_441_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'invm':PyJs_invm_441_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('egcd', var.get('num')).get('a').callprop('umod', var.get('num'))
            PyJs_invm_441_._set_name('invm')
            var.get('BN').get('prototype').put('invm', PyJs_invm_441_)
            @Js
            def PyJs_isEven_442_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isEven':PyJs_isEven_442_}, var)
                var.registers([])
                return _seq((var.get(u"this").get('words').get('0')&Js(1.0)),Js(0.0))
            PyJs_isEven_442_._set_name('isEven')
            var.get('BN').get('prototype').put('isEven', PyJs_isEven_442_)
            @Js
            def PyJs_isOdd_443_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isOdd':PyJs_isOdd_443_}, var)
                var.registers([])
                return _seq((var.get(u"this").get('words').get('0')&Js(1.0)),Js(1.0))
            PyJs_isOdd_443_._set_name('isOdd')
            var.get('BN').get('prototype').put('isOdd', PyJs_isOdd_443_)
            @Js
            def PyJs_andln_444_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'andln':PyJs_andln_444_}, var)
                var.registers(['num'])
                return (var.get(u"this").get('words').get('0')&var.get('num'))
            PyJs_andln_444_._set_name('andln')
            var.get('BN').get('prototype').put('andln', PyJs_andln_444_)
            @Js
            def PyJs_bincn_445_(bit, this, arguments, var=var):
                var = Scope({'bit':bit, 'this':this, 'arguments':arguments, 'bincn':PyJs_bincn_445_}, var)
                var.registers(['w', 'bit', 'r', 'i', 'q', 'carry', 's'])
                var.get('assert')(_seq(var.get('bit',throw=False).typeof(),Js('number')))
                var.put('r', (var.get('bit')%Js(26.0)))
                var.put('s', ((var.get('bit')-var.get('r'))/Js(26.0)))
                var.put('q', (Js(1.0)<<var.get('r')))
                if (var.get(u"this").get('length')<=var.get('s')):
                    var.get(u"this").callprop('_expand', (var.get('s')+Js(1.0)))
                    var.get(u"this").get('words').put(var.get('s'), var.get('q'), '|')
                    return var.get(u"this")
                var.put('carry', var.get('q'))
                #for JS loop
                var.put('i', var.get('s'))
                while (PyJsStrictNeq(var.get('carry'),Js(0.0)) and (var.get('i')<var.get(u"this").get('length'))):
                    try:
                        var.put('w', (var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))
                        var.put('w', var.get('carry'), '+')
                        var.put('carry', PyJsBshift(var.get('w'),Js(26.0)))
                        var.put('w', Js(67108863), '&')
                        var.get(u"this").get('words').put(var.get('i'), var.get('w'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get(u"this").get('words').put(var.get('i'), var.get('carry'))
                    (var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))-Js(1))
                return var.get(u"this")
            PyJs_bincn_445_._set_name('bincn')
            var.get('BN').get('prototype').put('bincn', PyJs_bincn_445_)
            @Js
            def PyJs_isZero_446_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'isZero':PyJs_isZero_446_}, var)
                var.registers([])
                return (_seq(var.get(u"this").get('length'),Js(1.0)) and _seq(var.get(u"this").get('words').get('0'),Js(0.0)))
            PyJs_isZero_446_._set_name('isZero')
            var.get('BN').get('prototype').put('isZero', PyJs_isZero_446_)
            @Js
            def PyJs_cmpn_447_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'cmpn':PyJs_cmpn_447_}, var)
                var.registers(['num', 'w', 'negative', 'res'])
                var.put('negative', (var.get('num')<Js(0.0)))
                if (PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) and var.get('negative').neg()):
                    return (-Js(1.0))
                if (_seq(var.get(u"this").get('negative'),Js(0.0)) and var.get('negative')):
                    return Js(1.0)
                var.get(u"this").callprop('_strip')
                pass
                if (var.get(u"this").get('length')>Js(1.0)):
                    var.put('res', Js(1.0))
                else:
                    if var.get('negative'):
                        var.put('num', (-var.get('num')))
                    var.get('assert')((var.get('num')<=Js(67108863)), Js('Number is too big'))
                    var.put('w', (var.get(u"this").get('words').get('0')|Js(0.0)))
                    var.put('res', (Js(0.0) if _seq(var.get('w'),var.get('num')) else ((-Js(1.0)) if (var.get('w')<var.get('num')) else Js(1.0))))
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    return ((-var.get('res'))|Js(0.0))
                return var.get('res')
            PyJs_cmpn_447_._set_name('cmpn')
            var.get('BN').get('prototype').put('cmpn', PyJs_cmpn_447_)
            @Js
            def PyJs_cmp_448_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'cmp':PyJs_cmp_448_}, var)
                var.registers(['num', 'res'])
                if (PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)) and _seq(var.get('num').get('negative'),Js(0.0))):
                    return (-Js(1.0))
                if (_seq(var.get(u"this").get('negative'),Js(0.0)) and PyJsStrictNeq(var.get('num').get('negative'),Js(0.0))):
                    return Js(1.0)
                var.put('res', var.get(u"this").callprop('ucmp', var.get('num')))
                if PyJsStrictNeq(var.get(u"this").get('negative'),Js(0.0)):
                    return ((-var.get('res'))|Js(0.0))
                return var.get('res')
            PyJs_cmp_448_._set_name('cmp')
            var.get('BN').get('prototype').put('cmp', PyJs_cmp_448_)
            @Js
            def PyJs_ucmp_449_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ucmp':PyJs_ucmp_449_}, var)
                var.registers(['a', 'i', 'num', 'b', 'res'])
                if (var.get(u"this").get('length')>var.get('num').get('length')):
                    return Js(1.0)
                if (var.get(u"this").get('length')<var.get('num').get('length')):
                    return (-Js(1.0))
                var.put('res', Js(0.0))
                #for JS loop
                var.put('i', (var.get(u"this").get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('a', (var.get(u"this").get('words').get(var.get('i'))|Js(0.0)))
                        var.put('b', (var.get('num').get('words').get(var.get('i'))|Js(0.0)))
                        if _seq(var.get('a'),var.get('b')):
                            continue
                        if (var.get('a')<var.get('b')):
                            var.put('res', (-Js(1.0)))
                        else:
                            if (var.get('a')>var.get('b')):
                                var.put('res', Js(1.0))
                        break
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                return var.get('res')
            PyJs_ucmp_449_._set_name('ucmp')
            var.get('BN').get('prototype').put('ucmp', PyJs_ucmp_449_)
            @Js
            def PyJs_gtn_450_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gtn':PyJs_gtn_450_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmpn', var.get('num')),Js(1.0))
            PyJs_gtn_450_._set_name('gtn')
            var.get('BN').get('prototype').put('gtn', PyJs_gtn_450_)
            @Js
            def PyJs_gt_451_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gt':PyJs_gt_451_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmp', var.get('num')),Js(1.0))
            PyJs_gt_451_._set_name('gt')
            var.get('BN').get('prototype').put('gt', PyJs_gt_451_)
            @Js
            def PyJs_gten_452_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gten':PyJs_gten_452_}, var)
                var.registers(['num'])
                return (var.get(u"this").callprop('cmpn', var.get('num'))>=Js(0.0))
            PyJs_gten_452_._set_name('gten')
            var.get('BN').get('prototype').put('gten', PyJs_gten_452_)
            @Js
            def PyJs_gte_453_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'gte':PyJs_gte_453_}, var)
                var.registers(['num'])
                return (var.get(u"this").callprop('cmp', var.get('num'))>=Js(0.0))
            PyJs_gte_453_._set_name('gte')
            var.get('BN').get('prototype').put('gte', PyJs_gte_453_)
            @Js
            def PyJs_ltn_454_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ltn':PyJs_ltn_454_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmpn', var.get('num')),(-Js(1.0)))
            PyJs_ltn_454_._set_name('ltn')
            var.get('BN').get('prototype').put('ltn', PyJs_ltn_454_)
            @Js
            def PyJs_lt_455_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lt':PyJs_lt_455_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmp', var.get('num')),(-Js(1.0)))
            PyJs_lt_455_._set_name('lt')
            var.get('BN').get('prototype').put('lt', PyJs_lt_455_)
            @Js
            def PyJs_lten_456_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lten':PyJs_lten_456_}, var)
                var.registers(['num'])
                return (var.get(u"this").callprop('cmpn', var.get('num'))<=Js(0.0))
            PyJs_lten_456_._set_name('lten')
            var.get('BN').get('prototype').put('lten', PyJs_lten_456_)
            @Js
            def PyJs_lte_457_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lte':PyJs_lte_457_}, var)
                var.registers(['num'])
                return (var.get(u"this").callprop('cmp', var.get('num'))<=Js(0.0))
            PyJs_lte_457_._set_name('lte')
            var.get('BN').get('prototype').put('lte', PyJs_lte_457_)
            @Js
            def PyJs_eqn_458_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'eqn':PyJs_eqn_458_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmpn', var.get('num')),Js(0.0))
            PyJs_eqn_458_._set_name('eqn')
            var.get('BN').get('prototype').put('eqn', PyJs_eqn_458_)
            @Js
            def PyJs_eq_459_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'eq':PyJs_eq_459_}, var)
                var.registers(['num'])
                return _seq(var.get(u"this").callprop('cmp', var.get('num')),Js(0.0))
            PyJs_eq_459_._set_name('eq')
            var.get('BN').get('prototype').put('eq', PyJs_eq_459_)
            @Js
            def PyJs_red_460_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'red':PyJs_red_460_}, var)
                var.registers(['num'])
                return var.get('Red').create(var.get('num'))
            PyJs_red_460_._set_name('red')
            var.get('BN').put('red', PyJs_red_460_)
            @Js
            def PyJs_toRed_461_(ctx, this, arguments, var=var):
                var = Scope({'ctx':ctx, 'this':this, 'arguments':arguments, 'toRed':PyJs_toRed_461_}, var)
                var.registers(['ctx'])
                var.get('assert')(var.get(u"this").get('red').neg(), Js('Already a number in reduction context'))
                var.get('assert')(_seq(var.get(u"this").get('negative'),Js(0.0)), Js('red works only with positives'))
                return var.get('ctx').callprop('convertTo', var.get(u"this")).callprop('_forceRed', var.get('ctx'))
            PyJs_toRed_461_._set_name('toRed')
            var.get('BN').get('prototype').put('toRed', PyJs_toRed_461_)
            @Js
            def PyJs_fromRed_462_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'fromRed':PyJs_fromRed_462_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('fromRed works only with numbers in reduction context'))
                return var.get(u"this").get('red').callprop('convertFrom', var.get(u"this"))
            PyJs_fromRed_462_._set_name('fromRed')
            var.get('BN').get('prototype').put('fromRed', PyJs_fromRed_462_)
            @Js
            def PyJs__forceRed_463_(ctx, this, arguments, var=var):
                var = Scope({'ctx':ctx, 'this':this, 'arguments':arguments, '_forceRed':PyJs__forceRed_463_}, var)
                var.registers(['ctx'])
                var.get(u"this").put('red', var.get('ctx'))
                return var.get(u"this")
            PyJs__forceRed_463_._set_name('_forceRed')
            var.get('BN').get('prototype').put('_forceRed', PyJs__forceRed_463_)
            @Js
            def PyJs_forceRed_464_(ctx, this, arguments, var=var):
                var = Scope({'ctx':ctx, 'this':this, 'arguments':arguments, 'forceRed':PyJs_forceRed_464_}, var)
                var.registers(['ctx'])
                var.get('assert')(var.get(u"this").get('red').neg(), Js('Already a number in reduction context'))
                return var.get(u"this").callprop('_forceRed', var.get('ctx'))
            PyJs_forceRed_464_._set_name('forceRed')
            var.get('BN').get('prototype').put('forceRed', PyJs_forceRed_464_)
            @Js
            def PyJs_redAdd_465_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redAdd':PyJs_redAdd_465_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redAdd works only with red numbers'))
                return var.get(u"this").get('red').callprop('add', var.get(u"this"), var.get('num'))
            PyJs_redAdd_465_._set_name('redAdd')
            var.get('BN').get('prototype').put('redAdd', PyJs_redAdd_465_)
            @Js
            def PyJs_redIAdd_466_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redIAdd':PyJs_redIAdd_466_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redIAdd works only with red numbers'))
                return var.get(u"this").get('red').callprop('iadd', var.get(u"this"), var.get('num'))
            PyJs_redIAdd_466_._set_name('redIAdd')
            var.get('BN').get('prototype').put('redIAdd', PyJs_redIAdd_466_)
            @Js
            def PyJs_redSub_467_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redSub':PyJs_redSub_467_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redSub works only with red numbers'))
                return var.get(u"this").get('red').callprop('sub', var.get(u"this"), var.get('num'))
            PyJs_redSub_467_._set_name('redSub')
            var.get('BN').get('prototype').put('redSub', PyJs_redSub_467_)
            @Js
            def PyJs_redISub_468_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redISub':PyJs_redISub_468_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redISub works only with red numbers'))
                return var.get(u"this").get('red').callprop('isub', var.get(u"this"), var.get('num'))
            PyJs_redISub_468_._set_name('redISub')
            var.get('BN').get('prototype').put('redISub', PyJs_redISub_468_)
            @Js
            def PyJs_redShl_469_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redShl':PyJs_redShl_469_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redShl works only with red numbers'))
                return var.get(u"this").get('red').callprop('shl', var.get(u"this"), var.get('num'))
            PyJs_redShl_469_._set_name('redShl')
            var.get('BN').get('prototype').put('redShl', PyJs_redShl_469_)
            @Js
            def PyJs_redMul_470_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redMul':PyJs_redMul_470_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redMul works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify2', var.get(u"this"), var.get('num'))
                return var.get(u"this").get('red').callprop('mul', var.get(u"this"), var.get('num'))
            PyJs_redMul_470_._set_name('redMul')
            var.get('BN').get('prototype').put('redMul', PyJs_redMul_470_)
            @Js
            def PyJs_redIMul_471_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redIMul':PyJs_redIMul_471_}, var)
                var.registers(['num'])
                var.get('assert')(var.get(u"this").get('red'), Js('redMul works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify2', var.get(u"this"), var.get('num'))
                return var.get(u"this").get('red').callprop('imul', var.get(u"this"), var.get('num'))
            PyJs_redIMul_471_._set_name('redIMul')
            var.get('BN').get('prototype').put('redIMul', PyJs_redIMul_471_)
            @Js
            def PyJs_redSqr_472_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redSqr':PyJs_redSqr_472_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redSqr works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('sqr', var.get(u"this"))
            PyJs_redSqr_472_._set_name('redSqr')
            var.get('BN').get('prototype').put('redSqr', PyJs_redSqr_472_)
            @Js
            def PyJs_redISqr_473_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redISqr':PyJs_redISqr_473_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redISqr works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('isqr', var.get(u"this"))
            PyJs_redISqr_473_._set_name('redISqr')
            var.get('BN').get('prototype').put('redISqr', PyJs_redISqr_473_)
            @Js
            def PyJs_redSqrt_474_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redSqrt':PyJs_redSqrt_474_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redSqrt works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('sqrt', var.get(u"this"))
            PyJs_redSqrt_474_._set_name('redSqrt')
            var.get('BN').get('prototype').put('redSqrt', PyJs_redSqrt_474_)
            @Js
            def PyJs_redInvm_475_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redInvm':PyJs_redInvm_475_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redInvm works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('invm', var.get(u"this"))
            PyJs_redInvm_475_._set_name('redInvm')
            var.get('BN').get('prototype').put('redInvm', PyJs_redInvm_475_)
            @Js
            def PyJs_redNeg_476_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'redNeg':PyJs_redNeg_476_}, var)
                var.registers([])
                var.get('assert')(var.get(u"this").get('red'), Js('redNeg works only with red numbers'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('neg', var.get(u"this"))
            PyJs_redNeg_476_._set_name('redNeg')
            var.get('BN').get('prototype').put('redNeg', PyJs_redNeg_476_)
            @Js
            def PyJs_redPow_477_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'redPow':PyJs_redPow_477_}, var)
                var.registers(['num'])
                var.get('assert')((var.get(u"this").get('red') and var.get('num').get('red').neg()), Js('redPow(normalNum)'))
                var.get(u"this").get('red').callprop('_verify1', var.get(u"this"))
                return var.get(u"this").get('red').callprop('pow', var.get(u"this"), var.get('num'))
            PyJs_redPow_477_._set_name('redPow')
            var.get('BN').get('prototype').put('redPow', PyJs_redPow_477_)
            var.put('primes', Js({'k256':var.get(u"null"),'p224':var.get(u"null"),'p192':var.get(u"null"),'p25519':var.get(u"null")}))
            pass
            @Js
            def PyJs__tmp_478_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, '_tmp':PyJs__tmp_478_}, var)
                var.registers(['tmp'])
                var.put('tmp', var.get('BN').create(var.get(u"null")))
                var.get('tmp').put('words', var.get('Array').create(var.get('Math').callprop('ceil', (var.get(u"this").get('n')/Js(13.0)))))
                return var.get('tmp')
            PyJs__tmp_478_._set_name('_tmp')
            var.get('MPrime').get('prototype').put('_tmp', PyJs__tmp_478_)
            @Js
            def PyJs_ireduce_479_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'ireduce':PyJs_ireduce_479_}, var)
                var.registers(['num', 'rlen', 'r', 'cmp'])
                var.put('r', var.get('num'))
                pass
                while 1:
                    var.get(u"this").callprop('split', var.get('r'), var.get(u"this").get('tmp'))
                    var.put('r', var.get(u"this").callprop('imulK', var.get('r')))
                    var.put('r', var.get('r').callprop('iadd', var.get(u"this").get('tmp')))
                    var.put('rlen', var.get('r').callprop('bitLength'))
                    if not (var.get('rlen')>var.get(u"this").get('n')):
                        break
                var.put('cmp', ((-Js(1.0)) if (var.get('rlen')<var.get(u"this").get('n')) else var.get('r').callprop('ucmp', var.get(u"this").get('p'))))
                if _seq(var.get('cmp'),Js(0.0)):
                    var.get('r').get('words').put('0', Js(0.0))
                    var.get('r').put('length', Js(1.0))
                else:
                    if (var.get('cmp')>Js(0.0)):
                        var.get('r').callprop('isub', var.get(u"this").get('p'))
                    else:
                        if PyJsStrictNeq(var.get('r').get('strip'),var.get('undefined')):
                            var.get('r').callprop('strip')
                        else:
                            var.get('r').callprop('_strip')
                return var.get('r')
            PyJs_ireduce_479_._set_name('ireduce')
            var.get('MPrime').get('prototype').put('ireduce', PyJs_ireduce_479_)
            @Js
            def PyJs_split_480_(input, out, this, arguments, var=var):
                var = Scope({'input':input, 'out':out, 'this':this, 'arguments':arguments, 'split':PyJs_split_480_}, var)
                var.registers(['out', 'input'])
                var.get('input').callprop('iushrn', var.get(u"this").get('n'), Js(0.0), var.get('out'))
            PyJs_split_480_._set_name('split')
            var.get('MPrime').get('prototype').put('split', PyJs_split_480_)
            @Js
            def PyJs_imulK_481_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imulK':PyJs_imulK_481_}, var)
                var.registers(['num'])
                return var.get('num').callprop('imul', var.get(u"this").get('k'))
            PyJs_imulK_481_._set_name('imulK')
            var.get('MPrime').get('prototype').put('imulK', PyJs_imulK_481_)
            pass
            var.get('inherits')(var.get('K256'), var.get('MPrime'))
            @Js
            def PyJs_split_482_(input, output, this, arguments, var=var):
                var = Scope({'input':input, 'output':output, 'this':this, 'arguments':arguments, 'split':PyJs_split_482_}, var)
                var.registers(['outLen', 'i', 'next', 'input', 'output', 'mask', 'prev'])
                var.put('mask', Js(4194303))
                var.put('outLen', var.get('Math').callprop('min', var.get('input').get('length'), Js(9.0)))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('outLen')):
                    try:
                        var.get('output').get('words').put(var.get('i'), var.get('input').get('words').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('output').put('length', var.get('outLen'))
                if (var.get('input').get('length')<=Js(9.0)):
                    var.get('input').get('words').put('0', Js(0.0))
                    var.get('input').put('length', Js(1.0))
                    return var.get('undefined')
                var.put('prev', var.get('input').get('words').get('9'))
                var.get('output').get('words').put((var.get('output').put('length',Js(var.get('output').get('length').to_number())+Js(1))-Js(1)), (var.get('prev')&var.get('mask')))
                #for JS loop
                var.put('i', Js(10.0))
                while (var.get('i')<var.get('input').get('length')):
                    try:
                        var.put('next', (var.get('input').get('words').get(var.get('i'))|Js(0.0)))
                        var.get('input').get('words').put((var.get('i')-Js(10.0)), (((var.get('next')&var.get('mask'))<<Js(4.0))|PyJsBshift(var.get('prev'),Js(22.0))))
                        var.put('prev', var.get('next'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('prev', Js(22.0), '>>>')
                var.get('input').get('words').put((var.get('i')-Js(10.0)), var.get('prev'))
                if (_seq(var.get('prev'),Js(0.0)) and (var.get('input').get('length')>Js(10.0))):
                    var.get('input').put('length', Js(10.0), '-')
                else:
                    var.get('input').put('length', Js(9.0), '-')
            PyJs_split_482_._set_name('split')
            var.get('K256').get('prototype').put('split', PyJs_split_482_)
            @Js
            def PyJs_imulK_483_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imulK':PyJs_imulK_483_}, var)
                var.registers(['i', 'w', 'num', 'lo'])
                var.get('num').get('words').put(var.get('num').get('length'), Js(0.0))
                var.get('num').get('words').put((var.get('num').get('length')+Js(1.0)), Js(0.0))
                var.get('num').put('length', Js(2.0), '+')
                var.put('lo', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('num').get('length')):
                    try:
                        var.put('w', (var.get('num').get('words').get(var.get('i'))|Js(0.0)))
                        var.put('lo', (var.get('w')*Js(977)), '+')
                        var.get('num').get('words').put(var.get('i'), (var.get('lo')&Js(67108863)))
                        var.put('lo', ((var.get('w')*Js(64))+((var.get('lo')/Js(67108864))|Js(0.0))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if _seq(var.get('num').get('words').get((var.get('num').get('length')-Js(1.0))),Js(0.0)):
                    (var.get('num').put('length',Js(var.get('num').get('length').to_number())-Js(1))+Js(1))
                    if _seq(var.get('num').get('words').get((var.get('num').get('length')-Js(1.0))),Js(0.0)):
                        (var.get('num').put('length',Js(var.get('num').get('length').to_number())-Js(1))+Js(1))
                return var.get('num')
            PyJs_imulK_483_._set_name('imulK')
            var.get('K256').get('prototype').put('imulK', PyJs_imulK_483_)
            pass
            var.get('inherits')(var.get('P224'), var.get('MPrime'))
            pass
            var.get('inherits')(var.get('P192'), var.get('MPrime'))
            pass
            var.get('inherits')(var.get('P25519'), var.get('MPrime'))
            @Js
            def PyJs_imulK_484_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'imulK':PyJs_imulK_484_}, var)
                var.registers(['i', 'num', 'lo', 'hi', 'carry'])
                var.put('carry', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('num').get('length')):
                    try:
                        var.put('hi', (((var.get('num').get('words').get(var.get('i'))|Js(0.0))*Js(19))+var.get('carry')))
                        var.put('lo', (var.get('hi')&Js(67108863)))
                        var.put('hi', Js(26.0), '>>>')
                        var.get('num').get('words').put(var.get('i'), var.get('lo'))
                        var.put('carry', var.get('hi'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('carry'),Js(0.0)):
                    var.get('num').get('words').put((var.get('num').put('length',Js(var.get('num').get('length').to_number())+Js(1))-Js(1)), var.get('carry'))
                return var.get('num')
            PyJs_imulK_484_._set_name('imulK')
            var.get('P25519').get('prototype').put('imulK', PyJs_imulK_484_)
            @Js
            def PyJs_prime_485_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments, 'prime':PyJs_prime_485_}, var)
                var.registers(['name', 'prime'])
                if var.get('primes').get(var.get('name')):
                    return var.get('primes').get(var.get('name'))
                pass
                if _seq(var.get('name'),Js('k256')):
                    var.put('prime', var.get('K256').create())
                else:
                    if _seq(var.get('name'),Js('p224')):
                        var.put('prime', var.get('P224').create())
                    else:
                        if _seq(var.get('name'),Js('p192')):
                            var.put('prime', var.get('P192').create())
                        else:
                            if _seq(var.get('name'),Js('p25519')):
                                var.put('prime', var.get('P25519').create())
                            else:
                                PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown prime ')+var.get('name'))))
                                raise PyJsTempException
                var.get('primes').put(var.get('name'), var.get('prime'))
                return var.get('prime')
            PyJs_prime_485_._set_name('prime')
            var.get('BN').put('_prime', PyJs_prime_485_)
            pass
            @Js
            def PyJs__verify1_486_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, '_verify1':PyJs__verify1_486_}, var)
                var.registers(['a'])
                var.get('assert')(_seq(var.get('a').get('negative'),Js(0.0)), Js('red works only with positives'))
                var.get('assert')(var.get('a').get('red'), Js('red works only with red numbers'))
            PyJs__verify1_486_._set_name('_verify1')
            var.get('Red').get('prototype').put('_verify1', PyJs__verify1_486_)
            @Js
            def PyJs__verify2_487_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, '_verify2':PyJs__verify2_487_}, var)
                var.registers(['a', 'b'])
                var.get('assert')(_seq((var.get('a').get('negative')|var.get('b').get('negative')),Js(0.0)), Js('red works only with positives'))
                var.get('assert')((var.get('a').get('red') and _seq(var.get('a').get('red'),var.get('b').get('red'))), Js('red works only with red numbers'))
            PyJs__verify2_487_._set_name('_verify2')
            var.get('Red').get('prototype').put('_verify2', PyJs__verify2_487_)
            @Js
            def PyJs_imod_488_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'imod':PyJs_imod_488_}, var)
                var.registers(['a'])
                if var.get(u"this").get('prime'):
                    return var.get(u"this").get('prime').callprop('ireduce', var.get('a')).callprop('_forceRed', var.get(u"this"))
                var.get('move')(var.get('a'), var.get('a').callprop('umod', var.get(u"this").get('m')).callprop('_forceRed', var.get(u"this")))
                return var.get('a')
            PyJs_imod_488_._set_name('imod')
            var.get('Red').get('prototype').put('imod', PyJs_imod_488_)
            @Js
            def PyJs_neg_489_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'neg':PyJs_neg_489_}, var)
                var.registers(['a'])
                if var.get('a').callprop('isZero'):
                    return var.get('a').callprop('clone')
                return var.get(u"this").get('m').callprop('sub', var.get('a')).callprop('_forceRed', var.get(u"this"))
            PyJs_neg_489_._set_name('neg')
            var.get('Red').get('prototype').put('neg', PyJs_neg_489_)
            @Js
            def PyJs_add_490_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'add':PyJs_add_490_}, var)
                var.registers(['b', 'a', 'res'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                var.put('res', var.get('a').callprop('add', var.get('b')))
                if (var.get('res').callprop('cmp', var.get(u"this").get('m'))>=Js(0.0)):
                    var.get('res').callprop('isub', var.get(u"this").get('m'))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_add_490_._set_name('add')
            var.get('Red').get('prototype').put('add', PyJs_add_490_)
            @Js
            def PyJs_iadd_491_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'iadd':PyJs_iadd_491_}, var)
                var.registers(['b', 'a', 'res'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                var.put('res', var.get('a').callprop('iadd', var.get('b')))
                if (var.get('res').callprop('cmp', var.get(u"this").get('m'))>=Js(0.0)):
                    var.get('res').callprop('isub', var.get(u"this").get('m'))
                return var.get('res')
            PyJs_iadd_491_._set_name('iadd')
            var.get('Red').get('prototype').put('iadd', PyJs_iadd_491_)
            @Js
            def PyJs_sub_492_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'sub':PyJs_sub_492_}, var)
                var.registers(['b', 'a', 'res'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                var.put('res', var.get('a').callprop('sub', var.get('b')))
                if (var.get('res').callprop('cmpn', Js(0.0))<Js(0.0)):
                    var.get('res').callprop('iadd', var.get(u"this").get('m'))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_sub_492_._set_name('sub')
            var.get('Red').get('prototype').put('sub', PyJs_sub_492_)
            @Js
            def PyJs_isub_493_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'isub':PyJs_isub_493_}, var)
                var.registers(['b', 'a', 'res'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                var.put('res', var.get('a').callprop('isub', var.get('b')))
                if (var.get('res').callprop('cmpn', Js(0.0))<Js(0.0)):
                    var.get('res').callprop('iadd', var.get(u"this").get('m'))
                return var.get('res')
            PyJs_isub_493_._set_name('isub')
            var.get('Red').get('prototype').put('isub', PyJs_isub_493_)
            @Js
            def PyJs_shl_494_(a, num, this, arguments, var=var):
                var = Scope({'a':a, 'num':num, 'this':this, 'arguments':arguments, 'shl':PyJs_shl_494_}, var)
                var.registers(['num', 'a'])
                var.get(u"this").callprop('_verify1', var.get('a'))
                return var.get(u"this").callprop('imod', var.get('a').callprop('ushln', var.get('num')))
            PyJs_shl_494_._set_name('shl')
            var.get('Red').get('prototype').put('shl', PyJs_shl_494_)
            @Js
            def PyJs_imul_495_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'imul':PyJs_imul_495_}, var)
                var.registers(['a', 'b'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                return var.get(u"this").callprop('imod', var.get('a').callprop('imul', var.get('b')))
            PyJs_imul_495_._set_name('imul')
            var.get('Red').get('prototype').put('imul', PyJs_imul_495_)
            @Js
            def PyJs_mul_496_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_496_}, var)
                var.registers(['a', 'b'])
                var.get(u"this").callprop('_verify2', var.get('a'), var.get('b'))
                return var.get(u"this").callprop('imod', var.get('a').callprop('mul', var.get('b')))
            PyJs_mul_496_._set_name('mul')
            var.get('Red').get('prototype').put('mul', PyJs_mul_496_)
            @Js
            def PyJs_isqr_497_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'isqr':PyJs_isqr_497_}, var)
                var.registers(['a'])
                return var.get(u"this").callprop('imul', var.get('a'), var.get('a').callprop('clone'))
            PyJs_isqr_497_._set_name('isqr')
            var.get('Red').get('prototype').put('isqr', PyJs_isqr_497_)
            @Js
            def PyJs_sqr_498_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'sqr':PyJs_sqr_498_}, var)
                var.registers(['a'])
                return var.get(u"this").callprop('mul', var.get('a'), var.get('a'))
            PyJs_sqr_498_._set_name('sqr')
            var.get('Red').get('prototype').put('sqr', PyJs_sqr_498_)
            @Js
            def PyJs_sqrt_499_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'sqrt':PyJs_sqrt_499_}, var)
                var.registers(['a', 'z', 'r', 'tmp', 'i', 'mod3', 'one', 'nOne', 'c', 't', 'lpow', 'pow', 'm', 'b', 'q', 's'])
                if var.get('a').callprop('isZero'):
                    return var.get('a').callprop('clone')
                var.put('mod3', var.get(u"this").get('m').callprop('andln', Js(3.0)))
                var.get('assert')(_seq((var.get('mod3')%Js(2.0)),Js(1.0)))
                if _seq(var.get('mod3'),Js(3.0)):
                    var.put('pow', var.get(u"this").get('m').callprop('add', var.get('BN').create(Js(1.0))).callprop('iushrn', Js(2.0)))
                    return var.get(u"this").callprop('pow', var.get('a'), var.get('pow'))
                var.put('q', var.get(u"this").get('m').callprop('subn', Js(1.0)))
                var.put('s', Js(0.0))
                while (var.get('q').callprop('isZero').neg() and _seq(var.get('q').callprop('andln', Js(1.0)),Js(0.0))):
                    (var.put('s',Js(var.get('s').to_number())+Js(1))-Js(1))
                    var.get('q').callprop('iushrn', Js(1.0))
                var.get('assert')(var.get('q').callprop('isZero').neg())
                var.put('one', var.get('BN').create(Js(1.0)).callprop('toRed', var.get(u"this")))
                var.put('nOne', var.get('one').callprop('redNeg'))
                var.put('lpow', var.get(u"this").get('m').callprop('subn', Js(1.0)).callprop('iushrn', Js(1.0)))
                var.put('z', var.get(u"this").get('m').callprop('bitLength'))
                var.put('z', var.get('BN').create(((Js(2.0)*var.get('z'))*var.get('z'))).callprop('toRed', var.get(u"this")))
                while PyJsStrictNeq(var.get(u"this").callprop('pow', var.get('z'), var.get('lpow')).callprop('cmp', var.get('nOne')),Js(0.0)):
                    var.get('z').callprop('redIAdd', var.get('nOne'))
                var.put('c', var.get(u"this").callprop('pow', var.get('z'), var.get('q')))
                var.put('r', var.get(u"this").callprop('pow', var.get('a'), var.get('q').callprop('addn', Js(1.0)).callprop('iushrn', Js(1.0))))
                var.put('t', var.get(u"this").callprop('pow', var.get('a'), var.get('q')))
                var.put('m', var.get('s'))
                while PyJsStrictNeq(var.get('t').callprop('cmp', var.get('one')),Js(0.0)):
                    var.put('tmp', var.get('t'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while PyJsStrictNeq(var.get('tmp').callprop('cmp', var.get('one')),Js(0.0)):
                        try:
                            var.put('tmp', var.get('tmp').callprop('redSqr'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('assert')((var.get('i')<var.get('m')))
                    var.put('b', var.get(u"this").callprop('pow', var.get('c'), var.get('BN').create(Js(1.0)).callprop('iushln', ((var.get('m')-var.get('i'))-Js(1.0)))))
                    var.put('r', var.get('r').callprop('redMul', var.get('b')))
                    var.put('c', var.get('b').callprop('redSqr'))
                    var.put('t', var.get('t').callprop('redMul', var.get('c')))
                    var.put('m', var.get('i'))
                return var.get('r')
            PyJs_sqrt_499_._set_name('sqrt')
            var.get('Red').get('prototype').put('sqrt', PyJs_sqrt_499_)
            @Js
            def PyJs_invm_500_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'invm':PyJs_invm_500_}, var)
                var.registers(['a', 'inv'])
                var.put('inv', var.get('a').callprop('_invmp', var.get(u"this").get('m')))
                if PyJsStrictNeq(var.get('inv').get('negative'),Js(0.0)):
                    var.get('inv').put('negative', Js(0.0))
                    return var.get(u"this").callprop('imod', var.get('inv')).callprop('redNeg')
                else:
                    return var.get(u"this").callprop('imod', var.get('inv'))
            PyJs_invm_500_._set_name('invm')
            var.get('Red').get('prototype').put('invm', PyJs_invm_500_)
            @Js
            def PyJs_pow_501_(a, num, this, arguments, var=var):
                var = Scope({'a':a, 'num':num, 'this':this, 'arguments':arguments, 'pow':PyJs_pow_501_}, var)
                var.registers(['a', 'bit', 'j', 'i', 'num', 'windowSize', 'start', 'word', 'current', 'currentLen', 'wnd', 'res'])
                if var.get('num').callprop('isZero'):
                    return var.get('BN').create(Js(1.0)).callprop('toRed', var.get(u"this"))
                if _seq(var.get('num').callprop('cmpn', Js(1.0)),Js(0.0)):
                    return var.get('a').callprop('clone')
                var.put('windowSize', Js(4.0))
                var.put('wnd', var.get('Array').create((Js(1.0)<<var.get('windowSize'))))
                var.get('wnd').put('0', var.get('BN').create(Js(1.0)).callprop('toRed', var.get(u"this")))
                var.get('wnd').put('1', var.get('a'))
                #for JS loop
                var.put('i', Js(2.0))
                while (var.get('i')<var.get('wnd').get('length')):
                    try:
                        var.get('wnd').put(var.get('i'), var.get(u"this").callprop('mul', var.get('wnd').get((var.get('i')-Js(1.0))), var.get('a')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('res', var.get('wnd').get('0'))
                var.put('current', Js(0.0))
                var.put('currentLen', Js(0.0))
                var.put('start', (var.get('num').callprop('bitLength')%Js(26.0)))
                if _seq(var.get('start'),Js(0.0)):
                    var.put('start', Js(26.0))
                #for JS loop
                var.put('i', (var.get('num').get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('word', var.get('num').get('words').get(var.get('i')))
                        #for JS loop
                        var.put('j', (var.get('start')-Js(1.0)))
                        while (var.get('j')>=Js(0.0)):
                            try:
                                var.put('bit', ((var.get('word')>>var.get('j'))&Js(1.0)))
                                if PyJsStrictNeq(var.get('res'),var.get('wnd').get('0')):
                                    var.put('res', var.get(u"this").callprop('sqr', var.get('res')))
                                if (_seq(var.get('bit'),Js(0.0)) and _seq(var.get('current'),Js(0.0))):
                                    var.put('currentLen', Js(0.0))
                                    continue
                                var.put('current', Js(1.0), '<<')
                                var.put('current', var.get('bit'), '|')
                                (var.put('currentLen',Js(var.get('currentLen').to_number())+Js(1))-Js(1))
                                if (PyJsStrictNeq(var.get('currentLen'),var.get('windowSize')) and (PyJsStrictNeq(var.get('i'),Js(0.0)) or PyJsStrictNeq(var.get('j'),Js(0.0)))):
                                    continue
                                var.put('res', var.get(u"this").callprop('mul', var.get('res'), var.get('wnd').get(var.get('current'))))
                                var.put('currentLen', Js(0.0))
                                var.put('current', Js(0.0))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))
                        var.put('start', Js(26.0))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                return var.get('res')
            PyJs_pow_501_._set_name('pow')
            var.get('Red').get('prototype').put('pow', PyJs_pow_501_)
            @Js
            def PyJs_convertTo_502_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'convertTo':PyJs_convertTo_502_}, var)
                var.registers(['num', 'r'])
                var.put('r', var.get('num').callprop('umod', var.get(u"this").get('m')))
                return (var.get('r').callprop('clone') if _seq(var.get('r'),var.get('num')) else var.get('r'))
            PyJs_convertTo_502_._set_name('convertTo')
            var.get('Red').get('prototype').put('convertTo', PyJs_convertTo_502_)
            @Js
            def PyJs_convertFrom_503_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'convertFrom':PyJs_convertFrom_503_}, var)
                var.registers(['num', 'res'])
                var.put('res', var.get('num').callprop('clone'))
                var.get('res').put('red', var.get(u"null"))
                return var.get('res')
            PyJs_convertFrom_503_._set_name('convertFrom')
            var.get('Red').get('prototype').put('convertFrom', PyJs_convertFrom_503_)
            @Js
            def PyJs_mont_504_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'mont':PyJs_mont_504_}, var)
                var.registers(['num'])
                return var.get('Mont').create(var.get('num'))
            PyJs_mont_504_._set_name('mont')
            var.get('BN').put('mont', PyJs_mont_504_)
            pass
            var.get('inherits')(var.get('Mont'), var.get('Red'))
            @Js
            def PyJs_convertTo_505_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'convertTo':PyJs_convertTo_505_}, var)
                var.registers(['num'])
                return var.get(u"this").callprop('imod', var.get('num').callprop('ushln', var.get(u"this").get('shift')))
            PyJs_convertTo_505_._set_name('convertTo')
            var.get('Mont').get('prototype').put('convertTo', PyJs_convertTo_505_)
            @Js
            def PyJs_convertFrom_506_(num, this, arguments, var=var):
                var = Scope({'num':num, 'this':this, 'arguments':arguments, 'convertFrom':PyJs_convertFrom_506_}, var)
                var.registers(['num', 'r'])
                var.put('r', var.get(u"this").callprop('imod', var.get('num').callprop('mul', var.get(u"this").get('rinv'))))
                var.get('r').put('red', var.get(u"null"))
                return var.get('r')
            PyJs_convertFrom_506_._set_name('convertFrom')
            var.get('Mont').get('prototype').put('convertFrom', PyJs_convertFrom_506_)
            @Js
            def PyJs_imul_507_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'imul':PyJs_imul_507_}, var)
                var.registers(['u', 'a', 'c', 'b', 't', 'res'])
                if (var.get('a').callprop('isZero') or var.get('b').callprop('isZero')):
                    var.get('a').get('words').put('0', Js(0.0))
                    var.get('a').put('length', Js(1.0))
                    return var.get('a')
                var.put('t', var.get('a').callprop('imul', var.get('b')))
                var.put('c', var.get('t').callprop('maskn', var.get(u"this").get('shift')).callprop('mul', var.get(u"this").get('minv')).callprop('imaskn', var.get(u"this").get('shift')).callprop('mul', var.get(u"this").get('m')))
                var.put('u', var.get('t').callprop('isub', var.get('c')).callprop('iushrn', var.get(u"this").get('shift')))
                var.put('res', var.get('u'))
                if (var.get('u').callprop('cmp', var.get(u"this").get('m'))>=Js(0.0)):
                    var.put('res', var.get('u').callprop('isub', var.get(u"this").get('m')))
                else:
                    if (var.get('u').callprop('cmpn', Js(0.0))<Js(0.0)):
                        var.put('res', var.get('u').callprop('iadd', var.get(u"this").get('m')))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_imul_507_._set_name('imul')
            var.get('Mont').get('prototype').put('imul', PyJs_imul_507_)
            @Js
            def PyJs_mul_508_(a, b, this, arguments, var=var):
                var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_508_}, var)
                var.registers(['u', 'a', 'c', 'b', 't', 'res'])
                if (var.get('a').callprop('isZero') or var.get('b').callprop('isZero')):
                    return var.get('BN').create(Js(0.0)).callprop('_forceRed', var.get(u"this"))
                var.put('t', var.get('a').callprop('mul', var.get('b')))
                var.put('c', var.get('t').callprop('maskn', var.get(u"this").get('shift')).callprop('mul', var.get(u"this").get('minv')).callprop('imaskn', var.get(u"this").get('shift')).callprop('mul', var.get(u"this").get('m')))
                var.put('u', var.get('t').callprop('isub', var.get('c')).callprop('iushrn', var.get(u"this").get('shift')))
                var.put('res', var.get('u'))
                if (var.get('u').callprop('cmp', var.get(u"this").get('m'))>=Js(0.0)):
                    var.put('res', var.get('u').callprop('isub', var.get(u"this").get('m')))
                else:
                    if (var.get('u').callprop('cmpn', Js(0.0))<Js(0.0)):
                        var.put('res', var.get('u').callprop('iadd', var.get(u"this").get('m')))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_mul_508_._set_name('mul')
            var.get('Mont').get('prototype').put('mul', PyJs_mul_508_)
            @Js
            def PyJs_invm_509_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments, 'invm':PyJs_invm_509_}, var)
                var.registers(['a', 'res'])
                var.put('res', var.get(u"this").callprop('imod', var.get('a').callprop('_invmp', var.get(u"this").get('m')).callprop('mul', var.get(u"this").get('r2'))))
                return var.get('res').callprop('_forceRed', var.get(u"this"))
            PyJs_invm_509_._set_name('invm')
            var.get('Mont').get('prototype').put('invm', PyJs_invm_509_)
        PyJs_anonymous_334_._set_name('anonymous')
        PyJs_anonymous_334_((_seq(var.get('module',throw=False).typeof(),Js('undefined')) or var.get('module')), var.get(u"this"))
    PyJs_anonymous_333_._set_name('anonymous')
    @Js
    def PyJs_anonymous_510_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'r', 'module', 'crypto', 'Rand'])
        @Js
        def PyJsHoisted_Rand_(rand, this, arguments, var=var):
            var = Scope({'rand':rand, 'this':this, 'arguments':arguments}, var)
            var.registers(['rand'])
            var.get(u"this").put('rand', var.get('rand'))
        PyJsHoisted_Rand_.func_name = 'Rand'
        var.put('Rand', PyJsHoisted_Rand_)
        pass
        @Js
        def PyJs_rand_511_(len, this, arguments, var=var):
            var = Scope({'len':len, 'this':this, 'arguments':arguments, 'rand':PyJs_rand_511_}, var)
            var.registers(['len'])
            if var.get('r').neg():
                var.put('r', var.get('Rand').create(var.get(u"null")))
            return var.get('r').callprop('generate', var.get('len'))
        PyJs_rand_511_._set_name('rand')
        var.get('module').put('exports', PyJs_rand_511_)
        pass
        var.get('module').get('exports').put('Rand', var.get('Rand'))
        @Js
        def PyJs_generate_512_(len, this, arguments, var=var):
            var = Scope({'len':len, 'this':this, 'arguments':arguments, 'generate':PyJs_generate_512_}, var)
            var.registers(['len'])
            return var.get(u"this").callprop('_rand', var.get('len'))
        PyJs_generate_512_._set_name('generate')
        var.get('Rand').get('prototype').put('generate', PyJs_generate_512_)
        @Js
        def PyJs__rand_513_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, '_rand':PyJs__rand_513_}, var)
            var.registers(['i', 'n', 'res'])
            if var.get(u"this").get('rand').get('getBytes'):
                return var.get(u"this").get('rand').callprop('getBytes', var.get('n'))
            var.put('res', var.get('Uint8Array').create(var.get('n')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('res').get('length')):
                try:
                    var.get('res').put(var.get('i'), var.get(u"this").get('rand').callprop('getByte'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('res')
        PyJs__rand_513_._set_name('_rand')
        var.get('Rand').get('prototype').put('_rand', PyJs__rand_513_)
        if _seq((Js('undefined') if _seq(var.get('self',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('self'))),Js('object')):
            if (var.get('self').get('crypto') and var.get('self').get('crypto').get('getRandomValues')):
                @Js
                def PyJs__rand_514_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments, '_rand':PyJs__rand_514_}, var)
                    var.registers(['n', 'arr'])
                    var.put('arr', var.get('Uint8Array').create(var.get('n')))
                    var.get('self').get('crypto').callprop('getRandomValues', var.get('arr'))
                    return var.get('arr')
                PyJs__rand_514_._set_name('_rand')
                var.get('Rand').get('prototype').put('_rand', PyJs__rand_514_)
            else:
                if (var.get('self').get('msCrypto') and var.get('self').get('msCrypto').get('getRandomValues')):
                    @Js
                    def PyJs__rand_515_(n, this, arguments, var=var):
                        var = Scope({'n':n, 'this':this, 'arguments':arguments, '_rand':PyJs__rand_515_}, var)
                        var.registers(['n', 'arr'])
                        var.put('arr', var.get('Uint8Array').create(var.get('n')))
                        var.get('self').get('msCrypto').callprop('getRandomValues', var.get('arr'))
                        return var.get('arr')
                    PyJs__rand_515_._set_name('_rand')
                    var.get('Rand').get('prototype').put('_rand', PyJs__rand_515_)
                else:
                    if _seq((Js('undefined') if _seq(var.get('window',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('window'))),Js('object')):
                        @Js
                        def PyJs_anonymous_516_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Not implemented yet')))
                            raise PyJsTempException
                        PyJs_anonymous_516_._set_name('anonymous')
                        var.get('Rand').get('prototype').put('_rand', PyJs_anonymous_516_)
        else:
            try:
                var.put('crypto', var.get('require')(Js('crypto')))
                if PyJsStrictNeq(var.get('crypto').get('randomBytes').typeof(),Js('function')):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Not supported')))
                    raise PyJsTempException
                @Js
                def PyJs__rand_517_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments, '_rand':PyJs__rand_517_}, var)
                    var.registers(['n'])
                    return var.get('crypto').callprop('randomBytes', var.get('n'))
                PyJs__rand_517_._set_name('_rand')
                var.get('Rand').get('prototype').put('_rand', PyJs__rand_517_)
            except PyJsException as PyJsTempException:
                PyJsHolder_65_97613679 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_97613679 is not None:
                        var.own['e'] = PyJsHolder_65_97613679
                    else:
                        del var.own['e']
                    del PyJsHolder_65_97613679
    PyJs_anonymous_510_._set_name('anonymous')
    @Js
    def PyJs_anonymous_518_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
    PyJs_anonymous_518_._set_name('anonymous')
    @Js
    def PyJs_anonymous_519_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'G', 'AES', 'scrubVec', 'cryptBlock', 'asUInt32Array', 'RCON'])
        @Js
        def PyJsHoisted_asUInt32Array_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'i', 'out', 'buf'])
            if var.get('Buffer').callprop('isBuffer', var.get('buf')).neg():
                var.put('buf', var.get('Buffer').callprop('from', var.get('buf')))
            var.put('len', ((var.get('buf').get('length')/Js(4.0))|Js(0.0)))
            var.put('out', var.get('Array').create(var.get('len')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.get('out').put(var.get('i'), var.get('buf').callprop('readUInt32BE', (var.get('i')*Js(4.0))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('out')
        PyJsHoisted_asUInt32Array_.func_name = 'asUInt32Array'
        var.put('asUInt32Array', PyJsHoisted_asUInt32Array_)
        @Js
        def PyJsHoisted_scrubVec_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'v'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('v').get('length')):
                try:
                    var.get('v').put(var.get('i'), Js(0.0))
                finally:
                        (var.put('v',Js(var.get('v').to_number())+Js(1))-Js(1))
        PyJsHoisted_scrubVec_.func_name = 'scrubVec'
        var.put('scrubVec', PyJsHoisted_scrubVec_)
        @Js
        def PyJsHoisted_cryptBlock_(M, keySchedule, SUB_MIX, SBOX, nRounds, this, arguments, var=var):
            var = Scope({'M':M, 'keySchedule':keySchedule, 'SUB_MIX':SUB_MIX, 'SBOX':SBOX, 'nRounds':nRounds, 'this':this, 'arguments':arguments}, var)
            var.registers(['M', 's2', 'keySchedule', 'SUB_MIX3', 'ksRow', 'round', 't3', 'SBOX', 'SUB_MIX1', 's0', 's1', 'SUB_MIX', 't2', 'nRounds', 's3', 'SUB_MIX0', 't0', 'SUB_MIX2', 't1'])
            var.put('SUB_MIX0', var.get('SUB_MIX').get('0'))
            var.put('SUB_MIX1', var.get('SUB_MIX').get('1'))
            var.put('SUB_MIX2', var.get('SUB_MIX').get('2'))
            var.put('SUB_MIX3', var.get('SUB_MIX').get('3'))
            var.put('s0', (var.get('M').get('0')^var.get('keySchedule').get('0')))
            var.put('s1', (var.get('M').get('1')^var.get('keySchedule').get('1')))
            var.put('s2', (var.get('M').get('2')^var.get('keySchedule').get('2')))
            var.put('s3', (var.get('M').get('3')^var.get('keySchedule').get('3')))
            pass
            var.put('ksRow', Js(4.0))
            #for JS loop
            var.put('round', Js(1.0))
            while (var.get('round')<var.get('nRounds')):
                try:
                    var.put('t0', ((((var.get('SUB_MIX0').get(PyJsBshift(var.get('s0'),Js(24.0)))^var.get('SUB_MIX1').get((PyJsBshift(var.get('s1'),Js(16.0))&Js(255))))^var.get('SUB_MIX2').get((PyJsBshift(var.get('s2'),Js(8.0))&Js(255))))^var.get('SUB_MIX3').get((var.get('s3')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                    var.put('t1', ((((var.get('SUB_MIX0').get(PyJsBshift(var.get('s1'),Js(24.0)))^var.get('SUB_MIX1').get((PyJsBshift(var.get('s2'),Js(16.0))&Js(255))))^var.get('SUB_MIX2').get((PyJsBshift(var.get('s3'),Js(8.0))&Js(255))))^var.get('SUB_MIX3').get((var.get('s0')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                    var.put('t2', ((((var.get('SUB_MIX0').get(PyJsBshift(var.get('s2'),Js(24.0)))^var.get('SUB_MIX1').get((PyJsBshift(var.get('s3'),Js(16.0))&Js(255))))^var.get('SUB_MIX2').get((PyJsBshift(var.get('s0'),Js(8.0))&Js(255))))^var.get('SUB_MIX3').get((var.get('s1')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                    var.put('t3', ((((var.get('SUB_MIX0').get(PyJsBshift(var.get('s3'),Js(24.0)))^var.get('SUB_MIX1').get((PyJsBshift(var.get('s0'),Js(16.0))&Js(255))))^var.get('SUB_MIX2').get((PyJsBshift(var.get('s1'),Js(8.0))&Js(255))))^var.get('SUB_MIX3').get((var.get('s2')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                    var.put('s0', var.get('t0'))
                    var.put('s1', var.get('t1'))
                    var.put('s2', var.get('t2'))
                    var.put('s3', var.get('t3'))
                finally:
                        (var.put('round',Js(var.get('round').to_number())+Js(1))-Js(1))
            var.put('t0', (((((var.get('SBOX').get(PyJsBshift(var.get('s0'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('s1'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('s2'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('s3')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
            var.put('t1', (((((var.get('SBOX').get(PyJsBshift(var.get('s1'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('s2'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('s3'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('s0')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
            var.put('t2', (((((var.get('SBOX').get(PyJsBshift(var.get('s2'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('s3'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('s0'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('s1')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
            var.put('t3', (((((var.get('SBOX').get(PyJsBshift(var.get('s3'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('s0'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('s1'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('s2')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
            var.put('t0', PyJsBshift(var.get('t0'),Js(0.0)))
            var.put('t1', PyJsBshift(var.get('t1'),Js(0.0)))
            var.put('t2', PyJsBshift(var.get('t2'),Js(0.0)))
            var.put('t3', PyJsBshift(var.get('t3'),Js(0.0)))
            return Js([var.get('t0'), var.get('t1'), var.get('t2'), var.get('t3')])
        PyJsHoisted_cryptBlock_.func_name = 'cryptBlock'
        var.put('cryptBlock', PyJsHoisted_cryptBlock_)
        @Js
        def PyJsHoisted_AES_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.get(u"this").put('_key', var.get('asUInt32Array')(var.get('key')))
            var.get(u"this").callprop('_reset')
        PyJsHoisted_AES_.func_name = 'AES'
        var.put('AES', PyJsHoisted_AES_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        pass
        pass
        pass
        var.put('RCON', Js([Js(0), Js(1), Js(2), Js(4), Js(8), Js(16), Js(32), Js(64), Js(128), Js(27), Js(54)]))
        @Js
        def PyJs_anonymous_520_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['x2', 'INV_SUB_MIX', 'xi', 'j', 'i', 'x', 'INV_SBOX', 'sx', 'x4', 'SUB_MIX', 't', 'd', 'SBOX', 'x8'])
            var.put('d', var.get('Array').create(Js(256.0)))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<Js(256.0)):
                try:
                    if (var.get('j')<Js(128.0)):
                        var.get('d').put(var.get('j'), (var.get('j')<<Js(1.0)))
                    else:
                        var.get('d').put(var.get('j'), ((var.get('j')<<Js(1.0))^Js(283)))
                finally:
                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
            var.put('SBOX', Js([]))
            var.put('INV_SBOX', Js([]))
            var.put('SUB_MIX', Js([Js([]), Js([]), Js([]), Js([])]))
            var.put('INV_SUB_MIX', Js([Js([]), Js([]), Js([]), Js([])]))
            var.put('x', Js(0.0))
            var.put('xi', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(256.0)):
                try:
                    var.put('sx', ((((var.get('xi')^(var.get('xi')<<Js(1.0)))^(var.get('xi')<<Js(2.0)))^(var.get('xi')<<Js(3.0)))^(var.get('xi')<<Js(4.0))))
                    var.put('sx', ((PyJsBshift(var.get('sx'),Js(8.0))^(var.get('sx')&Js(255)))^Js(99)))
                    var.get('SBOX').put(var.get('x'), var.get('sx'))
                    var.get('INV_SBOX').put(var.get('sx'), var.get('x'))
                    var.put('x2', var.get('d').get(var.get('x')))
                    var.put('x4', var.get('d').get(var.get('x2')))
                    var.put('x8', var.get('d').get(var.get('x4')))
                    var.put('t', ((var.get('d').get(var.get('sx'))*Js(257))^(var.get('sx')*Js(16843008))))
                    var.get('SUB_MIX').get('0').put(var.get('x'), ((var.get('t')<<Js(24.0))|PyJsBshift(var.get('t'),Js(8.0))))
                    var.get('SUB_MIX').get('1').put(var.get('x'), ((var.get('t')<<Js(16.0))|PyJsBshift(var.get('t'),Js(16.0))))
                    var.get('SUB_MIX').get('2').put(var.get('x'), ((var.get('t')<<Js(8.0))|PyJsBshift(var.get('t'),Js(24.0))))
                    var.get('SUB_MIX').get('3').put(var.get('x'), var.get('t'))
                    var.put('t', ((((var.get('x8')*Js(16843009))^(var.get('x4')*Js(65537)))^(var.get('x2')*Js(257)))^(var.get('x')*Js(16843008))))
                    var.get('INV_SUB_MIX').get('0').put(var.get('sx'), ((var.get('t')<<Js(24.0))|PyJsBshift(var.get('t'),Js(8.0))))
                    var.get('INV_SUB_MIX').get('1').put(var.get('sx'), ((var.get('t')<<Js(16.0))|PyJsBshift(var.get('t'),Js(16.0))))
                    var.get('INV_SUB_MIX').get('2').put(var.get('sx'), ((var.get('t')<<Js(8.0))|PyJsBshift(var.get('t'),Js(24.0))))
                    var.get('INV_SUB_MIX').get('3').put(var.get('sx'), var.get('t'))
                    if _seq(var.get('x'),Js(0.0)):
                        var.put('x', var.put('xi', Js(1.0)))
                    else:
                        var.put('x', (var.get('x2')^var.get('d').get(var.get('d').get(var.get('d').get((var.get('x8')^var.get('x2')))))))
                        var.put('xi', var.get('d').get(var.get('d').get(var.get('xi'))), '^')
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return Js({'SBOX':var.get('SBOX'),'INV_SBOX':var.get('INV_SBOX'),'SUB_MIX':var.get('SUB_MIX'),'INV_SUB_MIX':var.get('INV_SUB_MIX')})
        PyJs_anonymous_520_._set_name('anonymous')
        var.put('G', PyJs_anonymous_520_())
        pass
        var.get('AES').put('blockSize', (Js(4.0)*Js(4.0)))
        var.get('AES').put('keySize', (Js(256.0)/Js(8.0)))
        var.get('AES').get('prototype').put('blockSize', var.get('AES').get('blockSize'))
        var.get('AES').get('prototype').put('keySize', var.get('AES').get('keySize'))
        @Js
        def PyJs_anonymous_521_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['ksRows', 'tt', 'keySize', 'keySchedule', 'k', 'ik', 'keyWords', 't', 'invKeySchedule', 'nRounds', 'ksR'])
            var.put('keyWords', var.get(u"this").get('_key'))
            var.put('keySize', var.get('keyWords').get('length'))
            var.put('nRounds', (var.get('keySize')+Js(6.0)))
            var.put('ksRows', ((var.get('nRounds')+Js(1.0))*Js(4.0)))
            var.put('keySchedule', Js([]))
            #for JS loop
            var.put('k', Js(0.0))
            while (var.get('k')<var.get('keySize')):
                try:
                    var.get('keySchedule').put(var.get('k'), var.get('keyWords').get(var.get('k')))
                finally:
                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('k', var.get('keySize'))
            while (var.get('k')<var.get('ksRows')):
                try:
                    var.put('t', var.get('keySchedule').get((var.get('k')-Js(1.0))))
                    if _seq((var.get('k')%var.get('keySize')),Js(0.0)):
                        var.put('t', ((var.get('t')<<Js(8.0))|PyJsBshift(var.get('t'),Js(24.0))))
                        var.put('t', ((((var.get('G').get('SBOX').get(PyJsBshift(var.get('t'),Js(24.0)))<<Js(24.0))|(var.get('G').get('SBOX').get((PyJsBshift(var.get('t'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('G').get('SBOX').get((PyJsBshift(var.get('t'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('G').get('SBOX').get((var.get('t')&Js(255)))))
                        var.put('t', (var.get('RCON').get(((var.get('k')/var.get('keySize'))|Js(0.0)))<<Js(24.0)), '^')
                    else:
                        if ((var.get('keySize')>Js(6.0)) and _seq((var.get('k')%var.get('keySize')),Js(4.0))):
                            var.put('t', ((((var.get('G').get('SBOX').get(PyJsBshift(var.get('t'),Js(24.0)))<<Js(24.0))|(var.get('G').get('SBOX').get((PyJsBshift(var.get('t'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('G').get('SBOX').get((PyJsBshift(var.get('t'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('G').get('SBOX').get((var.get('t')&Js(255)))))
                    var.get('keySchedule').put(var.get('k'), (var.get('keySchedule').get((var.get('k')-var.get('keySize')))^var.get('t')))
                finally:
                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
            var.put('invKeySchedule', Js([]))
            #for JS loop
            var.put('ik', Js(0.0))
            while (var.get('ik')<var.get('ksRows')):
                try:
                    var.put('ksR', (var.get('ksRows')-var.get('ik')))
                    var.put('tt', var.get('keySchedule').get((var.get('ksR')-(Js(0.0) if (var.get('ik')%Js(4.0)) else Js(4.0)))))
                    if ((var.get('ik')<Js(4.0)) or (var.get('ksR')<=Js(4.0))):
                        var.get('invKeySchedule').put(var.get('ik'), var.get('tt'))
                    else:
                        def PyJs_LONG_522_(var=var):
                            return (((var.get('G').get('INV_SUB_MIX').get('0').get(var.get('G').get('SBOX').get(PyJsBshift(var.get('tt'),Js(24.0))))^var.get('G').get('INV_SUB_MIX').get('1').get(var.get('G').get('SBOX').get((PyJsBshift(var.get('tt'),Js(16.0))&Js(255)))))^var.get('G').get('INV_SUB_MIX').get('2').get(var.get('G').get('SBOX').get((PyJsBshift(var.get('tt'),Js(8.0))&Js(255)))))^var.get('G').get('INV_SUB_MIX').get('3').get(var.get('G').get('SBOX').get((var.get('tt')&Js(255)))))
                        var.get('invKeySchedule').put(var.get('ik'), PyJs_LONG_522_())
                finally:
                        (var.put('ik',Js(var.get('ik').to_number())+Js(1))-Js(1))
            var.get(u"this").put('_nRounds', var.get('nRounds'))
            var.get(u"this").put('_keySchedule', var.get('keySchedule'))
            var.get(u"this").put('_invKeySchedule', var.get('invKeySchedule'))
        PyJs_anonymous_521_._set_name('anonymous')
        var.get('AES').get('prototype').put('_reset', PyJs_anonymous_521_)
        @Js
        def PyJs_anonymous_523_(M, this, arguments, var=var):
            var = Scope({'M':M, 'this':this, 'arguments':arguments}, var)
            var.registers(['M'])
            var.put('M', var.get('asUInt32Array')(var.get('M')))
            return var.get('cryptBlock')(var.get('M'), var.get(u"this").get('_keySchedule'), var.get('G').get('SUB_MIX'), var.get('G').get('SBOX'), var.get(u"this").get('_nRounds'))
        PyJs_anonymous_523_._set_name('anonymous')
        var.get('AES').get('prototype').put('encryptBlockRaw', PyJs_anonymous_523_)
        @Js
        def PyJs_anonymous_524_(M, this, arguments, var=var):
            var = Scope({'M':M, 'this':this, 'arguments':arguments}, var)
            var.registers(['M', 'buf', 'out'])
            var.put('out', var.get(u"this").callprop('encryptBlockRaw', var.get('M')))
            var.put('buf', var.get('Buffer').callprop('allocUnsafe', Js(16.0)))
            var.get('buf').callprop('writeUInt32BE', var.get('out').get('0'), Js(0.0))
            var.get('buf').callprop('writeUInt32BE', var.get('out').get('1'), Js(4.0))
            var.get('buf').callprop('writeUInt32BE', var.get('out').get('2'), Js(8.0))
            var.get('buf').callprop('writeUInt32BE', var.get('out').get('3'), Js(12.0))
            return var.get('buf')
        PyJs_anonymous_524_._set_name('anonymous')
        var.get('AES').get('prototype').put('encryptBlock', PyJs_anonymous_524_)
        @Js
        def PyJs_anonymous_525_(M, this, arguments, var=var):
            var = Scope({'M':M, 'this':this, 'arguments':arguments}, var)
            var.registers(['out', 'buf', 'm1', 'M'])
            var.put('M', var.get('asUInt32Array')(var.get('M')))
            var.put('m1', var.get('M').get('1'))
            var.get('M').put('1', var.get('M').get('3'))
            var.get('M').put('3', var.get('m1'))
            var.put('out', var.get('cryptBlock')(var.get('M'), var.get(u"this").get('_invKeySchedule'), var.get('G').get('INV_SUB_MIX'), var.get('G').get('INV_SBOX'), var.get(u"this").get('_nRounds')))
            var.put('buf', var.get('Buffer').callprop('allocUnsafe', Js(16.0)))
            var.get('buf').callprop('writeUInt32BE', var.get('out').get('0'), Js(0.0))
            var.get('buf').callprop('writeUInt32BE', var.get('out').get('3'), Js(4.0))
            var.get('buf').callprop('writeUInt32BE', var.get('out').get('2'), Js(8.0))
            var.get('buf').callprop('writeUInt32BE', var.get('out').get('1'), Js(12.0))
            return var.get('buf')
        PyJs_anonymous_525_._set_name('anonymous')
        var.get('AES').get('prototype').put('decryptBlock', PyJs_anonymous_525_)
        @Js
        def PyJs_anonymous_526_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('scrubVec')(var.get(u"this").get('_keySchedule'))
            var.get('scrubVec')(var.get(u"this").get('_invKeySchedule'))
            var.get('scrubVec')(var.get(u"this").get('_key'))
        PyJs_anonymous_526_._set_name('anonymous')
        var.get('AES').get('prototype').put('scrub', PyJs_anonymous_526_)
        var.get('module').get('exports').put('AES', var.get('AES'))
    PyJs_anonymous_519_._set_name('anonymous')
    @Js
    def PyJs_anonymous_527_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['incr32', 'exports', 'aes', 'Buffer', 'require', 'module', 'Transform', 'calcIv', 'GHASH', 'inherits', 'StreamCipher', 'xorTest', 'xor'])
        @Js
        def PyJsHoisted_xorTest_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'len', 'i', 'out', 'b'])
            var.put('out', Js(0.0))
            if PyJsStrictNeq(var.get('a').get('length'),var.get('b').get('length')):
                (var.put('out',Js(var.get('out').to_number())+Js(1))-Js(1))
            var.put('len', var.get('Math').callprop('min', var.get('a').get('length'), var.get('b').get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.put('out', (var.get('a').get(var.get('i'))^var.get('b').get(var.get('i'))), '+')
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('out')
        PyJsHoisted_xorTest_.func_name = 'xorTest'
        var.put('xorTest', PyJsHoisted_xorTest_)
        @Js
        def PyJsHoisted_calcIv_(self, iv, ck, this, arguments, var=var):
            var = Scope({'self':self, 'iv':iv, 'ck':ck, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'ghash', 'tail', 'iv', 'len', 'ck', 'out', 'ivBits', 'toPad'])
            if _seq(var.get('iv').get('length'),Js(12.0)):
                var.get('self').put('_finID', var.get('Buffer').callprop('concat', Js([var.get('iv'), var.get('Buffer').callprop('from', Js([Js(0.0), Js(0.0), Js(0.0), Js(1.0)]))])))
                return var.get('Buffer').callprop('concat', Js([var.get('iv'), var.get('Buffer').callprop('from', Js([Js(0.0), Js(0.0), Js(0.0), Js(2.0)]))]))
            var.put('ghash', var.get('GHASH').create(var.get('ck')))
            var.put('len', var.get('iv').get('length'))
            var.put('toPad', (var.get('len')%Js(16.0)))
            var.get('ghash').callprop('update', var.get('iv'))
            if var.get('toPad'):
                var.put('toPad', (Js(16.0)-var.get('toPad')))
                var.get('ghash').callprop('update', var.get('Buffer').callprop('alloc', var.get('toPad'), Js(0.0)))
            var.get('ghash').callprop('update', var.get('Buffer').callprop('alloc', Js(8.0), Js(0.0)))
            var.put('ivBits', (var.get('len')*Js(8.0)))
            var.put('tail', var.get('Buffer').callprop('alloc', Js(8.0)))
            var.get('tail').callprop('writeUIntBE', var.get('ivBits'), Js(0.0), Js(8.0))
            var.get('ghash').callprop('update', var.get('tail'))
            var.get('self').put('_finID', var.get('ghash').get('state'))
            var.put('out', var.get('Buffer').callprop('from', var.get('self').get('_finID')))
            var.get('incr32')(var.get('out'))
            return var.get('out')
        PyJsHoisted_calcIv_.func_name = 'calcIv'
        var.put('calcIv', PyJsHoisted_calcIv_)
        @Js
        def PyJsHoisted_StreamCipher_(mode, key, iv, decrypt, this, arguments, var=var):
            var = Scope({'mode':mode, 'key':key, 'iv':iv, 'decrypt':decrypt, 'this':this, 'arguments':arguments}, var)
            var.registers(['iv', 'ck', 'h', 'key', 'decrypt', 'mode'])
            var.get('Transform').callprop('call', var.get(u"this"))
            var.put('h', var.get('Buffer').callprop('alloc', Js(4.0), Js(0.0)))
            var.get(u"this").put('_cipher', var.get('aes').get('AES').create(var.get('key')))
            var.put('ck', var.get(u"this").get('_cipher').callprop('encryptBlock', var.get('h')))
            var.get(u"this").put('_ghash', var.get('GHASH').create(var.get('ck')))
            var.put('iv', var.get('calcIv')(var.get(u"this"), var.get('iv'), var.get('ck')))
            var.get(u"this").put('_prev', var.get('Buffer').callprop('from', var.get('iv')))
            var.get(u"this").put('_cache', var.get('Buffer').callprop('allocUnsafe', Js(0.0)))
            var.get(u"this").put('_secCache', var.get('Buffer').callprop('allocUnsafe', Js(0.0)))
            var.get(u"this").put('_decrypt', var.get('decrypt'))
            var.get(u"this").put('_alen', Js(0.0))
            var.get(u"this").put('_len', Js(0.0))
            var.get(u"this").put('_mode', var.get('mode'))
            var.get(u"this").put('_authTag', var.get(u"null"))
            var.get(u"this").put('_called', Js(False))
        PyJsHoisted_StreamCipher_.func_name = 'StreamCipher'
        var.put('StreamCipher', PyJsHoisted_StreamCipher_)
        var.put('aes', var.get('require')(Js('./aes')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('Transform', var.get('require')(Js('cipher-base')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('GHASH', var.get('require')(Js('./ghash')))
        var.put('xor', var.get('require')(Js('buffer-xor')))
        var.put('incr32', var.get('require')(Js('./incr32')))
        pass
        pass
        pass
        var.get('inherits')(var.get('StreamCipher'), var.get('Transform'))
        @Js
        def PyJs_anonymous_528_(chunk, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
            var.registers(['chunk', 'out', 'rump'])
            if (var.get(u"this").get('_called').neg() and var.get(u"this").get('_alen')):
                var.put('rump', (Js(16.0)-(var.get(u"this").get('_alen')%Js(16.0))))
                if (var.get('rump')<Js(16.0)):
                    var.put('rump', var.get('Buffer').callprop('alloc', var.get('rump'), Js(0.0)))
                    var.get(u"this").get('_ghash').callprop('update', var.get('rump'))
            var.get(u"this").put('_called', Js(True))
            var.put('out', var.get(u"this").get('_mode').callprop('encrypt', var.get(u"this"), var.get('chunk')))
            if var.get(u"this").get('_decrypt'):
                var.get(u"this").get('_ghash').callprop('update', var.get('chunk'))
            else:
                var.get(u"this").get('_ghash').callprop('update', var.get('out'))
            var.get(u"this").put('_len', var.get('chunk').get('length'), '+')
            return var.get('out')
        PyJs_anonymous_528_._set_name('anonymous')
        var.get('StreamCipher').get('prototype').put('_update', PyJs_anonymous_528_)
        @Js
        def PyJs_anonymous_529_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['tag'])
            if (var.get(u"this").get('_decrypt') and var.get(u"this").get('_authTag').neg()):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Unsupported state or unable to authenticate data')))
                raise PyJsTempException
            var.put('tag', var.get('xor')(var.get(u"this").get('_ghash').callprop('final', (var.get(u"this").get('_alen')*Js(8.0)), (var.get(u"this").get('_len')*Js(8.0))), var.get(u"this").get('_cipher').callprop('encryptBlock', var.get(u"this").get('_finID'))))
            if (var.get(u"this").get('_decrypt') and var.get('xorTest')(var.get('tag'), var.get(u"this").get('_authTag'))):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Unsupported state or unable to authenticate data')))
                raise PyJsTempException
            var.get(u"this").put('_authTag', var.get('tag'))
            var.get(u"this").get('_cipher').callprop('scrub')
        PyJs_anonymous_529_._set_name('anonymous')
        var.get('StreamCipher').get('prototype').put('_final', PyJs_anonymous_529_)
        @Js
        def PyJs_getAuthTag_530_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getAuthTag':PyJs_getAuthTag_530_}, var)
            var.registers([])
            if (var.get(u"this").get('_decrypt') or var.get('Buffer').callprop('isBuffer', var.get(u"this").get('_authTag')).neg()):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Attempting to get auth tag in unsupported state')))
                raise PyJsTempException
            return var.get(u"this").get('_authTag')
        PyJs_getAuthTag_530_._set_name('getAuthTag')
        var.get('StreamCipher').get('prototype').put('getAuthTag', PyJs_getAuthTag_530_)
        @Js
        def PyJs_setAuthTag_531_(tag, this, arguments, var=var):
            var = Scope({'tag':tag, 'this':this, 'arguments':arguments, 'setAuthTag':PyJs_setAuthTag_531_}, var)
            var.registers(['tag'])
            if var.get(u"this").get('_decrypt').neg():
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Attempting to set auth tag in unsupported state')))
                raise PyJsTempException
            var.get(u"this").put('_authTag', var.get('tag'))
        PyJs_setAuthTag_531_._set_name('setAuthTag')
        var.get('StreamCipher').get('prototype').put('setAuthTag', PyJs_setAuthTag_531_)
        @Js
        def PyJs_setAAD_532_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments, 'setAAD':PyJs_setAAD_532_}, var)
            var.registers(['buf'])
            if var.get(u"this").get('_called'):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Attempting to set AAD in unsupported state')))
                raise PyJsTempException
            var.get(u"this").get('_ghash').callprop('update', var.get('buf'))
            var.get(u"this").put('_alen', var.get('buf').get('length'), '+')
        PyJs_setAAD_532_._set_name('setAAD')
        var.get('StreamCipher').get('prototype').put('setAAD', PyJs_setAAD_532_)
        var.get('module').put('exports', var.get('StreamCipher'))
    PyJs_anonymous_527_._set_name('anonymous')
    @Js
    def PyJs_anonymous_533_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'deciphers', 'module', 'ciphers', 'getCiphers', 'modes'])
        @Js
        def PyJsHoisted_getCiphers_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('Object').callprop('keys', var.get('modes'))
        PyJsHoisted_getCiphers_.func_name = 'getCiphers'
        var.put('getCiphers', PyJsHoisted_getCiphers_)
        var.put('ciphers', var.get('require')(Js('./encrypter')))
        var.put('deciphers', var.get('require')(Js('./decrypter')))
        var.put('modes', var.get('require')(Js('./modes/list.json')))
        pass
        var.get('exports').put('createCipher', var.get('exports').put('Cipher', var.get('ciphers').get('createCipher')))
        var.get('exports').put('createCipheriv', var.get('exports').put('Cipheriv', var.get('ciphers').get('createCipheriv')))
        var.get('exports').put('createDecipher', var.get('exports').put('Decipher', var.get('deciphers').get('createDecipher')))
        var.get('exports').put('createDecipheriv', var.get('exports').put('Decipheriv', var.get('deciphers').get('createDecipheriv')))
        var.get('exports').put('listCiphers', var.get('exports').put('getCiphers', var.get('getCiphers')))
    PyJs_anonymous_533_._set_name('anonymous')
    @Js
    def PyJs_anonymous_534_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'aes', 'Buffer', 'require', 'module', 'createDecipheriv', 'Transform', 'Decipher', 'unpad', 'ebtk', 'Splitter', 'AuthCipher', 'MODES', 'StreamCipher', 'inherits', 'createDecipher'])
        @Js
        def PyJsHoisted_Decipher_(mode, key, iv, this, arguments, var=var):
            var = Scope({'mode':mode, 'key':key, 'iv':iv, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'iv', 'mode'])
            var.get('Transform').callprop('call', var.get(u"this"))
            var.get(u"this").put('_cache', var.get('Splitter').create())
            var.get(u"this").put('_last', PyJsComma(Js(0.0), Js(None)))
            var.get(u"this").put('_cipher', var.get('aes').get('AES').create(var.get('key')))
            var.get(u"this").put('_prev', var.get('Buffer').callprop('from', var.get('iv')))
            var.get(u"this").put('_mode', var.get('mode'))
            var.get(u"this").put('_autopadding', Js(True))
        PyJsHoisted_Decipher_.func_name = 'Decipher'
        var.put('Decipher', PyJsHoisted_Decipher_)
        @Js
        def PyJsHoisted_Splitter_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('cache', var.get('Buffer').callprop('allocUnsafe', Js(0.0)))
        PyJsHoisted_Splitter_.func_name = 'Splitter'
        var.put('Splitter', PyJsHoisted_Splitter_)
        @Js
        def PyJsHoisted_unpad_(last, this, arguments, var=var):
            var = Scope({'last':last, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'last', 'padded'])
            var.put('padded', var.get('last').get('15'))
            if ((var.get('padded')<Js(1.0)) or (var.get('padded')>Js(16.0))):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('unable to decrypt data')))
                raise PyJsTempException
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('padded')):
                if PyJsStrictNeq(var.get('last').get((var.get('i')+(Js(16.0)-var.get('padded')))),var.get('padded')):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('unable to decrypt data')))
                    raise PyJsTempException
            if _seq(var.get('padded'),Js(16.0)):
                return var.get('undefined')
            return var.get('last').callprop('slice', Js(0.0), (Js(16.0)-var.get('padded')))
        PyJsHoisted_unpad_.func_name = 'unpad'
        var.put('unpad', PyJsHoisted_unpad_)
        @Js
        def PyJsHoisted_createDecipheriv_(suite, password, iv, this, arguments, var=var):
            var = Scope({'suite':suite, 'password':password, 'iv':iv, 'this':this, 'arguments':arguments}, var)
            var.registers(['suite', 'iv', 'password', 'config'])
            var.put('config', var.get('MODES').get(var.get('suite').callprop('toLowerCase')))
            if var.get('config').neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('invalid suite type')))
                raise PyJsTempException
            if _seq(var.get('iv',throw=False).typeof(),Js('string')):
                var.put('iv', var.get('Buffer').callprop('from', var.get('iv')))
            if (PyJsStrictNeq(var.get('config').get('mode'),Js('GCM')) and PyJsStrictNeq(var.get('iv').get('length'),var.get('config').get('iv'))):
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('invalid iv length ')+var.get('iv').get('length'))))
                raise PyJsTempException
            if _seq(var.get('password',throw=False).typeof(),Js('string')):
                var.put('password', var.get('Buffer').callprop('from', var.get('password')))
            if PyJsStrictNeq(var.get('password').get('length'),(var.get('config').get('key')/Js(8.0))):
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('invalid key length ')+var.get('password').get('length'))))
                raise PyJsTempException
            if _seq(var.get('config').get('type'),Js('stream')):
                return var.get('StreamCipher').create(var.get('config').get('module'), var.get('password'), var.get('iv'), Js(True))
            else:
                if _seq(var.get('config').get('type'),Js('auth')):
                    return var.get('AuthCipher').create(var.get('config').get('module'), var.get('password'), var.get('iv'), Js(True))
            return var.get('Decipher').create(var.get('config').get('module'), var.get('password'), var.get('iv'))
        PyJsHoisted_createDecipheriv_.func_name = 'createDecipheriv'
        var.put('createDecipheriv', PyJsHoisted_createDecipheriv_)
        @Js
        def PyJsHoisted_createDecipher_(suite, password, this, arguments, var=var):
            var = Scope({'suite':suite, 'password':password, 'this':this, 'arguments':arguments}, var)
            var.registers(['keys', 'suite', 'password', 'config'])
            var.put('config', var.get('MODES').get(var.get('suite').callprop('toLowerCase')))
            if var.get('config').neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('invalid suite type')))
                raise PyJsTempException
            var.put('keys', var.get('ebtk')(var.get('password'), Js(False), var.get('config').get('key'), var.get('config').get('iv')))
            return var.get('createDecipheriv')(var.get('suite'), var.get('keys').get('key'), var.get('keys').get('iv'))
        PyJsHoisted_createDecipher_.func_name = 'createDecipher'
        var.put('createDecipher', PyJsHoisted_createDecipher_)
        var.put('AuthCipher', var.get('require')(Js('./authCipher')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('MODES', var.get('require')(Js('./modes')))
        var.put('StreamCipher', var.get('require')(Js('./streamCipher')))
        var.put('Transform', var.get('require')(Js('cipher-base')))
        var.put('aes', var.get('require')(Js('./aes')))
        var.put('ebtk', var.get('require')(Js('evp_bytestokey')))
        var.put('inherits', var.get('require')(Js('inherits')))
        pass
        var.get('inherits')(var.get('Decipher'), var.get('Transform'))
        @Js
        def PyJs_anonymous_535_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['chunk', 'thing', 'out', 'data'])
            var.get(u"this").get('_cache').callprop('add', var.get('data'))
            pass
            pass
            var.put('out', Js([]))
            while var.put('chunk', var.get(u"this").get('_cache').callprop('get', var.get(u"this").get('_autopadding'))):
                var.put('thing', var.get(u"this").get('_mode').callprop('decrypt', var.get(u"this"), var.get('chunk')))
                var.get('out').callprop('push', var.get('thing'))
            return var.get('Buffer').callprop('concat', var.get('out'))
        PyJs_anonymous_535_._set_name('anonymous')
        var.get('Decipher').get('prototype').put('_update', PyJs_anonymous_535_)
        @Js
        def PyJs_anonymous_536_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['chunk'])
            var.put('chunk', var.get(u"this").get('_cache').callprop('flush'))
            if var.get(u"this").get('_autopadding'):
                return var.get('unpad')(var.get(u"this").get('_mode').callprop('decrypt', var.get(u"this"), var.get('chunk')))
            else:
                if var.get('chunk'):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('data not multiple of block length')))
                    raise PyJsTempException
        PyJs_anonymous_536_._set_name('anonymous')
        var.get('Decipher').get('prototype').put('_final', PyJs_anonymous_536_)
        @Js
        def PyJs_anonymous_537_(setTo, this, arguments, var=var):
            var = Scope({'setTo':setTo, 'this':this, 'arguments':arguments}, var)
            var.registers(['setTo'])
            var.get(u"this").put('_autopadding', var.get('setTo').neg().neg())
            return var.get(u"this")
        PyJs_anonymous_537_._set_name('anonymous')
        var.get('Decipher').get('prototype').put('setAutoPadding', PyJs_anonymous_537_)
        pass
        @Js
        def PyJs_anonymous_538_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data'])
            var.get(u"this").put('cache', var.get('Buffer').callprop('concat', Js([var.get(u"this").get('cache'), var.get('data')])))
        PyJs_anonymous_538_._set_name('anonymous')
        var.get('Splitter').get('prototype').put('add', PyJs_anonymous_538_)
        @Js
        def PyJs_anonymous_539_(autoPadding, this, arguments, var=var):
            var = Scope({'autoPadding':autoPadding, 'this':this, 'arguments':arguments}, var)
            var.registers(['autoPadding', 'out'])
            pass
            if var.get('autoPadding'):
                if (var.get(u"this").get('cache').get('length')>Js(16.0)):
                    var.put('out', var.get(u"this").get('cache').callprop('slice', Js(0.0), Js(16.0)))
                    var.get(u"this").put('cache', var.get(u"this").get('cache').callprop('slice', Js(16.0)))
                    return var.get('out')
            else:
                if (var.get(u"this").get('cache').get('length')>=Js(16.0)):
                    var.put('out', var.get(u"this").get('cache').callprop('slice', Js(0.0), Js(16.0)))
                    var.get(u"this").put('cache', var.get(u"this").get('cache').callprop('slice', Js(16.0)))
                    return var.get('out')
            return var.get(u"null")
        PyJs_anonymous_539_._set_name('anonymous')
        var.get('Splitter').get('prototype').put('get', PyJs_anonymous_539_)
        @Js
        def PyJs_anonymous_540_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").get('cache').get('length'):
                return var.get(u"this").get('cache')
        PyJs_anonymous_540_._set_name('anonymous')
        var.get('Splitter').get('prototype').put('flush', PyJs_anonymous_540_)
        pass
        pass
        pass
        var.get('exports').put('createDecipher', var.get('createDecipher'))
        var.get('exports').put('createDecipheriv', var.get('createDecipheriv'))
    PyJs_anonymous_534_._set_name('anonymous')
    @Js
    def PyJs_anonymous_541_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'aes', 'Buffer', 'require', 'module', 'Transform', 'PADDING', 'createCipheriv', 'createCipher', 'ebtk', 'Splitter', 'AuthCipher', 'MODES', 'StreamCipher', 'Cipher', 'inherits'])
        @Js
        def PyJsHoisted_Cipher_(mode, key, iv, this, arguments, var=var):
            var = Scope({'mode':mode, 'key':key, 'iv':iv, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'iv', 'mode'])
            var.get('Transform').callprop('call', var.get(u"this"))
            var.get(u"this").put('_cache', var.get('Splitter').create())
            var.get(u"this").put('_cipher', var.get('aes').get('AES').create(var.get('key')))
            var.get(u"this").put('_prev', var.get('Buffer').callprop('from', var.get('iv')))
            var.get(u"this").put('_mode', var.get('mode'))
            var.get(u"this").put('_autopadding', Js(True))
        PyJsHoisted_Cipher_.func_name = 'Cipher'
        var.put('Cipher', PyJsHoisted_Cipher_)
        @Js
        def PyJsHoisted_Splitter_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('cache', var.get('Buffer').callprop('allocUnsafe', Js(0.0)))
        PyJsHoisted_Splitter_.func_name = 'Splitter'
        var.put('Splitter', PyJsHoisted_Splitter_)
        @Js
        def PyJsHoisted_createCipheriv_(suite, password, iv, this, arguments, var=var):
            var = Scope({'suite':suite, 'password':password, 'iv':iv, 'this':this, 'arguments':arguments}, var)
            var.registers(['suite', 'iv', 'password', 'config'])
            var.put('config', var.get('MODES').get(var.get('suite').callprop('toLowerCase')))
            if var.get('config').neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('invalid suite type')))
                raise PyJsTempException
            if _seq(var.get('password',throw=False).typeof(),Js('string')):
                var.put('password', var.get('Buffer').callprop('from', var.get('password')))
            if PyJsStrictNeq(var.get('password').get('length'),(var.get('config').get('key')/Js(8.0))):
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('invalid key length ')+var.get('password').get('length'))))
                raise PyJsTempException
            if _seq(var.get('iv',throw=False).typeof(),Js('string')):
                var.put('iv', var.get('Buffer').callprop('from', var.get('iv')))
            if (PyJsStrictNeq(var.get('config').get('mode'),Js('GCM')) and PyJsStrictNeq(var.get('iv').get('length'),var.get('config').get('iv'))):
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('invalid iv length ')+var.get('iv').get('length'))))
                raise PyJsTempException
            if _seq(var.get('config').get('type'),Js('stream')):
                return var.get('StreamCipher').create(var.get('config').get('module'), var.get('password'), var.get('iv'))
            else:
                if _seq(var.get('config').get('type'),Js('auth')):
                    return var.get('AuthCipher').create(var.get('config').get('module'), var.get('password'), var.get('iv'))
            return var.get('Cipher').create(var.get('config').get('module'), var.get('password'), var.get('iv'))
        PyJsHoisted_createCipheriv_.func_name = 'createCipheriv'
        var.put('createCipheriv', PyJsHoisted_createCipheriv_)
        @Js
        def PyJsHoisted_createCipher_(suite, password, this, arguments, var=var):
            var = Scope({'suite':suite, 'password':password, 'this':this, 'arguments':arguments}, var)
            var.registers(['keys', 'suite', 'password', 'config'])
            var.put('config', var.get('MODES').get(var.get('suite').callprop('toLowerCase')))
            if var.get('config').neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('invalid suite type')))
                raise PyJsTempException
            var.put('keys', var.get('ebtk')(var.get('password'), Js(False), var.get('config').get('key'), var.get('config').get('iv')))
            return var.get('createCipheriv')(var.get('suite'), var.get('keys').get('key'), var.get('keys').get('iv'))
        PyJsHoisted_createCipher_.func_name = 'createCipher'
        var.put('createCipher', PyJsHoisted_createCipher_)
        var.put('MODES', var.get('require')(Js('./modes')))
        var.put('AuthCipher', var.get('require')(Js('./authCipher')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('StreamCipher', var.get('require')(Js('./streamCipher')))
        var.put('Transform', var.get('require')(Js('cipher-base')))
        var.put('aes', var.get('require')(Js('./aes')))
        var.put('ebtk', var.get('require')(Js('evp_bytestokey')))
        var.put('inherits', var.get('require')(Js('inherits')))
        pass
        var.get('inherits')(var.get('Cipher'), var.get('Transform'))
        @Js
        def PyJs_anonymous_542_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['chunk', 'thing', 'out', 'data'])
            var.get(u"this").get('_cache').callprop('add', var.get('data'))
            pass
            pass
            var.put('out', Js([]))
            while var.put('chunk', var.get(u"this").get('_cache').callprop('get')):
                var.put('thing', var.get(u"this").get('_mode').callprop('encrypt', var.get(u"this"), var.get('chunk')))
                var.get('out').callprop('push', var.get('thing'))
            return var.get('Buffer').callprop('concat', var.get('out'))
        PyJs_anonymous_542_._set_name('anonymous')
        var.get('Cipher').get('prototype').put('_update', PyJs_anonymous_542_)
        var.put('PADDING', var.get('Buffer').callprop('alloc', Js(16.0), Js(16)))
        @Js
        def PyJs_anonymous_543_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['chunk'])
            var.put('chunk', var.get(u"this").get('_cache').callprop('flush'))
            if var.get(u"this").get('_autopadding'):
                var.put('chunk', var.get(u"this").get('_mode').callprop('encrypt', var.get(u"this"), var.get('chunk')))
                var.get(u"this").get('_cipher').callprop('scrub')
                return var.get('chunk')
            if var.get('chunk').callprop('equals', var.get('PADDING')).neg():
                var.get(u"this").get('_cipher').callprop('scrub')
                PyJsTempException = JsToPyException(var.get('Error').create(Js('data not multiple of block length')))
                raise PyJsTempException
        PyJs_anonymous_543_._set_name('anonymous')
        var.get('Cipher').get('prototype').put('_final', PyJs_anonymous_543_)
        @Js
        def PyJs_anonymous_544_(setTo, this, arguments, var=var):
            var = Scope({'setTo':setTo, 'this':this, 'arguments':arguments}, var)
            var.registers(['setTo'])
            var.get(u"this").put('_autopadding', var.get('setTo').neg().neg())
            return var.get(u"this")
        PyJs_anonymous_544_._set_name('anonymous')
        var.get('Cipher').get('prototype').put('setAutoPadding', PyJs_anonymous_544_)
        pass
        @Js
        def PyJs_anonymous_545_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data'])
            var.get(u"this").put('cache', var.get('Buffer').callprop('concat', Js([var.get(u"this").get('cache'), var.get('data')])))
        PyJs_anonymous_545_._set_name('anonymous')
        var.get('Splitter').get('prototype').put('add', PyJs_anonymous_545_)
        @Js
        def PyJs_anonymous_546_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['out'])
            if (var.get(u"this").get('cache').get('length')>Js(15.0)):
                var.put('out', var.get(u"this").get('cache').callprop('slice', Js(0.0), Js(16.0)))
                var.get(u"this").put('cache', var.get(u"this").get('cache').callprop('slice', Js(16.0)))
                return var.get('out')
            return var.get(u"null")
        PyJs_anonymous_546_._set_name('anonymous')
        var.get('Splitter').get('prototype').put('get', PyJs_anonymous_546_)
        @Js
        def PyJs_anonymous_547_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'i', 'padBuff'])
            var.put('len', (Js(16.0)-var.get(u"this").get('cache').get('length')))
            var.put('padBuff', var.get('Buffer').callprop('allocUnsafe', var.get('len')))
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('len')):
                var.get('padBuff').callprop('writeUInt8', var.get('len'), var.get('i'))
            return var.get('Buffer').callprop('concat', Js([var.get(u"this").get('cache'), var.get('padBuff')]))
        PyJs_anonymous_547_._set_name('anonymous')
        var.get('Splitter').get('prototype').put('flush', PyJs_anonymous_547_)
        pass
        pass
        var.get('exports').put('createCipheriv', var.get('createCipheriv'))
        var.get('exports').put('createCipher', var.get('createCipher'))
    PyJs_anonymous_541_._set_name('anonymous')
    @Js
    def PyJs_anonymous_548_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'ZEROES', 'require', 'Buffer', 'module', 'toArray', 'fromArray', 'GHASH'])
        @Js
        def PyJsHoisted_toArray_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf'])
            return Js([var.get('buf').callprop('readUInt32BE', Js(0.0)), var.get('buf').callprop('readUInt32BE', Js(4.0)), var.get('buf').callprop('readUInt32BE', Js(8.0)), var.get('buf').callprop('readUInt32BE', Js(12.0))])
        PyJsHoisted_toArray_.func_name = 'toArray'
        var.put('toArray', PyJsHoisted_toArray_)
        @Js
        def PyJsHoisted_fromArray_(out, this, arguments, var=var):
            var = Scope({'out':out, 'this':this, 'arguments':arguments}, var)
            var.registers(['out', 'buf'])
            var.put('buf', var.get('Buffer').callprop('allocUnsafe', Js(16.0)))
            var.get('buf').callprop('writeUInt32BE', PyJsBshift(var.get('out').get('0'),Js(0.0)), Js(0.0))
            var.get('buf').callprop('writeUInt32BE', PyJsBshift(var.get('out').get('1'),Js(0.0)), Js(4.0))
            var.get('buf').callprop('writeUInt32BE', PyJsBshift(var.get('out').get('2'),Js(0.0)), Js(8.0))
            var.get('buf').callprop('writeUInt32BE', PyJsBshift(var.get('out').get('3'),Js(0.0)), Js(12.0))
            return var.get('buf')
        PyJsHoisted_fromArray_.func_name = 'fromArray'
        var.put('fromArray', PyJsHoisted_fromArray_)
        @Js
        def PyJsHoisted_GHASH_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.get(u"this").put('h', var.get('key'))
            var.get(u"this").put('state', var.get('Buffer').callprop('alloc', Js(16.0), Js(0.0)))
            var.get(u"this").put('cache', var.get('Buffer').callprop('allocUnsafe', Js(0.0)))
        PyJsHoisted_GHASH_.func_name = 'GHASH'
        var.put('GHASH', PyJsHoisted_GHASH_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('ZEROES', var.get('Buffer').callprop('alloc', Js(16.0), Js(0.0)))
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_549_(block, this, arguments, var=var):
            var = Scope({'block':block, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'block'])
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('block').get('length')):
                var.get(u"this").get('state').put(var.get('i'), var.get('block').get(var.get('i')), '^')
            var.get(u"this").callprop('_multiply')
        PyJs_anonymous_549_._set_name('anonymous')
        var.get('GHASH').get('prototype').put('ghash', PyJs_anonymous_549_)
        @Js
        def PyJs_anonymous_550_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['xi', 'j', 'i', 'Zi', 'Vi', 'lsbVi'])
            var.put('Vi', var.get('toArray')(var.get(u"this").get('h')))
            var.put('Zi', Js([Js(0.0), Js(0.0), Js(0.0), Js(0.0)]))
            pass
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<Js(128.0)):
                var.put('xi', PyJsStrictNeq((var.get(u"this").get('state').get((~(~(var.get('i')/Js(8.0)))))&(Js(1.0)<<(Js(7.0)-(var.get('i')%Js(8.0))))),Js(0.0)))
                if var.get('xi'):
                    var.get('Zi').put('0', var.get('Vi').get('0'), '^')
                    var.get('Zi').put('1', var.get('Vi').get('1'), '^')
                    var.get('Zi').put('2', var.get('Vi').get('2'), '^')
                    var.get('Zi').put('3', var.get('Vi').get('3'), '^')
                var.put('lsbVi', PyJsStrictNeq((var.get('Vi').get('3')&Js(1.0)),Js(0.0)))
                #for JS loop
                var.put('j', Js(3.0))
                while (var.get('j')>Js(0.0)):
                    try:
                        var.get('Vi').put(var.get('j'), (PyJsBshift(var.get('Vi').get(var.get('j')),Js(1.0))|((var.get('Vi').get((var.get('j')-Js(1.0)))&Js(1.0))<<Js(31.0))))
                    finally:
                            (var.put('j',Js(var.get('j').to_number())-Js(1))+Js(1))
                var.get('Vi').put('0', PyJsBshift(var.get('Vi').get('0'),Js(1.0)))
                if var.get('lsbVi'):
                    var.get('Vi').put('0', (var.get('Vi').get('0')^(Js(225)<<Js(24.0))))
            var.get(u"this").put('state', var.get('fromArray')(var.get('Zi')))
        PyJs_anonymous_550_._set_name('anonymous')
        var.get('GHASH').get('prototype').put('_multiply', PyJs_anonymous_550_)
        @Js
        def PyJs_anonymous_551_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['chunk', 'buf'])
            var.get(u"this").put('cache', var.get('Buffer').callprop('concat', Js([var.get(u"this").get('cache'), var.get('buf')])))
            pass
            while (var.get(u"this").get('cache').get('length')>=Js(16.0)):
                var.put('chunk', var.get(u"this").get('cache').callprop('slice', Js(0.0), Js(16.0)))
                var.get(u"this").put('cache', var.get(u"this").get('cache').callprop('slice', Js(16.0)))
                var.get(u"this").callprop('ghash', var.get('chunk'))
        PyJs_anonymous_551_._set_name('anonymous')
        var.get('GHASH').get('prototype').put('update', PyJs_anonymous_551_)
        @Js
        def PyJs_anonymous_552_(abl, bl, this, arguments, var=var):
            var = Scope({'abl':abl, 'bl':bl, 'this':this, 'arguments':arguments}, var)
            var.registers(['bl', 'abl'])
            if var.get(u"this").get('cache').get('length'):
                var.get(u"this").callprop('ghash', var.get('Buffer').callprop('concat', Js([var.get(u"this").get('cache'), var.get('ZEROES')]), Js(16.0)))
            var.get(u"this").callprop('ghash', var.get('fromArray')(Js([Js(0.0), var.get('abl'), Js(0.0), var.get('bl')])))
            return var.get(u"this").get('state')
        PyJs_anonymous_552_._set_name('anonymous')
        var.get('GHASH').get('prototype').put('final', PyJs_anonymous_552_)
        var.get('module').put('exports', var.get('GHASH'))
    PyJs_anonymous_548_._set_name('anonymous')
    @Js
    def PyJs_anonymous_553_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['incr32', 'require', 'exports', 'module'])
        @Js
        def PyJsHoisted_incr32_(iv, this, arguments, var=var):
            var = Scope({'iv':iv, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'item', 'iv'])
            var.put('len', var.get('iv').get('length'))
            pass
            while (var.put('len',Js(var.get('len').to_number())-Js(1))+Js(1)):
                var.put('item', var.get('iv').callprop('readUInt8', var.get('len')))
                if _seq(var.get('item'),Js(255.0)):
                    var.get('iv').callprop('writeUInt8', Js(0.0), var.get('len'))
                else:
                    (var.put('item',Js(var.get('item').to_number())+Js(1))-Js(1))
                    var.get('iv').callprop('writeUInt8', var.get('item'), var.get('len'))
                    break
        PyJsHoisted_incr32_.func_name = 'incr32'
        var.put('incr32', PyJsHoisted_incr32_)
        pass
        var.get('module').put('exports', var.get('incr32'))
    PyJs_anonymous_553_._set_name('anonymous')
    @Js
    def PyJs_anonymous_554_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'xor'])
        var.put('xor', var.get('require')(Js('buffer-xor')))
        @Js
        def PyJs_anonymous_555_(self, block, this, arguments, var=var):
            var = Scope({'self':self, 'block':block, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'data', 'block'])
            var.put('data', var.get('xor')(var.get('block'), var.get('self').get('_prev')))
            var.get('self').put('_prev', var.get('self').get('_cipher').callprop('encryptBlock', var.get('data')))
            return var.get('self').get('_prev')
        PyJs_anonymous_555_._set_name('anonymous')
        var.get('exports').put('encrypt', PyJs_anonymous_555_)
        @Js
        def PyJs_anonymous_556_(self, block, this, arguments, var=var):
            var = Scope({'self':self, 'block':block, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'out', 'block', 'pad'])
            var.put('pad', var.get('self').get('_prev'))
            var.get('self').put('_prev', var.get('block'))
            var.put('out', var.get('self').get('_cipher').callprop('decryptBlock', var.get('block')))
            return var.get('xor')(var.get('out'), var.get('pad'))
        PyJs_anonymous_556_._set_name('anonymous')
        var.get('exports').put('decrypt', PyJs_anonymous_556_)
    PyJs_anonymous_554_._set_name('anonymous')
    @Js
    def PyJs_anonymous_557_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'encryptStart', 'xor'])
        @Js
        def PyJsHoisted_encryptStart_(self, data, decrypt, this, arguments, var=var):
            var = Scope({'self':self, 'data':data, 'decrypt':decrypt, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'len', 'out', 'data', 'decrypt'])
            var.put('len', var.get('data').get('length'))
            var.put('out', var.get('xor')(var.get('data'), var.get('self').get('_cache')))
            var.get('self').put('_cache', var.get('self').get('_cache').callprop('slice', var.get('len')))
            var.get('self').put('_prev', var.get('Buffer').callprop('concat', Js([var.get('self').get('_prev'), (var.get('data') if var.get('decrypt') else var.get('out'))])))
            return var.get('out')
        PyJsHoisted_encryptStart_.func_name = 'encryptStart'
        var.put('encryptStart', PyJsHoisted_encryptStart_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('xor', var.get('require')(Js('buffer-xor')))
        pass
        @Js
        def PyJs_anonymous_558_(self, data, decrypt, this, arguments, var=var):
            var = Scope({'self':self, 'data':data, 'decrypt':decrypt, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'len', 'out', 'data', 'decrypt'])
            var.put('out', var.get('Buffer').callprop('allocUnsafe', Js(0.0)))
            pass
            while var.get('data').get('length'):
                if _seq(var.get('self').get('_cache').get('length'),Js(0.0)):
                    var.get('self').put('_cache', var.get('self').get('_cipher').callprop('encryptBlock', var.get('self').get('_prev')))
                    var.get('self').put('_prev', var.get('Buffer').callprop('allocUnsafe', Js(0.0)))
                if (var.get('self').get('_cache').get('length')<=var.get('data').get('length')):
                    var.put('len', var.get('self').get('_cache').get('length'))
                    var.put('out', var.get('Buffer').callprop('concat', Js([var.get('out'), var.get('encryptStart')(var.get('self'), var.get('data').callprop('slice', Js(0.0), var.get('len')), var.get('decrypt'))])))
                    var.put('data', var.get('data').callprop('slice', var.get('len')))
                else:
                    var.put('out', var.get('Buffer').callprop('concat', Js([var.get('out'), var.get('encryptStart')(var.get('self'), var.get('data'), var.get('decrypt'))])))
                    break
            return var.get('out')
        PyJs_anonymous_558_._set_name('anonymous')
        var.get('exports').put('encrypt', PyJs_anonymous_558_)
    PyJs_anonymous_557_._set_name('anonymous')
    @Js
    def PyJs_anonymous_559_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'shiftIn', 'encryptByte'])
        @Js
        def PyJsHoisted_encryptByte_(self, byteParam, decrypt, this, arguments, var=var):
            var = Scope({'self':self, 'byteParam':byteParam, 'decrypt':decrypt, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'bit', 'i', 'len', 'out', 'byteParam', 'value', 'decrypt', 'pad'])
            pass
            var.put('i', (-Js(1.0)))
            var.put('len', Js(8.0))
            var.put('out', Js(0.0))
            pass
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('len')):
                var.put('pad', var.get('self').get('_cipher').callprop('encryptBlock', var.get('self').get('_prev')))
                var.put('bit', (Js(128) if (var.get('byteParam')&(Js(1.0)<<(Js(7.0)-var.get('i')))) else Js(0.0)))
                var.put('value', (var.get('pad').get('0')^var.get('bit')))
                var.put('out', ((var.get('value')&Js(128))>>(var.get('i')%Js(8.0))), '+')
                var.get('self').put('_prev', var.get('shiftIn')(var.get('self').get('_prev'), (var.get('bit') if var.get('decrypt') else var.get('value'))))
            return var.get('out')
        PyJsHoisted_encryptByte_.func_name = 'encryptByte'
        var.put('encryptByte', PyJsHoisted_encryptByte_)
        @Js
        def PyJsHoisted_shiftIn_(buffer, value, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer', 'len', 'i', 'out', 'value'])
            var.put('len', var.get('buffer').get('length'))
            var.put('i', (-Js(1.0)))
            var.put('out', var.get('Buffer').callprop('allocUnsafe', var.get('buffer').get('length')))
            var.put('buffer', var.get('Buffer').callprop('concat', Js([var.get('buffer'), var.get('Buffer').callprop('from', Js([var.get('value')]))])))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('len')):
                var.get('out').put(var.get('i'), ((var.get('buffer').get(var.get('i'))<<Js(1.0))|(var.get('buffer').get((var.get('i')+Js(1.0)))>>Js(7.0))))
            return var.get('out')
        PyJsHoisted_shiftIn_.func_name = 'shiftIn'
        var.put('shiftIn', PyJsHoisted_shiftIn_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        pass
        pass
        @Js
        def PyJs_anonymous_560_(self, chunk, decrypt, this, arguments, var=var):
            var = Scope({'self':self, 'chunk':chunk, 'decrypt':decrypt, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'len', 'i', 'out', 'chunk', 'decrypt'])
            var.put('len', var.get('chunk').get('length'))
            var.put('out', var.get('Buffer').callprop('allocUnsafe', var.get('len')))
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('len')):
                var.get('out').put(var.get('i'), var.get('encryptByte')(var.get('self'), var.get('chunk').get(var.get('i')), var.get('decrypt')))
            return var.get('out')
        PyJs_anonymous_560_._set_name('anonymous')
        var.get('exports').put('encrypt', PyJs_anonymous_560_)
    PyJs_anonymous_559_._set_name('anonymous')
    @Js
    def PyJs_anonymous_561_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'encryptByte'])
        @Js
        def PyJsHoisted_encryptByte_(self, byteParam, decrypt, this, arguments, var=var):
            var = Scope({'self':self, 'byteParam':byteParam, 'decrypt':decrypt, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'out', 'byteParam', 'decrypt', 'pad'])
            var.put('pad', var.get('self').get('_cipher').callprop('encryptBlock', var.get('self').get('_prev')))
            var.put('out', (var.get('pad').get('0')^var.get('byteParam')))
            var.get('self').put('_prev', var.get('Buffer').callprop('concat', Js([var.get('self').get('_prev').callprop('slice', Js(1.0)), var.get('Buffer').callprop('from', Js([(var.get('byteParam') if var.get('decrypt') else var.get('out'))]))])))
            return var.get('out')
        PyJsHoisted_encryptByte_.func_name = 'encryptByte'
        var.put('encryptByte', PyJsHoisted_encryptByte_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        pass
        @Js
        def PyJs_anonymous_562_(self, chunk, decrypt, this, arguments, var=var):
            var = Scope({'self':self, 'chunk':chunk, 'decrypt':decrypt, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'len', 'i', 'out', 'chunk', 'decrypt'])
            var.put('len', var.get('chunk').get('length'))
            var.put('out', var.get('Buffer').callprop('allocUnsafe', var.get('len')))
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('len')):
                var.get('out').put(var.get('i'), var.get('encryptByte')(var.get('self'), var.get('chunk').get(var.get('i')), var.get('decrypt')))
            return var.get('out')
        PyJs_anonymous_562_._set_name('anonymous')
        var.get('exports').put('encrypt', PyJs_anonymous_562_)
    PyJs_anonymous_561_._set_name('anonymous')
    @Js
    def PyJs_anonymous_563_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['incr32', 'exports', 'require', 'Buffer', 'module', 'blockSize', 'getBlock', 'xor'])
        @Js
        def PyJsHoisted_getBlock_(self, this, arguments, var=var):
            var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'out'])
            var.put('out', var.get('self').get('_cipher').callprop('encryptBlockRaw', var.get('self').get('_prev')))
            var.get('incr32')(var.get('self').get('_prev'))
            return var.get('out')
        PyJsHoisted_getBlock_.func_name = 'getBlock'
        var.put('getBlock', PyJsHoisted_getBlock_)
        var.put('xor', var.get('require')(Js('buffer-xor')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('incr32', var.get('require')(Js('../incr32')))
        pass
        var.put('blockSize', Js(16.0))
        @Js
        def PyJs_anonymous_564_(self, chunk, this, arguments, var=var):
            var = Scope({'self':self, 'chunk':chunk, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'i', 'out', 'start', 'chunkNum', 'chunk', 'pad', 'offset'])
            var.put('chunkNum', var.get('Math').callprop('ceil', (var.get('chunk').get('length')/var.get('blockSize'))))
            var.put('start', var.get('self').get('_cache').get('length'))
            var.get('self').put('_cache', var.get('Buffer').callprop('concat', Js([var.get('self').get('_cache'), var.get('Buffer').callprop('allocUnsafe', (var.get('chunkNum')*var.get('blockSize')))])))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('chunkNum')):
                try:
                    var.put('out', var.get('getBlock')(var.get('self')))
                    var.put('offset', (var.get('start')+(var.get('i')*var.get('blockSize'))))
                    var.get('self').get('_cache').callprop('writeUInt32BE', var.get('out').get('0'), (var.get('offset')+Js(0.0)))
                    var.get('self').get('_cache').callprop('writeUInt32BE', var.get('out').get('1'), (var.get('offset')+Js(4.0)))
                    var.get('self').get('_cache').callprop('writeUInt32BE', var.get('out').get('2'), (var.get('offset')+Js(8.0)))
                    var.get('self').get('_cache').callprop('writeUInt32BE', var.get('out').get('3'), (var.get('offset')+Js(12.0)))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('pad', var.get('self').get('_cache').callprop('slice', Js(0.0), var.get('chunk').get('length')))
            var.get('self').put('_cache', var.get('self').get('_cache').callprop('slice', var.get('chunk').get('length')))
            return var.get('xor')(var.get('chunk'), var.get('pad'))
        PyJs_anonymous_564_._set_name('anonymous')
        var.get('exports').put('encrypt', PyJs_anonymous_564_)
    PyJs_anonymous_563_._set_name('anonymous')
    @Js
    def PyJs_anonymous_565_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_566_(self, block, this, arguments, var=var):
            var = Scope({'self':self, 'block':block, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'block'])
            return var.get('self').get('_cipher').callprop('encryptBlock', var.get('block'))
        PyJs_anonymous_566_._set_name('anonymous')
        var.get('exports').put('encrypt', PyJs_anonymous_566_)
        @Js
        def PyJs_anonymous_567_(self, block, this, arguments, var=var):
            var = Scope({'self':self, 'block':block, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'block'])
            return var.get('self').get('_cipher').callprop('decryptBlock', var.get('block'))
        PyJs_anonymous_567_._set_name('anonymous')
        var.get('exports').put('decrypt', PyJs_anonymous_567_)
    PyJs_anonymous_565_._set_name('anonymous')
    @Js
    def PyJs_anonymous_568_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'modes', 'key', 'modeModules'])
        var.put('modeModules', Js({'ECB':var.get('require')(Js('./ecb')),'CBC':var.get('require')(Js('./cbc')),'CFB':var.get('require')(Js('./cfb')),'CFB8':var.get('require')(Js('./cfb8')),'CFB1':var.get('require')(Js('./cfb1')),'OFB':var.get('require')(Js('./ofb')),'CTR':var.get('require')(Js('./ctr')),'GCM':var.get('require')(Js('./ctr'))}))
        var.put('modes', var.get('require')(Js('./list.json')))
        for PyJsTemp in var.get('modes'):
            var.put('key', PyJsTemp)
            var.get('modes').get(var.get('key')).put('module', var.get('modeModules').get(var.get('modes').get(var.get('key')).get('mode')))
        var.get('module').put('exports', var.get('modes'))
    PyJs_anonymous_568_._set_name('anonymous')
    @Js
    def PyJs_anonymous_569_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        def PyJs_LONG_570_(var=var):
            return var.get('module').put('exports', Js({'aes-128-ecb':Js({'cipher':Js('AES'),'key':Js(128.0),'iv':Js(0.0),'mode':Js('ECB'),'type':Js('block')}),'aes-192-ecb':Js({'cipher':Js('AES'),'key':Js(192.0),'iv':Js(0.0),'mode':Js('ECB'),'type':Js('block')}),'aes-256-ecb':Js({'cipher':Js('AES'),'key':Js(256.0),'iv':Js(0.0),'mode':Js('ECB'),'type':Js('block')}),'aes-128-cbc':Js({'cipher':Js('AES'),'key':Js(128.0),'iv':Js(16.0),'mode':Js('CBC'),'type':Js('block')}),'aes-192-cbc':Js({'cipher':Js('AES'),'key':Js(192.0),'iv':Js(16.0),'mode':Js('CBC'),'type':Js('block')}),'aes-256-cbc':Js({'cipher':Js('AES'),'key':Js(256.0),'iv':Js(16.0),'mode':Js('CBC'),'type':Js('block')}),'aes128':Js({'cipher':Js('AES'),'key':Js(128.0),'iv':Js(16.0),'mode':Js('CBC'),'type':Js('block')}),'aes192':Js({'cipher':Js('AES'),'key':Js(192.0),'iv':Js(16.0),'mode':Js('CBC'),'type':Js('block')}),'aes256':Js({'cipher':Js('AES'),'key':Js(256.0),'iv':Js(16.0),'mode':Js('CBC'),'type':Js('block')}),'aes-128-cfb':Js({'cipher':Js('AES'),'key':Js(128.0),'iv':Js(16.0),'mode':Js('CFB'),'type':Js('stream')}),'aes-192-cfb':Js({'cipher':Js('AES'),'key':Js(192.0),'iv':Js(16.0),'mode':Js('CFB'),'type':Js('stream')}),'aes-256-cfb':Js({'cipher':Js('AES'),'key':Js(256.0),'iv':Js(16.0),'mode':Js('CFB'),'type':Js('stream')}),'aes-128-cfb8':Js({'cipher':Js('AES'),'key':Js(128.0),'iv':Js(16.0),'mode':Js('CFB8'),'type':Js('stream')}),'aes-192-cfb8':Js({'cipher':Js('AES'),'key':Js(192.0),'iv':Js(16.0),'mode':Js('CFB8'),'type':Js('stream')}),'aes-256-cfb8':Js({'cipher':Js('AES'),'key':Js(256.0),'iv':Js(16.0),'mode':Js('CFB8'),'type':Js('stream')}),'aes-128-cfb1':Js({'cipher':Js('AES'),'key':Js(128.0),'iv':Js(16.0),'mode':Js('CFB1'),'type':Js('stream')}),'aes-192-cfb1':Js({'cipher':Js('AES'),'key':Js(192.0),'iv':Js(16.0),'mode':Js('CFB1'),'type':Js('stream')}),'aes-256-cfb1':Js({'cipher':Js('AES'),'key':Js(256.0),'iv':Js(16.0),'mode':Js('CFB1'),'type':Js('stream')}),'aes-128-ofb':Js({'cipher':Js('AES'),'key':Js(128.0),'iv':Js(16.0),'mode':Js('OFB'),'type':Js('stream')}),'aes-192-ofb':Js({'cipher':Js('AES'),'key':Js(192.0),'iv':Js(16.0),'mode':Js('OFB'),'type':Js('stream')}),'aes-256-ofb':Js({'cipher':Js('AES'),'key':Js(256.0),'iv':Js(16.0),'mode':Js('OFB'),'type':Js('stream')}),'aes-128-ctr':Js({'cipher':Js('AES'),'key':Js(128.0),'iv':Js(16.0),'mode':Js('CTR'),'type':Js('stream')}),'aes-192-ctr':Js({'cipher':Js('AES'),'key':Js(192.0),'iv':Js(16.0),'mode':Js('CTR'),'type':Js('stream')}),'aes-256-ctr':Js({'cipher':Js('AES'),'key':Js(256.0),'iv':Js(16.0),'mode':Js('CTR'),'type':Js('stream')}),'aes-128-gcm':Js({'cipher':Js('AES'),'key':Js(128.0),'iv':Js(12.0),'mode':Js('GCM'),'type':Js('auth')}),'aes-192-gcm':Js({'cipher':Js('AES'),'key':Js(192.0),'iv':Js(12.0),'mode':Js('GCM'),'type':Js('auth')}),'aes-256-gcm':Js({'cipher':Js('AES'),'key':Js(256.0),'iv':Js(12.0),'mode':Js('GCM'),'type':Js('auth')})}))
        PyJs_LONG_570_()
    PyJs_anonymous_569_._set_name('anonymous')
    @Js
    def PyJs_anonymous_571_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_572_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_573_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['getBlock', 'xor'])
                @Js
                def PyJsHoisted_getBlock_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self'])
                    var.get('self').put('_prev', var.get('self').get('_cipher').callprop('encryptBlock', var.get('self').get('_prev')))
                    return var.get('self').get('_prev')
                PyJsHoisted_getBlock_.func_name = 'getBlock'
                var.put('getBlock', PyJsHoisted_getBlock_)
                var.put('xor', var.get('require')(Js('buffer-xor')))
                pass
                @Js
                def PyJs_anonymous_574_(self, chunk, this, arguments, var=var):
                    var = Scope({'self':self, 'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk', 'self', 'pad'])
                    while (var.get('self').get('_cache').get('length')<var.get('chunk').get('length')):
                        var.get('self').put('_cache', var.get('Buffer').callprop('concat', Js([var.get('self').get('_cache'), var.get('getBlock')(var.get('self'))])))
                    var.put('pad', var.get('self').get('_cache').callprop('slice', Js(0.0), var.get('chunk').get('length')))
                    var.get('self').put('_cache', var.get('self').get('_cache').callprop('slice', var.get('chunk').get('length')))
                    return var.get('xor')(var.get('chunk'), var.get('pad'))
                PyJs_anonymous_574_._set_name('anonymous')
                var.get('exports').put('encrypt', PyJs_anonymous_574_)
            PyJs_anonymous_573_._set_name('anonymous')
            PyJs_anonymous_573_.callprop('call', var.get(u"this"))
        PyJs_anonymous_572_._set_name('anonymous')
        PyJs_anonymous_572_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_571_._set_name('anonymous')
    @Js
    def PyJs_anonymous_575_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'aes', 'Buffer', 'require', 'module', 'Transform', 'inherits', 'StreamCipher'])
        @Js
        def PyJsHoisted_StreamCipher_(mode, key, iv, decrypt, this, arguments, var=var):
            var = Scope({'mode':mode, 'key':key, 'iv':iv, 'decrypt':decrypt, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'decrypt', 'iv', 'mode'])
            var.get('Transform').callprop('call', var.get(u"this"))
            var.get(u"this").put('_cipher', var.get('aes').get('AES').create(var.get('key')))
            var.get(u"this").put('_prev', var.get('Buffer').callprop('from', var.get('iv')))
            var.get(u"this").put('_cache', var.get('Buffer').callprop('allocUnsafe', Js(0.0)))
            var.get(u"this").put('_secCache', var.get('Buffer').callprop('allocUnsafe', Js(0.0)))
            var.get(u"this").put('_decrypt', var.get('decrypt'))
            var.get(u"this").put('_mode', var.get('mode'))
        PyJsHoisted_StreamCipher_.func_name = 'StreamCipher'
        var.put('StreamCipher', PyJsHoisted_StreamCipher_)
        var.put('aes', var.get('require')(Js('./aes')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('Transform', var.get('require')(Js('cipher-base')))
        var.put('inherits', var.get('require')(Js('inherits')))
        pass
        var.get('inherits')(var.get('StreamCipher'), var.get('Transform'))
        @Js
        def PyJs_anonymous_576_(chunk, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
            var.registers(['chunk'])
            return var.get(u"this").get('_mode').callprop('encrypt', var.get(u"this"), var.get('chunk'), var.get(u"this").get('_decrypt'))
        PyJs_anonymous_576_._set_name('anonymous')
        var.get('StreamCipher').get('prototype').put('_update', PyJs_anonymous_576_)
        @Js
        def PyJs_anonymous_577_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").get('_cipher').callprop('scrub')
        PyJs_anonymous_577_._set_name('anonymous')
        var.get('StreamCipher').get('prototype').put('_final', PyJs_anonymous_577_)
        var.get('module').put('exports', var.get('StreamCipher'))
    PyJs_anonymous_575_._set_name('anonymous')
    @Js
    def PyJs_anonymous_578_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'aes', 'require', 'module', 'createDecipheriv', 'createCipheriv', 'getCiphers', 'aesModes', 'ebtk', 'DES', 'desModes', 'createCipher', 'createDecipher'])
        @Js
        def PyJsHoisted_createCipher_(suite, password, this, arguments, var=var):
            var = Scope({'suite':suite, 'password':password, 'this':this, 'arguments':arguments}, var)
            var.registers(['password', 'ivLen', 'suite', 'keyLen', 'keys'])
            var.put('suite', var.get('suite').callprop('toLowerCase'))
            pass
            if var.get('aesModes').get(var.get('suite')):
                var.put('keyLen', var.get('aesModes').get(var.get('suite')).get('key'))
                var.put('ivLen', var.get('aesModes').get(var.get('suite')).get('iv'))
            else:
                if var.get('desModes').get(var.get('suite')):
                    var.put('keyLen', (var.get('desModes').get(var.get('suite')).get('key')*Js(8.0)))
                    var.put('ivLen', var.get('desModes').get(var.get('suite')).get('iv'))
                else:
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('invalid suite type')))
                    raise PyJsTempException
            var.put('keys', var.get('ebtk')(var.get('password'), Js(False), var.get('keyLen'), var.get('ivLen')))
            return var.get('createCipheriv')(var.get('suite'), var.get('keys').get('key'), var.get('keys').get('iv'))
        PyJsHoisted_createCipher_.func_name = 'createCipher'
        var.put('createCipher', PyJsHoisted_createCipher_)
        @Js
        def PyJsHoisted_createDecipher_(suite, password, this, arguments, var=var):
            var = Scope({'suite':suite, 'password':password, 'this':this, 'arguments':arguments}, var)
            var.registers(['password', 'ivLen', 'suite', 'keyLen', 'keys'])
            var.put('suite', var.get('suite').callprop('toLowerCase'))
            pass
            if var.get('aesModes').get(var.get('suite')):
                var.put('keyLen', var.get('aesModes').get(var.get('suite')).get('key'))
                var.put('ivLen', var.get('aesModes').get(var.get('suite')).get('iv'))
            else:
                if var.get('desModes').get(var.get('suite')):
                    var.put('keyLen', (var.get('desModes').get(var.get('suite')).get('key')*Js(8.0)))
                    var.put('ivLen', var.get('desModes').get(var.get('suite')).get('iv'))
                else:
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('invalid suite type')))
                    raise PyJsTempException
            var.put('keys', var.get('ebtk')(var.get('password'), Js(False), var.get('keyLen'), var.get('ivLen')))
            return var.get('createDecipheriv')(var.get('suite'), var.get('keys').get('key'), var.get('keys').get('iv'))
        PyJsHoisted_createDecipher_.func_name = 'createDecipher'
        var.put('createDecipher', PyJsHoisted_createDecipher_)
        @Js
        def PyJsHoisted_createCipheriv_(suite, key, iv, this, arguments, var=var):
            var = Scope({'suite':suite, 'key':key, 'iv':iv, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'suite', 'iv'])
            var.put('suite', var.get('suite').callprop('toLowerCase'))
            if var.get('aesModes').get(var.get('suite')):
                return var.get('aes').callprop('createCipheriv', var.get('suite'), var.get('key'), var.get('iv'))
            if var.get('desModes').get(var.get('suite')):
                return var.get('DES').create(Js({'key':var.get('key'),'iv':var.get('iv'),'mode':var.get('suite')}))
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('invalid suite type')))
            raise PyJsTempException
        PyJsHoisted_createCipheriv_.func_name = 'createCipheriv'
        var.put('createCipheriv', PyJsHoisted_createCipheriv_)
        @Js
        def PyJsHoisted_createDecipheriv_(suite, key, iv, this, arguments, var=var):
            var = Scope({'suite':suite, 'key':key, 'iv':iv, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'suite', 'iv'])
            var.put('suite', var.get('suite').callprop('toLowerCase'))
            if var.get('aesModes').get(var.get('suite')):
                return var.get('aes').callprop('createDecipheriv', var.get('suite'), var.get('key'), var.get('iv'))
            if var.get('desModes').get(var.get('suite')):
                return var.get('DES').create(Js({'key':var.get('key'),'iv':var.get('iv'),'mode':var.get('suite'),'decrypt':Js(True)}))
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('invalid suite type')))
            raise PyJsTempException
        PyJsHoisted_createDecipheriv_.func_name = 'createDecipheriv'
        var.put('createDecipheriv', PyJsHoisted_createDecipheriv_)
        @Js
        def PyJsHoisted_getCiphers_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('Object').callprop('keys', var.get('desModes')).callprop('concat', var.get('aes').callprop('getCiphers'))
        PyJsHoisted_getCiphers_.func_name = 'getCiphers'
        var.put('getCiphers', PyJsHoisted_getCiphers_)
        var.put('DES', var.get('require')(Js('browserify-des')))
        var.put('aes', var.get('require')(Js('browserify-aes/browser')))
        var.put('aesModes', var.get('require')(Js('browserify-aes/modes')))
        var.put('desModes', var.get('require')(Js('browserify-des/modes')))
        var.put('ebtk', var.get('require')(Js('evp_bytestokey')))
        pass
        pass
        pass
        pass
        pass
        var.get('exports').put('createCipher', var.get('exports').put('Cipher', var.get('createCipher')))
        var.get('exports').put('createCipheriv', var.get('exports').put('Cipheriv', var.get('createCipheriv')))
        var.get('exports').put('createDecipher', var.get('exports').put('Decipher', var.get('createDecipher')))
        var.get('exports').put('createDecipheriv', var.get('exports').put('Decipheriv', var.get('createDecipheriv')))
        var.get('exports').put('listCiphers', var.get('exports').put('getCiphers', var.get('getCiphers')))
    PyJs_anonymous_578_._set_name('anonymous')
    @Js
    def PyJs_anonymous_579_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'des', 'Buffer', 'require', 'module', 'modes', 'DES', 'inherits', 'CipherBase'])
        @Js
        def PyJsHoisted_DES_(opts, this, arguments, var=var):
            var = Scope({'opts':opts, 'this':this, 'arguments':arguments}, var)
            var.registers(['iv', 'modeName', 'opts', 'mode', 'key', 'type'])
            var.get('CipherBase').callprop('call', var.get(u"this"))
            var.put('modeName', var.get('opts').get('mode').callprop('toLowerCase'))
            var.put('mode', var.get('modes').get(var.get('modeName')))
            pass
            if var.get('opts').get('decrypt'):
                var.put('type', Js('decrypt'))
            else:
                var.put('type', Js('encrypt'))
            var.put('key', var.get('opts').get('key'))
            if var.get('Buffer').callprop('isBuffer', var.get('key')).neg():
                var.put('key', var.get('Buffer').callprop('from', var.get('key')))
            if (_seq(var.get('modeName'),Js('des-ede')) or _seq(var.get('modeName'),Js('des-ede-cbc'))):
                var.put('key', var.get('Buffer').callprop('concat', Js([var.get('key'), var.get('key').callprop('slice', Js(0.0), Js(8.0))])))
            var.put('iv', var.get('opts').get('iv'))
            if var.get('Buffer').callprop('isBuffer', var.get('iv')).neg():
                var.put('iv', var.get('Buffer').callprop('from', var.get('iv')))
            var.get(u"this").put('_des', var.get('mode').callprop('create', Js({'key':var.get('key'),'iv':var.get('iv'),'type':var.get('type')})))
        PyJsHoisted_DES_.func_name = 'DES'
        var.put('DES', PyJsHoisted_DES_)
        var.put('CipherBase', var.get('require')(Js('cipher-base')))
        var.put('des', var.get('require')(Js('des.js')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('modes', Js({'des-ede3-cbc':var.get('des').get('CBC').callprop('instantiate', var.get('des').get('EDE')),'des-ede3':var.get('des').get('EDE'),'des-ede-cbc':var.get('des').get('CBC').callprop('instantiate', var.get('des').get('EDE')),'des-ede':var.get('des').get('EDE'),'des-cbc':var.get('des').get('CBC').callprop('instantiate', var.get('des').get('DES')),'des-ecb':var.get('des').get('DES')}))
        var.get('modes').put('des', var.get('modes').get('des-cbc'))
        var.get('modes').put('des3', var.get('modes').get('des-ede3-cbc'))
        var.get('module').put('exports', var.get('DES'))
        var.get('inherits')(var.get('DES'), var.get('CipherBase'))
        pass
        @Js
        def PyJs_anonymous_580_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data'])
            return var.get('Buffer').callprop('from', var.get(u"this").get('_des').callprop('update', var.get('data')))
        PyJs_anonymous_580_._set_name('anonymous')
        var.get('DES').get('prototype').put('_update', PyJs_anonymous_580_)
        @Js
        def PyJs_anonymous_581_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('Buffer').callprop('from', var.get(u"this").get('_des').callprop('final'))
        PyJs_anonymous_581_._set_name('anonymous')
        var.get('DES').get('prototype').put('_final', PyJs_anonymous_581_)
    PyJs_anonymous_579_._set_name('anonymous')
    @Js
    def PyJs_anonymous_582_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('exports').put('des-ecb', Js({'key':Js(8.0),'iv':Js(0.0)}))
        var.get('exports').put('des-cbc', var.get('exports').put('des', Js({'key':Js(8.0),'iv':Js(8.0)})))
        var.get('exports').put('des-ede3-cbc', var.get('exports').put('des3', Js({'key':Js(24.0),'iv':Js(8.0)})))
        var.get('exports').put('des-ede3', Js({'key':Js(24.0),'iv':Js(0.0)}))
        var.get('exports').put('des-ede-cbc', Js({'key':Js(16.0),'iv':Js(8.0)}))
        var.get('exports').put('des-ede', Js({'key':Js(16.0),'iv':Js(0.0)}))
    PyJs_anonymous_582_._set_name('anonymous')
    @Js
    def PyJs_anonymous_583_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_584_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_585_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['BN', 'randomBytes', 'getr', 'crt', 'blind'])
                @Js
                def PyJsHoisted_blind_(priv, this, arguments, var=var):
                    var = Scope({'priv':priv, 'this':this, 'arguments':arguments}, var)
                    var.registers(['blinder', 'priv', 'r'])
                    var.put('r', var.get('getr')(var.get('priv')))
                    var.put('blinder', var.get('r').callprop('toRed', var.get('BN').callprop('mont', var.get('priv').get('modulus'))).callprop('redPow', var.get('BN').create(var.get('priv').get('publicExponent'))).callprop('fromRed'))
                    return Js({'blinder':var.get('blinder'),'unblinder':var.get('r').callprop('invm', var.get('priv').get('modulus'))})
                PyJsHoisted_blind_.func_name = 'blind'
                var.put('blind', PyJsHoisted_blind_)
                @Js
                def PyJsHoisted_getr_(priv, this, arguments, var=var):
                    var = Scope({'priv':priv, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'priv', 'r'])
                    var.put('len', var.get('priv').get('modulus').callprop('byteLength'))
                    pass
                    while 1:
                        var.put('r', var.get('BN').create(var.get('randomBytes')(var.get('len'))))
                        if not (((var.get('r').callprop('cmp', var.get('priv').get('modulus'))>=Js(0.0)) or var.get('r').callprop('umod', var.get('priv').get('prime1')).neg()) or var.get('r').callprop('umod', var.get('priv').get('prime2')).neg()):
                            break
                    return var.get('r')
                PyJsHoisted_getr_.func_name = 'getr'
                var.put('getr', PyJsHoisted_getr_)
                @Js
                def PyJsHoisted_crt_(msg, priv, this, arguments, var=var):
                    var = Scope({'msg':msg, 'priv':priv, 'this':this, 'arguments':arguments}, var)
                    var.registers(['c2', 'priv', 'len', 'msg', 'm1', 'blinds', 'h', 'c1', 'p', 'blinded', 'm2', 'qinv', 'q'])
                    var.put('blinds', var.get('blind')(var.get('priv')))
                    var.put('len', var.get('priv').get('modulus').callprop('byteLength'))
                    var.put('blinded', var.get('BN').create(var.get('msg')).callprop('mul', var.get('blinds').get('blinder')).callprop('umod', var.get('priv').get('modulus')))
                    var.put('c1', var.get('blinded').callprop('toRed', var.get('BN').callprop('mont', var.get('priv').get('prime1'))))
                    var.put('c2', var.get('blinded').callprop('toRed', var.get('BN').callprop('mont', var.get('priv').get('prime2'))))
                    var.put('qinv', var.get('priv').get('coefficient'))
                    var.put('p', var.get('priv').get('prime1'))
                    var.put('q', var.get('priv').get('prime2'))
                    var.put('m1', var.get('c1').callprop('redPow', var.get('priv').get('exponent1')).callprop('fromRed'))
                    var.put('m2', var.get('c2').callprop('redPow', var.get('priv').get('exponent2')).callprop('fromRed'))
                    var.put('h', var.get('m1').callprop('isub', var.get('m2')).callprop('imul', var.get('qinv')).callprop('umod', var.get('p')).callprop('imul', var.get('q')))
                    return var.get('m2').callprop('iadd', var.get('h')).callprop('imul', var.get('blinds').get('unblinder')).callprop('umod', var.get('priv').get('modulus')).callprop('toArrayLike', var.get('Buffer'), Js('be'), var.get('len'))
                PyJsHoisted_crt_.func_name = 'crt'
                var.put('crt', PyJsHoisted_crt_)
                var.put('BN', var.get('require')(Js('bn.js')))
                var.put('randomBytes', var.get('require')(Js('randombytes')))
                pass
                pass
                pass
                var.get('crt').put('getr', var.get('getr'))
                var.get('module').put('exports', var.get('crt'))
            PyJs_anonymous_585_._set_name('anonymous')
            PyJs_anonymous_585_.callprop('call', var.get(u"this"))
        PyJs_anonymous_584_._set_name('anonymous')
        PyJs_anonymous_584_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_583_._set_name('anonymous')
    @Js
    def PyJs_anonymous_586_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('module').put('exports', var.get('require')(Js('./browser/algorithms.json')))
    PyJs_anonymous_586_._set_name('anonymous')
    @Js
    def PyJs_anonymous_587_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        def PyJs_LONG_588_(var=var):
            return var.get('module').put('exports', Js({'sha224WithRSAEncryption':Js({'sign':Js('rsa'),'hash':Js('sha224'),'id':Js('302d300d06096086480165030402040500041c')}),'RSA-SHA224':Js({'sign':Js('ecdsa/rsa'),'hash':Js('sha224'),'id':Js('302d300d06096086480165030402040500041c')}),'sha256WithRSAEncryption':Js({'sign':Js('rsa'),'hash':Js('sha256'),'id':Js('3031300d060960864801650304020105000420')}),'RSA-SHA256':Js({'sign':Js('ecdsa/rsa'),'hash':Js('sha256'),'id':Js('3031300d060960864801650304020105000420')}),'sha384WithRSAEncryption':Js({'sign':Js('rsa'),'hash':Js('sha384'),'id':Js('3041300d060960864801650304020205000430')}),'RSA-SHA384':Js({'sign':Js('ecdsa/rsa'),'hash':Js('sha384'),'id':Js('3041300d060960864801650304020205000430')}),'sha512WithRSAEncryption':Js({'sign':Js('rsa'),'hash':Js('sha512'),'id':Js('3051300d060960864801650304020305000440')}),'RSA-SHA512':Js({'sign':Js('ecdsa/rsa'),'hash':Js('sha512'),'id':Js('3051300d060960864801650304020305000440')}),'RSA-SHA1':Js({'sign':Js('rsa'),'hash':Js('sha1'),'id':Js('3021300906052b0e03021a05000414')}),'ecdsa-with-SHA1':Js({'sign':Js('ecdsa'),'hash':Js('sha1'),'id':Js('')}),'sha256':Js({'sign':Js('ecdsa'),'hash':Js('sha256'),'id':Js('')}),'sha224':Js({'sign':Js('ecdsa'),'hash':Js('sha224'),'id':Js('')}),'sha384':Js({'sign':Js('ecdsa'),'hash':Js('sha384'),'id':Js('')}),'sha512':Js({'sign':Js('ecdsa'),'hash':Js('sha512'),'id':Js('')}),'DSA-SHA':Js({'sign':Js('dsa'),'hash':Js('sha1'),'id':Js('')}),'DSA-SHA1':Js({'sign':Js('dsa'),'hash':Js('sha1'),'id':Js('')}),'DSA':Js({'sign':Js('dsa'),'hash':Js('sha1'),'id':Js('')}),'DSA-WITH-SHA224':Js({'sign':Js('dsa'),'hash':Js('sha224'),'id':Js('')}),'DSA-SHA224':Js({'sign':Js('dsa'),'hash':Js('sha224'),'id':Js('')}),'DSA-WITH-SHA256':Js({'sign':Js('dsa'),'hash':Js('sha256'),'id':Js('')}),'DSA-SHA256':Js({'sign':Js('dsa'),'hash':Js('sha256'),'id':Js('')}),'DSA-WITH-SHA384':Js({'sign':Js('dsa'),'hash':Js('sha384'),'id':Js('')}),'DSA-SHA384':Js({'sign':Js('dsa'),'hash':Js('sha384'),'id':Js('')}),'DSA-WITH-SHA512':Js({'sign':Js('dsa'),'hash':Js('sha512'),'id':Js('')}),'DSA-SHA512':Js({'sign':Js('dsa'),'hash':Js('sha512'),'id':Js('')}),'DSA-RIPEMD160':Js({'sign':Js('dsa'),'hash':Js('rmd160'),'id':Js('')}),'ripemd160WithRSA':Js({'sign':Js('rsa'),'hash':Js('rmd160'),'id':Js('3021300906052b2403020105000414')}),'RSA-RIPEMD160':Js({'sign':Js('rsa'),'hash':Js('rmd160'),'id':Js('3021300906052b2403020105000414')}),'md5WithRSAEncryption':Js({'sign':Js('rsa'),'hash':Js('md5'),'id':Js('3020300c06082a864886f70d020505000410')}),'RSA-MD5':Js({'sign':Js('rsa'),'hash':Js('md5'),'id':Js('3020300c06082a864886f70d020505000410')})}))
        PyJs_LONG_588_()
    PyJs_anonymous_587_._set_name('anonymous')
    @Js
    def PyJs_anonymous_589_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('module').put('exports', Js({'1.3.132.0.10':Js('secp256k1'),'1.3.132.0.33':Js('p224'),'1.2.840.10045.3.1.1':Js('p192'),'1.2.840.10045.3.1.7':Js('p256'),'1.3.132.0.34':Js('p384'),'1.3.132.0.35':Js('p521')}))
    PyJs_anonymous_589_._set_name('anonymous')
    @Js
    def PyJs_anonymous_590_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['createVerify', 'exports', 'require', 'Buffer', 'algorithms', 'module', 'Verify', 'Sign', 'createHash', 'sign', 'createSign', 'inherits', 'verify', 'stream'])
        @Js
        def PyJsHoisted_Sign_(algorithm, this, arguments, var=var):
            var = Scope({'algorithm':algorithm, 'this':this, 'arguments':arguments}, var)
            var.registers(['data', 'algorithm'])
            var.get('stream').get('Writable').callprop('call', var.get(u"this"))
            var.put('data', var.get('algorithms').get(var.get('algorithm')))
            if var.get('data').neg():
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Unknown message digest')))
                raise PyJsTempException
            var.get(u"this").put('_hashType', var.get('data').get('hash'))
            var.get(u"this").put('_hash', var.get('createHash')(var.get('data').get('hash')))
            var.get(u"this").put('_tag', var.get('data').get('id'))
            var.get(u"this").put('_signType', var.get('data').get('sign'))
        PyJsHoisted_Sign_.func_name = 'Sign'
        var.put('Sign', PyJsHoisted_Sign_)
        @Js
        def PyJsHoisted_Verify_(algorithm, this, arguments, var=var):
            var = Scope({'algorithm':algorithm, 'this':this, 'arguments':arguments}, var)
            var.registers(['data', 'algorithm'])
            var.get('stream').get('Writable').callprop('call', var.get(u"this"))
            var.put('data', var.get('algorithms').get(var.get('algorithm')))
            if var.get('data').neg():
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Unknown message digest')))
                raise PyJsTempException
            var.get(u"this").put('_hash', var.get('createHash')(var.get('data').get('hash')))
            var.get(u"this").put('_tag', var.get('data').get('id'))
            var.get(u"this").put('_signType', var.get('data').get('sign'))
        PyJsHoisted_Verify_.func_name = 'Verify'
        var.put('Verify', PyJsHoisted_Verify_)
        @Js
        def PyJsHoisted_createSign_(algorithm, this, arguments, var=var):
            var = Scope({'algorithm':algorithm, 'this':this, 'arguments':arguments}, var)
            var.registers(['algorithm'])
            return var.get('Sign').create(var.get('algorithm'))
        PyJsHoisted_createSign_.func_name = 'createSign'
        var.put('createSign', PyJsHoisted_createSign_)
        @Js
        def PyJsHoisted_createVerify_(algorithm, this, arguments, var=var):
            var = Scope({'algorithm':algorithm, 'this':this, 'arguments':arguments}, var)
            var.registers(['algorithm'])
            return var.get('Verify').create(var.get('algorithm'))
        PyJsHoisted_createVerify_.func_name = 'createVerify'
        var.put('createVerify', PyJsHoisted_createVerify_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('createHash', var.get('require')(Js('create-hash')))
        var.put('stream', var.get('require')(Js('readable-stream')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('sign', var.get('require')(Js('./sign')))
        var.put('verify', var.get('require')(Js('./verify')))
        var.put('algorithms', var.get('require')(Js('./algorithms.json')))
        @Js
        def PyJs_anonymous_591_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.get('algorithms').get(var.get('key')).put('id', var.get('Buffer').callprop('from', var.get('algorithms').get(var.get('key')).get('id'), Js('hex')))
            var.get('algorithms').put(var.get('key').callprop('toLowerCase'), var.get('algorithms').get(var.get('key')))
        PyJs_anonymous_591_._set_name('anonymous')
        var.get('Object').callprop('keys', var.get('algorithms')).callprop('forEach', PyJs_anonymous_591_)
        pass
        var.get('inherits')(var.get('Sign'), var.get('stream').get('Writable'))
        @Js
        def PyJs__write_592_(data, _, done, this, arguments, var=var):
            var = Scope({'data':data, '_':_, 'done':done, 'this':this, 'arguments':arguments, '_write':PyJs__write_592_}, var)
            var.registers(['_', 'data', 'done'])
            var.get(u"this").get('_hash').callprop('update', var.get('data'))
            var.get('done')()
        PyJs__write_592_._set_name('_write')
        var.get('Sign').get('prototype').put('_write', PyJs__write_592_)
        @Js
        def PyJs_update_593_(data, enc, this, arguments, var=var):
            var = Scope({'data':data, 'enc':enc, 'this':this, 'arguments':arguments, 'update':PyJs_update_593_}, var)
            var.registers(['data', 'enc'])
            if _seq(var.get('data',throw=False).typeof(),Js('string')):
                var.put('data', var.get('Buffer').callprop('from', var.get('data'), var.get('enc')))
            var.get(u"this").get('_hash').callprop('update', var.get('data'))
            return var.get(u"this")
        PyJs_update_593_._set_name('update')
        var.get('Sign').get('prototype').put('update', PyJs_update_593_)
        @Js
        def PyJs_signMethod_594_(key, enc, this, arguments, var=var):
            var = Scope({'key':key, 'enc':enc, 'this':this, 'arguments':arguments, 'signMethod':PyJs_signMethod_594_}, var)
            var.registers(['key', 'enc', 'hash', 'sig'])
            var.get(u"this").callprop('end')
            var.put('hash', var.get(u"this").get('_hash').callprop('digest'))
            var.put('sig', var.get('sign')(var.get('hash'), var.get('key'), var.get(u"this").get('_hashType'), var.get(u"this").get('_signType'), var.get(u"this").get('_tag')))
            return (var.get('sig').callprop('toString', var.get('enc')) if var.get('enc') else var.get('sig'))
        PyJs_signMethod_594_._set_name('signMethod')
        var.get('Sign').get('prototype').put('sign', PyJs_signMethod_594_)
        pass
        var.get('inherits')(var.get('Verify'), var.get('stream').get('Writable'))
        @Js
        def PyJs__write_595_(data, _, done, this, arguments, var=var):
            var = Scope({'data':data, '_':_, 'done':done, 'this':this, 'arguments':arguments, '_write':PyJs__write_595_}, var)
            var.registers(['_', 'data', 'done'])
            var.get(u"this").get('_hash').callprop('update', var.get('data'))
            var.get('done')()
        PyJs__write_595_._set_name('_write')
        var.get('Verify').get('prototype').put('_write', PyJs__write_595_)
        @Js
        def PyJs_update_596_(data, enc, this, arguments, var=var):
            var = Scope({'data':data, 'enc':enc, 'this':this, 'arguments':arguments, 'update':PyJs_update_596_}, var)
            var.registers(['data', 'enc'])
            if _seq(var.get('data',throw=False).typeof(),Js('string')):
                var.put('data', var.get('Buffer').callprop('from', var.get('data'), var.get('enc')))
            var.get(u"this").get('_hash').callprop('update', var.get('data'))
            return var.get(u"this")
        PyJs_update_596_._set_name('update')
        var.get('Verify').get('prototype').put('update', PyJs_update_596_)
        @Js
        def PyJs_verifyMethod_597_(key, sig, enc, this, arguments, var=var):
            var = Scope({'key':key, 'sig':sig, 'enc':enc, 'this':this, 'arguments':arguments, 'verifyMethod':PyJs_verifyMethod_597_}, var)
            var.registers(['key', 'enc', 'hash', 'sig'])
            if _seq(var.get('sig',throw=False).typeof(),Js('string')):
                var.put('sig', var.get('Buffer').callprop('from', var.get('sig'), var.get('enc')))
            var.get(u"this").callprop('end')
            var.put('hash', var.get(u"this").get('_hash').callprop('digest'))
            return var.get('verify')(var.get('sig'), var.get('hash'), var.get('key'), var.get(u"this").get('_signType'), var.get(u"this").get('_tag'))
        PyJs_verifyMethod_597_._set_name('verifyMethod')
        var.get('Verify').get('prototype').put('verify', PyJs_verifyMethod_597_)
        pass
        pass
        var.get('module').put('exports', Js({'Sign':var.get('createSign'),'Verify':var.get('createVerify'),'createSign':var.get('createSign'),'createVerify':var.get('createVerify')}))
    PyJs_anonymous_590_._set_name('anonymous')
    @Js
    def PyJs_anonymous_598_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'parseKeys', 'sign', 'createHmac', 'BN', 'bits2int', 'makeR', 'bits2octets', 'curves', 'require', 'Buffer', 'dsaSign', 'makeKey', 'crt', 'toDER', 'exports', 'getKey', 'EC', 'ecSign'])
        @Js
        def PyJsHoisted_sign_(hash, key, hashType, signType, tag, this, arguments, var=var):
            var = Scope({'hash':hash, 'key':key, 'hashType':hashType, 'signType':signType, 'tag':tag, 'this':this, 'arguments':arguments}, var)
            var.registers(['hashType', 'priv', 'hash', 'len', 'i', 'out', 'tag', 'signType', 'key', 'pad'])
            var.put('priv', var.get('parseKeys')(var.get('key')))
            if var.get('priv').get('curve'):
                if (PyJsStrictNeq(var.get('signType'),Js('ecdsa')) and PyJsStrictNeq(var.get('signType'),Js('ecdsa/rsa'))):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('wrong private key type')))
                    raise PyJsTempException
                return var.get('ecSign')(var.get('hash'), var.get('priv'))
            else:
                if _seq(var.get('priv').get('type'),Js('dsa')):
                    if PyJsStrictNeq(var.get('signType'),Js('dsa')):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('wrong private key type')))
                        raise PyJsTempException
                    return var.get('dsaSign')(var.get('hash'), var.get('priv'), var.get('hashType'))
                else:
                    if (PyJsStrictNeq(var.get('signType'),Js('rsa')) and PyJsStrictNeq(var.get('signType'),Js('ecdsa/rsa'))):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('wrong private key type')))
                        raise PyJsTempException
            var.put('hash', var.get('Buffer').callprop('concat', Js([var.get('tag'), var.get('hash')])))
            var.put('len', var.get('priv').get('modulus').callprop('byteLength'))
            var.put('pad', Js([Js(0.0), Js(1.0)]))
            while (((var.get('hash').get('length')+var.get('pad').get('length'))+Js(1.0))<var.get('len')):
                var.get('pad').callprop('push', Js(255))
            var.get('pad').callprop('push', Js(0))
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('hash').get('length')):
                var.get('pad').callprop('push', var.get('hash').get(var.get('i')))
            var.put('out', var.get('crt')(var.get('pad'), var.get('priv')))
            return var.get('out')
        PyJsHoisted_sign_.func_name = 'sign'
        var.put('sign', PyJsHoisted_sign_)
        @Js
        def PyJsHoisted_ecSign_(hash, priv, this, arguments, var=var):
            var = Scope({'hash':hash, 'priv':priv, 'this':this, 'arguments':arguments}, var)
            var.registers(['priv', 'hash', 'curveId', 'out', 'key', 'curve'])
            var.put('curveId', var.get('curves').get(var.get('priv').get('curve').callprop('join', Js('.'))))
            if var.get('curveId').neg():
                PyJsTempException = JsToPyException(var.get('Error').create((Js('unknown curve ')+var.get('priv').get('curve').callprop('join', Js('.')))))
                raise PyJsTempException
            var.put('curve', var.get('EC').create(var.get('curveId')))
            var.put('key', var.get('curve').callprop('keyFromPrivate', var.get('priv').get('privateKey')))
            var.put('out', var.get('key').callprop('sign', var.get('hash')))
            return var.get('Buffer').callprop('from', var.get('out').callprop('toDER'))
        PyJsHoisted_ecSign_.func_name = 'ecSign'
        var.put('ecSign', PyJsHoisted_ecSign_)
        @Js
        def PyJsHoisted_dsaSign_(hash, priv, algo, this, arguments, var=var):
            var = Scope({'hash':hash, 'priv':priv, 'algo':algo, 'this':this, 'arguments':arguments}, var)
            var.registers(['priv', 'r', 'H', 'kv', 'hash', 'x', 'k', 'p', 'g', 'q', 'algo', 's'])
            var.put('x', var.get('priv').get('params').get('priv_key'))
            var.put('p', var.get('priv').get('params').get('p'))
            var.put('q', var.get('priv').get('params').get('q'))
            var.put('g', var.get('priv').get('params').get('g'))
            var.put('r', var.get('BN').create(Js(0.0)))
            pass
            var.put('H', var.get('bits2int')(var.get('hash'), var.get('q')).callprop('mod', var.get('q')))
            var.put('s', Js(False))
            var.put('kv', var.get('getKey')(var.get('x'), var.get('q'), var.get('hash'), var.get('algo')))
            while _seq(var.get('s'),Js(False)):
                var.put('k', var.get('makeKey')(var.get('q'), var.get('kv'), var.get('algo')))
                var.put('r', var.get('makeR')(var.get('g'), var.get('k'), var.get('p'), var.get('q')))
                var.put('s', var.get('k').callprop('invm', var.get('q')).callprop('imul', var.get('H').callprop('add', var.get('x').callprop('mul', var.get('r')))).callprop('mod', var.get('q')))
                if _seq(var.get('s').callprop('cmpn', Js(0.0)),Js(0.0)):
                    var.put('s', Js(False))
                    var.put('r', var.get('BN').create(Js(0.0)))
            return var.get('toDER')(var.get('r'), var.get('s'))
        PyJsHoisted_dsaSign_.func_name = 'dsaSign'
        var.put('dsaSign', PyJsHoisted_dsaSign_)
        @Js
        def PyJsHoisted_toDER_(r, s, this, arguments, var=var):
            var = Scope({'r':r, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['total', 's', 'r', 'res'])
            var.put('r', var.get('r').callprop('toArray'))
            var.put('s', var.get('s').callprop('toArray'))
            if (var.get('r').get('0')&Js(128)):
                var.put('r', Js([Js(0.0)]).callprop('concat', var.get('r')))
            if (var.get('s').get('0')&Js(128)):
                var.put('s', Js([Js(0.0)]).callprop('concat', var.get('s')))
            var.put('total', ((var.get('r').get('length')+var.get('s').get('length'))+Js(4.0)))
            var.put('res', Js([Js(48), var.get('total'), Js(2), var.get('r').get('length')]))
            var.put('res', var.get('res').callprop('concat', var.get('r'), Js([Js(2), var.get('s').get('length')]), var.get('s')))
            return var.get('Buffer').callprop('from', var.get('res'))
        PyJsHoisted_toDER_.func_name = 'toDER'
        var.put('toDER', PyJsHoisted_toDER_)
        @Js
        def PyJsHoisted_getKey_(x, q, hash, algo, this, arguments, var=var):
            var = Scope({'x':x, 'q':q, 'hash':hash, 'algo':algo, 'this':this, 'arguments':arguments}, var)
            var.registers(['hbits', 'hash', 'v', 'x', 'zeros', 'k', 'q', 'hlen', 'algo'])
            var.put('x', var.get('Buffer').callprop('from', var.get('x').callprop('toArray')))
            if (var.get('x').get('length')<var.get('q').callprop('byteLength')):
                var.put('zeros', var.get('Buffer').callprop('alloc', (var.get('q').callprop('byteLength')-var.get('x').get('length'))))
                var.put('x', var.get('Buffer').callprop('concat', Js([var.get('zeros'), var.get('x')])))
            var.put('hlen', var.get('hash').get('length'))
            var.put('hbits', var.get('bits2octets')(var.get('hash'), var.get('q')))
            var.put('v', var.get('Buffer').callprop('alloc', var.get('hlen')))
            var.get('v').callprop('fill', Js(1.0))
            var.put('k', var.get('Buffer').callprop('alloc', var.get('hlen')))
            var.put('k', var.get('createHmac')(var.get('algo'), var.get('k')).callprop('update', var.get('v')).callprop('update', var.get('Buffer').callprop('from', Js([Js(0.0)]))).callprop('update', var.get('x')).callprop('update', var.get('hbits')).callprop('digest'))
            var.put('v', var.get('createHmac')(var.get('algo'), var.get('k')).callprop('update', var.get('v')).callprop('digest'))
            var.put('k', var.get('createHmac')(var.get('algo'), var.get('k')).callprop('update', var.get('v')).callprop('update', var.get('Buffer').callprop('from', Js([Js(1.0)]))).callprop('update', var.get('x')).callprop('update', var.get('hbits')).callprop('digest'))
            var.put('v', var.get('createHmac')(var.get('algo'), var.get('k')).callprop('update', var.get('v')).callprop('digest'))
            return Js({'k':var.get('k'),'v':var.get('v')})
        PyJsHoisted_getKey_.func_name = 'getKey'
        var.put('getKey', PyJsHoisted_getKey_)
        @Js
        def PyJsHoisted_bits2int_(obits, q, this, arguments, var=var):
            var = Scope({'obits':obits, 'q':q, 'this':this, 'arguments':arguments}, var)
            var.registers(['bits', 'obits', 'shift', 'q'])
            var.put('bits', var.get('BN').create(var.get('obits')))
            var.put('shift', ((var.get('obits').get('length')<<Js(3.0))-var.get('q').callprop('bitLength')))
            if (var.get('shift')>Js(0.0)):
                var.get('bits').callprop('ishrn', var.get('shift'))
            return var.get('bits')
        PyJsHoisted_bits2int_.func_name = 'bits2int'
        var.put('bits2int', PyJsHoisted_bits2int_)
        @Js
        def PyJsHoisted_bits2octets_(bits, q, this, arguments, var=var):
            var = Scope({'bits':bits, 'q':q, 'this':this, 'arguments':arguments}, var)
            var.registers(['bits', 'out', 'zeros', 'q'])
            var.put('bits', var.get('bits2int')(var.get('bits'), var.get('q')))
            var.put('bits', var.get('bits').callprop('mod', var.get('q')))
            var.put('out', var.get('Buffer').callprop('from', var.get('bits').callprop('toArray')))
            if (var.get('out').get('length')<var.get('q').callprop('byteLength')):
                var.put('zeros', var.get('Buffer').callprop('alloc', (var.get('q').callprop('byteLength')-var.get('out').get('length'))))
                var.put('out', var.get('Buffer').callprop('concat', Js([var.get('zeros'), var.get('out')])))
            return var.get('out')
        PyJsHoisted_bits2octets_.func_name = 'bits2octets'
        var.put('bits2octets', PyJsHoisted_bits2octets_)
        @Js
        def PyJsHoisted_makeKey_(q, kv, algo, this, arguments, var=var):
            var = Scope({'q':q, 'kv':kv, 'algo':algo, 'this':this, 'arguments':arguments}, var)
            var.registers(['kv', 't', 'k', 'q', 'algo'])
            pass
            pass
            while 1:
                var.put('t', var.get('Buffer').callprop('alloc', Js(0.0)))
                while ((var.get('t').get('length')*Js(8.0))<var.get('q').callprop('bitLength')):
                    var.get('kv').put('v', var.get('createHmac')(var.get('algo'), var.get('kv').get('k')).callprop('update', var.get('kv').get('v')).callprop('digest'))
                    var.put('t', var.get('Buffer').callprop('concat', Js([var.get('t'), var.get('kv').get('v')])))
                var.put('k', var.get('bits2int')(var.get('t'), var.get('q')))
                var.get('kv').put('k', var.get('createHmac')(var.get('algo'), var.get('kv').get('k')).callprop('update', var.get('kv').get('v')).callprop('update', var.get('Buffer').callprop('from', Js([Js(0.0)]))).callprop('digest'))
                var.get('kv').put('v', var.get('createHmac')(var.get('algo'), var.get('kv').get('k')).callprop('update', var.get('kv').get('v')).callprop('digest'))
                if not PyJsStrictNeq(var.get('k').callprop('cmp', var.get('q')),(-Js(1.0))):
                    break
            return var.get('k')
        PyJsHoisted_makeKey_.func_name = 'makeKey'
        var.put('makeKey', PyJsHoisted_makeKey_)
        @Js
        def PyJsHoisted_makeR_(g, k, p, q, this, arguments, var=var):
            var = Scope({'g':g, 'k':k, 'p':p, 'q':q, 'this':this, 'arguments':arguments}, var)
            var.registers(['g', 'q', 'k', 'p'])
            return var.get('g').callprop('toRed', var.get('BN').callprop('mont', var.get('p'))).callprop('redPow', var.get('k')).callprop('fromRed').callprop('mod', var.get('q'))
        PyJsHoisted_makeR_.func_name = 'makeR'
        var.put('makeR', PyJsHoisted_makeR_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('createHmac', var.get('require')(Js('create-hmac')))
        var.put('crt', var.get('require')(Js('browserify-rsa')))
        var.put('EC', var.get('require')(Js('elliptic')).get('ec'))
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('parseKeys', var.get('require')(Js('parse-asn1')))
        var.put('curves', var.get('require')(Js('./curves.json')))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('sign'))
        var.get('module').get('exports').put('getKey', var.get('getKey'))
        var.get('module').get('exports').put('makeKey', var.get('makeKey'))
    PyJs_anonymous_598_._set_name('anonymous')
    @Js
    def PyJs_anonymous_599_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'BN', 'parseKeys', 'ecVerify', 'dsaVerify', 'curves', 'verify', 'EC', 'checkValue'])
        @Js
        def PyJsHoisted_verify_(sig, hash, key, signType, tag, this, arguments, var=var):
            var = Scope({'sig':sig, 'hash':hash, 'key':key, 'signType':signType, 'tag':tag, 'this':this, 'arguments':arguments}, var)
            var.registers(['hash', 'sig', 'len', 'i', 'out', 'tag', 'signType', 'pub', 'key', 'red', 'padNum', 'pad'])
            var.put('pub', var.get('parseKeys')(var.get('key')))
            if _seq(var.get('pub').get('type'),Js('ec')):
                if (PyJsStrictNeq(var.get('signType'),Js('ecdsa')) and PyJsStrictNeq(var.get('signType'),Js('ecdsa/rsa'))):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('wrong public key type')))
                    raise PyJsTempException
                return var.get('ecVerify')(var.get('sig'), var.get('hash'), var.get('pub'))
            else:
                if _seq(var.get('pub').get('type'),Js('dsa')):
                    if PyJsStrictNeq(var.get('signType'),Js('dsa')):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('wrong public key type')))
                        raise PyJsTempException
                    return var.get('dsaVerify')(var.get('sig'), var.get('hash'), var.get('pub'))
                else:
                    if (PyJsStrictNeq(var.get('signType'),Js('rsa')) and PyJsStrictNeq(var.get('signType'),Js('ecdsa/rsa'))):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('wrong public key type')))
                        raise PyJsTempException
            var.put('hash', var.get('Buffer').callprop('concat', Js([var.get('tag'), var.get('hash')])))
            var.put('len', var.get('pub').get('modulus').callprop('byteLength'))
            var.put('pad', Js([Js(1.0)]))
            var.put('padNum', Js(0.0))
            while (((var.get('hash').get('length')+var.get('pad').get('length'))+Js(2.0))<var.get('len')):
                var.get('pad').callprop('push', Js(255))
                (var.put('padNum',Js(var.get('padNum').to_number())+Js(1))-Js(1))
            var.get('pad').callprop('push', Js(0))
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('hash').get('length')):
                var.get('pad').callprop('push', var.get('hash').get(var.get('i')))
            var.put('pad', var.get('Buffer').callprop('from', var.get('pad')))
            var.put('red', var.get('BN').callprop('mont', var.get('pub').get('modulus')))
            var.put('sig', var.get('BN').create(var.get('sig')).callprop('toRed', var.get('red')))
            var.put('sig', var.get('sig').callprop('redPow', var.get('BN').create(var.get('pub').get('publicExponent'))))
            var.put('sig', var.get('Buffer').callprop('from', var.get('sig').callprop('fromRed').callprop('toArray')))
            var.put('out', (Js(1.0) if (var.get('padNum')<Js(8.0)) else Js(0.0)))
            var.put('len', var.get('Math').callprop('min', var.get('sig').get('length'), var.get('pad').get('length')))
            if PyJsStrictNeq(var.get('sig').get('length'),var.get('pad').get('length')):
                var.put('out', Js(1.0))
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('len')):
                var.put('out', (var.get('sig').get(var.get('i'))^var.get('pad').get(var.get('i'))), '|')
            return _seq(var.get('out'),Js(0.0))
        PyJsHoisted_verify_.func_name = 'verify'
        var.put('verify', PyJsHoisted_verify_)
        @Js
        def PyJsHoisted_ecVerify_(sig, hash, pub, this, arguments, var=var):
            var = Scope({'sig':sig, 'hash':hash, 'pub':pub, 'this':this, 'arguments':arguments}, var)
            var.registers(['pubkey', 'hash', 'curveId', 'sig', 'pub', 'curve'])
            var.put('curveId', var.get('curves').get(var.get('pub').get('data').get('algorithm').get('curve').callprop('join', Js('.'))))
            if var.get('curveId').neg():
                PyJsTempException = JsToPyException(var.get('Error').create((Js('unknown curve ')+var.get('pub').get('data').get('algorithm').get('curve').callprop('join', Js('.')))))
                raise PyJsTempException
            var.put('curve', var.get('EC').create(var.get('curveId')))
            var.put('pubkey', var.get('pub').get('data').get('subjectPrivateKey').get('data'))
            return var.get('curve').callprop('verify', var.get('hash'), var.get('sig'), var.get('pubkey'))
        PyJsHoisted_ecVerify_.func_name = 'ecVerify'
        var.put('ecVerify', PyJsHoisted_ecVerify_)
        @Js
        def PyJsHoisted_dsaVerify_(sig, hash, pub, this, arguments, var=var):
            var = Scope({'sig':sig, 'hash':hash, 'pub':pub, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 'r', 'hash', 'sig', 'montp', 'y', 'v', 'p', 'g', 'pub', 'q', 'unpacked', 's'])
            var.put('p', var.get('pub').get('data').get('p'))
            var.put('q', var.get('pub').get('data').get('q'))
            var.put('g', var.get('pub').get('data').get('g'))
            var.put('y', var.get('pub').get('data').get('pub_key'))
            var.put('unpacked', var.get('parseKeys').get('signature').callprop('decode', var.get('sig'), Js('der')))
            var.put('s', var.get('unpacked').get('s'))
            var.put('r', var.get('unpacked').get('r'))
            var.get('checkValue')(var.get('s'), var.get('q'))
            var.get('checkValue')(var.get('r'), var.get('q'))
            var.put('montp', var.get('BN').callprop('mont', var.get('p')))
            var.put('w', var.get('s').callprop('invm', var.get('q')))
            def PyJs_LONG_600_(var=var):
                return var.get('g').callprop('toRed', var.get('montp')).callprop('redPow', var.get('BN').create(var.get('hash')).callprop('mul', var.get('w')).callprop('mod', var.get('q'))).callprop('fromRed').callprop('mul', var.get('y').callprop('toRed', var.get('montp')).callprop('redPow', var.get('r').callprop('mul', var.get('w')).callprop('mod', var.get('q'))).callprop('fromRed')).callprop('mod', var.get('p')).callprop('mod', var.get('q'))
            var.put('v', PyJs_LONG_600_())
            return _seq(var.get('v').callprop('cmp', var.get('r')),Js(0.0))
        PyJsHoisted_dsaVerify_.func_name = 'dsaVerify'
        var.put('dsaVerify', PyJsHoisted_dsaVerify_)
        @Js
        def PyJsHoisted_checkValue_(b, q, this, arguments, var=var):
            var = Scope({'b':b, 'q':q, 'this':this, 'arguments':arguments}, var)
            var.registers(['q', 'b'])
            if (var.get('b').callprop('cmpn', Js(0.0))<=Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('invalid sig')))
                raise PyJsTempException
            if (var.get('b').callprop('cmp', var.get('q'))>=var.get('q')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('invalid sig')))
                raise PyJsTempException
        PyJsHoisted_checkValue_.func_name = 'checkValue'
        var.put('checkValue', PyJsHoisted_checkValue_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('EC', var.get('require')(Js('elliptic')).get('ec'))
        var.put('parseKeys', var.get('require')(Js('parse-asn1')))
        var.put('curves', var.get('require')(Js('./curves.json')))
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('verify'))
    PyJs_anonymous_599_._set_name('anonymous')
    @Js
    def PyJs_anonymous_601_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['codes', 'exports', '_inheritsLoose', 'require', 'module', 'endsWith', 'includes', 'oneOf', 'createErrorType', 'startsWith'])
        @Js
        def PyJsHoisted__inheritsLoose_(subClass, superClass, this, arguments, var=var):
            var = Scope({'subClass':subClass, 'superClass':superClass, 'this':this, 'arguments':arguments}, var)
            var.registers(['superClass', 'subClass'])
            var.get('subClass').put('prototype', var.get('Object').callprop('create', var.get('superClass').get('prototype')))
            var.get('subClass').get('prototype').put('constructor', var.get('subClass'))
            var.get('subClass').put('__proto__', var.get('superClass'))
        PyJsHoisted__inheritsLoose_.func_name = '_inheritsLoose'
        var.put('_inheritsLoose', PyJsHoisted__inheritsLoose_)
        @Js
        def PyJsHoisted_createErrorType_(code, message, Base, this, arguments, var=var):
            var = Scope({'code':code, 'message':message, 'Base':Base, 'this':this, 'arguments':arguments}, var)
            var.registers(['getMessage', 'NodeError', 'Base', 'code', 'message'])
            @Js
            def PyJsHoisted_getMessage_(arg1, arg2, arg3, this, arguments, var=var):
                var = Scope({'arg1':arg1, 'arg2':arg2, 'arg3':arg3, 'this':this, 'arguments':arguments}, var)
                var.registers(['arg2', 'arg1', 'arg3'])
                if _seq(var.get('message',throw=False).typeof(),Js('string')):
                    return var.get('message')
                else:
                    return var.get('message')(var.get('arg1'), var.get('arg2'), var.get('arg3'))
            PyJsHoisted_getMessage_.func_name = 'getMessage'
            var.put('getMessage', PyJsHoisted_getMessage_)
            if var.get('Base').neg():
                var.put('Base', var.get('Error'))
            pass
            @Js
            def PyJs_anonymous_602_(_Base, this, arguments, var=var):
                var = Scope({'_Base':_Base, 'this':this, 'arguments':arguments}, var)
                var.registers(['_Base', 'NodeError'])
                @Js
                def PyJsHoisted_NodeError_(arg1, arg2, arg3, this, arguments, var=var):
                    var = Scope({'arg1':arg1, 'arg2':arg2, 'arg3':arg3, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg2', 'arg1', 'arg3'])
                    return (var.get('_Base').callprop('call', var.get(u"this"), var.get('getMessage')(var.get('arg1'), var.get('arg2'), var.get('arg3'))) or var.get(u"this"))
                PyJsHoisted_NodeError_.func_name = 'NodeError'
                var.put('NodeError', PyJsHoisted_NodeError_)
                var.get('_inheritsLoose')(var.get('NodeError'), var.get('_Base'))
                pass
                return var.get('NodeError')
            PyJs_anonymous_602_._set_name('anonymous')
            var.put('NodeError', PyJs_anonymous_602_(var.get('Base')))
            var.get('NodeError').get('prototype').put('name', var.get('Base').get('name'))
            var.get('NodeError').get('prototype').put('code', var.get('code'))
            var.get('codes').put(var.get('code'), var.get('NodeError'))
        PyJsHoisted_createErrorType_.func_name = 'createErrorType'
        var.put('createErrorType', PyJsHoisted_createErrorType_)
        @Js
        def PyJsHoisted_oneOf_(expected, thing, this, arguments, var=var):
            var = Scope({'expected':expected, 'thing':thing, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'thing', 'expected'])
            if var.get('Array').callprop('isArray', var.get('expected')):
                var.put('len', var.get('expected').get('length'))
                @Js
                def PyJs_anonymous_603_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return var.get('String')(var.get('i'))
                PyJs_anonymous_603_._set_name('anonymous')
                var.put('expected', var.get('expected').callprop('map', PyJs_anonymous_603_))
                if (var.get('len')>Js(2.0)):
                    return (Js('one of ').callprop('concat', var.get('thing'), Js(' ')).callprop('concat', var.get('expected').callprop('slice', Js(0.0), (var.get('len')-Js(1.0))).callprop('join', Js(', ')), Js(', or '))+var.get('expected').get((var.get('len')-Js(1.0))))
                else:
                    if _seq(var.get('len'),Js(2.0)):
                        return Js('one of ').callprop('concat', var.get('thing'), Js(' ')).callprop('concat', var.get('expected').get('0'), Js(' or ')).callprop('concat', var.get('expected').get('1'))
                    else:
                        return Js('of ').callprop('concat', var.get('thing'), Js(' ')).callprop('concat', var.get('expected').get('0'))
            else:
                return Js('of ').callprop('concat', var.get('thing'), Js(' ')).callprop('concat', var.get('String')(var.get('expected')))
        PyJsHoisted_oneOf_.func_name = 'oneOf'
        var.put('oneOf', PyJsHoisted_oneOf_)
        @Js
        def PyJsHoisted_startsWith_(str, search, pos, this, arguments, var=var):
            var = Scope({'str':str, 'search':search, 'pos':pos, 'this':this, 'arguments':arguments}, var)
            var.registers(['str', 'search', 'pos'])
            return _seq(var.get('str').callprop('substr', (Js(0.0) if (var.get('pos').neg() or (var.get('pos')<Js(0.0))) else (+var.get('pos'))), var.get('search').get('length')),var.get('search'))
        PyJsHoisted_startsWith_.func_name = 'startsWith'
        var.put('startsWith', PyJsHoisted_startsWith_)
        @Js
        def PyJsHoisted_endsWith_(str, search, this_len, this, arguments, var=var):
            var = Scope({'str':str, 'search':search, 'this_len':this_len, 'this':this, 'arguments':arguments}, var)
            var.registers(['str', 'search', 'this_len'])
            if (_seq(var.get('this_len'),var.get('undefined')) or (var.get('this_len')>var.get('str').get('length'))):
                var.put('this_len', var.get('str').get('length'))
            return _seq(var.get('str').callprop('substring', (var.get('this_len')-var.get('search').get('length')), var.get('this_len')),var.get('search'))
        PyJsHoisted_endsWith_.func_name = 'endsWith'
        var.put('endsWith', PyJsHoisted_endsWith_)
        @Js
        def PyJsHoisted_includes_(str, search, start, this, arguments, var=var):
            var = Scope({'str':str, 'search':search, 'start':start, 'this':this, 'arguments':arguments}, var)
            var.registers(['start', 'str', 'search'])
            if PyJsStrictNeq(var.get('start',throw=False).typeof(),Js('number')):
                var.put('start', Js(0.0))
            if ((var.get('start')+var.get('search').get('length'))>var.get('str').get('length')):
                return Js(False)
            else:
                return PyJsStrictNeq(var.get('str').callprop('indexOf', var.get('search'), var.get('start')),(-Js(1.0)))
        PyJsHoisted_includes_.func_name = 'includes'
        var.put('includes', PyJsHoisted_includes_)
        Js('use strict')
        pass
        var.put('codes', Js({}))
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_604_(name, value, this, arguments, var=var):
            var = Scope({'name':name, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'value'])
            return ((((Js('The value "')+var.get('value'))+Js('" is invalid for option "'))+var.get('name'))+Js('"'))
        PyJs_anonymous_604_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_INVALID_OPT_VALUE'), PyJs_anonymous_604_, var.get('TypeError'))
        @Js
        def PyJs_anonymous_605_(name, expected, actual, this, arguments, var=var):
            var = Scope({'name':name, 'expected':expected, 'actual':actual, 'this':this, 'arguments':arguments}, var)
            var.registers(['determiner', 'expected', 'msg', 'actual', 'name', 'type'])
            pass
            if (_seq(var.get('expected',throw=False).typeof(),Js('string')) and var.get('startsWith')(var.get('expected'), Js('not '))):
                var.put('determiner', Js('must not be'))
                var.put('expected', var.get('expected').callprop('replace', JsRegExp('/^not /'), Js('')))
            else:
                var.put('determiner', Js('must be'))
            pass
            if var.get('endsWith')(var.get('name'), Js(' argument')):
                var.put('msg', Js('The ').callprop('concat', var.get('name'), Js(' ')).callprop('concat', var.get('determiner'), Js(' ')).callprop('concat', var.get('oneOf')(var.get('expected'), Js('type'))))
            else:
                var.put('type', (Js('property') if var.get('includes')(var.get('name'), Js('.')) else Js('argument')))
                var.put('msg', Js('The "').callprop('concat', var.get('name'), Js('" ')).callprop('concat', var.get('type'), Js(' ')).callprop('concat', var.get('determiner'), Js(' ')).callprop('concat', var.get('oneOf')(var.get('expected'), Js('type'))))
            var.put('msg', Js('. Received type ').callprop('concat', (Js('undefined') if _seq(var.get('actual',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('actual')))), '+')
            return var.get('msg')
        PyJs_anonymous_605_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_INVALID_ARG_TYPE'), PyJs_anonymous_605_, var.get('TypeError'))
        var.get('createErrorType')(Js('ERR_STREAM_PUSH_AFTER_EOF'), Js('stream.push() after EOF'))
        @Js
        def PyJs_anonymous_606_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return ((Js('The ')+var.get('name'))+Js(' method is not implemented'))
        PyJs_anonymous_606_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_METHOD_NOT_IMPLEMENTED'), PyJs_anonymous_606_)
        var.get('createErrorType')(Js('ERR_STREAM_PREMATURE_CLOSE'), Js('Premature close'))
        @Js
        def PyJs_anonymous_607_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return ((Js('Cannot call ')+var.get('name'))+Js(' after a stream was destroyed'))
        PyJs_anonymous_607_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_STREAM_DESTROYED'), PyJs_anonymous_607_)
        var.get('createErrorType')(Js('ERR_MULTIPLE_CALLBACK'), Js('Callback called multiple times'))
        var.get('createErrorType')(Js('ERR_STREAM_CANNOT_PIPE'), Js('Cannot pipe, not readable'))
        var.get('createErrorType')(Js('ERR_STREAM_WRITE_AFTER_END'), Js('write after end'))
        var.get('createErrorType')(Js('ERR_STREAM_NULL_VALUES'), Js('May not write null values to stream'), var.get('TypeError'))
        @Js
        def PyJs_anonymous_608_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg'])
            return (Js('Unknown encoding: ')+var.get('arg'))
        PyJs_anonymous_608_._set_name('anonymous')
        var.get('createErrorType')(Js('ERR_UNKNOWN_ENCODING'), PyJs_anonymous_608_, var.get('TypeError'))
        var.get('createErrorType')(Js('ERR_STREAM_UNSHIFT_AFTER_END_EVENT'), Js('stream.unshift() after end event'))
        var.get('module').get('exports').put('codes', var.get('codes'))
    PyJs_anonymous_601_._set_name('anonymous')
    @Js
    def PyJs_anonymous_609_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_610_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_611_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Writable', 'v', 'onEndNT', 'method', 'objectKeys', 'keys', 'onend', 'Duplex', 'Readable'])
                @Js
                def PyJsHoisted_Duplex_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options'])
                    if var.get(u"this").instanceof(var.get('Duplex')).neg():
                        return var.get('Duplex').create(var.get('options'))
                    var.get('Readable').callprop('call', var.get(u"this"), var.get('options'))
                    var.get('Writable').callprop('call', var.get(u"this"), var.get('options'))
                    var.get(u"this").put('allowHalfOpen', Js(True))
                    if var.get('options'):
                        if _seq(var.get('options').get('readable'),Js(False)):
                            var.get(u"this").put('readable', Js(False))
                        if _seq(var.get('options').get('writable'),Js(False)):
                            var.get(u"this").put('writable', Js(False))
                        if _seq(var.get('options').get('allowHalfOpen'),Js(False)):
                            var.get(u"this").put('allowHalfOpen', Js(False))
                            var.get(u"this").callprop('once', Js('end'), var.get('onend'))
                PyJsHoisted_Duplex_.func_name = 'Duplex'
                var.put('Duplex', PyJsHoisted_Duplex_)
                @Js
                def PyJsHoisted_onend_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u"this").get('_writableState').get('ended'):
                        return var.get('undefined')
                    var.get('process').callprop('nextTick', var.get('onEndNT'), var.get(u"this"))
                PyJsHoisted_onend_.func_name = 'onend'
                var.put('onend', PyJsHoisted_onend_)
                @Js
                def PyJsHoisted_onEndNT_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self'])
                    var.get('self').callprop('end')
                PyJsHoisted_onEndNT_.func_name = 'onEndNT'
                var.put('onEndNT', PyJsHoisted_onEndNT_)
                Js('use strict')
                @Js
                def PyJs_anonymous_612_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['keys', 'key', 'obj'])
                    var.put('keys', Js([]))
                    for PyJsTemp in var.get('obj'):
                        var.put('key', PyJsTemp)
                        var.get('keys').callprop('push', var.get('key'))
                    return var.get('keys')
                PyJs_anonymous_612_._set_name('anonymous')
                var.put('objectKeys', (var.get('Object').get('keys') or PyJs_anonymous_612_))
                var.get('module').put('exports', var.get('Duplex'))
                var.put('Readable', var.get('require')(Js('./_stream_readable')))
                var.put('Writable', var.get('require')(Js('./_stream_writable')))
                var.get('require')(Js('inherits'))(var.get('Duplex'), var.get('Readable'))
                var.put('keys', var.get('objectKeys')(var.get('Writable').get('prototype')))
                #for JS loop
                var.put('v', Js(0.0))
                while (var.get('v')<var.get('keys').get('length')):
                    try:
                        var.put('method', var.get('keys').get(var.get('v')))
                        if var.get('Duplex').get('prototype').get(var.get('method')).neg():
                            var.get('Duplex').get('prototype').put(var.get('method'), var.get('Writable').get('prototype').get(var.get('method')))
                    finally:
                            (var.put('v',Js(var.get('v').to_number())+Js(1))-Js(1))
                pass
                @Js
                def PyJs_get_613_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_613_}, var)
                    var.registers([])
                    return var.get(u"this").get('_writableState').get('highWaterMark')
                PyJs_get_613_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Duplex').get('prototype'), Js('writableHighWaterMark'), Js({'enumerable':Js(False),'get':PyJs_get_613_}))
                @Js
                def PyJs_get_614_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_614_}, var)
                    var.registers([])
                    return (var.get(u"this").get('_writableState') and var.get(u"this").get('_writableState').callprop('getBuffer'))
                PyJs_get_614_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Duplex').get('prototype'), Js('writableBuffer'), Js({'enumerable':Js(False),'get':PyJs_get_614_}))
                @Js
                def PyJs_get_615_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_615_}, var)
                    var.registers([])
                    return var.get(u"this").get('_writableState').get('length')
                PyJs_get_615_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Duplex').get('prototype'), Js('writableLength'), Js({'enumerable':Js(False),'get':PyJs_get_615_}))
                pass
                pass
                @Js
                def PyJs_get_616_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_616_}, var)
                    var.registers([])
                    if (_seq(var.get(u"this").get('_readableState'),var.get('undefined')) or _seq(var.get(u"this").get('_writableState'),var.get('undefined'))):
                        return Js(False)
                    return (var.get(u"this").get('_readableState').get('destroyed') and var.get(u"this").get('_writableState').get('destroyed'))
                PyJs_get_616_._set_name('get')
                @Js
                def PyJs_set_617_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_617_}, var)
                    var.registers(['value'])
                    if (_seq(var.get(u"this").get('_readableState'),var.get('undefined')) or _seq(var.get(u"this").get('_writableState'),var.get('undefined'))):
                        return var.get('undefined')
                    var.get(u"this").get('_readableState').put('destroyed', var.get('value'))
                    var.get(u"this").get('_writableState').put('destroyed', var.get('value'))
                PyJs_set_617_._set_name('set')
                var.get('Object').callprop('defineProperty', var.get('Duplex').get('prototype'), Js('destroyed'), Js({'enumerable':Js(False),'get':PyJs_get_616_,'set':PyJs_set_617_}))
            PyJs_anonymous_611_._set_name('anonymous')
            PyJs_anonymous_611_.callprop('call', var.get(u"this"))
        PyJs_anonymous_610_._set_name('anonymous')
        PyJs_anonymous_610_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_609_._set_name('anonymous')
    @Js
    def PyJs_anonymous_618_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'Transform', 'PassThrough'])
        @Js
        def PyJsHoisted_PassThrough_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            if var.get(u"this").instanceof(var.get('PassThrough')).neg():
                return var.get('PassThrough').create(var.get('options'))
            var.get('Transform').callprop('call', var.get(u"this"), var.get('options'))
        PyJsHoisted_PassThrough_.func_name = 'PassThrough'
        var.put('PassThrough', PyJsHoisted_PassThrough_)
        Js('use strict')
        var.get('module').put('exports', var.get('PassThrough'))
        var.put('Transform', var.get('require')(Js('./_stream_transform')))
        var.get('require')(Js('inherits'))(var.get('PassThrough'), var.get('Transform'))
        pass
        @Js
        def PyJs_anonymous_619_(chunk, encoding, cb, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['chunk', 'encoding', 'cb'])
            var.get('cb')(var.get(u"null"), var.get('chunk'))
        PyJs_anonymous_619_._set_name('anonymous')
        var.get('PassThrough').get('prototype').put('_transform', PyJs_anonymous_619_)
    PyJs_anonymous_618_._set_name('anonymous')
    @Js
    def PyJs_anonymous_620_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_621_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global', 'process'])
            @Js
            def PyJs_anonymous_622_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['errorOrDestroy', 'from', 'onEofChunk', 'flow', 'endReadableNT', 'ReadableState', 'Readable', 'ERR_METHOD_NOT_IMPLEMENTED', 'EE', 'prependListener', '_require$codes', 'pipeOnDrain', '_require', 'debug', 'BufferList', 'EElistenerCount', 'kProxyEvents', 'getHighWaterMark', 'Duplex', 'ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'destroyImpl', 'Stream', 'maybeReadMore_', 'nReadingNextTick', 'StringDecoder', 'Buffer', 'debugUtil', 'resume_', '_isUint8Array', 'endReadable', 'ERR_STREAM_PUSH_AFTER_EOF', 'emitReadable', 'updateReadableListening', 'chunkInvalid', 'addChunk', 'OurUint8Array', 'ERR_INVALID_ARG_TYPE', '_uint8ArrayToBuffer', 'howMuchToRead', 'maybeReadMore', 'resume', 'emitReadable_', 'indexOf', 'fromList', 'readableAddChunk', 'computeNewHighWaterMark', 'createReadableStreamAsyncIterator', 'MAX_HWM'])
                @Js
                def PyJsHoisted__uint8ArrayToBuffer_(chunk, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk'])
                    return var.get('Buffer').callprop('from', var.get('chunk'))
                PyJsHoisted__uint8ArrayToBuffer_.func_name = '_uint8ArrayToBuffer'
                var.put('_uint8ArrayToBuffer', PyJsHoisted__uint8ArrayToBuffer_)
                @Js
                def PyJsHoisted__isUint8Array_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['obj'])
                    return (var.get('Buffer').callprop('isBuffer', var.get('obj')) or var.get('obj').instanceof(var.get('OurUint8Array')))
                PyJsHoisted__isUint8Array_.func_name = '_isUint8Array'
                var.put('_isUint8Array', PyJsHoisted__isUint8Array_)
                @Js
                def PyJsHoisted_prependListener_(emitter, event, fn, this, arguments, var=var):
                    var = Scope({'emitter':emitter, 'event':event, 'fn':fn, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fn', 'event', 'emitter'])
                    if _seq(var.get('emitter').get('prependListener').typeof(),Js('function')):
                        return var.get('emitter').callprop('prependListener', var.get('event'), var.get('fn'))
                    if (var.get('emitter').get('_events').neg() or var.get('emitter').get('_events').get(var.get('event')).neg()):
                        var.get('emitter').callprop('on', var.get('event'), var.get('fn'))
                    else:
                        if var.get('Array').callprop('isArray', var.get('emitter').get('_events').get(var.get('event'))):
                            var.get('emitter').get('_events').get(var.get('event')).callprop('unshift', var.get('fn'))
                        else:
                            var.get('emitter').get('_events').put(var.get('event'), Js([var.get('fn'), var.get('emitter').get('_events').get(var.get('event'))]))
                PyJsHoisted_prependListener_.func_name = 'prependListener'
                var.put('prependListener', PyJsHoisted_prependListener_)
                @Js
                def PyJsHoisted_ReadableState_(options, stream, isDuplex, this, arguments, var=var):
                    var = Scope({'options':options, 'stream':stream, 'isDuplex':isDuplex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'stream', 'isDuplex'])
                    var.put('Duplex', (var.get('Duplex') or var.get('require')(Js('./_stream_duplex'))))
                    var.put('options', (var.get('options') or Js({})))
                    if PyJsStrictNeq(var.get('isDuplex',throw=False).typeof(),Js('boolean')):
                        var.put('isDuplex', var.get('stream').instanceof(var.get('Duplex')))
                    var.get(u"this").put('objectMode', var.get('options').get('objectMode').neg().neg())
                    if var.get('isDuplex'):
                        var.get(u"this").put('objectMode', (var.get(u"this").get('objectMode') or var.get('options').get('readableObjectMode').neg().neg()))
                    var.get(u"this").put('highWaterMark', var.get('getHighWaterMark')(var.get(u"this"), var.get('options'), Js('readableHighWaterMark'), var.get('isDuplex')))
                    var.get(u"this").put('buffer', var.get('BufferList').create())
                    var.get(u"this").put('length', Js(0.0))
                    var.get(u"this").put('pipes', var.get(u"null"))
                    var.get(u"this").put('pipesCount', Js(0.0))
                    var.get(u"this").put('flowing', var.get(u"null"))
                    var.get(u"this").put('ended', Js(False))
                    var.get(u"this").put('endEmitted', Js(False))
                    var.get(u"this").put('reading', Js(False))
                    var.get(u"this").put('sync', Js(True))
                    var.get(u"this").put('needReadable', Js(False))
                    var.get(u"this").put('emittedReadable', Js(False))
                    var.get(u"this").put('readableListening', Js(False))
                    var.get(u"this").put('resumeScheduled', Js(False))
                    var.get(u"this").put('paused', Js(True))
                    var.get(u"this").put('emitClose', PyJsStrictNeq(var.get('options').get('emitClose'),Js(False)))
                    var.get(u"this").put('autoDestroy', var.get('options').get('autoDestroy').neg().neg())
                    var.get(u"this").put('destroyed', Js(False))
                    var.get(u"this").put('defaultEncoding', (var.get('options').get('defaultEncoding') or Js('utf8')))
                    var.get(u"this").put('awaitDrain', Js(0.0))
                    var.get(u"this").put('readingMore', Js(False))
                    var.get(u"this").put('decoder', var.get(u"null"))
                    var.get(u"this").put('encoding', var.get(u"null"))
                    if var.get('options').get('encoding'):
                        if var.get('StringDecoder').neg():
                            var.put('StringDecoder', var.get('require')(Js('string_decoder/')).get('StringDecoder'))
                        var.get(u"this").put('decoder', var.get('StringDecoder').create(var.get('options').get('encoding')))
                        var.get(u"this").put('encoding', var.get('options').get('encoding'))
                PyJsHoisted_ReadableState_.func_name = 'ReadableState'
                var.put('ReadableState', PyJsHoisted_ReadableState_)
                @Js
                def PyJsHoisted_Readable_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'isDuplex'])
                    var.put('Duplex', (var.get('Duplex') or var.get('require')(Js('./_stream_duplex'))))
                    if var.get(u"this").instanceof(var.get('Readable')).neg():
                        return var.get('Readable').create(var.get('options'))
                    var.put('isDuplex', var.get(u"this").instanceof(var.get('Duplex')))
                    var.get(u"this").put('_readableState', var.get('ReadableState').create(var.get('options'), var.get(u"this"), var.get('isDuplex')))
                    var.get(u"this").put('readable', Js(True))
                    if var.get('options'):
                        if _seq(var.get('options').get('read').typeof(),Js('function')):
                            var.get(u"this").put('_read', var.get('options').get('read'))
                        if _seq(var.get('options').get('destroy').typeof(),Js('function')):
                            var.get(u"this").put('_destroy', var.get('options').get('destroy'))
                    var.get('Stream').callprop('call', var.get(u"this"))
                PyJsHoisted_Readable_.func_name = 'Readable'
                var.put('Readable', PyJsHoisted_Readable_)
                @Js
                def PyJsHoisted_readableAddChunk_(stream, chunk, encoding, addToFront, skipChunkCheck, this, arguments, var=var):
                    var = Scope({'stream':stream, 'chunk':chunk, 'encoding':encoding, 'addToFront':addToFront, 'skipChunkCheck':skipChunkCheck, 'this':this, 'arguments':arguments}, var)
                    var.registers(['skipChunkCheck', 'er', 'state', 'encoding', 'chunk', 'addToFront', 'stream'])
                    var.get('debug')(Js('readableAddChunk'), var.get('chunk'))
                    var.put('state', var.get('stream').get('_readableState'))
                    if _seq(var.get('chunk'),var.get(u"null")):
                        var.get('state').put('reading', Js(False))
                        var.get('onEofChunk')(var.get('stream'), var.get('state'))
                    else:
                        pass
                        if var.get('skipChunkCheck').neg():
                            var.put('er', var.get('chunkInvalid')(var.get('state'), var.get('chunk')))
                        if var.get('er'):
                            var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                        else:
                            if (var.get('state').get('objectMode') or (var.get('chunk') and (var.get('chunk').get('length')>Js(0.0)))):
                                if ((PyJsStrictNeq(var.get('chunk',throw=False).typeof(),Js('string')) and var.get('state').get('objectMode').neg()) and PyJsStrictNeq(var.get('Object').callprop('getPrototypeOf', var.get('chunk')),var.get('Buffer').get('prototype'))):
                                    var.put('chunk', var.get('_uint8ArrayToBuffer')(var.get('chunk')))
                                if var.get('addToFront'):
                                    if var.get('state').get('endEmitted'):
                                        var.get('errorOrDestroy')(var.get('stream'), var.get('ERR_STREAM_UNSHIFT_AFTER_END_EVENT').create())
                                    else:
                                        var.get('addChunk')(var.get('stream'), var.get('state'), var.get('chunk'), Js(True))
                                else:
                                    if var.get('state').get('ended'):
                                        var.get('errorOrDestroy')(var.get('stream'), var.get('ERR_STREAM_PUSH_AFTER_EOF').create())
                                    else:
                                        if var.get('state').get('destroyed'):
                                            return Js(False)
                                        else:
                                            var.get('state').put('reading', Js(False))
                                            if (var.get('state').get('decoder') and var.get('encoding').neg()):
                                                var.put('chunk', var.get('state').get('decoder').callprop('write', var.get('chunk')))
                                                if (var.get('state').get('objectMode') or PyJsStrictNeq(var.get('chunk').get('length'),Js(0.0))):
                                                    var.get('addChunk')(var.get('stream'), var.get('state'), var.get('chunk'), Js(False))
                                                else:
                                                    var.get('maybeReadMore')(var.get('stream'), var.get('state'))
                                            else:
                                                var.get('addChunk')(var.get('stream'), var.get('state'), var.get('chunk'), Js(False))
                            else:
                                if var.get('addToFront').neg():
                                    var.get('state').put('reading', Js(False))
                                    var.get('maybeReadMore')(var.get('stream'), var.get('state'))
                    return (var.get('state').get('ended').neg() and ((var.get('state').get('length')<var.get('state').get('highWaterMark')) or _seq(var.get('state').get('length'),Js(0.0))))
                PyJsHoisted_readableAddChunk_.func_name = 'readableAddChunk'
                var.put('readableAddChunk', PyJsHoisted_readableAddChunk_)
                @Js
                def PyJsHoisted_addChunk_(stream, state, chunk, addToFront, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'chunk':chunk, 'addToFront':addToFront, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk', 'state', 'addToFront', 'stream'])
                    if ((var.get('state').get('flowing') and _seq(var.get('state').get('length'),Js(0.0))) and var.get('state').get('sync').neg()):
                        var.get('state').put('awaitDrain', Js(0.0))
                        var.get('stream').callprop('emit', Js('data'), var.get('chunk'))
                    else:
                        var.get('state').put('length', (Js(1.0) if var.get('state').get('objectMode') else var.get('chunk').get('length')), '+')
                        if var.get('addToFront'):
                            var.get('state').get('buffer').callprop('unshift', var.get('chunk'))
                        else:
                            var.get('state').get('buffer').callprop('push', var.get('chunk'))
                        if var.get('state').get('needReadable'):
                            var.get('emitReadable')(var.get('stream'))
                    var.get('maybeReadMore')(var.get('stream'), var.get('state'))
                PyJsHoisted_addChunk_.func_name = 'addChunk'
                var.put('addChunk', PyJsHoisted_addChunk_)
                @Js
                def PyJsHoisted_chunkInvalid_(state, chunk, this, arguments, var=var):
                    var = Scope({'state':state, 'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk', 'state', 'er'])
                    pass
                    if (((var.get('_isUint8Array')(var.get('chunk')).neg() and PyJsStrictNeq(var.get('chunk',throw=False).typeof(),Js('string'))) and PyJsStrictNeq(var.get('chunk'),var.get('undefined'))) and var.get('state').get('objectMode').neg()):
                        var.put('er', var.get('ERR_INVALID_ARG_TYPE').create(Js('chunk'), Js([Js('string'), Js('Buffer'), Js('Uint8Array')]), var.get('chunk')))
                    return var.get('er')
                PyJsHoisted_chunkInvalid_.func_name = 'chunkInvalid'
                var.put('chunkInvalid', PyJsHoisted_chunkInvalid_)
                @Js
                def PyJsHoisted_computeNewHighWaterMark_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n'])
                    if (var.get('n')>=var.get('MAX_HWM')):
                        var.put('n', var.get('MAX_HWM'))
                    else:
                        (var.put('n',Js(var.get('n').to_number())-Js(1))+Js(1))
                        var.put('n', PyJsBshift(var.get('n'),Js(1.0)), '|')
                        var.put('n', PyJsBshift(var.get('n'),Js(2.0)), '|')
                        var.put('n', PyJsBshift(var.get('n'),Js(4.0)), '|')
                        var.put('n', PyJsBshift(var.get('n'),Js(8.0)), '|')
                        var.put('n', PyJsBshift(var.get('n'),Js(16.0)), '|')
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                    return var.get('n')
                PyJsHoisted_computeNewHighWaterMark_.func_name = 'computeNewHighWaterMark'
                var.put('computeNewHighWaterMark', PyJsHoisted_computeNewHighWaterMark_)
                @Js
                def PyJsHoisted_howMuchToRead_(n, state, this, arguments, var=var):
                    var = Scope({'n':n, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'n'])
                    if ((var.get('n')<=Js(0.0)) or (_seq(var.get('state').get('length'),Js(0.0)) and var.get('state').get('ended'))):
                        return Js(0.0)
                    if var.get('state').get('objectMode'):
                        return Js(1.0)
                    if PyJsStrictNeq(var.get('n'),var.get('n')):
                        if (var.get('state').get('flowing') and var.get('state').get('length')):
                            return var.get('state').get('buffer').get('head').get('data').get('length')
                        else:
                            return var.get('state').get('length')
                    if (var.get('n')>var.get('state').get('highWaterMark')):
                        var.get('state').put('highWaterMark', var.get('computeNewHighWaterMark')(var.get('n')))
                    if (var.get('n')<=var.get('state').get('length')):
                        return var.get('n')
                    if var.get('state').get('ended').neg():
                        var.get('state').put('needReadable', Js(True))
                        return Js(0.0)
                    return var.get('state').get('length')
                PyJsHoisted_howMuchToRead_.func_name = 'howMuchToRead'
                var.put('howMuchToRead', PyJsHoisted_howMuchToRead_)
                @Js
                def PyJsHoisted_onEofChunk_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk', 'state', 'stream'])
                    var.get('debug')(Js('onEofChunk'))
                    if var.get('state').get('ended'):
                        return var.get('undefined')
                    if var.get('state').get('decoder'):
                        var.put('chunk', var.get('state').get('decoder').callprop('end'))
                        if (var.get('chunk') and var.get('chunk').get('length')):
                            var.get('state').get('buffer').callprop('push', var.get('chunk'))
                            var.get('state').put('length', (Js(1.0) if var.get('state').get('objectMode') else var.get('chunk').get('length')), '+')
                    var.get('state').put('ended', Js(True))
                    if var.get('state').get('sync'):
                        var.get('emitReadable')(var.get('stream'))
                    else:
                        var.get('state').put('needReadable', Js(False))
                        if var.get('state').get('emittedReadable').neg():
                            var.get('state').put('emittedReadable', Js(True))
                            var.get('emitReadable_')(var.get('stream'))
                PyJsHoisted_onEofChunk_.func_name = 'onEofChunk'
                var.put('onEofChunk', PyJsHoisted_onEofChunk_)
                @Js
                def PyJsHoisted_emitReadable_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.put('state', var.get('stream').get('_readableState'))
                    var.get('debug')(Js('emitReadable'), var.get('state').get('needReadable'), var.get('state').get('emittedReadable'))
                    var.get('state').put('needReadable', Js(False))
                    if var.get('state').get('emittedReadable').neg():
                        var.get('debug')(Js('emitReadable'), var.get('state').get('flowing'))
                        var.get('state').put('emittedReadable', Js(True))
                        var.get('process').callprop('nextTick', var.get('emitReadable_'), var.get('stream'))
                PyJsHoisted_emitReadable_.func_name = 'emitReadable'
                var.put('emitReadable', PyJsHoisted_emitReadable_)
                @Js
                def PyJsHoisted_emitReadable__(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.put('state', var.get('stream').get('_readableState'))
                    var.get('debug')(Js('emitReadable_'), var.get('state').get('destroyed'), var.get('state').get('length'), var.get('state').get('ended'))
                    if (var.get('state').get('destroyed').neg() and (var.get('state').get('length') or var.get('state').get('ended'))):
                        var.get('stream').callprop('emit', Js('readable'))
                        var.get('state').put('emittedReadable', Js(False))
                    var.get('state').put('needReadable', ((var.get('state').get('flowing').neg() and var.get('state').get('ended').neg()) and (var.get('state').get('length')<=var.get('state').get('highWaterMark'))))
                    var.get('flow')(var.get('stream'))
                PyJsHoisted_emitReadable__.func_name = 'emitReadable_'
                var.put('emitReadable_', PyJsHoisted_emitReadable__)
                @Js
                def PyJsHoisted_maybeReadMore_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    if var.get('state').get('readingMore').neg():
                        var.get('state').put('readingMore', Js(True))
                        var.get('process').callprop('nextTick', var.get('maybeReadMore_'), var.get('stream'), var.get('state'))
                PyJsHoisted_maybeReadMore_.func_name = 'maybeReadMore'
                var.put('maybeReadMore', PyJsHoisted_maybeReadMore_)
                @Js
                def PyJsHoisted_maybeReadMore__(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'state', 'stream'])
                    while ((var.get('state').get('reading').neg() and var.get('state').get('ended').neg()) and ((var.get('state').get('length')<var.get('state').get('highWaterMark')) or (var.get('state').get('flowing') and _seq(var.get('state').get('length'),Js(0.0))))):
                        var.put('len', var.get('state').get('length'))
                        var.get('debug')(Js('maybeReadMore read 0'))
                        var.get('stream').callprop('read', Js(0.0))
                        if _seq(var.get('len'),var.get('state').get('length')):
                            break
                    var.get('state').put('readingMore', Js(False))
                PyJsHoisted_maybeReadMore__.func_name = 'maybeReadMore_'
                var.put('maybeReadMore_', PyJsHoisted_maybeReadMore__)
                @Js
                def PyJsHoisted_pipeOnDrain_(src, this, arguments, var=var):
                    var = Scope({'src':src, 'this':this, 'arguments':arguments}, var)
                    var.registers(['src'])
                    @Js
                    def PyJs_pipeOnDrainFunctionResult_636_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'pipeOnDrainFunctionResult':PyJs_pipeOnDrainFunctionResult_636_}, var)
                        var.registers(['state'])
                        var.put('state', var.get('src').get('_readableState'))
                        var.get('debug')(Js('pipeOnDrain'), var.get('state').get('awaitDrain'))
                        if var.get('state').get('awaitDrain'):
                            (var.get('state').put('awaitDrain',Js(var.get('state').get('awaitDrain').to_number())-Js(1))+Js(1))
                        if (_seq(var.get('state').get('awaitDrain'),Js(0.0)) and var.get('EElistenerCount')(var.get('src'), Js('data'))):
                            var.get('state').put('flowing', Js(True))
                            var.get('flow')(var.get('src'))
                    PyJs_pipeOnDrainFunctionResult_636_._set_name('pipeOnDrainFunctionResult')
                    return PyJs_pipeOnDrainFunctionResult_636_
                PyJsHoisted_pipeOnDrain_.func_name = 'pipeOnDrain'
                var.put('pipeOnDrain', PyJsHoisted_pipeOnDrain_)
                @Js
                def PyJsHoisted_updateReadableListening_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'self'])
                    var.put('state', var.get('self').get('_readableState'))
                    var.get('state').put('readableListening', (var.get('self').callprop('listenerCount', Js('readable'))>Js(0.0)))
                    if (var.get('state').get('resumeScheduled') and var.get('state').get('paused').neg()):
                        var.get('state').put('flowing', Js(True))
                    else:
                        if (var.get('self').callprop('listenerCount', Js('data'))>Js(0.0)):
                            var.get('self').callprop('resume')
                PyJsHoisted_updateReadableListening_.func_name = 'updateReadableListening'
                var.put('updateReadableListening', PyJsHoisted_updateReadableListening_)
                @Js
                def PyJsHoisted_nReadingNextTick_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self'])
                    var.get('debug')(Js('readable nexttick read 0'))
                    var.get('self').callprop('read', Js(0.0))
                PyJsHoisted_nReadingNextTick_.func_name = 'nReadingNextTick'
                var.put('nReadingNextTick', PyJsHoisted_nReadingNextTick_)
                @Js
                def PyJsHoisted_resume_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    if var.get('state').get('resumeScheduled').neg():
                        var.get('state').put('resumeScheduled', Js(True))
                        var.get('process').callprop('nextTick', var.get('resume_'), var.get('stream'), var.get('state'))
                PyJsHoisted_resume_.func_name = 'resume'
                var.put('resume', PyJsHoisted_resume_)
                @Js
                def PyJsHoisted_resume__(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.get('debug')(Js('resume'), var.get('state').get('reading'))
                    if var.get('state').get('reading').neg():
                        var.get('stream').callprop('read', Js(0.0))
                    var.get('state').put('resumeScheduled', Js(False))
                    var.get('stream').callprop('emit', Js('resume'))
                    var.get('flow')(var.get('stream'))
                    if (var.get('state').get('flowing') and var.get('state').get('reading').neg()):
                        var.get('stream').callprop('read', Js(0.0))
                PyJsHoisted_resume__.func_name = 'resume_'
                var.put('resume_', PyJsHoisted_resume__)
                @Js
                def PyJsHoisted_flow_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.put('state', var.get('stream').get('_readableState'))
                    var.get('debug')(Js('flow'), var.get('state').get('flowing'))
                    while (var.get('state').get('flowing') and PyJsStrictNeq(var.get('stream').callprop('read'),var.get(u"null"))):
                        pass
                PyJsHoisted_flow_.func_name = 'flow'
                var.put('flow', PyJsHoisted_flow_)
                @Js
                def PyJsHoisted_fromList_(n, state, this, arguments, var=var):
                    var = Scope({'n':n, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'ret', 'n'])
                    if _seq(var.get('state').get('length'),Js(0.0)):
                        return var.get(u"null")
                    pass
                    if var.get('state').get('objectMode'):
                        var.put('ret', var.get('state').get('buffer').callprop('shift'))
                    else:
                        if (var.get('n').neg() or (var.get('n')>=var.get('state').get('length'))):
                            if var.get('state').get('decoder'):
                                var.put('ret', var.get('state').get('buffer').callprop('join', Js('')))
                            else:
                                if _seq(var.get('state').get('buffer').get('length'),Js(1.0)):
                                    var.put('ret', var.get('state').get('buffer').callprop('first'))
                                else:
                                    var.put('ret', var.get('state').get('buffer').callprop('concat', var.get('state').get('length')))
                            var.get('state').get('buffer').callprop('clear')
                        else:
                            var.put('ret', var.get('state').get('buffer').callprop('consume', var.get('n'), var.get('state').get('decoder')))
                    return var.get('ret')
                PyJsHoisted_fromList_.func_name = 'fromList'
                var.put('fromList', PyJsHoisted_fromList_)
                @Js
                def PyJsHoisted_endReadable_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    var.put('state', var.get('stream').get('_readableState'))
                    var.get('debug')(Js('endReadable'), var.get('state').get('endEmitted'))
                    if var.get('state').get('endEmitted').neg():
                        var.get('state').put('ended', Js(True))
                        var.get('process').callprop('nextTick', var.get('endReadableNT'), var.get('state'), var.get('stream'))
                PyJsHoisted_endReadable_.func_name = 'endReadable'
                var.put('endReadable', PyJsHoisted_endReadable_)
                @Js
                def PyJsHoisted_endReadableNT_(state, stream, this, arguments, var=var):
                    var = Scope({'state':state, 'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'wState', 'stream'])
                    var.get('debug')(Js('endReadableNT'), var.get('state').get('endEmitted'), var.get('state').get('length'))
                    if (var.get('state').get('endEmitted').neg() and _seq(var.get('state').get('length'),Js(0.0))):
                        var.get('state').put('endEmitted', Js(True))
                        var.get('stream').put('readable', Js(False))
                        var.get('stream').callprop('emit', Js('end'))
                        if var.get('state').get('autoDestroy'):
                            var.put('wState', var.get('stream').get('_writableState'))
                            if (var.get('wState').neg() or (var.get('wState').get('autoDestroy') and var.get('wState').get('finished'))):
                                var.get('stream').callprop('destroy')
                PyJsHoisted_endReadableNT_.func_name = 'endReadableNT'
                var.put('endReadableNT', PyJsHoisted_endReadableNT_)
                @Js
                def PyJsHoisted_indexOf_(xs, x, this, arguments, var=var):
                    var = Scope({'xs':xs, 'x':x, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'x', 'l', 'xs'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('l', var.get('xs').get('length'))
                    while (var.get('i')<var.get('l')):
                        try:
                            if _seq(var.get('xs').get(var.get('i')),var.get('x')):
                                return var.get('i')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return (-Js(1.0))
                PyJsHoisted_indexOf_.func_name = 'indexOf'
                var.put('indexOf', PyJsHoisted_indexOf_)
                Js('use strict')
                var.get('module').put('exports', var.get('Readable'))
                pass
                var.get('Readable').put('ReadableState', var.get('ReadableState'))
                var.put('EE', var.get('require')(Js('events')).get('EventEmitter'))
                @Js
                def PyJs_EElistenerCount_623_(emitter, type, this, arguments, var=var):
                    var = Scope({'emitter':emitter, 'type':type, 'this':this, 'arguments':arguments, 'EElistenerCount':PyJs_EElistenerCount_623_}, var)
                    var.registers(['emitter', 'type'])
                    return var.get('emitter').callprop('listeners', var.get('type')).get('length')
                PyJs_EElistenerCount_623_._set_name('EElistenerCount')
                var.put('EElistenerCount', PyJs_EElistenerCount_623_)
                var.put('Stream', var.get('require')(Js('./internal/streams/stream')))
                var.put('Buffer', var.get('require')(Js('buffer')).get('Buffer'))
                @Js
                def PyJs_anonymous_624_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_624_._set_name('anonymous')
                var.put('OurUint8Array', (var.get('global').get('Uint8Array') or PyJs_anonymous_624_))
                pass
                pass
                var.put('debugUtil', var.get('require')(Js('util')))
                pass
                if (var.get('debugUtil') and var.get('debugUtil').get('debuglog')):
                    var.put('debug', var.get('debugUtil').callprop('debuglog', Js('stream')))
                else:
                    @Js
                    def PyJs_debug_625_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'debug':PyJs_debug_625_}, var)
                        var.registers([])
                        pass
                    PyJs_debug_625_._set_name('debug')
                    var.put('debug', PyJs_debug_625_)
                var.put('BufferList', var.get('require')(Js('./internal/streams/buffer_list')))
                var.put('destroyImpl', var.get('require')(Js('./internal/streams/destroy')))
                var.put('_require', var.get('require')(Js('./internal/streams/state')))
                var.put('getHighWaterMark', var.get('_require').get('getHighWaterMark'))
                var.put('_require$codes', var.get('require')(Js('../errors')).get('codes'))
                var.put('ERR_INVALID_ARG_TYPE', var.get('_require$codes').get('ERR_INVALID_ARG_TYPE'))
                var.put('ERR_STREAM_PUSH_AFTER_EOF', var.get('_require$codes').get('ERR_STREAM_PUSH_AFTER_EOF'))
                var.put('ERR_METHOD_NOT_IMPLEMENTED', var.get('_require$codes').get('ERR_METHOD_NOT_IMPLEMENTED'))
                var.put('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', var.get('_require$codes').get('ERR_STREAM_UNSHIFT_AFTER_END_EVENT'))
                pass
                pass
                pass
                var.get('require')(Js('inherits'))(var.get('Readable'), var.get('Stream'))
                var.put('errorOrDestroy', var.get('destroyImpl').get('errorOrDestroy'))
                var.put('kProxyEvents', Js([Js('error'), Js('close'), Js('destroy'), Js('pause'), Js('resume')]))
                pass
                pass
                pass
                @Js
                def PyJs_get_626_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_626_}, var)
                    var.registers([])
                    if _seq(var.get(u"this").get('_readableState'),var.get('undefined')):
                        return Js(False)
                    return var.get(u"this").get('_readableState').get('destroyed')
                PyJs_get_626_._set_name('get')
                @Js
                def PyJs_set_627_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_627_}, var)
                    var.registers(['value'])
                    if var.get(u"this").get('_readableState').neg():
                        return var.get('undefined')
                    var.get(u"this").get('_readableState').put('destroyed', var.get('value'))
                PyJs_set_627_._set_name('set')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('destroyed'), Js({'enumerable':Js(False),'get':PyJs_get_626_,'set':PyJs_set_627_}))
                var.get('Readable').get('prototype').put('destroy', var.get('destroyImpl').get('destroy'))
                var.get('Readable').get('prototype').put('_undestroy', var.get('destroyImpl').get('undestroy'))
                @Js
                def PyJs_anonymous_628_(err, cb, this, arguments, var=var):
                    var = Scope({'err':err, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'cb'])
                    var.get('cb')(var.get('err'))
                PyJs_anonymous_628_._set_name('anonymous')
                var.get('Readable').get('prototype').put('_destroy', PyJs_anonymous_628_)
                @Js
                def PyJs_anonymous_629_(chunk, encoding, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk', 'state', 'encoding', 'skipChunkCheck'])
                    var.put('state', var.get(u"this").get('_readableState'))
                    pass
                    if var.get('state').get('objectMode').neg():
                        if _seq(var.get('chunk',throw=False).typeof(),Js('string')):
                            var.put('encoding', (var.get('encoding') or var.get('state').get('defaultEncoding')))
                            if PyJsStrictNeq(var.get('encoding'),var.get('state').get('encoding')):
                                var.put('chunk', var.get('Buffer').callprop('from', var.get('chunk'), var.get('encoding')))
                                var.put('encoding', Js(''))
                            var.put('skipChunkCheck', Js(True))
                    else:
                        var.put('skipChunkCheck', Js(True))
                    return var.get('readableAddChunk')(var.get(u"this"), var.get('chunk'), var.get('encoding'), Js(False), var.get('skipChunkCheck'))
                PyJs_anonymous_629_._set_name('anonymous')
                var.get('Readable').get('prototype').put('push', PyJs_anonymous_629_)
                @Js
                def PyJs_anonymous_630_(chunk, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk'])
                    return var.get('readableAddChunk')(var.get(u"this"), var.get('chunk'), var.get(u"null"), Js(True), Js(False))
                PyJs_anonymous_630_._set_name('anonymous')
                var.get('Readable').get('prototype').put('unshift', PyJs_anonymous_630_)
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_631_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return _seq(var.get(u"this").get('_readableState').get('flowing'),Js(False))
                PyJs_anonymous_631_._set_name('anonymous')
                var.get('Readable').get('prototype').put('isPaused', PyJs_anonymous_631_)
                @Js
                def PyJs_anonymous_632_(enc, this, arguments, var=var):
                    var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['enc', 'decoder', 'content', 'p'])
                    if var.get('StringDecoder').neg():
                        var.put('StringDecoder', var.get('require')(Js('string_decoder/')).get('StringDecoder'))
                    var.put('decoder', var.get('StringDecoder').create(var.get('enc')))
                    var.get(u"this").get('_readableState').put('decoder', var.get('decoder'))
                    var.get(u"this").get('_readableState').put('encoding', var.get(u"this").get('_readableState').get('decoder').get('encoding'))
                    var.put('p', var.get(u"this").get('_readableState').get('buffer').get('head'))
                    var.put('content', Js(''))
                    while PyJsStrictNeq(var.get('p'),var.get(u"null")):
                        var.put('content', var.get('decoder').callprop('write', var.get('p').get('data')), '+')
                        var.put('p', var.get('p').get('next'))
                    var.get(u"this").get('_readableState').get('buffer').callprop('clear')
                    if PyJsStrictNeq(var.get('content'),Js('')):
                        var.get(u"this").get('_readableState').get('buffer').callprop('push', var.get('content'))
                    var.get(u"this").get('_readableState').put('length', var.get('content').get('length'))
                    return var.get(u"this")
                PyJs_anonymous_632_._set_name('anonymous')
                var.get('Readable').get('prototype').put('setEncoding', PyJs_anonymous_632_)
                var.put('MAX_HWM', Js(1073741824))
                pass
                pass
                @Js
                def PyJs_anonymous_633_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['doRead', 'n', 'nOrig', 'state', 'ret'])
                    var.get('debug')(Js('read'), var.get('n'))
                    var.put('n', var.get('parseInt')(var.get('n'), Js(10.0)))
                    var.put('state', var.get(u"this").get('_readableState'))
                    var.put('nOrig', var.get('n'))
                    if PyJsStrictNeq(var.get('n'),Js(0.0)):
                        var.get('state').put('emittedReadable', Js(False))
                    if ((_seq(var.get('n'),Js(0.0)) and var.get('state').get('needReadable')) and (((var.get('state').get('length')>=var.get('state').get('highWaterMark')) if PyJsStrictNeq(var.get('state').get('highWaterMark'),Js(0.0)) else (var.get('state').get('length')>Js(0.0))) or var.get('state').get('ended'))):
                        var.get('debug')(Js('read: emitReadable'), var.get('state').get('length'), var.get('state').get('ended'))
                        if (_seq(var.get('state').get('length'),Js(0.0)) and var.get('state').get('ended')):
                            var.get('endReadable')(var.get(u"this"))
                        else:
                            var.get('emitReadable')(var.get(u"this"))
                        return var.get(u"null")
                    var.put('n', var.get('howMuchToRead')(var.get('n'), var.get('state')))
                    if (_seq(var.get('n'),Js(0.0)) and var.get('state').get('ended')):
                        if _seq(var.get('state').get('length'),Js(0.0)):
                            var.get('endReadable')(var.get(u"this"))
                        return var.get(u"null")
                    var.put('doRead', var.get('state').get('needReadable'))
                    var.get('debug')(Js('need readable'), var.get('doRead'))
                    if (_seq(var.get('state').get('length'),Js(0.0)) or ((var.get('state').get('length')-var.get('n'))<var.get('state').get('highWaterMark'))):
                        var.put('doRead', Js(True))
                        var.get('debug')(Js('length less than watermark'), var.get('doRead'))
                    if (var.get('state').get('ended') or var.get('state').get('reading')):
                        var.put('doRead', Js(False))
                        var.get('debug')(Js('reading or ended'), var.get('doRead'))
                    else:
                        if var.get('doRead'):
                            var.get('debug')(Js('do read'))
                            var.get('state').put('reading', Js(True))
                            var.get('state').put('sync', Js(True))
                            if _seq(var.get('state').get('length'),Js(0.0)):
                                var.get('state').put('needReadable', Js(True))
                            var.get(u"this").callprop('_read', var.get('state').get('highWaterMark'))
                            var.get('state').put('sync', Js(False))
                            if var.get('state').get('reading').neg():
                                var.put('n', var.get('howMuchToRead')(var.get('nOrig'), var.get('state')))
                    pass
                    if (var.get('n')>Js(0.0)):
                        var.put('ret', var.get('fromList')(var.get('n'), var.get('state')))
                    else:
                        var.put('ret', var.get(u"null"))
                    if _seq(var.get('ret'),var.get(u"null")):
                        var.get('state').put('needReadable', (var.get('state').get('length')<=var.get('state').get('highWaterMark')))
                        var.put('n', Js(0.0))
                    else:
                        var.get('state').put('length', var.get('n'), '-')
                        var.get('state').put('awaitDrain', Js(0.0))
                    if _seq(var.get('state').get('length'),Js(0.0)):
                        if var.get('state').get('ended').neg():
                            var.get('state').put('needReadable', Js(True))
                        if (PyJsStrictNeq(var.get('nOrig'),var.get('n')) and var.get('state').get('ended')):
                            var.get('endReadable')(var.get(u"this"))
                    if PyJsStrictNeq(var.get('ret'),var.get(u"null")):
                        var.get(u"this").callprop('emit', Js('data'), var.get('ret'))
                    return var.get('ret')
                PyJs_anonymous_633_._set_name('anonymous')
                var.get('Readable').get('prototype').put('read', PyJs_anonymous_633_)
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_634_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n'])
                    var.get('errorOrDestroy')(var.get(u"this"), var.get('ERR_METHOD_NOT_IMPLEMENTED').create(Js('_read()')))
                PyJs_anonymous_634_._set_name('anonymous')
                var.get('Readable').get('prototype').put('_read', PyJs_anonymous_634_)
                @Js
                def PyJs_anonymous_635_(dest, pipeOpts, this, arguments, var=var):
                    var = Scope({'dest':dest, 'pipeOpts':pipeOpts, 'this':this, 'arguments':arguments}, var)
                    var.registers(['doEnd', 'cleanup', 'onfinish', 'src', 'onunpipe', 'ondrain', 'endFn', 'onclose', 'state', 'onerror', 'cleanedUp', 'dest', 'pipeOpts', 'onend', 'unpipe', 'ondata'])
                    @Js
                    def PyJsHoisted_onunpipe_(readable, unpipeInfo, this, arguments, var=var):
                        var = Scope({'readable':readable, 'unpipeInfo':unpipeInfo, 'this':this, 'arguments':arguments}, var)
                        var.registers(['readable', 'unpipeInfo'])
                        var.get('debug')(Js('onunpipe'))
                        if _seq(var.get('readable'),var.get('src')):
                            if (var.get('unpipeInfo') and _seq(var.get('unpipeInfo').get('hasUnpiped'),Js(False))):
                                var.get('unpipeInfo').put('hasUnpiped', Js(True))
                                var.get('cleanup')()
                    PyJsHoisted_onunpipe_.func_name = 'onunpipe'
                    var.put('onunpipe', PyJsHoisted_onunpipe_)
                    @Js
                    def PyJsHoisted_onend_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('debug')(Js('onend'))
                        var.get('dest').callprop('end')
                    PyJsHoisted_onend_.func_name = 'onend'
                    var.put('onend', PyJsHoisted_onend_)
                    @Js
                    def PyJsHoisted_cleanup_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('debug')(Js('cleanup'))
                        var.get('dest').callprop('removeListener', Js('close'), var.get('onclose'))
                        var.get('dest').callprop('removeListener', Js('finish'), var.get('onfinish'))
                        var.get('dest').callprop('removeListener', Js('drain'), var.get('ondrain'))
                        var.get('dest').callprop('removeListener', Js('error'), var.get('onerror'))
                        var.get('dest').callprop('removeListener', Js('unpipe'), var.get('onunpipe'))
                        var.get('src').callprop('removeListener', Js('end'), var.get('onend'))
                        var.get('src').callprop('removeListener', Js('end'), var.get('unpipe'))
                        var.get('src').callprop('removeListener', Js('data'), var.get('ondata'))
                        var.put('cleanedUp', Js(True))
                        if (var.get('state').get('awaitDrain') and (var.get('dest').get('_writableState').neg() or var.get('dest').get('_writableState').get('needDrain'))):
                            var.get('ondrain')()
                    PyJsHoisted_cleanup_.func_name = 'cleanup'
                    var.put('cleanup', PyJsHoisted_cleanup_)
                    @Js
                    def PyJsHoisted_ondata_(chunk, this, arguments, var=var):
                        var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chunk', 'ret'])
                        var.get('debug')(Js('ondata'))
                        var.put('ret', var.get('dest').callprop('write', var.get('chunk')))
                        var.get('debug')(Js('dest.write'), var.get('ret'))
                        if _seq(var.get('ret'),Js(False)):
                            if (((_seq(var.get('state').get('pipesCount'),Js(1.0)) and _seq(var.get('state').get('pipes'),var.get('dest'))) or ((var.get('state').get('pipesCount')>Js(1.0)) and PyJsStrictNeq(var.get('indexOf')(var.get('state').get('pipes'), var.get('dest')),(-Js(1.0))))) and var.get('cleanedUp').neg()):
                                var.get('debug')(Js('false write response, pause'), var.get('state').get('awaitDrain'))
                                (var.get('state').put('awaitDrain',Js(var.get('state').get('awaitDrain').to_number())+Js(1))-Js(1))
                            var.get('src').callprop('pause')
                    PyJsHoisted_ondata_.func_name = 'ondata'
                    var.put('ondata', PyJsHoisted_ondata_)
                    @Js
                    def PyJsHoisted_onerror_(er, this, arguments, var=var):
                        var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                        var.registers(['er'])
                        var.get('debug')(Js('onerror'), var.get('er'))
                        var.get('unpipe')()
                        var.get('dest').callprop('removeListener', Js('error'), var.get('onerror'))
                        if _seq(var.get('EElistenerCount')(var.get('dest'), Js('error')),Js(0.0)):
                            var.get('errorOrDestroy')(var.get('dest'), var.get('er'))
                    PyJsHoisted_onerror_.func_name = 'onerror'
                    var.put('onerror', PyJsHoisted_onerror_)
                    @Js
                    def PyJsHoisted_onclose_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('dest').callprop('removeListener', Js('finish'), var.get('onfinish'))
                        var.get('unpipe')()
                    PyJsHoisted_onclose_.func_name = 'onclose'
                    var.put('onclose', PyJsHoisted_onclose_)
                    @Js
                    def PyJsHoisted_onfinish_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('debug')(Js('onfinish'))
                        var.get('dest').callprop('removeListener', Js('close'), var.get('onclose'))
                        var.get('unpipe')()
                    PyJsHoisted_onfinish_.func_name = 'onfinish'
                    var.put('onfinish', PyJsHoisted_onfinish_)
                    @Js
                    def PyJsHoisted_unpipe_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('debug')(Js('unpipe'))
                        var.get('src').callprop('unpipe', var.get('dest'))
                    PyJsHoisted_unpipe_.func_name = 'unpipe'
                    var.put('unpipe', PyJsHoisted_unpipe_)
                    var.put('src', var.get(u"this"))
                    var.put('state', var.get(u"this").get('_readableState'))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('state').get('pipesCount'))
                        if SWITCHED or _seq(CONDITION, Js(0.0)):
                            SWITCHED = True
                            var.get('state').put('pipes', var.get('dest'))
                            break
                        if SWITCHED or _seq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            var.get('state').put('pipes', Js([var.get('state').get('pipes'), var.get('dest')]))
                            break
                        if True:
                            SWITCHED = True
                            var.get('state').get('pipes').callprop('push', var.get('dest'))
                            break
                        SWITCHED = True
                        break
                    var.get('state').put('pipesCount', Js(1.0), '+')
                    var.get('debug')(Js('pipe count=%d opts=%j'), var.get('state').get('pipesCount'), var.get('pipeOpts'))
                    var.put('doEnd', (((var.get('pipeOpts').neg() or PyJsStrictNeq(var.get('pipeOpts').get('end'),Js(False))) and PyJsStrictNeq(var.get('dest'),var.get('process').get('stdout'))) and PyJsStrictNeq(var.get('dest'),var.get('process').get('stderr'))))
                    var.put('endFn', (var.get('onend') if var.get('doEnd') else var.get('unpipe')))
                    if var.get('state').get('endEmitted'):
                        var.get('process').callprop('nextTick', var.get('endFn'))
                    else:
                        var.get('src').callprop('once', Js('end'), var.get('endFn'))
                    var.get('dest').callprop('on', Js('unpipe'), var.get('onunpipe'))
                    pass
                    pass
                    var.put('ondrain', var.get('pipeOnDrain')(var.get('src')))
                    var.get('dest').callprop('on', Js('drain'), var.get('ondrain'))
                    var.put('cleanedUp', Js(False))
                    pass
                    var.get('src').callprop('on', Js('data'), var.get('ondata'))
                    pass
                    pass
                    var.get('prependListener')(var.get('dest'), Js('error'), var.get('onerror'))
                    pass
                    var.get('dest').callprop('once', Js('close'), var.get('onclose'))
                    pass
                    var.get('dest').callprop('once', Js('finish'), var.get('onfinish'))
                    pass
                    var.get('dest').callprop('emit', Js('pipe'), var.get('src'))
                    if var.get('state').get('flowing').neg():
                        var.get('debug')(Js('pipe resume'))
                        var.get('src').callprop('resume')
                    return var.get('dest')
                PyJs_anonymous_635_._set_name('anonymous')
                var.get('Readable').get('prototype').put('pipe', PyJs_anonymous_635_)
                pass
                @Js
                def PyJs_anonymous_637_(dest, this, arguments, var=var):
                    var = Scope({'dest':dest, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'i', 'index', 'state', 'unpipeInfo', 'dest', 'dests'])
                    var.put('state', var.get(u"this").get('_readableState'))
                    var.put('unpipeInfo', Js({'hasUnpiped':Js(False)}))
                    if _seq(var.get('state').get('pipesCount'),Js(0.0)):
                        return var.get(u"this")
                    if _seq(var.get('state').get('pipesCount'),Js(1.0)):
                        if (var.get('dest') and PyJsStrictNeq(var.get('dest'),var.get('state').get('pipes'))):
                            return var.get(u"this")
                        if var.get('dest').neg():
                            var.put('dest', var.get('state').get('pipes'))
                        var.get('state').put('pipes', var.get(u"null"))
                        var.get('state').put('pipesCount', Js(0.0))
                        var.get('state').put('flowing', Js(False))
                        if var.get('dest'):
                            var.get('dest').callprop('emit', Js('unpipe'), var.get(u"this"), var.get('unpipeInfo'))
                        return var.get(u"this")
                    if var.get('dest').neg():
                        var.put('dests', var.get('state').get('pipes'))
                        var.put('len', var.get('state').get('pipesCount'))
                        var.get('state').put('pipes', var.get(u"null"))
                        var.get('state').put('pipesCount', Js(0.0))
                        var.get('state').put('flowing', Js(False))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('len')):
                            try:
                                var.get('dests').get(var.get('i')).callprop('emit', Js('unpipe'), var.get(u"this"), Js({'hasUnpiped':Js(False)}))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        return var.get(u"this")
                    var.put('index', var.get('indexOf')(var.get('state').get('pipes'), var.get('dest')))
                    if _seq(var.get('index'),(-Js(1.0))):
                        return var.get(u"this")
                    var.get('state').get('pipes').callprop('splice', var.get('index'), Js(1.0))
                    var.get('state').put('pipesCount', Js(1.0), '-')
                    if _seq(var.get('state').get('pipesCount'),Js(1.0)):
                        var.get('state').put('pipes', var.get('state').get('pipes').get('0'))
                    var.get('dest').callprop('emit', Js('unpipe'), var.get(u"this"), var.get('unpipeInfo'))
                    return var.get(u"this")
                PyJs_anonymous_637_._set_name('anonymous')
                var.get('Readable').get('prototype').put('unpipe', PyJs_anonymous_637_)
                @Js
                def PyJs_anonymous_638_(ev, fn, this, arguments, var=var):
                    var = Scope({'ev':ev, 'fn':fn, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fn', 'state', 'ev', 'res'])
                    var.put('res', var.get('Stream').get('prototype').get('on').callprop('call', var.get(u"this"), var.get('ev'), var.get('fn')))
                    var.put('state', var.get(u"this").get('_readableState'))
                    if _seq(var.get('ev'),Js('data')):
                        var.get('state').put('readableListening', (var.get(u"this").callprop('listenerCount', Js('readable'))>Js(0.0)))
                        if PyJsStrictNeq(var.get('state').get('flowing'),Js(False)):
                            var.get(u"this").callprop('resume')
                    else:
                        if _seq(var.get('ev'),Js('readable')):
                            if (var.get('state').get('endEmitted').neg() and var.get('state').get('readableListening').neg()):
                                var.get('state').put('readableListening', var.get('state').put('needReadable', Js(True)))
                                var.get('state').put('flowing', Js(False))
                                var.get('state').put('emittedReadable', Js(False))
                                var.get('debug')(Js('on readable'), var.get('state').get('length'), var.get('state').get('reading'))
                                if var.get('state').get('length'):
                                    var.get('emitReadable')(var.get(u"this"))
                                else:
                                    if var.get('state').get('reading').neg():
                                        var.get('process').callprop('nextTick', var.get('nReadingNextTick'), var.get(u"this"))
                    return var.get('res')
                PyJs_anonymous_638_._set_name('anonymous')
                var.get('Readable').get('prototype').put('on', PyJs_anonymous_638_)
                var.get('Readable').get('prototype').put('addListener', var.get('Readable').get('prototype').get('on'))
                @Js
                def PyJs_anonymous_639_(ev, fn, this, arguments, var=var):
                    var = Scope({'ev':ev, 'fn':fn, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fn', 'ev', 'res'])
                    var.put('res', var.get('Stream').get('prototype').get('removeListener').callprop('call', var.get(u"this"), var.get('ev'), var.get('fn')))
                    if _seq(var.get('ev'),Js('readable')):
                        var.get('process').callprop('nextTick', var.get('updateReadableListening'), var.get(u"this"))
                    return var.get('res')
                PyJs_anonymous_639_._set_name('anonymous')
                var.get('Readable').get('prototype').put('removeListener', PyJs_anonymous_639_)
                @Js
                def PyJs_anonymous_640_(ev, this, arguments, var=var):
                    var = Scope({'ev':ev, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ev', 'res'])
                    var.put('res', var.get('Stream').get('prototype').get('removeAllListeners').callprop('apply', var.get(u"this"), var.get('arguments')))
                    if (_seq(var.get('ev'),Js('readable')) or _seq(var.get('ev'),var.get('undefined'))):
                        var.get('process').callprop('nextTick', var.get('updateReadableListening'), var.get(u"this"))
                    return var.get('res')
                PyJs_anonymous_640_._set_name('anonymous')
                var.get('Readable').get('prototype').put('removeAllListeners', PyJs_anonymous_640_)
                pass
                pass
                @Js
                def PyJs_anonymous_641_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['state'])
                    var.put('state', var.get(u"this").get('_readableState'))
                    if var.get('state').get('flowing').neg():
                        var.get('debug')(Js('resume'))
                        var.get('state').put('flowing', var.get('state').get('readableListening').neg())
                        var.get('resume')(var.get(u"this"), var.get('state'))
                    var.get('state').put('paused', Js(False))
                    return var.get(u"this")
                PyJs_anonymous_641_._set_name('anonymous')
                var.get('Readable').get('prototype').put('resume', PyJs_anonymous_641_)
                pass
                pass
                @Js
                def PyJs_anonymous_642_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('debug')(Js('call pause flowing=%j'), var.get(u"this").get('_readableState').get('flowing'))
                    if PyJsStrictNeq(var.get(u"this").get('_readableState').get('flowing'),Js(False)):
                        var.get('debug')(Js('pause'))
                        var.get(u"this").get('_readableState').put('flowing', Js(False))
                        var.get(u"this").callprop('emit', Js('pause'))
                    var.get(u"this").get('_readableState').put('paused', Js(True))
                    return var.get(u"this")
                PyJs_anonymous_642_._set_name('anonymous')
                var.get('Readable').get('prototype').put('pause', PyJs_anonymous_642_)
                pass
                @Js
                def PyJs_anonymous_643_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'paused', 'n', '_this', 'state', 'stream'])
                    var.put('_this', var.get(u"this"))
                    var.put('state', var.get(u"this").get('_readableState'))
                    var.put('paused', Js(False))
                    @Js
                    def PyJs_anonymous_644_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['chunk'])
                        var.get('debug')(Js('wrapped end'))
                        if (var.get('state').get('decoder') and var.get('state').get('ended').neg()):
                            var.put('chunk', var.get('state').get('decoder').callprop('end'))
                            if (var.get('chunk') and var.get('chunk').get('length')):
                                var.get('_this').callprop('push', var.get('chunk'))
                        var.get('_this').callprop('push', var.get(u"null"))
                    PyJs_anonymous_644_._set_name('anonymous')
                    var.get('stream').callprop('on', Js('end'), PyJs_anonymous_644_)
                    @Js
                    def PyJs_anonymous_645_(chunk, this, arguments, var=var):
                        var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chunk', 'ret'])
                        var.get('debug')(Js('wrapped data'))
                        if var.get('state').get('decoder'):
                            var.put('chunk', var.get('state').get('decoder').callprop('write', var.get('chunk')))
                        if (var.get('state').get('objectMode') and (_seq(var.get('chunk'),var.get(u"null")) or _seq(var.get('chunk'),var.get('undefined')))):
                            return var.get('undefined')
                        else:
                            if (var.get('state').get('objectMode').neg() and (var.get('chunk').neg() or var.get('chunk').get('length').neg())):
                                return var.get('undefined')
                        var.put('ret', var.get('_this').callprop('push', var.get('chunk')))
                        if var.get('ret').neg():
                            var.put('paused', Js(True))
                            var.get('stream').callprop('pause')
                    PyJs_anonymous_645_._set_name('anonymous')
                    var.get('stream').callprop('on', Js('data'), PyJs_anonymous_645_)
                    for PyJsTemp in var.get('stream'):
                        var.put('i', PyJsTemp)
                        if (_seq(var.get(u"this").get(var.get('i')),var.get('undefined')) and _seq(var.get('stream').get(var.get('i')).typeof(),Js('function'))):
                            @Js
                            def PyJs_methodWrap_646_(method, this, arguments, var=var):
                                var = Scope({'method':method, 'this':this, 'arguments':arguments, 'methodWrap':PyJs_methodWrap_646_}, var)
                                var.registers(['method'])
                                @Js
                                def PyJs_methodWrapReturnFunction_647_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments, 'methodWrapReturnFunction':PyJs_methodWrapReturnFunction_647_}, var)
                                    var.registers([])
                                    return var.get('stream').get(var.get('method')).callprop('apply', var.get('stream'), var.get('arguments'))
                                PyJs_methodWrapReturnFunction_647_._set_name('methodWrapReturnFunction')
                                return PyJs_methodWrapReturnFunction_647_
                            PyJs_methodWrap_646_._set_name('methodWrap')
                            var.get(u"this").put(var.get('i'), PyJs_methodWrap_646_(var.get('i')))
                    #for JS loop
                    var.put('n', Js(0.0))
                    while (var.get('n')<var.get('kProxyEvents').get('length')):
                        try:
                            var.get('stream').callprop('on', var.get('kProxyEvents').get(var.get('n')), var.get(u"this").get('emit').callprop('bind', var.get(u"this"), var.get('kProxyEvents').get(var.get('n'))))
                        finally:
                                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                    @Js
                    def PyJs_anonymous_648_(n, this, arguments, var=var):
                        var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n'])
                        var.get('debug')(Js('wrapped _read'), var.get('n'))
                        if var.get('paused'):
                            var.put('paused', Js(False))
                            var.get('stream').callprop('resume')
                    PyJs_anonymous_648_._set_name('anonymous')
                    var.get(u"this").put('_read', PyJs_anonymous_648_)
                    return var.get(u"this")
                PyJs_anonymous_643_._set_name('anonymous')
                var.get('Readable').get('prototype').put('wrap', PyJs_anonymous_643_)
                if _seq(var.get('Symbol',throw=False).typeof(),Js('function')):
                    @Js
                    def PyJs_anonymous_649_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if _seq(var.get('createReadableStreamAsyncIterator'),var.get('undefined')):
                            var.put('createReadableStreamAsyncIterator', var.get('require')(Js('./internal/streams/async_iterator')))
                        return var.get('createReadableStreamAsyncIterator')(var.get(u"this"))
                    PyJs_anonymous_649_._set_name('anonymous')
                    var.get('Readable').get('prototype').put(var.get('Symbol').get('asyncIterator'), PyJs_anonymous_649_)
                @Js
                def PyJs_get_650_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_650_}, var)
                    var.registers([])
                    return var.get(u"this").get('_readableState').get('highWaterMark')
                PyJs_get_650_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('readableHighWaterMark'), Js({'enumerable':Js(False),'get':PyJs_get_650_}))
                @Js
                def PyJs_get_651_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_651_}, var)
                    var.registers([])
                    return (var.get(u"this").get('_readableState') and var.get(u"this").get('_readableState').get('buffer'))
                PyJs_get_651_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('readableBuffer'), Js({'enumerable':Js(False),'get':PyJs_get_651_}))
                @Js
                def PyJs_get_652_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_652_}, var)
                    var.registers([])
                    return var.get(u"this").get('_readableState').get('flowing')
                PyJs_get_652_._set_name('get')
                @Js
                def PyJs_set_653_(state, this, arguments, var=var):
                    var = Scope({'state':state, 'this':this, 'arguments':arguments, 'set':PyJs_set_653_}, var)
                    var.registers(['state'])
                    if var.get(u"this").get('_readableState'):
                        var.get(u"this").get('_readableState').put('flowing', var.get('state'))
                PyJs_set_653_._set_name('set')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('readableFlowing'), Js({'enumerable':Js(False),'get':PyJs_get_652_,'set':PyJs_set_653_}))
                var.get('Readable').put('_fromList', var.get('fromList'))
                @Js
                def PyJs_get_654_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_654_}, var)
                    var.registers([])
                    return var.get(u"this").get('_readableState').get('length')
                PyJs_get_654_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Readable').get('prototype'), Js('readableLength'), Js({'enumerable':Js(False),'get':PyJs_get_654_}))
                pass
                pass
                pass
                if _seq(var.get('Symbol',throw=False).typeof(),Js('function')):
                    @Js
                    def PyJs_anonymous_655_(iterable, opts, this, arguments, var=var):
                        var = Scope({'iterable':iterable, 'opts':opts, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iterable', 'opts'])
                        if _seq(var.get('from'),var.get('undefined')):
                            var.put('from', var.get('require')(Js('./internal/streams/from')))
                        return var.get('from')(var.get('Readable'), var.get('iterable'), var.get('opts'))
                    PyJs_anonymous_655_._set_name('anonymous')
                    var.get('Readable').put('from', PyJs_anonymous_655_)
                pass
            PyJs_anonymous_622_._set_name('anonymous')
            PyJs_anonymous_622_.callprop('call', var.get(u"this"))
        PyJs_anonymous_621_._set_name('anonymous')
        PyJs_anonymous_621_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_620_._set_name('anonymous')
    @Js
    def PyJs_anonymous_656_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'ERR_TRANSFORM_WITH_LENGTH_0', 'ERR_MULTIPLE_CALLBACK', 'afterTransform', 'ERR_TRANSFORM_ALREADY_TRANSFORMING', 'Transform', 'module', '_require$codes', 'done', 'prefinish', 'Duplex', 'ERR_METHOD_NOT_IMPLEMENTED'])
        @Js
        def PyJsHoisted_afterTransform_(er, data, this, arguments, var=var):
            var = Scope({'er':er, 'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['er', 'cb', 'ts', 'data', 'rs'])
            var.put('ts', var.get(u"this").get('_transformState'))
            var.get('ts').put('transforming', Js(False))
            var.put('cb', var.get('ts').get('writecb'))
            if _seq(var.get('cb'),var.get(u"null")):
                return var.get(u"this").callprop('emit', Js('error'), var.get('ERR_MULTIPLE_CALLBACK').create())
            var.get('ts').put('writechunk', var.get(u"null"))
            var.get('ts').put('writecb', var.get(u"null"))
            if (var.get('data')!=var.get(u"null")):
                var.get(u"this").callprop('push', var.get('data'))
            var.get('cb')(var.get('er'))
            var.put('rs', var.get(u"this").get('_readableState'))
            var.get('rs').put('reading', Js(False))
            if (var.get('rs').get('needReadable') or (var.get('rs').get('length')<var.get('rs').get('highWaterMark'))):
                var.get(u"this").callprop('_read', var.get('rs').get('highWaterMark'))
        PyJsHoisted_afterTransform_.func_name = 'afterTransform'
        var.put('afterTransform', PyJsHoisted_afterTransform_)
        @Js
        def PyJsHoisted_Transform_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            if var.get(u"this").instanceof(var.get('Transform')).neg():
                return var.get('Transform').create(var.get('options'))
            var.get('Duplex').callprop('call', var.get(u"this"), var.get('options'))
            var.get(u"this").put('_transformState', Js({'afterTransform':var.get('afterTransform').callprop('bind', var.get(u"this")),'needTransform':Js(False),'transforming':Js(False),'writecb':var.get(u"null"),'writechunk':var.get(u"null"),'writeencoding':var.get(u"null")}))
            var.get(u"this").get('_readableState').put('needReadable', Js(True))
            var.get(u"this").get('_readableState').put('sync', Js(False))
            if var.get('options'):
                if _seq(var.get('options').get('transform').typeof(),Js('function')):
                    var.get(u"this").put('_transform', var.get('options').get('transform'))
                if _seq(var.get('options').get('flush').typeof(),Js('function')):
                    var.get(u"this").put('_flush', var.get('options').get('flush'))
            var.get(u"this").callprop('on', Js('prefinish'), var.get('prefinish'))
        PyJsHoisted_Transform_.func_name = 'Transform'
        var.put('Transform', PyJsHoisted_Transform_)
        @Js
        def PyJsHoisted_prefinish_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['_this'])
            var.put('_this', var.get(u"this"))
            if (_seq(var.get(u"this").get('_flush').typeof(),Js('function')) and var.get(u"this").get('_readableState').get('destroyed').neg()):
                @Js
                def PyJs_anonymous_657_(er, data, this, arguments, var=var):
                    var = Scope({'er':er, 'data':data, 'this':this, 'arguments':arguments}, var)
                    var.registers(['data', 'er'])
                    var.get('done')(var.get('_this'), var.get('er'), var.get('data'))
                PyJs_anonymous_657_._set_name('anonymous')
                var.get(u"this").callprop('_flush', PyJs_anonymous_657_)
            else:
                var.get('done')(var.get(u"this"), var.get(u"null"), var.get(u"null"))
        PyJsHoisted_prefinish_.func_name = 'prefinish'
        var.put('prefinish', PyJsHoisted_prefinish_)
        @Js
        def PyJsHoisted_done_(stream, er, data, this, arguments, var=var):
            var = Scope({'stream':stream, 'er':er, 'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data', 'stream', 'er'])
            if var.get('er'):
                return var.get('stream').callprop('emit', Js('error'), var.get('er'))
            if (var.get('data')!=var.get(u"null")):
                var.get('stream').callprop('push', var.get('data'))
            if var.get('stream').get('_writableState').get('length'):
                PyJsTempException = JsToPyException(var.get('ERR_TRANSFORM_WITH_LENGTH_0').create())
                raise PyJsTempException
            if var.get('stream').get('_transformState').get('transforming'):
                PyJsTempException = JsToPyException(var.get('ERR_TRANSFORM_ALREADY_TRANSFORMING').create())
                raise PyJsTempException
            return var.get('stream').callprop('push', var.get(u"null"))
        PyJsHoisted_done_.func_name = 'done'
        var.put('done', PyJsHoisted_done_)
        Js('use strict')
        var.get('module').put('exports', var.get('Transform'))
        var.put('_require$codes', var.get('require')(Js('../errors')).get('codes'))
        var.put('ERR_METHOD_NOT_IMPLEMENTED', var.get('_require$codes').get('ERR_METHOD_NOT_IMPLEMENTED'))
        var.put('ERR_MULTIPLE_CALLBACK', var.get('_require$codes').get('ERR_MULTIPLE_CALLBACK'))
        var.put('ERR_TRANSFORM_ALREADY_TRANSFORMING', var.get('_require$codes').get('ERR_TRANSFORM_ALREADY_TRANSFORMING'))
        var.put('ERR_TRANSFORM_WITH_LENGTH_0', var.get('_require$codes').get('ERR_TRANSFORM_WITH_LENGTH_0'))
        var.put('Duplex', var.get('require')(Js('./_stream_duplex')))
        var.get('require')(Js('inherits'))(var.get('Transform'), var.get('Duplex'))
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_658_(chunk, encoding, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['chunk', 'encoding'])
            var.get(u"this").get('_transformState').put('needTransform', Js(False))
            return var.get('Duplex').get('prototype').get('push').callprop('call', var.get(u"this"), var.get('chunk'), var.get('encoding'))
        PyJs_anonymous_658_._set_name('anonymous')
        var.get('Transform').get('prototype').put('push', PyJs_anonymous_658_)
        @Js
        def PyJs_anonymous_659_(chunk, encoding, cb, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['chunk', 'encoding', 'cb'])
            var.get('cb')(var.get('ERR_METHOD_NOT_IMPLEMENTED').create(Js('_transform()')))
        PyJs_anonymous_659_._set_name('anonymous')
        var.get('Transform').get('prototype').put('_transform', PyJs_anonymous_659_)
        @Js
        def PyJs_anonymous_660_(chunk, encoding, cb, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['cb', 'encoding', 'chunk', 'ts', 'rs'])
            var.put('ts', var.get(u"this").get('_transformState'))
            var.get('ts').put('writecb', var.get('cb'))
            var.get('ts').put('writechunk', var.get('chunk'))
            var.get('ts').put('writeencoding', var.get('encoding'))
            if var.get('ts').get('transforming').neg():
                var.put('rs', var.get(u"this").get('_readableState'))
                if ((var.get('ts').get('needTransform') or var.get('rs').get('needReadable')) or (var.get('rs').get('length')<var.get('rs').get('highWaterMark'))):
                    var.get(u"this").callprop('_read', var.get('rs').get('highWaterMark'))
        PyJs_anonymous_660_._set_name('anonymous')
        var.get('Transform').get('prototype').put('_write', PyJs_anonymous_660_)
        @Js
        def PyJs_anonymous_661_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['ts', 'n'])
            var.put('ts', var.get(u"this").get('_transformState'))
            if (PyJsStrictNeq(var.get('ts').get('writechunk'),var.get(u"null")) and var.get('ts').get('transforming').neg()):
                var.get('ts').put('transforming', Js(True))
                var.get(u"this").callprop('_transform', var.get('ts').get('writechunk'), var.get('ts').get('writeencoding'), var.get('ts').get('afterTransform'))
            else:
                var.get('ts').put('needTransform', Js(True))
        PyJs_anonymous_661_._set_name('anonymous')
        var.get('Transform').get('prototype').put('_read', PyJs_anonymous_661_)
        @Js
        def PyJs_anonymous_662_(err, cb, this, arguments, var=var):
            var = Scope({'err':err, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['err', 'cb'])
            @Js
            def PyJs_anonymous_663_(err2, this, arguments, var=var):
                var = Scope({'err2':err2, 'this':this, 'arguments':arguments}, var)
                var.registers(['err2'])
                var.get('cb')(var.get('err2'))
            PyJs_anonymous_663_._set_name('anonymous')
            var.get('Duplex').get('prototype').get('_destroy').callprop('call', var.get(u"this"), var.get('err'), PyJs_anonymous_663_)
        PyJs_anonymous_662_._set_name('anonymous')
        var.get('Transform').get('prototype').put('_destroy', PyJs_anonymous_662_)
        pass
    PyJs_anonymous_656_._set_name('anonymous')
    @Js
    def PyJs_anonymous_664_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_665_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global', 'process'])
            @Js
            def PyJs_anonymous_666_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['internalUtil', 'errorOrDestroy', 'onwriteError', 'WritableState', 'writeOrBuffer', 'ERR_METHOD_NOT_IMPLEMENTED', 'ERR_STREAM_DESTROYED', 'afterWrite', 'nop', 'onCorkedFinish', 'onwrite', '_require$codes', '_require', 'ERR_STREAM_CANNOT_PIPE', 'doWrite', 'WriteReq', 'endWritable', 'getHighWaterMark', 'Duplex', 'destroyImpl', 'Stream', 'ERR_STREAM_WRITE_AFTER_END', 'Buffer', 'ERR_MULTIPLE_CALLBACK', 'ERR_UNKNOWN_ENCODING', '_isUint8Array', 'validChunk', 'needFinish', 'callFinal', 'writeAfterEnd', 'ERR_STREAM_NULL_VALUES', 'prefinish', 'onwriteStateUpdate', 'OurUint8Array', 'ERR_INVALID_ARG_TYPE', '_uint8ArrayToBuffer', 'decodeChunk', 'onwriteDrain', 'CorkedRequest', 'clearBuffer', 'realHasInstance', 'Writable', 'finishMaybe'])
                @Js
                def PyJsHoisted_WriteReq_(chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk', 'encoding', 'cb'])
                    var.get(u"this").put('chunk', var.get('chunk'))
                    var.get(u"this").put('encoding', var.get('encoding'))
                    var.get(u"this").put('callback', var.get('cb'))
                    var.get(u"this").put('next', var.get(u"null"))
                PyJsHoisted_WriteReq_.func_name = 'WriteReq'
                var.put('WriteReq', PyJsHoisted_WriteReq_)
                @Js
                def PyJsHoisted_CorkedRequest_(state, this, arguments, var=var):
                    var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', '_this'])
                    var.put('_this', var.get(u"this"))
                    var.get(u"this").put('next', var.get(u"null"))
                    var.get(u"this").put('entry', var.get(u"null"))
                    @Js
                    def PyJs_anonymous_667_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('onCorkedFinish')(var.get('_this'), var.get('state'))
                    PyJs_anonymous_667_._set_name('anonymous')
                    var.get(u"this").put('finish', PyJs_anonymous_667_)
                PyJsHoisted_CorkedRequest_.func_name = 'CorkedRequest'
                var.put('CorkedRequest', PyJsHoisted_CorkedRequest_)
                @Js
                def PyJsHoisted__uint8ArrayToBuffer_(chunk, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk'])
                    return var.get('Buffer').callprop('from', var.get('chunk'))
                PyJsHoisted__uint8ArrayToBuffer_.func_name = '_uint8ArrayToBuffer'
                var.put('_uint8ArrayToBuffer', PyJsHoisted__uint8ArrayToBuffer_)
                @Js
                def PyJsHoisted__isUint8Array_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['obj'])
                    return (var.get('Buffer').callprop('isBuffer', var.get('obj')) or var.get('obj').instanceof(var.get('OurUint8Array')))
                PyJsHoisted__isUint8Array_.func_name = '_isUint8Array'
                var.put('_isUint8Array', PyJsHoisted__isUint8Array_)
                @Js
                def PyJsHoisted_nop_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJsHoisted_nop_.func_name = 'nop'
                var.put('nop', PyJsHoisted_nop_)
                @Js
                def PyJsHoisted_WritableState_(options, stream, isDuplex, this, arguments, var=var):
                    var = Scope({'options':options, 'stream':stream, 'isDuplex':isDuplex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'isDuplex', 'stream', 'noDecode'])
                    var.put('Duplex', (var.get('Duplex') or var.get('require')(Js('./_stream_duplex'))))
                    var.put('options', (var.get('options') or Js({})))
                    if PyJsStrictNeq(var.get('isDuplex',throw=False).typeof(),Js('boolean')):
                        var.put('isDuplex', var.get('stream').instanceof(var.get('Duplex')))
                    var.get(u"this").put('objectMode', var.get('options').get('objectMode').neg().neg())
                    if var.get('isDuplex'):
                        var.get(u"this").put('objectMode', (var.get(u"this").get('objectMode') or var.get('options').get('writableObjectMode').neg().neg()))
                    var.get(u"this").put('highWaterMark', var.get('getHighWaterMark')(var.get(u"this"), var.get('options'), Js('writableHighWaterMark'), var.get('isDuplex')))
                    var.get(u"this").put('finalCalled', Js(False))
                    var.get(u"this").put('needDrain', Js(False))
                    var.get(u"this").put('ending', Js(False))
                    var.get(u"this").put('ended', Js(False))
                    var.get(u"this").put('finished', Js(False))
                    var.get(u"this").put('destroyed', Js(False))
                    var.put('noDecode', _seq(var.get('options').get('decodeStrings'),Js(False)))
                    var.get(u"this").put('decodeStrings', var.get('noDecode').neg())
                    var.get(u"this").put('defaultEncoding', (var.get('options').get('defaultEncoding') or Js('utf8')))
                    var.get(u"this").put('length', Js(0.0))
                    var.get(u"this").put('writing', Js(False))
                    var.get(u"this").put('corked', Js(0.0))
                    var.get(u"this").put('sync', Js(True))
                    var.get(u"this").put('bufferProcessing', Js(False))
                    @Js
                    def PyJs_anonymous_669_(er, this, arguments, var=var):
                        var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                        var.registers(['er'])
                        var.get('onwrite')(var.get('stream'), var.get('er'))
                    PyJs_anonymous_669_._set_name('anonymous')
                    var.get(u"this").put('onwrite', PyJs_anonymous_669_)
                    var.get(u"this").put('writecb', var.get(u"null"))
                    var.get(u"this").put('writelen', Js(0.0))
                    var.get(u"this").put('bufferedRequest', var.get(u"null"))
                    var.get(u"this").put('lastBufferedRequest', var.get(u"null"))
                    var.get(u"this").put('pendingcb', Js(0.0))
                    var.get(u"this").put('prefinished', Js(False))
                    var.get(u"this").put('errorEmitted', Js(False))
                    var.get(u"this").put('emitClose', PyJsStrictNeq(var.get('options').get('emitClose'),Js(False)))
                    var.get(u"this").put('autoDestroy', var.get('options').get('autoDestroy').neg().neg())
                    var.get(u"this").put('bufferedRequestCount', Js(0.0))
                    var.get(u"this").put('corkedRequestsFree', var.get('CorkedRequest').create(var.get(u"this")))
                PyJsHoisted_WritableState_.func_name = 'WritableState'
                var.put('WritableState', PyJsHoisted_WritableState_)
                @Js
                def PyJsHoisted_Writable_(options, this, arguments, var=var):
                    var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                    var.registers(['options', 'isDuplex'])
                    var.put('Duplex', (var.get('Duplex') or var.get('require')(Js('./_stream_duplex'))))
                    var.put('isDuplex', var.get(u"this").instanceof(var.get('Duplex')))
                    if (var.get('isDuplex').neg() and var.get('realHasInstance').callprop('call', var.get('Writable'), var.get(u"this")).neg()):
                        return var.get('Writable').create(var.get('options'))
                    var.get(u"this").put('_writableState', var.get('WritableState').create(var.get('options'), var.get(u"this"), var.get('isDuplex')))
                    var.get(u"this").put('writable', Js(True))
                    if var.get('options'):
                        if _seq(var.get('options').get('write').typeof(),Js('function')):
                            var.get(u"this").put('_write', var.get('options').get('write'))
                        if _seq(var.get('options').get('writev').typeof(),Js('function')):
                            var.get(u"this").put('_writev', var.get('options').get('writev'))
                        if _seq(var.get('options').get('destroy').typeof(),Js('function')):
                            var.get(u"this").put('_destroy', var.get('options').get('destroy'))
                        if _seq(var.get('options').get('final').typeof(),Js('function')):
                            var.get(u"this").put('_final', var.get('options').get('final'))
                    var.get('Stream').callprop('call', var.get(u"this"))
                PyJsHoisted_Writable_.func_name = 'Writable'
                var.put('Writable', PyJsHoisted_Writable_)
                @Js
                def PyJsHoisted_writeAfterEnd_(stream, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['stream', 'er', 'cb'])
                    var.put('er', var.get('ERR_STREAM_WRITE_AFTER_END').create())
                    var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                    var.get('process').callprop('nextTick', var.get('cb'), var.get('er'))
                PyJsHoisted_writeAfterEnd_.func_name = 'writeAfterEnd'
                var.put('writeAfterEnd', PyJsHoisted_writeAfterEnd_)
                @Js
                def PyJsHoisted_validChunk_(stream, state, chunk, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'chunk':chunk, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['er', 'cb', 'state', 'chunk', 'stream'])
                    pass
                    if _seq(var.get('chunk'),var.get(u"null")):
                        var.put('er', var.get('ERR_STREAM_NULL_VALUES').create())
                    else:
                        if (PyJsStrictNeq(var.get('chunk',throw=False).typeof(),Js('string')) and var.get('state').get('objectMode').neg()):
                            var.put('er', var.get('ERR_INVALID_ARG_TYPE').create(Js('chunk'), Js([Js('string'), Js('Buffer')]), var.get('chunk')))
                    if var.get('er'):
                        var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                        var.get('process').callprop('nextTick', var.get('cb'), var.get('er'))
                        return Js(False)
                    return Js(True)
                PyJsHoisted_validChunk_.func_name = 'validChunk'
                var.put('validChunk', PyJsHoisted_validChunk_)
                @Js
                def PyJsHoisted_decodeChunk_(state, chunk, encoding, this, arguments, var=var):
                    var = Scope({'state':state, 'chunk':chunk, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk', 'state', 'encoding'])
                    if ((var.get('state').get('objectMode').neg() and PyJsStrictNeq(var.get('state').get('decodeStrings'),Js(False))) and _seq(var.get('chunk',throw=False).typeof(),Js('string'))):
                        var.put('chunk', var.get('Buffer').callprop('from', var.get('chunk'), var.get('encoding')))
                    return var.get('chunk')
                PyJsHoisted_decodeChunk_.func_name = 'decodeChunk'
                var.put('decodeChunk', PyJsHoisted_decodeChunk_)
                @Js
                def PyJsHoisted_writeOrBuffer_(stream, state, isBuf, chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'isBuf':isBuf, 'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['newChunk', 'last', 'cb', 'len', 'isBuf', 'state', 'encoding', 'chunk', 'ret', 'stream'])
                    if var.get('isBuf').neg():
                        var.put('newChunk', var.get('decodeChunk')(var.get('state'), var.get('chunk'), var.get('encoding')))
                        if PyJsStrictNeq(var.get('chunk'),var.get('newChunk')):
                            var.put('isBuf', Js(True))
                            var.put('encoding', Js('buffer'))
                            var.put('chunk', var.get('newChunk'))
                    var.put('len', (Js(1.0) if var.get('state').get('objectMode') else var.get('chunk').get('length')))
                    var.get('state').put('length', var.get('len'), '+')
                    var.put('ret', (var.get('state').get('length')<var.get('state').get('highWaterMark')))
                    if var.get('ret').neg():
                        var.get('state').put('needDrain', Js(True))
                    if (var.get('state').get('writing') or var.get('state').get('corked')):
                        var.put('last', var.get('state').get('lastBufferedRequest'))
                        var.get('state').put('lastBufferedRequest', Js({'chunk':var.get('chunk'),'encoding':var.get('encoding'),'isBuf':var.get('isBuf'),'callback':var.get('cb'),'next':var.get(u"null")}))
                        if var.get('last'):
                            var.get('last').put('next', var.get('state').get('lastBufferedRequest'))
                        else:
                            var.get('state').put('bufferedRequest', var.get('state').get('lastBufferedRequest'))
                        var.get('state').put('bufferedRequestCount', Js(1.0), '+')
                    else:
                        var.get('doWrite')(var.get('stream'), var.get('state'), Js(False), var.get('len'), var.get('chunk'), var.get('encoding'), var.get('cb'))
                    return var.get('ret')
                PyJsHoisted_writeOrBuffer_.func_name = 'writeOrBuffer'
                var.put('writeOrBuffer', PyJsHoisted_writeOrBuffer_)
                @Js
                def PyJsHoisted_doWrite_(stream, state, writev, len, chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'writev':writev, 'len':len, 'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['cb', 'len', 'state', 'encoding', 'writev', 'chunk', 'stream'])
                    var.get('state').put('writelen', var.get('len'))
                    var.get('state').put('writecb', var.get('cb'))
                    var.get('state').put('writing', Js(True))
                    var.get('state').put('sync', Js(True))
                    if var.get('state').get('destroyed'):
                        var.get('state').callprop('onwrite', var.get('ERR_STREAM_DESTROYED').create(Js('write')))
                    else:
                        if var.get('writev'):
                            var.get('stream').callprop('_writev', var.get('chunk'), var.get('state').get('onwrite'))
                        else:
                            var.get('stream').callprop('_write', var.get('chunk'), var.get('encoding'), var.get('state').get('onwrite'))
                    var.get('state').put('sync', Js(False))
                PyJsHoisted_doWrite_.func_name = 'doWrite'
                var.put('doWrite', PyJsHoisted_doWrite_)
                @Js
                def PyJsHoisted_onwriteError_(stream, state, sync, er, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'sync':sync, 'er':er, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['er', 'cb', 'state', 'sync', 'stream'])
                    var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())-Js(1))
                    if var.get('sync'):
                        var.get('process').callprop('nextTick', var.get('cb'), var.get('er'))
                        var.get('process').callprop('nextTick', var.get('finishMaybe'), var.get('stream'), var.get('state'))
                        var.get('stream').get('_writableState').put('errorEmitted', Js(True))
                        var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                    else:
                        var.get('cb')(var.get('er'))
                        var.get('stream').get('_writableState').put('errorEmitted', Js(True))
                        var.get('errorOrDestroy')(var.get('stream'), var.get('er'))
                        var.get('finishMaybe')(var.get('stream'), var.get('state'))
                PyJsHoisted_onwriteError_.func_name = 'onwriteError'
                var.put('onwriteError', PyJsHoisted_onwriteError_)
                @Js
                def PyJsHoisted_onwriteStateUpdate_(state, this, arguments, var=var):
                    var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state'])
                    var.get('state').put('writing', Js(False))
                    var.get('state').put('writecb', var.get(u"null"))
                    var.get('state').put('length', var.get('state').get('writelen'), '-')
                    var.get('state').put('writelen', Js(0.0))
                PyJsHoisted_onwriteStateUpdate_.func_name = 'onwriteStateUpdate'
                var.put('onwriteStateUpdate', PyJsHoisted_onwriteStateUpdate_)
                @Js
                def PyJsHoisted_onwrite_(stream, er, this, arguments, var=var):
                    var = Scope({'stream':stream, 'er':er, 'this':this, 'arguments':arguments}, var)
                    var.registers(['finished', 'er', 'cb', 'state', 'sync', 'stream'])
                    var.put('state', var.get('stream').get('_writableState'))
                    var.put('sync', var.get('state').get('sync'))
                    var.put('cb', var.get('state').get('writecb'))
                    if PyJsStrictNeq(var.get('cb',throw=False).typeof(),Js('function')):
                        PyJsTempException = JsToPyException(var.get('ERR_MULTIPLE_CALLBACK').create())
                        raise PyJsTempException
                    var.get('onwriteStateUpdate')(var.get('state'))
                    if var.get('er'):
                        var.get('onwriteError')(var.get('stream'), var.get('state'), var.get('sync'), var.get('er'), var.get('cb'))
                    else:
                        var.put('finished', (var.get('needFinish')(var.get('state')) or var.get('stream').get('destroyed')))
                        if (((var.get('finished').neg() and var.get('state').get('corked').neg()) and var.get('state').get('bufferProcessing').neg()) and var.get('state').get('bufferedRequest')):
                            var.get('clearBuffer')(var.get('stream'), var.get('state'))
                        if var.get('sync'):
                            var.get('process').callprop('nextTick', var.get('afterWrite'), var.get('stream'), var.get('state'), var.get('finished'), var.get('cb'))
                        else:
                            var.get('afterWrite')(var.get('stream'), var.get('state'), var.get('finished'), var.get('cb'))
                PyJsHoisted_onwrite_.func_name = 'onwrite'
                var.put('onwrite', PyJsHoisted_onwrite_)
                @Js
                def PyJsHoisted_afterWrite_(stream, state, finished, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'finished':finished, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'finished', 'stream', 'cb'])
                    if var.get('finished').neg():
                        var.get('onwriteDrain')(var.get('stream'), var.get('state'))
                    (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())-Js(1))+Js(1))
                    var.get('cb')()
                    var.get('finishMaybe')(var.get('stream'), var.get('state'))
                PyJsHoisted_afterWrite_.func_name = 'afterWrite'
                var.put('afterWrite', PyJsHoisted_afterWrite_)
                @Js
                def PyJsHoisted_onwriteDrain_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    if (_seq(var.get('state').get('length'),Js(0.0)) and var.get('state').get('needDrain')):
                        var.get('state').put('needDrain', Js(False))
                        var.get('stream').callprop('emit', Js('drain'))
                PyJsHoisted_onwriteDrain_.func_name = 'onwriteDrain'
                var.put('onwriteDrain', PyJsHoisted_onwriteDrain_)
                @Js
                def PyJsHoisted_clearBuffer_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['allBuffers', 'buffer', 'cb', 'len', 'count', 'l', 'state', 'entry', 'encoding', 'chunk', 'stream', 'holder'])
                    var.get('state').put('bufferProcessing', Js(True))
                    var.put('entry', var.get('state').get('bufferedRequest'))
                    if ((var.get('stream').get('_writev') and var.get('entry')) and var.get('entry').get('next')):
                        var.put('l', var.get('state').get('bufferedRequestCount'))
                        var.put('buffer', var.get('Array').create(var.get('l')))
                        var.put('holder', var.get('state').get('corkedRequestsFree'))
                        var.get('holder').put('entry', var.get('entry'))
                        var.put('count', Js(0.0))
                        var.put('allBuffers', Js(True))
                        while var.get('entry'):
                            var.get('buffer').put(var.get('count'), var.get('entry'))
                            if var.get('entry').get('isBuf').neg():
                                var.put('allBuffers', Js(False))
                            var.put('entry', var.get('entry').get('next'))
                            var.put('count', Js(1.0), '+')
                        var.get('buffer').put('allBuffers', var.get('allBuffers'))
                        var.get('doWrite')(var.get('stream'), var.get('state'), Js(True), var.get('state').get('length'), var.get('buffer'), Js(''), var.get('holder').get('finish'))
                        (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())+Js(1))-Js(1))
                        var.get('state').put('lastBufferedRequest', var.get(u"null"))
                        if var.get('holder').get('next'):
                            var.get('state').put('corkedRequestsFree', var.get('holder').get('next'))
                            var.get('holder').put('next', var.get(u"null"))
                        else:
                            var.get('state').put('corkedRequestsFree', var.get('CorkedRequest').create(var.get('state')))
                        var.get('state').put('bufferedRequestCount', Js(0.0))
                    else:
                        while var.get('entry'):
                            var.put('chunk', var.get('entry').get('chunk'))
                            var.put('encoding', var.get('entry').get('encoding'))
                            var.put('cb', var.get('entry').get('callback'))
                            var.put('len', (Js(1.0) if var.get('state').get('objectMode') else var.get('chunk').get('length')))
                            var.get('doWrite')(var.get('stream'), var.get('state'), Js(False), var.get('len'), var.get('chunk'), var.get('encoding'), var.get('cb'))
                            var.put('entry', var.get('entry').get('next'))
                            (var.get('state').put('bufferedRequestCount',Js(var.get('state').get('bufferedRequestCount').to_number())-Js(1))+Js(1))
                            if var.get('state').get('writing'):
                                break
                        if _seq(var.get('entry'),var.get(u"null")):
                            var.get('state').put('lastBufferedRequest', var.get(u"null"))
                    var.get('state').put('bufferedRequest', var.get('entry'))
                    var.get('state').put('bufferProcessing', Js(False))
                PyJsHoisted_clearBuffer_.func_name = 'clearBuffer'
                var.put('clearBuffer', PyJsHoisted_clearBuffer_)
                @Js
                def PyJsHoisted_needFinish_(state, this, arguments, var=var):
                    var = Scope({'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state'])
                    return ((((var.get('state').get('ending') and _seq(var.get('state').get('length'),Js(0.0))) and _seq(var.get('state').get('bufferedRequest'),var.get(u"null"))) and var.get('state').get('finished').neg()) and var.get('state').get('writing').neg())
                PyJsHoisted_needFinish_.func_name = 'needFinish'
                var.put('needFinish', PyJsHoisted_needFinish_)
                @Js
                def PyJsHoisted_callFinal_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    @Js
                    def PyJs_anonymous_685_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())-Js(1))+Js(1))
                        if var.get('err'):
                            var.get('errorOrDestroy')(var.get('stream'), var.get('err'))
                        var.get('state').put('prefinished', Js(True))
                        var.get('stream').callprop('emit', Js('prefinish'))
                        var.get('finishMaybe')(var.get('stream'), var.get('state'))
                    PyJs_anonymous_685_._set_name('anonymous')
                    var.get('stream').callprop('_final', PyJs_anonymous_685_)
                PyJsHoisted_callFinal_.func_name = 'callFinal'
                var.put('callFinal', PyJsHoisted_callFinal_)
                @Js
                def PyJsHoisted_prefinish_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream'])
                    if (var.get('state').get('prefinished').neg() and var.get('state').get('finalCalled').neg()):
                        if (_seq(var.get('stream').get('_final').typeof(),Js('function')) and var.get('state').get('destroyed').neg()):
                            (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())+Js(1))-Js(1))
                            var.get('state').put('finalCalled', Js(True))
                            var.get('process').callprop('nextTick', var.get('callFinal'), var.get('stream'), var.get('state'))
                        else:
                            var.get('state').put('prefinished', Js(True))
                            var.get('stream').callprop('emit', Js('prefinish'))
                PyJsHoisted_prefinish_.func_name = 'prefinish'
                var.put('prefinish', PyJsHoisted_prefinish_)
                @Js
                def PyJsHoisted_finishMaybe_(stream, state, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'this':this, 'arguments':arguments}, var)
                    var.registers(['need', 'state', 'rState', 'stream'])
                    var.put('need', var.get('needFinish')(var.get('state')))
                    if var.get('need'):
                        var.get('prefinish')(var.get('stream'), var.get('state'))
                        if _seq(var.get('state').get('pendingcb'),Js(0.0)):
                            var.get('state').put('finished', Js(True))
                            var.get('stream').callprop('emit', Js('finish'))
                            if var.get('state').get('autoDestroy'):
                                var.put('rState', var.get('stream').get('_readableState'))
                                if (var.get('rState').neg() or (var.get('rState').get('autoDestroy') and var.get('rState').get('endEmitted'))):
                                    var.get('stream').callprop('destroy')
                    return var.get('need')
                PyJsHoisted_finishMaybe_.func_name = 'finishMaybe'
                var.put('finishMaybe', PyJsHoisted_finishMaybe_)
                @Js
                def PyJsHoisted_endWritable_(stream, state, cb, this, arguments, var=var):
                    var = Scope({'stream':stream, 'state':state, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['state', 'stream', 'cb'])
                    var.get('state').put('ending', Js(True))
                    var.get('finishMaybe')(var.get('stream'), var.get('state'))
                    if var.get('cb'):
                        if var.get('state').get('finished'):
                            var.get('process').callprop('nextTick', var.get('cb'))
                        else:
                            var.get('stream').callprop('once', Js('finish'), var.get('cb'))
                    var.get('state').put('ended', Js(True))
                    var.get('stream').put('writable', Js(False))
                PyJsHoisted_endWritable_.func_name = 'endWritable'
                var.put('endWritable', PyJsHoisted_endWritable_)
                @Js
                def PyJsHoisted_onCorkedFinish_(corkReq, state, err, this, arguments, var=var):
                    var = Scope({'corkReq':corkReq, 'state':state, 'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['cb', 'state', 'entry', 'err', 'corkReq'])
                    var.put('entry', var.get('corkReq').get('entry'))
                    var.get('corkReq').put('entry', var.get(u"null"))
                    while var.get('entry'):
                        var.put('cb', var.get('entry').get('callback'))
                        (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())-Js(1))+Js(1))
                        var.get('cb')(var.get('err'))
                        var.put('entry', var.get('entry').get('next'))
                    var.get('state').get('corkedRequestsFree').put('next', var.get('corkReq'))
                PyJsHoisted_onCorkedFinish_.func_name = 'onCorkedFinish'
                var.put('onCorkedFinish', PyJsHoisted_onCorkedFinish_)
                Js('use strict')
                var.get('module').put('exports', var.get('Writable'))
                pass
                pass
                pass
                var.get('Writable').put('WritableState', var.get('WritableState'))
                var.put('internalUtil', Js({'deprecate':var.get('require')(Js('util-deprecate'))}))
                var.put('Stream', var.get('require')(Js('./internal/streams/stream')))
                var.put('Buffer', var.get('require')(Js('buffer')).get('Buffer'))
                @Js
                def PyJs_anonymous_668_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_668_._set_name('anonymous')
                var.put('OurUint8Array', (var.get('global').get('Uint8Array') or PyJs_anonymous_668_))
                pass
                pass
                var.put('destroyImpl', var.get('require')(Js('./internal/streams/destroy')))
                var.put('_require', var.get('require')(Js('./internal/streams/state')))
                var.put('getHighWaterMark', var.get('_require').get('getHighWaterMark'))
                var.put('_require$codes', var.get('require')(Js('../errors')).get('codes'))
                var.put('ERR_INVALID_ARG_TYPE', var.get('_require$codes').get('ERR_INVALID_ARG_TYPE'))
                var.put('ERR_METHOD_NOT_IMPLEMENTED', var.get('_require$codes').get('ERR_METHOD_NOT_IMPLEMENTED'))
                var.put('ERR_MULTIPLE_CALLBACK', var.get('_require$codes').get('ERR_MULTIPLE_CALLBACK'))
                var.put('ERR_STREAM_CANNOT_PIPE', var.get('_require$codes').get('ERR_STREAM_CANNOT_PIPE'))
                var.put('ERR_STREAM_DESTROYED', var.get('_require$codes').get('ERR_STREAM_DESTROYED'))
                var.put('ERR_STREAM_NULL_VALUES', var.get('_require$codes').get('ERR_STREAM_NULL_VALUES'))
                var.put('ERR_STREAM_WRITE_AFTER_END', var.get('_require$codes').get('ERR_STREAM_WRITE_AFTER_END'))
                var.put('ERR_UNKNOWN_ENCODING', var.get('_require$codes').get('ERR_UNKNOWN_ENCODING'))
                var.put('errorOrDestroy', var.get('destroyImpl').get('errorOrDestroy'))
                var.get('require')(Js('inherits'))(var.get('Writable'), var.get('Stream'))
                pass
                pass
                @Js
                def PyJs_getBuffer_670_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'getBuffer':PyJs_getBuffer_670_}, var)
                    var.registers(['out', 'current'])
                    var.put('current', var.get(u"this").get('bufferedRequest'))
                    var.put('out', Js([]))
                    while var.get('current'):
                        var.get('out').callprop('push', var.get('current'))
                        var.put('current', var.get('current').get('next'))
                    return var.get('out')
                PyJs_getBuffer_670_._set_name('getBuffer')
                var.get('WritableState').get('prototype').put('getBuffer', PyJs_getBuffer_670_)
                @Js
                def PyJs_anonymous_671_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    try:
                        @Js
                        def PyJs_writableStateBufferGetter_672_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'writableStateBufferGetter':PyJs_writableStateBufferGetter_672_}, var)
                            var.registers([])
                            return var.get(u"this").callprop('getBuffer')
                        PyJs_writableStateBufferGetter_672_._set_name('writableStateBufferGetter')
                        var.get('Object').callprop('defineProperty', var.get('WritableState').get('prototype'), Js('buffer'), Js({'get':var.get('internalUtil').callprop('deprecate', PyJs_writableStateBufferGetter_672_, (Js('_writableState.buffer is deprecated. Use _writableState.getBuffer ')+Js('instead.')), Js('DEP0003'))}))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_5f_66964052 = var.own.get('_')
                        var.force_own_put('_', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_5f_66964052 is not None:
                                var.own['_'] = PyJsHolder_5f_66964052
                            else:
                                del var.own['_']
                            del PyJsHolder_5f_66964052
                PyJs_anonymous_671_._set_name('anonymous')
                PyJs_anonymous_671_()
                pass
                if ((_seq(var.get('Symbol',throw=False).typeof(),Js('function')) and var.get('Symbol').get('hasInstance')) and _seq(var.get('Function').get('prototype').get(var.get('Symbol').get('hasInstance')).typeof(),Js('function'))):
                    var.put('realHasInstance', var.get('Function').get('prototype').get(var.get('Symbol').get('hasInstance')))
                    @Js
                    def PyJs_value_673_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments, 'value':PyJs_value_673_}, var)
                        var.registers(['object'])
                        if var.get('realHasInstance').callprop('call', var.get(u"this"), var.get('object')):
                            return Js(True)
                        if PyJsStrictNeq(var.get(u"this"),var.get('Writable')):
                            return Js(False)
                        return (var.get('object') and var.get('object').get('_writableState').instanceof(var.get('WritableState')))
                    PyJs_value_673_._set_name('value')
                    var.get('Object').callprop('defineProperty', var.get('Writable'), var.get('Symbol').get('hasInstance'), Js({'value':PyJs_value_673_}))
                else:
                    @Js
                    def PyJs_realHasInstance_674_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments, 'realHasInstance':PyJs_realHasInstance_674_}, var)
                        var.registers(['object'])
                        return var.get('object').instanceof(var.get(u"this"))
                    PyJs_realHasInstance_674_._set_name('realHasInstance')
                    var.put('realHasInstance', PyJs_realHasInstance_674_)
                pass
                @Js
                def PyJs_anonymous_675_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('errorOrDestroy')(var.get(u"this"), var.get('ERR_STREAM_CANNOT_PIPE').create())
                PyJs_anonymous_675_._set_name('anonymous')
                var.get('Writable').get('prototype').put('pipe', PyJs_anonymous_675_)
                pass
                pass
                @Js
                def PyJs_anonymous_676_(chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['cb', 'isBuf', 'state', 'encoding', 'chunk', 'ret'])
                    var.put('state', var.get(u"this").get('_writableState'))
                    var.put('ret', Js(False))
                    var.put('isBuf', (var.get('state').get('objectMode').neg() and var.get('_isUint8Array')(var.get('chunk'))))
                    if (var.get('isBuf') and var.get('Buffer').callprop('isBuffer', var.get('chunk')).neg()):
                        var.put('chunk', var.get('_uint8ArrayToBuffer')(var.get('chunk')))
                    if _seq(var.get('encoding',throw=False).typeof(),Js('function')):
                        var.put('cb', var.get('encoding'))
                        var.put('encoding', var.get(u"null"))
                    if var.get('isBuf'):
                        var.put('encoding', Js('buffer'))
                    else:
                        if var.get('encoding').neg():
                            var.put('encoding', var.get('state').get('defaultEncoding'))
                    if PyJsStrictNeq(var.get('cb',throw=False).typeof(),Js('function')):
                        var.put('cb', var.get('nop'))
                    if var.get('state').get('ending'):
                        var.get('writeAfterEnd')(var.get(u"this"), var.get('cb'))
                    else:
                        if (var.get('isBuf') or var.get('validChunk')(var.get(u"this"), var.get('state'), var.get('chunk'), var.get('cb'))):
                            (var.get('state').put('pendingcb',Js(var.get('state').get('pendingcb').to_number())+Js(1))-Js(1))
                            var.put('ret', var.get('writeOrBuffer')(var.get(u"this"), var.get('state'), var.get('isBuf'), var.get('chunk'), var.get('encoding'), var.get('cb')))
                    return var.get('ret')
                PyJs_anonymous_676_._set_name('anonymous')
                var.get('Writable').get('prototype').put('write', PyJs_anonymous_676_)
                @Js
                def PyJs_anonymous_677_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    (var.get(u"this").get('_writableState').put('corked',Js(var.get(u"this").get('_writableState').get('corked').to_number())+Js(1))-Js(1))
                PyJs_anonymous_677_._set_name('anonymous')
                var.get('Writable').get('prototype').put('cork', PyJs_anonymous_677_)
                @Js
                def PyJs_anonymous_678_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['state'])
                    var.put('state', var.get(u"this").get('_writableState'))
                    if var.get('state').get('corked'):
                        (var.get('state').put('corked',Js(var.get('state').get('corked').to_number())-Js(1))+Js(1))
                        if (((var.get('state').get('writing').neg() and var.get('state').get('corked').neg()) and var.get('state').get('bufferProcessing').neg()) and var.get('state').get('bufferedRequest')):
                            var.get('clearBuffer')(var.get(u"this"), var.get('state'))
                PyJs_anonymous_678_._set_name('anonymous')
                var.get('Writable').get('prototype').put('uncork', PyJs_anonymous_678_)
                @Js
                def PyJs_setDefaultEncoding_679_(encoding, this, arguments, var=var):
                    var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments, 'setDefaultEncoding':PyJs_setDefaultEncoding_679_}, var)
                    var.registers(['encoding'])
                    if _seq(var.get('encoding',throw=False).typeof(),Js('string')):
                        var.put('encoding', var.get('encoding').callprop('toLowerCase'))
                    if (Js([Js('hex'), Js('utf8'), Js('utf-8'), Js('ascii'), Js('binary'), Js('base64'), Js('ucs2'), Js('ucs-2'), Js('utf16le'), Js('utf-16le'), Js('raw')]).callprop('indexOf', (var.get('encoding')+Js('')).callprop('toLowerCase'))>(-Js(1.0))).neg():
                        PyJsTempException = JsToPyException(var.get('ERR_UNKNOWN_ENCODING').create(var.get('encoding')))
                        raise PyJsTempException
                    var.get(u"this").get('_writableState').put('defaultEncoding', var.get('encoding'))
                    return var.get(u"this")
                PyJs_setDefaultEncoding_679_._set_name('setDefaultEncoding')
                var.get('Writable').get('prototype').put('setDefaultEncoding', PyJs_setDefaultEncoding_679_)
                @Js
                def PyJs_get_680_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_680_}, var)
                    var.registers([])
                    return (var.get(u"this").get('_writableState') and var.get(u"this").get('_writableState').callprop('getBuffer'))
                PyJs_get_680_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Writable').get('prototype'), Js('writableBuffer'), Js({'enumerable':Js(False),'get':PyJs_get_680_}))
                pass
                @Js
                def PyJs_get_681_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_681_}, var)
                    var.registers([])
                    return var.get(u"this").get('_writableState').get('highWaterMark')
                PyJs_get_681_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Writable').get('prototype'), Js('writableHighWaterMark'), Js({'enumerable':Js(False),'get':PyJs_get_681_}))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_682_(chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk', 'encoding', 'cb'])
                    var.get('cb')(var.get('ERR_METHOD_NOT_IMPLEMENTED').create(Js('_write()')))
                PyJs_anonymous_682_._set_name('anonymous')
                var.get('Writable').get('prototype').put('_write', PyJs_anonymous_682_)
                var.get('Writable').get('prototype').put('_writev', var.get(u"null"))
                @Js
                def PyJs_anonymous_683_(chunk, encoding, cb, this, arguments, var=var):
                    var = Scope({'chunk':chunk, 'encoding':encoding, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chunk', 'state', 'encoding', 'cb'])
                    var.put('state', var.get(u"this").get('_writableState'))
                    if _seq(var.get('chunk',throw=False).typeof(),Js('function')):
                        var.put('cb', var.get('chunk'))
                        var.put('chunk', var.get(u"null"))
                        var.put('encoding', var.get(u"null"))
                    else:
                        if _seq(var.get('encoding',throw=False).typeof(),Js('function')):
                            var.put('cb', var.get('encoding'))
                            var.put('encoding', var.get(u"null"))
                    if (PyJsStrictNeq(var.get('chunk'),var.get(u"null")) and PyJsStrictNeq(var.get('chunk'),var.get('undefined'))):
                        var.get(u"this").callprop('write', var.get('chunk'), var.get('encoding'))
                    if var.get('state').get('corked'):
                        var.get('state').put('corked', Js(1.0))
                        var.get(u"this").callprop('uncork')
                    if var.get('state').get('ending').neg():
                        var.get('endWritable')(var.get(u"this"), var.get('state'), var.get('cb'))
                    return var.get(u"this")
                PyJs_anonymous_683_._set_name('anonymous')
                var.get('Writable').get('prototype').put('end', PyJs_anonymous_683_)
                @Js
                def PyJs_get_684_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_684_}, var)
                    var.registers([])
                    return var.get(u"this").get('_writableState').get('length')
                PyJs_get_684_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Writable').get('prototype'), Js('writableLength'), Js({'enumerable':Js(False),'get':PyJs_get_684_}))
                pass
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_get_686_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_686_}, var)
                    var.registers([])
                    if _seq(var.get(u"this").get('_writableState'),var.get('undefined')):
                        return Js(False)
                    return var.get(u"this").get('_writableState').get('destroyed')
                PyJs_get_686_._set_name('get')
                @Js
                def PyJs_set_687_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_687_}, var)
                    var.registers(['value'])
                    if var.get(u"this").get('_writableState').neg():
                        return var.get('undefined')
                    var.get(u"this").get('_writableState').put('destroyed', var.get('value'))
                PyJs_set_687_._set_name('set')
                var.get('Object').callprop('defineProperty', var.get('Writable').get('prototype'), Js('destroyed'), Js({'enumerable':Js(False),'get':PyJs_get_686_,'set':PyJs_set_687_}))
                var.get('Writable').get('prototype').put('destroy', var.get('destroyImpl').get('destroy'))
                var.get('Writable').get('prototype').put('_undestroy', var.get('destroyImpl').get('undestroy'))
                @Js
                def PyJs_anonymous_688_(err, cb, this, arguments, var=var):
                    var = Scope({'err':err, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'cb'])
                    var.get('cb')(var.get('err'))
                PyJs_anonymous_688_._set_name('anonymous')
                var.get('Writable').get('prototype').put('_destroy', PyJs_anonymous_688_)
            PyJs_anonymous_666_._set_name('anonymous')
            PyJs_anonymous_666_.callprop('call', var.get(u"this"))
        PyJs_anonymous_665_._set_name('anonymous')
        PyJs_anonymous_665_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_664_._set_name('anonymous')
    @Js
    def PyJs_anonymous_689_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_690_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_691_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['onReadable', 'wrapForNext', '_defineProperty', 'finished', '_Object$setPrototypeO', 'kLastPromise', 'AsyncIteratorPrototype', 'kHandlePromise', 'createIterResult', 'kEnded', 'kLastReject', 'kError', 'kStream', 'createReadableStreamAsyncIterator', 'readAndResolve', 'ReadableStreamAsyncIteratorPrototype', 'kLastResolve'])
                @Js
                def PyJsHoisted__defineProperty_(obj, key, value, this, arguments, var=var):
                    var = Scope({'obj':obj, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key', 'value', 'obj'])
                    if var.get('obj').contains(var.get('key')):
                        var.get('Object').callprop('defineProperty', var.get('obj'), var.get('key'), Js({'value':var.get('value'),'enumerable':Js(True),'configurable':Js(True),'writable':Js(True)}))
                    else:
                        var.get('obj').put(var.get('key'), var.get('value'))
                    return var.get('obj')
                PyJsHoisted__defineProperty_.func_name = '_defineProperty'
                var.put('_defineProperty', PyJsHoisted__defineProperty_)
                @Js
                def PyJsHoisted_createIterResult_(value, done, this, arguments, var=var):
                    var = Scope({'value':value, 'done':done, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value', 'done'])
                    return Js({'value':var.get('value'),'done':var.get('done')})
                PyJsHoisted_createIterResult_.func_name = 'createIterResult'
                var.put('createIterResult', PyJsHoisted_createIterResult_)
                @Js
                def PyJsHoisted_readAndResolve_(iter, this, arguments, var=var):
                    var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['resolve', 'iter', 'data'])
                    var.put('resolve', var.get('iter').get(var.get('kLastResolve')))
                    if PyJsStrictNeq(var.get('resolve'),var.get(u"null")):
                        var.put('data', var.get('iter').get(var.get('kStream')).callprop('read'))
                        if PyJsStrictNeq(var.get('data'),var.get(u"null")):
                            var.get('iter').put(var.get('kLastPromise'), var.get(u"null"))
                            var.get('iter').put(var.get('kLastResolve'), var.get(u"null"))
                            var.get('iter').put(var.get('kLastReject'), var.get(u"null"))
                            var.get('resolve')(var.get('createIterResult')(var.get('data'), Js(False)))
                PyJsHoisted_readAndResolve_.func_name = 'readAndResolve'
                var.put('readAndResolve', PyJsHoisted_readAndResolve_)
                @Js
                def PyJsHoisted_onReadable_(iter, this, arguments, var=var):
                    var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['iter'])
                    var.get('process').callprop('nextTick', var.get('readAndResolve'), var.get('iter'))
                PyJsHoisted_onReadable_.func_name = 'onReadable'
                var.put('onReadable', PyJsHoisted_onReadable_)
                @Js
                def PyJsHoisted_wrapForNext_(lastPromise, iter, this, arguments, var=var):
                    var = Scope({'lastPromise':lastPromise, 'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['iter', 'lastPromise'])
                    @Js
                    def PyJs_anonymous_692_(resolve, reject, this, arguments, var=var):
                        var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                        var.registers(['resolve', 'reject'])
                        @Js
                        def PyJs_anonymous_693_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            if var.get('iter').get(var.get('kEnded')):
                                var.get('resolve')(var.get('createIterResult')(var.get('undefined'), Js(True)))
                                return var.get('undefined')
                            var.get('iter').callprop(var.get('kHandlePromise'), var.get('resolve'), var.get('reject'))
                        PyJs_anonymous_693_._set_name('anonymous')
                        var.get('lastPromise').callprop('then', PyJs_anonymous_693_, var.get('reject'))
                    PyJs_anonymous_692_._set_name('anonymous')
                    return PyJs_anonymous_692_
                PyJsHoisted_wrapForNext_.func_name = 'wrapForNext'
                var.put('wrapForNext', PyJsHoisted_wrapForNext_)
                Js('use strict')
                pass
                pass
                var.put('finished', var.get('require')(Js('./end-of-stream')))
                var.put('kLastResolve', var.get('Symbol')(Js('lastResolve')))
                var.put('kLastReject', var.get('Symbol')(Js('lastReject')))
                var.put('kError', var.get('Symbol')(Js('error')))
                var.put('kEnded', var.get('Symbol')(Js('ended')))
                var.put('kLastPromise', var.get('Symbol')(Js('lastPromise')))
                var.put('kHandlePromise', var.get('Symbol')(Js('handlePromise')))
                var.put('kStream', var.get('Symbol')(Js('stream')))
                pass
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_694_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_694_._set_name('anonymous')
                var.put('AsyncIteratorPrototype', var.get('Object').callprop('getPrototypeOf', PyJs_anonymous_694_))
                def PyJs_LONG_704_(var=var):
                    def PyJs_Object_695_():
                        @Js
                        def PyJs_next_697_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_697_}, var)
                            var.registers(['promise', '_this', 'lastPromise', 'error', 'data'])
                            var.put('_this', var.get(u"this"))
                            var.put('error', var.get(u"this").get(var.get('kError')))
                            if PyJsStrictNeq(var.get('error'),var.get(u"null")):
                                return var.get('Promise').callprop('reject', var.get('error'))
                            if var.get(u"this").get(var.get('kEnded')):
                                return var.get('Promise').callprop('resolve', var.get('createIterResult')(var.get('undefined'), Js(True)))
                            if var.get(u"this").get(var.get('kStream')).get('destroyed'):
                                @Js
                                def PyJs_anonymous_698_(resolve, reject, this, arguments, var=var):
                                    var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['resolve', 'reject'])
                                    @Js
                                    def PyJs_anonymous_699_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        if var.get('_this').get(var.get('kError')):
                                            var.get('reject')(var.get('_this').get(var.get('kError')))
                                        else:
                                            var.get('resolve')(var.get('createIterResult')(var.get('undefined'), Js(True)))
                                    PyJs_anonymous_699_._set_name('anonymous')
                                    var.get('process').callprop('nextTick', PyJs_anonymous_699_)
                                PyJs_anonymous_698_._set_name('anonymous')
                                return var.get('Promise').create(PyJs_anonymous_698_)
                            var.put('lastPromise', var.get(u"this").get(var.get('kLastPromise')))
                            pass
                            if var.get('lastPromise'):
                                var.put('promise', var.get('Promise').create(var.get('wrapForNext')(var.get('lastPromise'), var.get(u"this"))))
                            else:
                                var.put('data', var.get(u"this").get(var.get('kStream')).callprop('read'))
                                if PyJsStrictNeq(var.get('data'),var.get(u"null")):
                                    return var.get('Promise').callprop('resolve', var.get('createIterResult')(var.get('data'), Js(False)))
                                var.put('promise', var.get('Promise').create(var.get(u"this").get(var.get('kHandlePromise'))))
                            var.get(u"this").put(var.get('kLastPromise'), var.get('promise'))
                            return var.get('promise')
                        PyJs_next_697_._set_name('next')
                        PyJs_Object_695_ = Js({'next':PyJs_next_697_})
                        @Js
                        def PyJs_anonymous_696_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get(u"this").get(var.get('kStream'))
                        PyJs_anonymous_696_._set_name('anonymous')
                        PyJs_Object_695_.define_own_property('stream', {"get":PyJs_anonymous_696_, "configurable":True, "enumerable":True})
                        return PyJs_Object_695_
                    @Js
                    def PyJs_anonymous_700_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJs_anonymous_700_._set_name('anonymous')
                    @Js
                    def PyJs__return_701_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, '_return':PyJs__return_701_}, var)
                        var.registers(['_this2'])
                        var.put('_this2', var.get(u"this"))
                        @Js
                        def PyJs_anonymous_702_(resolve, reject, this, arguments, var=var):
                            var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                            var.registers(['resolve', 'reject'])
                            @Js
                            def PyJs_anonymous_703_(err, this, arguments, var=var):
                                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                                var.registers(['err'])
                                if var.get('err'):
                                    var.get('reject')(var.get('err'))
                                    return var.get('undefined')
                                var.get('resolve')(var.get('createIterResult')(var.get('undefined'), Js(True)))
                            PyJs_anonymous_703_._set_name('anonymous')
                            var.get('_this2').get(var.get('kStream')).callprop('destroy', var.get(u"null"), PyJs_anonymous_703_)
                        PyJs_anonymous_702_._set_name('anonymous')
                        return var.get('Promise').create(PyJs_anonymous_702_)
                    PyJs__return_701_._set_name('_return')
                    return var.get('Object').callprop('setPrototypeOf', PyJsComma(PyJsComma(PyJsComma(var.put('_Object$setPrototypeO', PyJs_Object_695_()),var.get('_defineProperty')(var.get('_Object$setPrototypeO'), var.get('Symbol').get('asyncIterator'), PyJs_anonymous_700_)),var.get('_defineProperty')(var.get('_Object$setPrototypeO'), Js('return'), PyJs__return_701_)),var.get('_Object$setPrototypeO')), var.get('AsyncIteratorPrototype'))
                var.put('ReadableStreamAsyncIteratorPrototype', PyJs_LONG_704_())
                @Js
                def PyJs_createReadableStreamAsyncIterator_705_(stream, this, arguments, var=var):
                    var = Scope({'stream':stream, 'this':this, 'arguments':arguments, 'createReadableStreamAsyncIterator':PyJs_createReadableStreamAsyncIterator_705_}, var)
                    var.registers(['stream', 'iterator', '_Object$create'])
                    pass
                    def PyJs_LONG_707_(var=var):
                        @Js
                        def PyJs_value_706_(resolve, reject, this, arguments, var=var):
                            var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments, 'value':PyJs_value_706_}, var)
                            var.registers(['resolve', 'data', 'reject'])
                            var.put('data', var.get('iterator').get(var.get('kStream')).callprop('read'))
                            if var.get('data'):
                                var.get('iterator').put(var.get('kLastPromise'), var.get(u"null"))
                                var.get('iterator').put(var.get('kLastResolve'), var.get(u"null"))
                                var.get('iterator').put(var.get('kLastReject'), var.get(u"null"))
                                var.get('resolve')(var.get('createIterResult')(var.get('data'), Js(False)))
                            else:
                                var.get('iterator').put(var.get('kLastResolve'), var.get('resolve'))
                                var.get('iterator').put(var.get('kLastReject'), var.get('reject'))
                        PyJs_value_706_._set_name('value')
                        return PyJsComma(PyJsComma(PyJsComma(PyJsComma(PyJsComma(PyJsComma(PyJsComma(var.put('_Object$create', Js({})),var.get('_defineProperty')(var.get('_Object$create'), var.get('kStream'), Js({'value':var.get('stream'),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kLastResolve'), Js({'value':var.get(u"null"),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kLastReject'), Js({'value':var.get(u"null"),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kError'), Js({'value':var.get(u"null"),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kEnded'), Js({'value':var.get('stream').get('_readableState').get('endEmitted'),'writable':Js(True)}))),var.get('_defineProperty')(var.get('_Object$create'), var.get('kHandlePromise'), Js({'value':PyJs_value_706_,'writable':Js(True)}))),var.get('_Object$create'))
                    var.put('iterator', var.get('Object').callprop('create', var.get('ReadableStreamAsyncIteratorPrototype'), PyJs_LONG_707_()))
                    var.get('iterator').put(var.get('kLastPromise'), var.get(u"null"))
                    @Js
                    def PyJs_anonymous_708_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['resolve', 'err', 'reject'])
                        if (var.get('err') and PyJsStrictNeq(var.get('err').get('code'),Js('ERR_STREAM_PREMATURE_CLOSE'))):
                            var.put('reject', var.get('iterator').get(var.get('kLastReject')))
                            if PyJsStrictNeq(var.get('reject'),var.get(u"null")):
                                var.get('iterator').put(var.get('kLastPromise'), var.get(u"null"))
                                var.get('iterator').put(var.get('kLastResolve'), var.get(u"null"))
                                var.get('iterator').put(var.get('kLastReject'), var.get(u"null"))
                                var.get('reject')(var.get('err'))
                            var.get('iterator').put(var.get('kError'), var.get('err'))
                            return var.get('undefined')
                        var.put('resolve', var.get('iterator').get(var.get('kLastResolve')))
                        if PyJsStrictNeq(var.get('resolve'),var.get(u"null")):
                            var.get('iterator').put(var.get('kLastPromise'), var.get(u"null"))
                            var.get('iterator').put(var.get('kLastResolve'), var.get(u"null"))
                            var.get('iterator').put(var.get('kLastReject'), var.get(u"null"))
                            var.get('resolve')(var.get('createIterResult')(var.get('undefined'), Js(True)))
                        var.get('iterator').put(var.get('kEnded'), Js(True))
                    PyJs_anonymous_708_._set_name('anonymous')
                    var.get('finished')(var.get('stream'), PyJs_anonymous_708_)
                    var.get('stream').callprop('on', Js('readable'), var.get('onReadable').callprop('bind', var.get(u"null"), var.get('iterator')))
                    return var.get('iterator')
                PyJs_createReadableStreamAsyncIterator_705_._set_name('createReadableStreamAsyncIterator')
                var.put('createReadableStreamAsyncIterator', PyJs_createReadableStreamAsyncIterator_705_)
                var.get('module').put('exports', var.get('createReadableStreamAsyncIterator'))
            PyJs_anonymous_691_._set_name('anonymous')
            PyJs_anonymous_691_.callprop('call', var.get(u"this"))
        PyJs_anonymous_690_._set_name('anonymous')
        PyJs_anonymous_690_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_689_._set_name('anonymous')
    @Js
    def PyJs_anonymous_709_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', '_createClass', '_defineProperty', 'Buffer', 'require', 'module', 'copyBuffer', 'ownKeys', 'inspect', '_objectSpread', '_classCallCheck', '_require', 'custom', '_require2', '_defineProperties'])
        @Js
        def PyJsHoisted_ownKeys_(object, enumerableOnly, this, arguments, var=var):
            var = Scope({'object':object, 'enumerableOnly':enumerableOnly, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'keys', 'enumerableOnly', 'symbols'])
            var.put('keys', var.get('Object').callprop('keys', var.get('object')))
            if var.get('Object').get('getOwnPropertySymbols'):
                var.put('symbols', var.get('Object').callprop('getOwnPropertySymbols', var.get('object')))
                if var.get('enumerableOnly'):
                    @Js
                    def PyJs_anonymous_710_(sym, this, arguments, var=var):
                        var = Scope({'sym':sym, 'this':this, 'arguments':arguments}, var)
                        var.registers(['sym'])
                        return var.get('Object').callprop('getOwnPropertyDescriptor', var.get('object'), var.get('sym')).get('enumerable')
                    PyJs_anonymous_710_._set_name('anonymous')
                    var.put('symbols', var.get('symbols').callprop('filter', PyJs_anonymous_710_))
                var.get('keys').get('push').callprop('apply', var.get('keys'), var.get('symbols'))
            return var.get('keys')
        PyJsHoisted_ownKeys_.func_name = 'ownKeys'
        var.put('ownKeys', PyJsHoisted_ownKeys_)
        @Js
        def PyJsHoisted__objectSpread_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'target', 'source'])
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.put('source', (var.get('arguments').get(var.get('i')) if (var.get('arguments').get(var.get('i'))!=var.get(u"null")) else Js({})))
                    if (var.get('i')%Js(2.0)):
                        @Js
                        def PyJs_anonymous_711_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            var.get('_defineProperty')(var.get('target'), var.get('key'), var.get('source').get(var.get('key')))
                        PyJs_anonymous_711_._set_name('anonymous')
                        var.get('ownKeys')(var.get('Object')(var.get('source')), Js(True)).callprop('forEach', PyJs_anonymous_711_)
                    else:
                        if var.get('Object').get('getOwnPropertyDescriptors'):
                            var.get('Object').callprop('defineProperties', var.get('target'), var.get('Object').callprop('getOwnPropertyDescriptors', var.get('source')))
                        else:
                            @Js
                            def PyJs_anonymous_712_(key, this, arguments, var=var):
                                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                                var.registers(['key'])
                                var.get('Object').callprop('defineProperty', var.get('target'), var.get('key'), var.get('Object').callprop('getOwnPropertyDescriptor', var.get('source'), var.get('key')))
                            PyJs_anonymous_712_._set_name('anonymous')
                            var.get('ownKeys')(var.get('Object')(var.get('source'))).callprop('forEach', PyJs_anonymous_712_)
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('target')
        PyJsHoisted__objectSpread_.func_name = '_objectSpread'
        var.put('_objectSpread', PyJsHoisted__objectSpread_)
        @Js
        def PyJsHoisted__defineProperty_(obj, key, value, this, arguments, var=var):
            var = Scope({'obj':obj, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'value', 'obj'])
            if var.get('obj').contains(var.get('key')):
                var.get('Object').callprop('defineProperty', var.get('obj'), var.get('key'), Js({'value':var.get('value'),'enumerable':Js(True),'configurable':Js(True),'writable':Js(True)}))
            else:
                var.get('obj').put(var.get('key'), var.get('value'))
            return var.get('obj')
        PyJsHoisted__defineProperty_.func_name = '_defineProperty'
        var.put('_defineProperty', PyJsHoisted__defineProperty_)
        @Js
        def PyJsHoisted__classCallCheck_(instance, Constructor, this, arguments, var=var):
            var = Scope({'instance':instance, 'Constructor':Constructor, 'this':this, 'arguments':arguments}, var)
            var.registers(['Constructor', 'instance'])
            if var.get('instance').instanceof(var.get('Constructor')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Cannot call a class as a function')))
                raise PyJsTempException
        PyJsHoisted__classCallCheck_.func_name = '_classCallCheck'
        var.put('_classCallCheck', PyJsHoisted__classCallCheck_)
        @Js
        def PyJsHoisted__defineProperties_(target, props, this, arguments, var=var):
            var = Scope({'target':target, 'props':props, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'target', 'descriptor', 'props'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('props').get('length')):
                try:
                    var.put('descriptor', var.get('props').get(var.get('i')))
                    var.get('descriptor').put('enumerable', (var.get('descriptor').get('enumerable') or Js(False)))
                    var.get('descriptor').put('configurable', Js(True))
                    if var.get('descriptor').contains(Js('value')):
                        var.get('descriptor').put('writable', Js(True))
                    var.get('Object').callprop('defineProperty', var.get('target'), var.get('descriptor').get('key'), var.get('descriptor'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted__defineProperties_.func_name = '_defineProperties'
        var.put('_defineProperties', PyJsHoisted__defineProperties_)
        @Js
        def PyJsHoisted__createClass_(Constructor, protoProps, staticProps, this, arguments, var=var):
            var = Scope({'Constructor':Constructor, 'protoProps':protoProps, 'staticProps':staticProps, 'this':this, 'arguments':arguments}, var)
            var.registers(['Constructor', 'protoProps', 'staticProps'])
            if var.get('protoProps'):
                var.get('_defineProperties')(var.get('Constructor').get('prototype'), var.get('protoProps'))
            if var.get('staticProps'):
                var.get('_defineProperties')(var.get('Constructor'), var.get('staticProps'))
            return var.get('Constructor')
        PyJsHoisted__createClass_.func_name = '_createClass'
        var.put('_createClass', PyJsHoisted__createClass_)
        @Js
        def PyJsHoisted_copyBuffer_(src, target, offset, this, arguments, var=var):
            var = Scope({'src':src, 'target':target, 'offset':offset, 'this':this, 'arguments':arguments}, var)
            var.registers(['src', 'target', 'offset'])
            var.get('Buffer').get('prototype').get('copy').callprop('call', var.get('src'), var.get('target'), var.get('offset'))
        PyJsHoisted_copyBuffer_.func_name = 'copyBuffer'
        var.put('copyBuffer', PyJsHoisted_copyBuffer_)
        Js('use strict')
        pass
        pass
        pass
        pass
        pass
        pass
        var.put('_require', var.get('require')(Js('buffer')))
        var.put('Buffer', var.get('_require').get('Buffer'))
        var.put('_require2', var.get('require')(Js('util')))
        var.put('inspect', var.get('_require2').get('inspect'))
        var.put('custom', ((var.get('inspect') and var.get('inspect').get('custom')) or Js('inspect')))
        pass
        @Js
        def PyJs_anonymous_713_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['BufferList'])
            @Js
            def PyJsHoisted_BufferList_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('_classCallCheck')(var.get(u"this"), var.get('BufferList'))
                var.get(u"this").put('head', var.get(u"null"))
                var.get(u"this").put('tail', var.get(u"null"))
                var.get(u"this").put('length', Js(0.0))
            PyJsHoisted_BufferList_.func_name = 'BufferList'
            var.put('BufferList', PyJsHoisted_BufferList_)
            pass
            def PyJs_LONG_725_(var=var):
                @Js
                def PyJs_push_714_(v, this, arguments, var=var):
                    var = Scope({'v':v, 'this':this, 'arguments':arguments, 'push':PyJs_push_714_}, var)
                    var.registers(['v', 'entry'])
                    var.put('entry', Js({'data':var.get('v'),'next':var.get(u"null")}))
                    if (var.get(u"this").get('length')>Js(0.0)):
                        var.get(u"this").get('tail').put('next', var.get('entry'))
                    else:
                        var.get(u"this").put('head', var.get('entry'))
                    var.get(u"this").put('tail', var.get('entry'))
                    var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))
                PyJs_push_714_._set_name('push')
                @Js
                def PyJs_unshift_715_(v, this, arguments, var=var):
                    var = Scope({'v':v, 'this':this, 'arguments':arguments, 'unshift':PyJs_unshift_715_}, var)
                    var.registers(['v', 'entry'])
                    var.put('entry', Js({'data':var.get('v'),'next':var.get(u"this").get('head')}))
                    if _seq(var.get(u"this").get('length'),Js(0.0)):
                        var.get(u"this").put('tail', var.get('entry'))
                    var.get(u"this").put('head', var.get('entry'))
                    var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())+Js(1))
                PyJs_unshift_715_._set_name('unshift')
                @Js
                def PyJs_shift_716_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'shift':PyJs_shift_716_}, var)
                    var.registers(['ret'])
                    if _seq(var.get(u"this").get('length'),Js(0.0)):
                        return var.get('undefined')
                    var.put('ret', var.get(u"this").get('head').get('data'))
                    if _seq(var.get(u"this").get('length'),Js(1.0)):
                        var.get(u"this").put('head', var.get(u"this").put('tail', var.get(u"null")))
                    else:
                        var.get(u"this").put('head', var.get(u"this").get('head').get('next'))
                    var.get(u"this").put('length',Js(var.get(u"this").get('length').to_number())-Js(1))
                    return var.get('ret')
                PyJs_shift_716_._set_name('shift')
                @Js
                def PyJs_clear_717_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'clear':PyJs_clear_717_}, var)
                    var.registers([])
                    var.get(u"this").put('head', var.get(u"this").put('tail', var.get(u"null")))
                    var.get(u"this").put('length', Js(0.0))
                PyJs_clear_717_._set_name('clear')
                @Js
                def PyJs_join_718_(s, this, arguments, var=var):
                    var = Scope({'s':s, 'this':this, 'arguments':arguments, 'join':PyJs_join_718_}, var)
                    var.registers(['s', 'ret', 'p'])
                    if _seq(var.get(u"this").get('length'),Js(0.0)):
                        return Js('')
                    var.put('p', var.get(u"this").get('head'))
                    var.put('ret', (Js('')+var.get('p').get('data')))
                    while var.put('p', var.get('p').get('next')):
                        var.put('ret', (var.get('s')+var.get('p').get('data')), '+')
                    return var.get('ret')
                PyJs_join_718_._set_name('join')
                @Js
                def PyJs_concat_719_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments, 'concat':PyJs_concat_719_}, var)
                    var.registers(['i', 'ret', 'n', 'p'])
                    if _seq(var.get(u"this").get('length'),Js(0.0)):
                        return var.get('Buffer').callprop('alloc', Js(0.0))
                    var.put('ret', var.get('Buffer').callprop('allocUnsafe', PyJsBshift(var.get('n'),Js(0.0))))
                    var.put('p', var.get(u"this").get('head'))
                    var.put('i', Js(0.0))
                    while var.get('p'):
                        var.get('copyBuffer')(var.get('p').get('data'), var.get('ret'), var.get('i'))
                        var.put('i', var.get('p').get('data').get('length'), '+')
                        var.put('p', var.get('p').get('next'))
                    return var.get('ret')
                PyJs_concat_719_._set_name('concat')
                @Js
                def PyJs_consume_720_(n, hasStrings, this, arguments, var=var):
                    var = Scope({'n':n, 'hasStrings':hasStrings, 'this':this, 'arguments':arguments, 'consume':PyJs_consume_720_}, var)
                    var.registers(['hasStrings', 'ret', 'n'])
                    pass
                    if (var.get('n')<var.get(u"this").get('head').get('data').get('length')):
                        var.put('ret', var.get(u"this").get('head').get('data').callprop('slice', Js(0.0), var.get('n')))
                        var.get(u"this").get('head').put('data', var.get(u"this").get('head').get('data').callprop('slice', var.get('n')))
                    else:
                        if _seq(var.get('n'),var.get(u"this").get('head').get('data').get('length')):
                            var.put('ret', var.get(u"this").callprop('shift'))
                        else:
                            var.put('ret', (var.get(u"this").callprop('_getString', var.get('n')) if var.get('hasStrings') else var.get(u"this").callprop('_getBuffer', var.get('n'))))
                    return var.get('ret')
                PyJs_consume_720_._set_name('consume')
                @Js
                def PyJs_first_721_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'first':PyJs_first_721_}, var)
                    var.registers([])
                    return var.get(u"this").get('head').get('data')
                PyJs_first_721_._set_name('first')
                @Js
                def PyJs__getString_722_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments, '_getString':PyJs__getString_722_}, var)
                    var.registers(['str', 'c', 'n', 'p', 'ret', 'nb'])
                    var.put('p', var.get(u"this").get('head'))
                    var.put('c', Js(1.0))
                    var.put('ret', var.get('p').get('data'))
                    var.put('n', var.get('ret').get('length'), '-')
                    while var.put('p', var.get('p').get('next')):
                        var.put('str', var.get('p').get('data'))
                        var.put('nb', (var.get('str').get('length') if (var.get('n')>var.get('str').get('length')) else var.get('n')))
                        if _seq(var.get('nb'),var.get('str').get('length')):
                            var.put('ret', var.get('str'), '+')
                        else:
                            var.put('ret', var.get('str').callprop('slice', Js(0.0), var.get('n')), '+')
                        var.put('n', var.get('nb'), '-')
                        if _seq(var.get('n'),Js(0.0)):
                            if _seq(var.get('nb'),var.get('str').get('length')):
                                var.put('c',Js(var.get('c').to_number())+Js(1))
                                if var.get('p').get('next'):
                                    var.get(u"this").put('head', var.get('p').get('next'))
                                else:
                                    var.get(u"this").put('head', var.get(u"this").put('tail', var.get(u"null")))
                            else:
                                var.get(u"this").put('head', var.get('p'))
                                var.get('p').put('data', var.get('str').callprop('slice', var.get('nb')))
                            break
                        var.put('c',Js(var.get('c').to_number())+Js(1))
                    var.get(u"this").put('length', var.get('c'), '-')
                    return var.get('ret')
                PyJs__getString_722_._set_name('_getString')
                @Js
                def PyJs__getBuffer_723_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments, '_getBuffer':PyJs__getBuffer_723_}, var)
                    var.registers(['c', 'buf', 'n', 'p', 'ret', 'nb'])
                    var.put('ret', var.get('Buffer').callprop('allocUnsafe', var.get('n')))
                    var.put('p', var.get(u"this").get('head'))
                    var.put('c', Js(1.0))
                    var.get('p').get('data').callprop('copy', var.get('ret'))
                    var.put('n', var.get('p').get('data').get('length'), '-')
                    while var.put('p', var.get('p').get('next')):
                        var.put('buf', var.get('p').get('data'))
                        var.put('nb', (var.get('buf').get('length') if (var.get('n')>var.get('buf').get('length')) else var.get('n')))
                        var.get('buf').callprop('copy', var.get('ret'), (var.get('ret').get('length')-var.get('n')), Js(0.0), var.get('nb'))
                        var.put('n', var.get('nb'), '-')
                        if _seq(var.get('n'),Js(0.0)):
                            if _seq(var.get('nb'),var.get('buf').get('length')):
                                var.put('c',Js(var.get('c').to_number())+Js(1))
                                if var.get('p').get('next'):
                                    var.get(u"this").put('head', var.get('p').get('next'))
                                else:
                                    var.get(u"this").put('head', var.get(u"this").put('tail', var.get(u"null")))
                            else:
                                var.get(u"this").put('head', var.get('p'))
                                var.get('p').put('data', var.get('buf').callprop('slice', var.get('nb')))
                            break
                        var.put('c',Js(var.get('c').to_number())+Js(1))
                    var.get(u"this").put('length', var.get('c'), '-')
                    return var.get('ret')
                PyJs__getBuffer_723_._set_name('_getBuffer')
                @Js
                def PyJs_value_724_(_, options, this, arguments, var=var):
                    var = Scope({'_':_, 'options':options, 'this':this, 'arguments':arguments, 'value':PyJs_value_724_}, var)
                    var.registers(['_', 'options'])
                    return var.get('inspect')(var.get(u"this"), var.get('_objectSpread')(Js({}), var.get('options'), Js({'depth':Js(0.0),'customInspect':Js(False)})))
                PyJs_value_724_._set_name('value')
                return var.get('_createClass')(var.get('BufferList'), Js([Js({'key':Js('push'),'value':PyJs_push_714_}), Js({'key':Js('unshift'),'value':PyJs_unshift_715_}), Js({'key':Js('shift'),'value':PyJs_shift_716_}), Js({'key':Js('clear'),'value':PyJs_clear_717_}), Js({'key':Js('join'),'value':PyJs_join_718_}), Js({'key':Js('concat'),'value':PyJs_concat_719_}), Js({'key':Js('consume'),'value':PyJs_consume_720_}), Js({'key':Js('first'),'value':PyJs_first_721_}), Js({'key':Js('_getString'),'value':PyJs__getString_722_}), Js({'key':Js('_getBuffer'),'value':PyJs__getBuffer_723_}), Js({'key':var.get('custom'),'value':PyJs_value_724_})]))
            PyJs_LONG_725_()
            return var.get('BufferList')
        PyJs_anonymous_713_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_713_())
    PyJs_anonymous_709_._set_name('anonymous')
    @Js
    def PyJs_anonymous_726_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_727_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_728_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['errorOrDestroy', 'emitErrorAndCloseNT', 'undestroy', 'emitCloseNT', 'destroy', 'emitErrorNT'])
                @Js
                def PyJsHoisted_destroy_(err, cb, this, arguments, var=var):
                    var = Scope({'err':err, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['writableDestroyed', 'cb', '_this', 'err', 'readableDestroyed'])
                    var.put('_this', var.get(u"this"))
                    var.put('readableDestroyed', (var.get(u"this").get('_readableState') and var.get(u"this").get('_readableState').get('destroyed')))
                    var.put('writableDestroyed', (var.get(u"this").get('_writableState') and var.get(u"this").get('_writableState').get('destroyed')))
                    if (var.get('readableDestroyed') or var.get('writableDestroyed')):
                        if var.get('cb'):
                            var.get('cb')(var.get('err'))
                        else:
                            if var.get('err'):
                                if var.get(u"this").get('_writableState').neg():
                                    var.get('process').callprop('nextTick', var.get('emitErrorNT'), var.get(u"this"), var.get('err'))
                                else:
                                    if var.get(u"this").get('_writableState').get('errorEmitted').neg():
                                        var.get(u"this").get('_writableState').put('errorEmitted', Js(True))
                                        var.get('process').callprop('nextTick', var.get('emitErrorNT'), var.get(u"this"), var.get('err'))
                        return var.get(u"this")
                    if var.get(u"this").get('_readableState'):
                        var.get(u"this").get('_readableState').put('destroyed', Js(True))
                    if var.get(u"this").get('_writableState'):
                        var.get(u"this").get('_writableState').put('destroyed', Js(True))
                    @Js
                    def PyJs_anonymous_729_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                        var.registers(['err'])
                        if (var.get('cb').neg() and var.get('err')):
                            if var.get('_this').get('_writableState').neg():
                                var.get('process').callprop('nextTick', var.get('emitErrorAndCloseNT'), var.get('_this'), var.get('err'))
                            else:
                                if var.get('_this').get('_writableState').get('errorEmitted').neg():
                                    var.get('_this').get('_writableState').put('errorEmitted', Js(True))
                                    var.get('process').callprop('nextTick', var.get('emitErrorAndCloseNT'), var.get('_this'), var.get('err'))
                                else:
                                    var.get('process').callprop('nextTick', var.get('emitCloseNT'), var.get('_this'))
                        else:
                            if var.get('cb'):
                                var.get('process').callprop('nextTick', var.get('emitCloseNT'), var.get('_this'))
                                var.get('cb')(var.get('err'))
                            else:
                                var.get('process').callprop('nextTick', var.get('emitCloseNT'), var.get('_this'))
                    PyJs_anonymous_729_._set_name('anonymous')
                    var.get(u"this").callprop('_destroy', (var.get('err') or var.get(u"null")), PyJs_anonymous_729_)
                    return var.get(u"this")
                PyJsHoisted_destroy_.func_name = 'destroy'
                var.put('destroy', PyJsHoisted_destroy_)
                @Js
                def PyJsHoisted_emitErrorAndCloseNT_(self, err, this, arguments, var=var):
                    var = Scope({'self':self, 'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self', 'err'])
                    var.get('emitErrorNT')(var.get('self'), var.get('err'))
                    var.get('emitCloseNT')(var.get('self'))
                PyJsHoisted_emitErrorAndCloseNT_.func_name = 'emitErrorAndCloseNT'
                var.put('emitErrorAndCloseNT', PyJsHoisted_emitErrorAndCloseNT_)
                @Js
                def PyJsHoisted_emitCloseNT_(self, this, arguments, var=var):
                    var = Scope({'self':self, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self'])
                    if (var.get('self').get('_writableState') and var.get('self').get('_writableState').get('emitClose').neg()):
                        return var.get('undefined')
                    if (var.get('self').get('_readableState') and var.get('self').get('_readableState').get('emitClose').neg()):
                        return var.get('undefined')
                    var.get('self').callprop('emit', Js('close'))
                PyJsHoisted_emitCloseNT_.func_name = 'emitCloseNT'
                var.put('emitCloseNT', PyJsHoisted_emitCloseNT_)
                @Js
                def PyJsHoisted_undestroy_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u"this").get('_readableState'):
                        var.get(u"this").get('_readableState').put('destroyed', Js(False))
                        var.get(u"this").get('_readableState').put('reading', Js(False))
                        var.get(u"this").get('_readableState').put('ended', Js(False))
                        var.get(u"this").get('_readableState').put('endEmitted', Js(False))
                    if var.get(u"this").get('_writableState'):
                        var.get(u"this").get('_writableState').put('destroyed', Js(False))
                        var.get(u"this").get('_writableState').put('ended', Js(False))
                        var.get(u"this").get('_writableState').put('ending', Js(False))
                        var.get(u"this").get('_writableState').put('finalCalled', Js(False))
                        var.get(u"this").get('_writableState').put('prefinished', Js(False))
                        var.get(u"this").get('_writableState').put('finished', Js(False))
                        var.get(u"this").get('_writableState').put('errorEmitted', Js(False))
                PyJsHoisted_undestroy_.func_name = 'undestroy'
                var.put('undestroy', PyJsHoisted_undestroy_)
                @Js
                def PyJsHoisted_emitErrorNT_(self, err, this, arguments, var=var):
                    var = Scope({'self':self, 'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['self', 'err'])
                    var.get('self').callprop('emit', Js('error'), var.get('err'))
                PyJsHoisted_emitErrorNT_.func_name = 'emitErrorNT'
                var.put('emitErrorNT', PyJsHoisted_emitErrorNT_)
                @Js
                def PyJsHoisted_errorOrDestroy_(stream, err, this, arguments, var=var):
                    var = Scope({'stream':stream, 'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err', 'rState', 'wState', 'stream'])
                    var.put('rState', var.get('stream').get('_readableState'))
                    var.put('wState', var.get('stream').get('_writableState'))
                    if ((var.get('rState') and var.get('rState').get('autoDestroy')) or (var.get('wState') and var.get('wState').get('autoDestroy'))):
                        var.get('stream').callprop('destroy', var.get('err'))
                    else:
                        var.get('stream').callprop('emit', Js('error'), var.get('err'))
                PyJsHoisted_errorOrDestroy_.func_name = 'errorOrDestroy'
                var.put('errorOrDestroy', PyJsHoisted_errorOrDestroy_)
                Js('use strict')
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('module').put('exports', Js({'destroy':var.get('destroy'),'undestroy':var.get('undestroy'),'errorOrDestroy':var.get('errorOrDestroy')}))
            PyJs_anonymous_728_._set_name('anonymous')
            PyJs_anonymous_728_.callprop('call', var.get(u"this"))
        PyJs_anonymous_727_._set_name('anonymous')
        PyJs_anonymous_727_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_726_._set_name('anonymous')
    @Js
    def PyJs_anonymous_730_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'noop', 'require', 'module', 'ERR_STREAM_PREMATURE_CLOSE', 'eos', 'once', 'isRequest'])
        @Js
        def PyJsHoisted_once_(callback, this, arguments, var=var):
            var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback', 'called'])
            var.put('called', Js(False))
            @Js
            def PyJs_anonymous_731_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['_len', 'args', '_key'])
                if var.get('called'):
                    return var.get('undefined')
                var.put('called', Js(True))
                #for JS loop
                var.put('_len', var.get('arguments').get('length'))
                var.put('args', var.get('Array').create(var.get('_len')))
                var.put('_key', Js(0.0))
                while (var.get('_key')<var.get('_len')):
                    try:
                        var.get('args').put(var.get('_key'), var.get('arguments').get(var.get('_key')))
                    finally:
                            (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
                var.get('callback').callprop('apply', var.get(u"this"), var.get('args'))
            PyJs_anonymous_731_._set_name('anonymous')
            return PyJs_anonymous_731_
        PyJsHoisted_once_.func_name = 'once'
        var.put('once', PyJsHoisted_once_)
        @Js
        def PyJsHoisted_noop_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_noop_.func_name = 'noop'
        var.put('noop', PyJsHoisted_noop_)
        @Js
        def PyJsHoisted_isRequest_(stream, this, arguments, var=var):
            var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
            var.registers(['stream'])
            return (var.get('stream').get('setHeader') and _seq(var.get('stream').get('abort').typeof(),Js('function')))
        PyJsHoisted_isRequest_.func_name = 'isRequest'
        var.put('isRequest', PyJsHoisted_isRequest_)
        @Js
        def PyJsHoisted_eos_(stream, opts, callback, this, arguments, var=var):
            var = Scope({'stream':stream, 'opts':opts, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback', 'onfinish', 'readableEnded', 'writableEnded', 'onlegacyfinish', 'onclose', 'opts', 'onrequest', 'onerror', 'writable', 'onend', 'readable', 'stream'])
            if _seq(var.get('opts',throw=False).typeof(),Js('function')):
                return var.get('eos')(var.get('stream'), var.get(u"null"), var.get('opts'))
            if var.get('opts').neg():
                var.put('opts', Js({}))
            var.put('callback', var.get('once')((var.get('callback') or var.get('noop'))))
            var.put('readable', (var.get('opts').get('readable') or (PyJsStrictNeq(var.get('opts').get('readable'),Js(False)) and var.get('stream').get('readable'))))
            var.put('writable', (var.get('opts').get('writable') or (PyJsStrictNeq(var.get('opts').get('writable'),Js(False)) and var.get('stream').get('writable'))))
            @Js
            def PyJs_onlegacyfinish_732_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onlegacyfinish':PyJs_onlegacyfinish_732_}, var)
                var.registers([])
                if var.get('stream').get('writable').neg():
                    var.get('onfinish')()
            PyJs_onlegacyfinish_732_._set_name('onlegacyfinish')
            var.put('onlegacyfinish', PyJs_onlegacyfinish_732_)
            var.put('writableEnded', (var.get('stream').get('_writableState') and var.get('stream').get('_writableState').get('finished')))
            @Js
            def PyJs_onfinish_733_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onfinish':PyJs_onfinish_733_}, var)
                var.registers([])
                var.put('writable', Js(False))
                var.put('writableEnded', Js(True))
                if var.get('readable').neg():
                    var.get('callback').callprop('call', var.get('stream'))
            PyJs_onfinish_733_._set_name('onfinish')
            var.put('onfinish', PyJs_onfinish_733_)
            var.put('readableEnded', (var.get('stream').get('_readableState') and var.get('stream').get('_readableState').get('endEmitted')))
            @Js
            def PyJs_onend_734_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onend':PyJs_onend_734_}, var)
                var.registers([])
                var.put('readable', Js(False))
                var.put('readableEnded', Js(True))
                if var.get('writable').neg():
                    var.get('callback').callprop('call', var.get('stream'))
            PyJs_onend_734_._set_name('onend')
            var.put('onend', PyJs_onend_734_)
            @Js
            def PyJs_onerror_735_(err, this, arguments, var=var):
                var = Scope({'err':err, 'this':this, 'arguments':arguments, 'onerror':PyJs_onerror_735_}, var)
                var.registers(['err'])
                var.get('callback').callprop('call', var.get('stream'), var.get('err'))
            PyJs_onerror_735_._set_name('onerror')
            var.put('onerror', PyJs_onerror_735_)
            @Js
            def PyJs_onclose_736_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onclose':PyJs_onclose_736_}, var)
                var.registers(['err'])
                pass
                if (var.get('readable') and var.get('readableEnded').neg()):
                    if (var.get('stream').get('_readableState').neg() or var.get('stream').get('_readableState').get('ended').neg()):
                        var.put('err', var.get('ERR_STREAM_PREMATURE_CLOSE').create())
                    return var.get('callback').callprop('call', var.get('stream'), var.get('err'))
                if (var.get('writable') and var.get('writableEnded').neg()):
                    if (var.get('stream').get('_writableState').neg() or var.get('stream').get('_writableState').get('ended').neg()):
                        var.put('err', var.get('ERR_STREAM_PREMATURE_CLOSE').create())
                    return var.get('callback').callprop('call', var.get('stream'), var.get('err'))
            PyJs_onclose_736_._set_name('onclose')
            var.put('onclose', PyJs_onclose_736_)
            @Js
            def PyJs_onrequest_737_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'onrequest':PyJs_onrequest_737_}, var)
                var.registers([])
                var.get('stream').get('req').callprop('on', Js('finish'), var.get('onfinish'))
            PyJs_onrequest_737_._set_name('onrequest')
            var.put('onrequest', PyJs_onrequest_737_)
            if var.get('isRequest')(var.get('stream')):
                var.get('stream').callprop('on', Js('complete'), var.get('onfinish'))
                var.get('stream').callprop('on', Js('abort'), var.get('onclose'))
                if var.get('stream').get('req'):
                    var.get('onrequest')()
                else:
                    var.get('stream').callprop('on', Js('request'), var.get('onrequest'))
            else:
                if (var.get('writable') and var.get('stream').get('_writableState').neg()):
                    var.get('stream').callprop('on', Js('end'), var.get('onlegacyfinish'))
                    var.get('stream').callprop('on', Js('close'), var.get('onlegacyfinish'))
            var.get('stream').callprop('on', Js('end'), var.get('onend'))
            var.get('stream').callprop('on', Js('finish'), var.get('onfinish'))
            if PyJsStrictNeq(var.get('opts').get('error'),Js(False)):
                var.get('stream').callprop('on', Js('error'), var.get('onerror'))
            var.get('stream').callprop('on', Js('close'), var.get('onclose'))
            @Js
            def PyJs_anonymous_738_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('stream').callprop('removeListener', Js('complete'), var.get('onfinish'))
                var.get('stream').callprop('removeListener', Js('abort'), var.get('onclose'))
                var.get('stream').callprop('removeListener', Js('request'), var.get('onrequest'))
                if var.get('stream').get('req'):
                    var.get('stream').get('req').callprop('removeListener', Js('finish'), var.get('onfinish'))
                var.get('stream').callprop('removeListener', Js('end'), var.get('onlegacyfinish'))
                var.get('stream').callprop('removeListener', Js('close'), var.get('onlegacyfinish'))
                var.get('stream').callprop('removeListener', Js('finish'), var.get('onfinish'))
                var.get('stream').callprop('removeListener', Js('end'), var.get('onend'))
                var.get('stream').callprop('removeListener', Js('error'), var.get('onerror'))
                var.get('stream').callprop('removeListener', Js('close'), var.get('onclose'))
            PyJs_anonymous_738_._set_name('anonymous')
            return PyJs_anonymous_738_
        PyJsHoisted_eos_.func_name = 'eos'
        var.put('eos', PyJsHoisted_eos_)
        Js('use strict')
        var.put('ERR_STREAM_PREMATURE_CLOSE', var.get('require')(Js('../../../errors')).get('codes').get('ERR_STREAM_PREMATURE_CLOSE'))
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('eos'))
    PyJs_anonymous_730_._set_name('anonymous')
    @Js
    def PyJs_anonymous_739_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_740_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Readable.from is not available in the browser')))
            raise PyJsTempException
        PyJs_anonymous_740_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_740_)
    PyJs_anonymous_739_._set_name('anonymous')
    @Js
    def PyJs_anonymous_741_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['ERR_STREAM_DESTROYED', 'exports', 'noop', 'require', 'module', 'pipe', '_require$codes', 'ERR_MISSING_ARGS', 'eos', 'destroyer', 'call', 'pipeline', 'popCallback', 'once', 'isRequest'])
        @Js
        def PyJsHoisted_once_(callback, this, arguments, var=var):
            var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback', 'called'])
            var.put('called', Js(False))
            @Js
            def PyJs_anonymous_742_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get('called'):
                    return var.get('undefined')
                var.put('called', Js(True))
                var.get('callback').callprop('apply', PyJsComma(Js(0.0), Js(None)), var.get('arguments'))
            PyJs_anonymous_742_._set_name('anonymous')
            return PyJs_anonymous_742_
        PyJsHoisted_once_.func_name = 'once'
        var.put('once', PyJsHoisted_once_)
        @Js
        def PyJsHoisted_noop_(err, this, arguments, var=var):
            var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
            var.registers(['err'])
            if var.get('err'):
                PyJsTempException = JsToPyException(var.get('err'))
                raise PyJsTempException
        PyJsHoisted_noop_.func_name = 'noop'
        var.put('noop', PyJsHoisted_noop_)
        @Js
        def PyJsHoisted_isRequest_(stream, this, arguments, var=var):
            var = Scope({'stream':stream, 'this':this, 'arguments':arguments}, var)
            var.registers(['stream'])
            return (var.get('stream').get('setHeader') and _seq(var.get('stream').get('abort').typeof(),Js('function')))
        PyJsHoisted_isRequest_.func_name = 'isRequest'
        var.put('isRequest', PyJsHoisted_isRequest_)
        @Js
        def PyJsHoisted_destroyer_(stream, reading, writing, callback, this, arguments, var=var):
            var = Scope({'stream':stream, 'reading':reading, 'writing':writing, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['closed', 'callback', 'writing', 'reading', 'destroyed', 'stream'])
            var.put('callback', var.get('once')(var.get('callback')))
            var.put('closed', Js(False))
            @Js
            def PyJs_anonymous_743_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('closed', Js(True))
            PyJs_anonymous_743_._set_name('anonymous')
            var.get('stream').callprop('on', Js('close'), PyJs_anonymous_743_)
            if _seq(var.get('eos'),var.get('undefined')):
                var.put('eos', var.get('require')(Js('./end-of-stream')))
            @Js
            def PyJs_anonymous_744_(err, this, arguments, var=var):
                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                var.registers(['err'])
                if var.get('err'):
                    return var.get('callback')(var.get('err'))
                var.put('closed', Js(True))
                var.get('callback')()
            PyJs_anonymous_744_._set_name('anonymous')
            var.get('eos')(var.get('stream'), Js({'readable':var.get('reading'),'writable':var.get('writing')}), PyJs_anonymous_744_)
            var.put('destroyed', Js(False))
            @Js
            def PyJs_anonymous_745_(err, this, arguments, var=var):
                var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                var.registers(['err'])
                if var.get('closed'):
                    return var.get('undefined')
                if var.get('destroyed'):
                    return var.get('undefined')
                var.put('destroyed', Js(True))
                if var.get('isRequest')(var.get('stream')):
                    return var.get('stream').callprop('abort')
                if _seq(var.get('stream').get('destroy').typeof(),Js('function')):
                    return var.get('stream').callprop('destroy')
                var.get('callback')((var.get('err') or var.get('ERR_STREAM_DESTROYED').create(Js('pipe'))))
            PyJs_anonymous_745_._set_name('anonymous')
            return PyJs_anonymous_745_
        PyJsHoisted_destroyer_.func_name = 'destroyer'
        var.put('destroyer', PyJsHoisted_destroyer_)
        @Js
        def PyJsHoisted_call_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn'])
            var.get('fn')()
        PyJsHoisted_call_.func_name = 'call'
        var.put('call', PyJsHoisted_call_)
        @Js
        def PyJsHoisted_pipe_(PyJsArg_66726f6d_, to, this, arguments, var=var):
            var = Scope({'from':PyJsArg_66726f6d_, 'to':to, 'this':this, 'arguments':arguments}, var)
            var.registers(['to', 'from'])
            return var.get('from').callprop('pipe', var.get('to'))
        PyJsHoisted_pipe_.func_name = 'pipe'
        var.put('pipe', PyJsHoisted_pipe_)
        @Js
        def PyJsHoisted_popCallback_(streams, this, arguments, var=var):
            var = Scope({'streams':streams, 'this':this, 'arguments':arguments}, var)
            var.registers(['streams'])
            if var.get('streams').get('length').neg():
                return var.get('noop')
            if PyJsStrictNeq(var.get('streams').get((var.get('streams').get('length')-Js(1.0))).typeof(),Js('function')):
                return var.get('noop')
            return var.get('streams').callprop('pop')
        PyJsHoisted_popCallback_.func_name = 'popCallback'
        var.put('popCallback', PyJsHoisted_popCallback_)
        @Js
        def PyJsHoisted_pipeline_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['callback', '_key', 'destroys', 'streams', '_len', 'error'])
            #for JS loop
            var.put('_len', var.get('arguments').get('length'))
            var.put('streams', var.get('Array').create(var.get('_len')))
            var.put('_key', Js(0.0))
            while (var.get('_key')<var.get('_len')):
                try:
                    var.get('streams').put(var.get('_key'), var.get('arguments').get(var.get('_key')))
                finally:
                        (var.put('_key',Js(var.get('_key').to_number())+Js(1))-Js(1))
            var.put('callback', var.get('popCallback')(var.get('streams')))
            if var.get('Array').callprop('isArray', var.get('streams').get('0')):
                var.put('streams', var.get('streams').get('0'))
            if (var.get('streams').get('length')<Js(2.0)):
                PyJsTempException = JsToPyException(var.get('ERR_MISSING_ARGS').create(Js('streams')))
                raise PyJsTempException
            pass
            @Js
            def PyJs_anonymous_746_(stream, i, this, arguments, var=var):
                var = Scope({'stream':stream, 'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'reading', 'writing', 'stream'])
                var.put('reading', (var.get('i')<(var.get('streams').get('length')-Js(1.0))))
                var.put('writing', (var.get('i')>Js(0.0)))
                @Js
                def PyJs_anonymous_747_(err, this, arguments, var=var):
                    var = Scope({'err':err, 'this':this, 'arguments':arguments}, var)
                    var.registers(['err'])
                    if var.get('error').neg():
                        var.put('error', var.get('err'))
                    if var.get('err'):
                        var.get('destroys').callprop('forEach', var.get('call'))
                    if var.get('reading'):
                        return var.get('undefined')
                    var.get('destroys').callprop('forEach', var.get('call'))
                    var.get('callback')(var.get('error'))
                PyJs_anonymous_747_._set_name('anonymous')
                return var.get('destroyer')(var.get('stream'), var.get('reading'), var.get('writing'), PyJs_anonymous_747_)
            PyJs_anonymous_746_._set_name('anonymous')
            var.put('destroys', var.get('streams').callprop('map', PyJs_anonymous_746_))
            return var.get('streams').callprop('reduce', var.get('pipe'))
        PyJsHoisted_pipeline_.func_name = 'pipeline'
        var.put('pipeline', PyJsHoisted_pipeline_)
        Js('use strict')
        pass
        pass
        var.put('_require$codes', var.get('require')(Js('../../../errors')).get('codes'))
        var.put('ERR_MISSING_ARGS', var.get('_require$codes').get('ERR_MISSING_ARGS'))
        var.put('ERR_STREAM_DESTROYED', var.get('_require$codes').get('ERR_STREAM_DESTROYED'))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('pipeline'))
    PyJs_anonymous_741_._set_name('anonymous')
    @Js
    def PyJs_anonymous_748_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'ERR_INVALID_OPT_VALUE', 'getHighWaterMark', 'highWaterMarkFrom'])
        @Js
        def PyJsHoisted_highWaterMarkFrom_(options, isDuplex, duplexKey, this, arguments, var=var):
            var = Scope({'options':options, 'isDuplex':isDuplex, 'duplexKey':duplexKey, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'isDuplex', 'duplexKey'])
            return (var.get('options').get('highWaterMark') if (var.get('options').get('highWaterMark')!=var.get(u"null")) else (var.get('options').get(var.get('duplexKey')) if var.get('isDuplex') else var.get(u"null")))
        PyJsHoisted_highWaterMarkFrom_.func_name = 'highWaterMarkFrom'
        var.put('highWaterMarkFrom', PyJsHoisted_highWaterMarkFrom_)
        @Js
        def PyJsHoisted_getHighWaterMark_(state, options, duplexKey, isDuplex, this, arguments, var=var):
            var = Scope({'state':state, 'options':options, 'duplexKey':duplexKey, 'isDuplex':isDuplex, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'hwm', 'duplexKey', 'state', 'isDuplex', 'name'])
            var.put('hwm', var.get('highWaterMarkFrom')(var.get('options'), var.get('isDuplex'), var.get('duplexKey')))
            if (var.get('hwm')!=var.get(u"null")):
                if ((var.get('isFinite')(var.get('hwm')) and _seq(var.get('Math').callprop('floor', var.get('hwm')),var.get('hwm'))).neg() or (var.get('hwm')<Js(0.0))):
                    var.put('name', (var.get('duplexKey') if var.get('isDuplex') else Js('highWaterMark')))
                    PyJsTempException = JsToPyException(var.get('ERR_INVALID_OPT_VALUE').create(var.get('name'), var.get('hwm')))
                    raise PyJsTempException
                return var.get('Math').callprop('floor', var.get('hwm'))
            return (Js(16.0) if var.get('state').get('objectMode') else (Js(16.0)*Js(1024.0)))
        PyJsHoisted_getHighWaterMark_.func_name = 'getHighWaterMark'
        var.put('getHighWaterMark', PyJsHoisted_getHighWaterMark_)
        Js('use strict')
        var.put('ERR_INVALID_OPT_VALUE', var.get('require')(Js('../../../errors')).get('codes').get('ERR_INVALID_OPT_VALUE'))
        pass
        pass
        var.get('module').put('exports', Js({'getHighWaterMark':var.get('getHighWaterMark')}))
    PyJs_anonymous_748_._set_name('anonymous')
    @Js
    def PyJs_anonymous_749_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('module').put('exports', var.get('require')(Js('events')).get('EventEmitter'))
    PyJs_anonymous_749_._set_name('anonymous')
    @Js
    def PyJs_anonymous_750_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.put('exports', var.get('module').put('exports', var.get('require')(Js('./lib/_stream_readable.js'))))
        var.get('exports').put('Stream', var.get('exports'))
        var.get('exports').put('Readable', var.get('exports'))
        var.get('exports').put('Writable', var.get('require')(Js('./lib/_stream_writable.js')))
        var.get('exports').put('Duplex', var.get('require')(Js('./lib/_stream_duplex.js')))
        var.get('exports').put('Transform', var.get('require')(Js('./lib/_stream_transform.js')))
        var.get('exports').put('PassThrough', var.get('require')(Js('./lib/_stream_passthrough.js')))
        var.get('exports').put('finished', var.get('require')(Js('./lib/internal/streams/end-of-stream.js')))
        var.get('exports').put('pipeline', var.get('require')(Js('./lib/internal/streams/pipeline.js')))
    PyJs_anonymous_750_._set_name('anonymous')
    @Js
    def PyJs_anonymous_751_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'buffer', 'module', 'SafeBuffer', 'copyProps'])
        @Js
        def PyJsHoisted_copyProps_(src, dst, this, arguments, var=var):
            var = Scope({'src':src, 'dst':dst, 'this':this, 'arguments':arguments}, var)
            var.registers(['src', 'key', 'dst'])
            for PyJsTemp in var.get('src'):
                var.put('key', PyJsTemp)
                var.get('dst').put(var.get('key'), var.get('src').get(var.get('key')))
        PyJsHoisted_copyProps_.func_name = 'copyProps'
        var.put('copyProps', PyJsHoisted_copyProps_)
        @Js
        def PyJsHoisted_SafeBuffer_(arg, encodingOrOffset, length, this, arguments, var=var):
            var = Scope({'arg':arg, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'length', 'encodingOrOffset'])
            return var.get('Buffer')(var.get('arg'), var.get('encodingOrOffset'), var.get('length'))
        PyJsHoisted_SafeBuffer_.func_name = 'SafeBuffer'
        var.put('SafeBuffer', PyJsHoisted_SafeBuffer_)
        var.put('buffer', var.get('require')(Js('buffer')))
        var.put('Buffer', var.get('buffer').get('Buffer'))
        pass
        if (((var.get('Buffer').get('from') and var.get('Buffer').get('alloc')) and var.get('Buffer').get('allocUnsafe')) and var.get('Buffer').get('allocUnsafeSlow')):
            var.get('module').put('exports', var.get('buffer'))
        else:
            var.get('copyProps')(var.get('buffer'), var.get('exports'))
            var.get('exports').put('Buffer', var.get('SafeBuffer'))
        pass
        var.get('SafeBuffer').put('prototype', var.get('Object').callprop('create', var.get('Buffer').get('prototype')))
        var.get('copyProps')(var.get('Buffer'), var.get('SafeBuffer'))
        @Js
        def PyJs_anonymous_752_(arg, encodingOrOffset, length, this, arguments, var=var):
            var = Scope({'arg':arg, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'length', 'encodingOrOffset'])
            if _seq(var.get('arg',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must not be a number')))
                raise PyJsTempException
            return var.get('Buffer')(var.get('arg'), var.get('encodingOrOffset'), var.get('length'))
        PyJs_anonymous_752_._set_name('anonymous')
        var.get('SafeBuffer').put('from', PyJs_anonymous_752_)
        @Js
        def PyJs_anonymous_753_(size, fill, encoding, this, arguments, var=var):
            var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['fill', 'buf', 'size', 'encoding'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a number')))
                raise PyJsTempException
            var.put('buf', var.get('Buffer')(var.get('size')))
            if PyJsStrictNeq(var.get('fill'),var.get('undefined')):
                if _seq(var.get('encoding',throw=False).typeof(),Js('string')):
                    var.get('buf').callprop('fill', var.get('fill'), var.get('encoding'))
                else:
                    var.get('buf').callprop('fill', var.get('fill'))
            else:
                var.get('buf').callprop('fill', Js(0.0))
            return var.get('buf')
        PyJs_anonymous_753_._set_name('anonymous')
        var.get('SafeBuffer').put('alloc', PyJs_anonymous_753_)
        @Js
        def PyJs_anonymous_754_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a number')))
                raise PyJsTempException
            return var.get('Buffer')(var.get('size'))
        PyJs_anonymous_754_._set_name('anonymous')
        var.get('SafeBuffer').put('allocUnsafe', PyJs_anonymous_754_)
        @Js
        def PyJs_anonymous_755_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a number')))
                raise PyJsTempException
            return var.get('buffer').callprop('SlowBuffer', var.get('size'))
        PyJs_anonymous_755_._set_name('anonymous')
        var.get('SafeBuffer').put('allocUnsafeSlow', PyJs_anonymous_755_)
    PyJs_anonymous_751_._set_name('anonymous')
    @Js
    def PyJs_anonymous_756_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_757_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_758_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_xor_759_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'xor':PyJs_xor_759_}, var)
                    var.registers(['a', 'buffer', 'i', 'length', 'b'])
                    var.put('length', var.get('Math').callprop('min', var.get('a').get('length'), var.get('b').get('length')))
                    var.put('buffer', var.get('Buffer').create(var.get('length')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('buffer').put(var.get('i'), (var.get('a').get(var.get('i'))^var.get('b').get(var.get('i'))))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('buffer')
                PyJs_xor_759_._set_name('xor')
                var.get('module').put('exports', PyJs_xor_759_)
            PyJs_anonymous_758_._set_name('anonymous')
            PyJs_anonymous_758_.callprop('call', var.get(u"this"))
        PyJs_anonymous_757_._set_name('anonymous')
        PyJs_anonymous_757_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_756_._set_name('anonymous')
    @Js
    def PyJs_anonymous_760_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_761_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_762_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['checkIEEE754', 'ucs2Write', 'hexSlice', 'utf8Slice', 'base64clean', 'from', 'blitBuffer', 'byteLength', 'typedArraySupport', 'MAX_ARGUMENTS_LENGTH', 'asciiWrite', 'checkOffset', 'utf8Write', 'asciiSlice', 'hexWrite', 'decodeCodePointsArray', 'utf16leToBytes', 'fromString', 'base64', 'numberIsNaN', 'fromArrayLike', 'bidirectionalIndexOf', 'fromArrayBuffer', 'INVALID_BASE64_RE', 'alloc', 'toHex', 'Buffer', 'fromObject', 'swap', 'writeFloat', 'writeDouble', 'assertSize', 'allocUnsafe', 'checkInt', 'base64Write', 'isInstance', 'SlowBuffer', 'latin1Slice', 'base64Slice', 'ieee754', 'utf16leSlice', 'arrayIndexOf', 'base64ToBytes', 'asciiToBytes', 'K_MAX_LENGTH', 'checked', 'latin1Write', 'slowToString', 'utf8ToBytes', 'createBuffer'])
                @Js
                def PyJsHoisted_typedArraySupport_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['arr'])
                    try:
                        var.put('arr', var.get('Uint8Array').create(Js(1.0)))
                        @Js
                        def PyJs_foo_763_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'foo':PyJs_foo_763_}, var)
                            var.registers([])
                            return Js(42.0)
                        PyJs_foo_763_._set_name('foo')
                        var.get('arr').put('__proto__', Js({'__proto__':var.get('Uint8Array').get('prototype'),'foo':PyJs_foo_763_}))
                        return _seq(var.get('arr').callprop('foo'),Js(42.0))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_58118254 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return Js(False)
                        finally:
                            if PyJsHolder_65_58118254 is not None:
                                var.own['e'] = PyJsHolder_65_58118254
                            else:
                                del var.own['e']
                            del PyJsHolder_65_58118254
                PyJsHoisted_typedArraySupport_.func_name = 'typedArraySupport'
                var.put('typedArraySupport', PyJsHoisted_typedArraySupport_)
                @Js
                def PyJsHoisted_createBuffer_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'length'])
                    if (var.get('length')>var.get('K_MAX_LENGTH')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value "')+var.get('length'))+Js('" is invalid for option "size"'))))
                        raise PyJsTempException
                    var.put('buf', var.get('Uint8Array').create(var.get('length')))
                    var.get('buf').put('__proto__', var.get('Buffer').get('prototype'))
                    return var.get('buf')
                PyJsHoisted_createBuffer_.func_name = 'createBuffer'
                var.put('createBuffer', PyJsHoisted_createBuffer_)
                @Js
                def PyJsHoisted_Buffer_(arg, encodingOrOffset, length, this, arguments, var=var):
                    var = Scope({'arg':arg, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg', 'length', 'encodingOrOffset'])
                    if _seq(var.get('arg',throw=False).typeof(),Js('number')):
                        if _seq(var.get('encodingOrOffset',throw=False).typeof(),Js('string')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "string" argument must be of type string. Received type number')))
                            raise PyJsTempException
                        return var.get('allocUnsafe')(var.get('arg'))
                    return var.get('from')(var.get('arg'), var.get('encodingOrOffset'), var.get('length'))
                PyJsHoisted_Buffer_.func_name = 'Buffer'
                var.put('Buffer', PyJsHoisted_Buffer_)
                @Js
                def PyJsHoisted_from_(value, encodingOrOffset, length, this, arguments, var=var):
                    var = Scope({'value':value, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['valueOf', 'length', 'b', 'value', 'encodingOrOffset'])
                    if _seq(var.get('value',throw=False).typeof(),Js('string')):
                        return var.get('fromString')(var.get('value'), var.get('encodingOrOffset'))
                    if var.get('ArrayBuffer').callprop('isView', var.get('value')):
                        return var.get('fromArrayLike')(var.get('value'))
                    if (var.get('value')==var.get(u"null")):
                        PyJsTempException = JsToPyException(var.get('TypeError')(((Js('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ')+Js('or Array-like Object. Received type '))+(Js('undefined') if _seq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))))
                        raise PyJsTempException
                    if (var.get('isInstance')(var.get('value'), var.get('ArrayBuffer')) or (var.get('value') and var.get('isInstance')(var.get('value').get('buffer'), var.get('ArrayBuffer')))):
                        return var.get('fromArrayBuffer')(var.get('value'), var.get('encodingOrOffset'), var.get('length'))
                    if _seq(var.get('value',throw=False).typeof(),Js('number')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "value" argument must not be of type number. Received type number')))
                        raise PyJsTempException
                    var.put('valueOf', (var.get('value').get('valueOf') and var.get('value').callprop('valueOf')))
                    if ((var.get('valueOf')!=var.get(u"null")) and PyJsStrictNeq(var.get('valueOf'),var.get('value'))):
                        return var.get('Buffer').callprop('from', var.get('valueOf'), var.get('encodingOrOffset'), var.get('length'))
                    var.put('b', var.get('fromObject')(var.get('value')))
                    if var.get('b'):
                        return var.get('b')
                    if ((PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and (var.get('Symbol').get('toPrimitive')!=var.get(u"null"))) and _seq(var.get('value').get(var.get('Symbol').get('toPrimitive')).typeof(),Js('function'))):
                        return var.get('Buffer').callprop('from', var.get('value').callprop(var.get('Symbol').get('toPrimitive'), Js('string')), var.get('encodingOrOffset'), var.get('length'))
                    PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ')+Js('or Array-like Object. Received type '))+(Js('undefined') if _seq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))))
                    raise PyJsTempException
                PyJsHoisted_from_.func_name = 'from'
                var.put('from', PyJsHoisted_from_)
                @Js
                def PyJsHoisted_assertSize_(size, this, arguments, var=var):
                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size'])
                    if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"size" argument must be of type number')))
                        raise PyJsTempException
                    else:
                        if (var.get('size')<Js(0.0)):
                            PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value "')+var.get('size'))+Js('" is invalid for option "size"'))))
                            raise PyJsTempException
                PyJsHoisted_assertSize_.func_name = 'assertSize'
                var.put('assertSize', PyJsHoisted_assertSize_)
                @Js
                def PyJsHoisted_alloc_(size, fill, encoding, this, arguments, var=var):
                    var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fill', 'size', 'encoding'])
                    var.get('assertSize')(var.get('size'))
                    if (var.get('size')<=Js(0.0)):
                        return var.get('createBuffer')(var.get('size'))
                    if PyJsStrictNeq(var.get('fill'),var.get('undefined')):
                        return (var.get('createBuffer')(var.get('size')).callprop('fill', var.get('fill'), var.get('encoding')) if _seq(var.get('encoding',throw=False).typeof(),Js('string')) else var.get('createBuffer')(var.get('size')).callprop('fill', var.get('fill')))
                    return var.get('createBuffer')(var.get('size'))
                PyJsHoisted_alloc_.func_name = 'alloc'
                var.put('alloc', PyJsHoisted_alloc_)
                @Js
                def PyJsHoisted_allocUnsafe_(size, this, arguments, var=var):
                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size'])
                    var.get('assertSize')(var.get('size'))
                    return var.get('createBuffer')((Js(0.0) if (var.get('size')<Js(0.0)) else (var.get('checked')(var.get('size'))|Js(0.0))))
                PyJsHoisted_allocUnsafe_.func_name = 'allocUnsafe'
                var.put('allocUnsafe', PyJsHoisted_allocUnsafe_)
                @Js
                def PyJsHoisted_fromString_(string, encoding, this, arguments, var=var):
                    var = Scope({'string':string, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'buf', 'length', 'encoding', 'actual'])
                    if (PyJsStrictNeq(var.get('encoding',throw=False).typeof(),Js('string')) or _seq(var.get('encoding'),Js(''))):
                        var.put('encoding', Js('utf8'))
                    if var.get('Buffer').callprop('isEncoding', var.get('encoding')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                        raise PyJsTempException
                    var.put('length', (var.get('byteLength')(var.get('string'), var.get('encoding'))|Js(0.0)))
                    var.put('buf', var.get('createBuffer')(var.get('length')))
                    var.put('actual', var.get('buf').callprop('write', var.get('string'), var.get('encoding')))
                    if PyJsStrictNeq(var.get('actual'),var.get('length')):
                        var.put('buf', var.get('buf').callprop('slice', Js(0.0), var.get('actual')))
                    return var.get('buf')
                PyJsHoisted_fromString_.func_name = 'fromString'
                var.put('fromString', PyJsHoisted_fromString_)
                @Js
                def PyJsHoisted_fromArrayLike_(array, this, arguments, var=var):
                    var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'buf', 'length', 'array'])
                    var.put('length', (Js(0.0) if (var.get('array').get('length')<Js(0.0)) else (var.get('checked')(var.get('array').get('length'))|Js(0.0))))
                    var.put('buf', var.get('createBuffer')(var.get('length')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.get('buf').put(var.get('i'), (var.get('array').get(var.get('i'))&Js(255.0)))
                        finally:
                                var.put('i', Js(1.0), '+')
                    return var.get('buf')
                PyJsHoisted_fromArrayLike_.func_name = 'fromArrayLike'
                var.put('fromArrayLike', PyJsHoisted_fromArrayLike_)
                @Js
                def PyJsHoisted_fromArrayBuffer_(array, byteOffset, length, this, arguments, var=var):
                    var = Scope({'array':array, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'length', 'byteOffset', 'array'])
                    if ((var.get('byteOffset')<Js(0.0)) or (var.get('array').get('byteLength')<var.get('byteOffset'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('"offset" is outside of buffer bounds')))
                        raise PyJsTempException
                    if (var.get('array').get('byteLength')<(var.get('byteOffset')+(var.get('length') or Js(0.0)))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('"length" is outside of buffer bounds')))
                        raise PyJsTempException
                    pass
                    if (_seq(var.get('byteOffset'),var.get('undefined')) and _seq(var.get('length'),var.get('undefined'))):
                        var.put('buf', var.get('Uint8Array').create(var.get('array')))
                    else:
                        if _seq(var.get('length'),var.get('undefined')):
                            var.put('buf', var.get('Uint8Array').create(var.get('array'), var.get('byteOffset')))
                        else:
                            var.put('buf', var.get('Uint8Array').create(var.get('array'), var.get('byteOffset'), var.get('length')))
                    var.get('buf').put('__proto__', var.get('Buffer').get('prototype'))
                    return var.get('buf')
                PyJsHoisted_fromArrayBuffer_.func_name = 'fromArrayBuffer'
                var.put('fromArrayBuffer', PyJsHoisted_fromArrayBuffer_)
                @Js
                def PyJsHoisted_fromObject_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'buf', 'obj'])
                    if var.get('Buffer').callprop('isBuffer', var.get('obj')):
                        var.put('len', (var.get('checked')(var.get('obj').get('length'))|Js(0.0)))
                        var.put('buf', var.get('createBuffer')(var.get('len')))
                        if _seq(var.get('buf').get('length'),Js(0.0)):
                            return var.get('buf')
                        var.get('obj').callprop('copy', var.get('buf'), Js(0.0), Js(0.0), var.get('len'))
                        return var.get('buf')
                    if PyJsStrictNeq(var.get('obj').get('length'),var.get('undefined')):
                        if (PyJsStrictNeq(var.get('obj').get('length').typeof(),Js('number')) or var.get('numberIsNaN')(var.get('obj').get('length'))):
                            return var.get('createBuffer')(Js(0.0))
                        return var.get('fromArrayLike')(var.get('obj'))
                    if (_seq(var.get('obj').get('type'),Js('Buffer')) and var.get('Array').callprop('isArray', var.get('obj').get('data'))):
                        return var.get('fromArrayLike')(var.get('obj').get('data'))
                PyJsHoisted_fromObject_.func_name = 'fromObject'
                var.put('fromObject', PyJsHoisted_fromObject_)
                @Js
                def PyJsHoisted_checked_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    if (var.get('length')>=var.get('K_MAX_LENGTH')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create((((Js('Attempt to allocate Buffer larger than maximum ')+Js('size: 0x'))+var.get('K_MAX_LENGTH').callprop('toString', Js(16.0)))+Js(' bytes'))))
                        raise PyJsTempException
                    return (var.get('length')|Js(0.0))
                PyJsHoisted_checked_.func_name = 'checked'
                var.put('checked', PyJsHoisted_checked_)
                @Js
                def PyJsHoisted_SlowBuffer_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length'])
                    if ((+var.get('length'))!=var.get('length')):
                        var.put('length', Js(0.0))
                    return var.get('Buffer').callprop('alloc', (+var.get('length')))
                PyJsHoisted_SlowBuffer_.func_name = 'SlowBuffer'
                var.put('SlowBuffer', PyJsHoisted_SlowBuffer_)
                @Js
                def PyJsHoisted_byteLength_(string, encoding, this, arguments, var=var):
                    var = Scope({'string':string, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['mustMatch', 'string', 'len', 'loweredCase', 'encoding'])
                    if var.get('Buffer').callprop('isBuffer', var.get('string')):
                        return var.get('string').get('length')
                    if (var.get('ArrayBuffer').callprop('isView', var.get('string')) or var.get('isInstance')(var.get('string'), var.get('ArrayBuffer'))):
                        return var.get('string').get('byteLength')
                    if PyJsStrictNeq(var.get('string',throw=False).typeof(),Js('string')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ')+Js('Received type '))+(Js('undefined') if _seq(var.get('string',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('string'))))))
                        raise PyJsTempException
                    var.put('len', var.get('string').get('length'))
                    var.put('mustMatch', ((var.get('arguments').get('length')>Js(2.0)) and _seq(var.get('arguments').get('2'),Js(True))))
                    if (var.get('mustMatch').neg() and _seq(var.get('len'),Js(0.0))):
                        return Js(0.0)
                    var.put('loweredCase', Js(False))
                    #for JS loop

                    while 1:
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('encoding'))
                            if SWITCHED or _seq(CONDITION, Js('ascii')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('latin1')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('binary')):
                                SWITCHED = True
                                return var.get('len')
                            if SWITCHED or _seq(CONDITION, Js('utf8')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('utf-8')):
                                SWITCHED = True
                                return var.get('utf8ToBytes')(var.get('string')).get('length')
                            if SWITCHED or _seq(CONDITION, Js('ucs2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('ucs-2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('utf16le')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('utf-16le')):
                                SWITCHED = True
                                return (var.get('len')*Js(2.0))
                            if SWITCHED or _seq(CONDITION, Js('hex')):
                                SWITCHED = True
                                return PyJsBshift(var.get('len'),Js(1.0))
                            if SWITCHED or _seq(CONDITION, Js('base64')):
                                SWITCHED = True
                                return var.get('base64ToBytes')(var.get('string')).get('length')
                            if True:
                                SWITCHED = True
                                if var.get('loweredCase'):
                                    return ((-Js(1.0)) if var.get('mustMatch') else var.get('utf8ToBytes')(var.get('string')).get('length'))
                                var.put('encoding', (Js('')+var.get('encoding')).callprop('toLowerCase'))
                                var.put('loweredCase', Js(True))
                            SWITCHED = True
                            break

                PyJsHoisted_byteLength_.func_name = 'byteLength'
                var.put('byteLength', PyJsHoisted_byteLength_)
                @Js
                def PyJsHoisted_slowToString_(encoding, start, end, this, arguments, var=var):
                    var = Scope({'encoding':encoding, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['end', 'encoding', 'start', 'loweredCase'])
                    var.put('loweredCase', Js(False))
                    if (_seq(var.get('start'),var.get('undefined')) or (var.get('start')<Js(0.0))):
                        var.put('start', Js(0.0))
                    if (var.get('start')>var.get(u"this").get('length')):
                        return Js('')
                    if (_seq(var.get('end'),var.get('undefined')) or (var.get('end')>var.get(u"this").get('length'))):
                        var.put('end', var.get(u"this").get('length'))
                    if (var.get('end')<=Js(0.0)):
                        return Js('')
                    var.put('end', Js(0.0), '>>>')
                    var.put('start', Js(0.0), '>>>')
                    if (var.get('end')<=var.get('start')):
                        return Js('')
                    if var.get('encoding').neg():
                        var.put('encoding', Js('utf8'))
                    while Js(True):
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('encoding'))
                            if SWITCHED or _seq(CONDITION, Js('hex')):
                                SWITCHED = True
                                return var.get('hexSlice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or _seq(CONDITION, Js('utf8')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('utf-8')):
                                SWITCHED = True
                                return var.get('utf8Slice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or _seq(CONDITION, Js('ascii')):
                                SWITCHED = True
                                return var.get('asciiSlice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or _seq(CONDITION, Js('latin1')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('binary')):
                                SWITCHED = True
                                return var.get('latin1Slice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or _seq(CONDITION, Js('base64')):
                                SWITCHED = True
                                return var.get('base64Slice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if SWITCHED or _seq(CONDITION, Js('ucs2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('ucs-2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('utf16le')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('utf-16le')):
                                SWITCHED = True
                                return var.get('utf16leSlice')(var.get(u"this"), var.get('start'), var.get('end'))
                            if True:
                                SWITCHED = True
                                if var.get('loweredCase'):
                                    PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                                    raise PyJsTempException
                                var.put('encoding', (var.get('encoding')+Js('')).callprop('toLowerCase'))
                                var.put('loweredCase', Js(True))
                            SWITCHED = True
                            break
                PyJsHoisted_slowToString_.func_name = 'slowToString'
                var.put('slowToString', PyJsHoisted_slowToString_)
                @Js
                def PyJsHoisted_swap_(b, n, m, this, arguments, var=var):
                    var = Scope({'b':b, 'n':n, 'm':m, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'n', 'm', 'b'])
                    var.put('i', var.get('b').get(var.get('n')))
                    var.get('b').put(var.get('n'), var.get('b').get(var.get('m')))
                    var.get('b').put(var.get('m'), var.get('i'))
                PyJsHoisted_swap_.func_name = 'swap'
                var.put('swap', PyJsHoisted_swap_)
                @Js
                def PyJsHoisted_bidirectionalIndexOf_(buffer, val, byteOffset, encoding, dir, this, arguments, var=var):
                    var = Scope({'buffer':buffer, 'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'dir':dir, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buffer', 'byteOffset', 'dir', 'encoding', 'val'])
                    if _seq(var.get('buffer').get('length'),Js(0.0)):
                        return (-Js(1.0))
                    if _seq(var.get('byteOffset',throw=False).typeof(),Js('string')):
                        var.put('encoding', var.get('byteOffset'))
                        var.put('byteOffset', Js(0.0))
                    else:
                        if (var.get('byteOffset')>Js(2147483647)):
                            var.put('byteOffset', Js(2147483647))
                        else:
                            if (var.get('byteOffset')<(-Js(2147483648))):
                                var.put('byteOffset', (-Js(2147483648)))
                    var.put('byteOffset', (+var.get('byteOffset')))
                    if var.get('numberIsNaN')(var.get('byteOffset')):
                        var.put('byteOffset', (Js(0.0) if var.get('dir') else (var.get('buffer').get('length')-Js(1.0))))
                    if (var.get('byteOffset')<Js(0.0)):
                        var.put('byteOffset', (var.get('buffer').get('length')+var.get('byteOffset')))
                    if (var.get('byteOffset')>=var.get('buffer').get('length')):
                        if var.get('dir'):
                            return (-Js(1.0))
                        else:
                            var.put('byteOffset', (var.get('buffer').get('length')-Js(1.0)))
                    else:
                        if (var.get('byteOffset')<Js(0.0)):
                            if var.get('dir'):
                                var.put('byteOffset', Js(0.0))
                            else:
                                return (-Js(1.0))
                    if _seq(var.get('val',throw=False).typeof(),Js('string')):
                        var.put('val', var.get('Buffer').callprop('from', var.get('val'), var.get('encoding')))
                    if var.get('Buffer').callprop('isBuffer', var.get('val')):
                        if _seq(var.get('val').get('length'),Js(0.0)):
                            return (-Js(1.0))
                        return var.get('arrayIndexOf')(var.get('buffer'), var.get('val'), var.get('byteOffset'), var.get('encoding'), var.get('dir'))
                    else:
                        if _seq(var.get('val',throw=False).typeof(),Js('number')):
                            var.put('val', (var.get('val')&Js(255)))
                            if _seq(var.get('Uint8Array').get('prototype').get('indexOf').typeof(),Js('function')):
                                if var.get('dir'):
                                    return var.get('Uint8Array').get('prototype').get('indexOf').callprop('call', var.get('buffer'), var.get('val'), var.get('byteOffset'))
                                else:
                                    return var.get('Uint8Array').get('prototype').get('lastIndexOf').callprop('call', var.get('buffer'), var.get('val'), var.get('byteOffset'))
                            return var.get('arrayIndexOf')(var.get('buffer'), Js([var.get('val')]), var.get('byteOffset'), var.get('encoding'), var.get('dir'))
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('val must be string, number or Buffer')))
                    raise PyJsTempException
                PyJsHoisted_bidirectionalIndexOf_.func_name = 'bidirectionalIndexOf'
                var.put('bidirectionalIndexOf', PyJsHoisted_bidirectionalIndexOf_)
                @Js
                def PyJsHoisted_arrayIndexOf_(arr, val, byteOffset, encoding, dir, this, arguments, var=var):
                    var = Scope({'arr':arr, 'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'dir':dir, 'this':this, 'arguments':arguments}, var)
                    var.registers(['read', 'j', 'i', 'foundIndex', 'byteOffset', 'dir', 'valLength', 'encoding', 'arrLength', 'found', 'arr', 'val', 'indexSize'])
                    @Js
                    def PyJsHoisted_read_(buf, i, this, arguments, var=var):
                        var = Scope({'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
                        var.registers(['i', 'buf'])
                        if _seq(var.get('indexSize'),Js(1.0)):
                            return var.get('buf').get(var.get('i'))
                        else:
                            return var.get('buf').callprop('readUInt16BE', (var.get('i')*var.get('indexSize')))
                    PyJsHoisted_read_.func_name = 'read'
                    var.put('read', PyJsHoisted_read_)
                    var.put('indexSize', Js(1.0))
                    var.put('arrLength', var.get('arr').get('length'))
                    var.put('valLength', var.get('val').get('length'))
                    if PyJsStrictNeq(var.get('encoding'),var.get('undefined')):
                        var.put('encoding', var.get('String')(var.get('encoding')).callprop('toLowerCase'))
                        if (((_seq(var.get('encoding'),Js('ucs2')) or _seq(var.get('encoding'),Js('ucs-2'))) or _seq(var.get('encoding'),Js('utf16le'))) or _seq(var.get('encoding'),Js('utf-16le'))):
                            if ((var.get('arr').get('length')<Js(2.0)) or (var.get('val').get('length')<Js(2.0))):
                                return (-Js(1.0))
                            var.put('indexSize', Js(2.0))
                            var.put('arrLength', Js(2.0), '/')
                            var.put('valLength', Js(2.0), '/')
                            var.put('byteOffset', Js(2.0), '/')
                    pass
                    pass
                    if var.get('dir'):
                        var.put('foundIndex', (-Js(1.0)))
                        #for JS loop
                        var.put('i', var.get('byteOffset'))
                        while (var.get('i')<var.get('arrLength')):
                            try:
                                if _seq(var.get('read')(var.get('arr'), var.get('i')),var.get('read')(var.get('val'), (Js(0.0) if _seq(var.get('foundIndex'),(-Js(1.0))) else (var.get('i')-var.get('foundIndex'))))):
                                    if _seq(var.get('foundIndex'),(-Js(1.0))):
                                        var.put('foundIndex', var.get('i'))
                                    if _seq(((var.get('i')-var.get('foundIndex'))+Js(1.0)),var.get('valLength')):
                                        return (var.get('foundIndex')*var.get('indexSize'))
                                else:
                                    if PyJsStrictNeq(var.get('foundIndex'),(-Js(1.0))):
                                        var.put('i', (var.get('i')-var.get('foundIndex')), '-')
                                    var.put('foundIndex', (-Js(1.0)))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    else:
                        if ((var.get('byteOffset')+var.get('valLength'))>var.get('arrLength')):
                            var.put('byteOffset', (var.get('arrLength')-var.get('valLength')))
                        #for JS loop
                        var.put('i', var.get('byteOffset'))
                        while (var.get('i')>=Js(0.0)):
                            try:
                                var.put('found', Js(True))
                                #for JS loop
                                var.put('j', Js(0.0))
                                while (var.get('j')<var.get('valLength')):
                                    try:
                                        if PyJsStrictNeq(var.get('read')(var.get('arr'), (var.get('i')+var.get('j'))),var.get('read')(var.get('val'), var.get('j'))):
                                            var.put('found', Js(False))
                                            break
                                    finally:
                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                if var.get('found'):
                                    return var.get('i')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    return (-Js(1.0))
                PyJsHoisted_arrayIndexOf_.func_name = 'arrayIndexOf'
                var.put('arrayIndexOf', PyJsHoisted_arrayIndexOf_)
                @Js
                def PyJsHoisted_hexWrite_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'i', 'buf', 'length', 'parsed', 'strLen', 'remaining', 'offset'])
                    var.put('offset', (var.get('Number')(var.get('offset')) or Js(0.0)))
                    var.put('remaining', (var.get('buf').get('length')-var.get('offset')))
                    if var.get('length').neg():
                        var.put('length', var.get('remaining'))
                    else:
                        var.put('length', var.get('Number')(var.get('length')))
                        if (var.get('length')>var.get('remaining')):
                            var.put('length', var.get('remaining'))
                    var.put('strLen', var.get('string').get('length'))
                    if (var.get('length')>(var.get('strLen')/Js(2.0))):
                        var.put('length', (var.get('strLen')/Js(2.0)))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.put('parsed', var.get('parseInt')(var.get('string').callprop('substr', (var.get('i')*Js(2.0)), Js(2.0)), Js(16.0)))
                            if var.get('numberIsNaN')(var.get('parsed')):
                                return var.get('i')
                            var.get('buf').put((var.get('offset')+var.get('i')), var.get('parsed'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('i')
                PyJsHoisted_hexWrite_.func_name = 'hexWrite'
                var.put('hexWrite', PyJsHoisted_hexWrite_)
                @Js
                def PyJsHoisted_utf8Write_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'buf', 'length', 'offset'])
                    return var.get('blitBuffer')(var.get('utf8ToBytes')(var.get('string'), (var.get('buf').get('length')-var.get('offset'))), var.get('buf'), var.get('offset'), var.get('length'))
                PyJsHoisted_utf8Write_.func_name = 'utf8Write'
                var.put('utf8Write', PyJsHoisted_utf8Write_)
                @Js
                def PyJsHoisted_asciiWrite_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'buf', 'length', 'offset'])
                    return var.get('blitBuffer')(var.get('asciiToBytes')(var.get('string')), var.get('buf'), var.get('offset'), var.get('length'))
                PyJsHoisted_asciiWrite_.func_name = 'asciiWrite'
                var.put('asciiWrite', PyJsHoisted_asciiWrite_)
                @Js
                def PyJsHoisted_latin1Write_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'buf', 'length', 'offset'])
                    return var.get('asciiWrite')(var.get('buf'), var.get('string'), var.get('offset'), var.get('length'))
                PyJsHoisted_latin1Write_.func_name = 'latin1Write'
                var.put('latin1Write', PyJsHoisted_latin1Write_)
                @Js
                def PyJsHoisted_base64Write_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'buf', 'length', 'offset'])
                    return var.get('blitBuffer')(var.get('base64ToBytes')(var.get('string')), var.get('buf'), var.get('offset'), var.get('length'))
                PyJsHoisted_base64Write_.func_name = 'base64Write'
                var.put('base64Write', PyJsHoisted_base64Write_)
                @Js
                def PyJsHoisted_ucs2Write_(buf, string, offset, length, this, arguments, var=var):
                    var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'buf', 'length', 'offset'])
                    return var.get('blitBuffer')(var.get('utf16leToBytes')(var.get('string'), (var.get('buf').get('length')-var.get('offset'))), var.get('buf'), var.get('offset'), var.get('length'))
                PyJsHoisted_ucs2Write_.func_name = 'ucs2Write'
                var.put('ucs2Write', PyJsHoisted_ucs2Write_)
                @Js
                def PyJsHoisted_base64Slice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'end', 'start'])
                    if (_seq(var.get('start'),Js(0.0)) and _seq(var.get('end'),var.get('buf').get('length'))):
                        return var.get('base64').callprop('fromByteArray', var.get('buf'))
                    else:
                        return var.get('base64').callprop('fromByteArray', var.get('buf').callprop('slice', var.get('start'), var.get('end')))
                PyJsHoisted_base64Slice_.func_name = 'base64Slice'
                var.put('base64Slice', PyJsHoisted_base64Slice_)
                @Js
                def PyJsHoisted_utf8Slice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['thirdByte', 'bytesPerSequence', 'i', 'buf', 'start', 'fourthByte', 'firstByte', 'end', 'tempCodePoint', 'secondByte', 'codePoint', 'res'])
                    var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
                    var.put('res', Js([]))
                    var.put('i', var.get('start'))
                    while (var.get('i')<var.get('end')):
                        var.put('firstByte', var.get('buf').get(var.get('i')))
                        var.put('codePoint', var.get(u"null"))
                        var.put('bytesPerSequence', (Js(4.0) if (var.get('firstByte')>Js(239)) else (Js(3.0) if (var.get('firstByte')>Js(223)) else (Js(2.0) if (var.get('firstByte')>Js(191)) else Js(1.0)))))
                        if ((var.get('i')+var.get('bytesPerSequence'))<=var.get('end')):
                            pass
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('bytesPerSequence'))
                                if SWITCHED or _seq(CONDITION, Js(1.0)):
                                    SWITCHED = True
                                    if (var.get('firstByte')<Js(128)):
                                        var.put('codePoint', var.get('firstByte'))
                                    break
                                if SWITCHED or _seq(CONDITION, Js(2.0)):
                                    SWITCHED = True
                                    var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                                    if _seq((var.get('secondByte')&Js(192)),Js(128)):
                                        var.put('tempCodePoint', (((var.get('firstByte')&Js(31))<<Js(6))|(var.get('secondByte')&Js(63))))
                                        if (var.get('tempCodePoint')>Js(127)):
                                            var.put('codePoint', var.get('tempCodePoint'))
                                    break
                                if SWITCHED or _seq(CONDITION, Js(3.0)):
                                    SWITCHED = True
                                    var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                                    var.put('thirdByte', var.get('buf').get((var.get('i')+Js(2.0))))
                                    if (_seq((var.get('secondByte')&Js(192)),Js(128)) and _seq((var.get('thirdByte')&Js(192)),Js(128))):
                                        var.put('tempCodePoint', ((((var.get('firstByte')&Js(15))<<Js(12))|((var.get('secondByte')&Js(63))<<Js(6)))|(var.get('thirdByte')&Js(63))))
                                        if ((var.get('tempCodePoint')>Js(2047)) and ((var.get('tempCodePoint')<Js(55296)) or (var.get('tempCodePoint')>Js(57343)))):
                                            var.put('codePoint', var.get('tempCodePoint'))
                                    break
                                if SWITCHED or _seq(CONDITION, Js(4.0)):
                                    SWITCHED = True
                                    var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                                    var.put('thirdByte', var.get('buf').get((var.get('i')+Js(2.0))))
                                    var.put('fourthByte', var.get('buf').get((var.get('i')+Js(3.0))))
                                    if ((_seq((var.get('secondByte')&Js(192)),Js(128)) and _seq((var.get('thirdByte')&Js(192)),Js(128))) and _seq((var.get('fourthByte')&Js(192)),Js(128))):
                                        var.put('tempCodePoint', (((((var.get('firstByte')&Js(15))<<Js(18))|((var.get('secondByte')&Js(63))<<Js(12)))|((var.get('thirdByte')&Js(63))<<Js(6)))|(var.get('fourthByte')&Js(63))))
                                        if ((var.get('tempCodePoint')>Js(65535)) and (var.get('tempCodePoint')<Js(1114112))):
                                            var.put('codePoint', var.get('tempCodePoint'))
                                SWITCHED = True
                                break
                        if _seq(var.get('codePoint'),var.get(u"null")):
                            var.put('codePoint', Js(65533))
                            var.put('bytesPerSequence', Js(1.0))
                        else:
                            if (var.get('codePoint')>Js(65535)):
                                var.put('codePoint', Js(65536), '-')
                                var.get('res').callprop('push', ((PyJsBshift(var.get('codePoint'),Js(10.0))&Js(1023))|Js(55296)))
                                var.put('codePoint', (Js(56320)|(var.get('codePoint')&Js(1023))))
                        var.get('res').callprop('push', var.get('codePoint'))
                        var.put('i', var.get('bytesPerSequence'), '+')
                    return var.get('decodeCodePointsArray')(var.get('res'))
                PyJsHoisted_utf8Slice_.func_name = 'utf8Slice'
                var.put('utf8Slice', PyJsHoisted_utf8Slice_)
                @Js
                def PyJsHoisted_decodeCodePointsArray_(codePoints, this, arguments, var=var):
                    var = Scope({'codePoints':codePoints, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'i', 'codePoints', 'res'])
                    var.put('len', var.get('codePoints').get('length'))
                    if (var.get('len')<=var.get('MAX_ARGUMENTS_LENGTH')):
                        return var.get('String').get('fromCharCode').callprop('apply', var.get('String'), var.get('codePoints'))
                    var.put('res', Js(''))
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        var.put('res', var.get('String').get('fromCharCode').callprop('apply', var.get('String'), var.get('codePoints').callprop('slice', var.get('i'), var.put('i', var.get('MAX_ARGUMENTS_LENGTH'), '+'))), '+')
                    return var.get('res')
                PyJsHoisted_decodeCodePointsArray_.func_name = 'decodeCodePointsArray'
                var.put('decodeCodePointsArray', PyJsHoisted_decodeCodePointsArray_)
                @Js
                def PyJsHoisted_asciiSlice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'buf', 'start', 'end', 'ret'])
                    var.put('ret', Js(''))
                    var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
                    #for JS loop
                    var.put('i', var.get('start'))
                    while (var.get('i')<var.get('end')):
                        try:
                            var.put('ret', var.get('String').callprop('fromCharCode', (var.get('buf').get(var.get('i'))&Js(127))), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('ret')
                PyJsHoisted_asciiSlice_.func_name = 'asciiSlice'
                var.put('asciiSlice', PyJsHoisted_asciiSlice_)
                @Js
                def PyJsHoisted_latin1Slice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'buf', 'start', 'end', 'ret'])
                    var.put('ret', Js(''))
                    var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
                    #for JS loop
                    var.put('i', var.get('start'))
                    while (var.get('i')<var.get('end')):
                        try:
                            var.put('ret', var.get('String').callprop('fromCharCode', var.get('buf').get(var.get('i'))), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('ret')
                PyJsHoisted_latin1Slice_.func_name = 'latin1Slice'
                var.put('latin1Slice', PyJsHoisted_latin1Slice_)
                @Js
                def PyJsHoisted_hexSlice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'i', 'out', 'buf', 'start', 'end'])
                    var.put('len', var.get('buf').get('length'))
                    if (var.get('start').neg() or (var.get('start')<Js(0.0))):
                        var.put('start', Js(0.0))
                    if ((var.get('end').neg() or (var.get('end')<Js(0.0))) or (var.get('end')>var.get('len'))):
                        var.put('end', var.get('len'))
                    var.put('out', Js(''))
                    #for JS loop
                    var.put('i', var.get('start'))
                    while (var.get('i')<var.get('end')):
                        try:
                            var.put('out', var.get('toHex')(var.get('buf').get(var.get('i'))), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('out')
                PyJsHoisted_hexSlice_.func_name = 'hexSlice'
                var.put('hexSlice', PyJsHoisted_hexSlice_)
                @Js
                def PyJsHoisted_utf16leSlice_(buf, start, end, this, arguments, var=var):
                    var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'buf', 'start', 'bytes', 'end', 'res'])
                    var.put('bytes', var.get('buf').callprop('slice', var.get('start'), var.get('end')))
                    var.put('res', Js(''))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('bytes').get('length')):
                        try:
                            var.put('res', var.get('String').callprop('fromCharCode', (var.get('bytes').get(var.get('i'))+(var.get('bytes').get((var.get('i')+Js(1.0)))*Js(256.0)))), '+')
                        finally:
                                var.put('i', Js(2.0), '+')
                    return var.get('res')
                PyJsHoisted_utf16leSlice_.func_name = 'utf16leSlice'
                var.put('utf16leSlice', PyJsHoisted_utf16leSlice_)
                @Js
                def PyJsHoisted_checkOffset_(offset, ext, length, this, arguments, var=var):
                    var = Scope({'offset':offset, 'ext':ext, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['ext', 'length', 'offset'])
                    if (PyJsStrictNeq((var.get('offset')%Js(1.0)),Js(0.0)) or (var.get('offset')<Js(0.0))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('offset is not uint')))
                        raise PyJsTempException
                    if ((var.get('offset')+var.get('ext'))>var.get('length')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Trying to access beyond buffer length')))
                        raise PyJsTempException
                PyJsHoisted_checkOffset_.func_name = 'checkOffset'
                var.put('checkOffset', PyJsHoisted_checkOffset_)
                @Js
                def PyJsHoisted_checkInt_(buf, value, offset, ext, max, min, this, arguments, var=var):
                    var = Scope({'buf':buf, 'value':value, 'offset':offset, 'ext':ext, 'max':max, 'min':min, 'this':this, 'arguments':arguments}, var)
                    var.registers(['min', 'ext', 'buf', 'max', 'value', 'offset'])
                    if var.get('Buffer').callprop('isBuffer', var.get('buf')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"buffer" argument must be a Buffer instance')))
                        raise PyJsTempException
                    if ((var.get('value')>var.get('max')) or (var.get('value')<var.get('min'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('"value" argument is out of bounds')))
                        raise PyJsTempException
                    if ((var.get('offset')+var.get('ext'))>var.get('buf').get('length')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                        raise PyJsTempException
                PyJsHoisted_checkInt_.func_name = 'checkInt'
                var.put('checkInt', PyJsHoisted_checkInt_)
                @Js
                def PyJsHoisted_checkIEEE754_(buf, value, offset, ext, max, min, this, arguments, var=var):
                    var = Scope({'buf':buf, 'value':value, 'offset':offset, 'ext':ext, 'max':max, 'min':min, 'this':this, 'arguments':arguments}, var)
                    var.registers(['min', 'ext', 'buf', 'max', 'value', 'offset'])
                    if ((var.get('offset')+var.get('ext'))>var.get('buf').get('length')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                        raise PyJsTempException
                    if (var.get('offset')<Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                        raise PyJsTempException
                PyJsHoisted_checkIEEE754_.func_name = 'checkIEEE754'
                var.put('checkIEEE754', PyJsHoisted_checkIEEE754_)
                @Js
                def PyJsHoisted_writeFloat_(buf, value, offset, littleEndian, noAssert, this, arguments, var=var):
                    var = Scope({'buf':buf, 'value':value, 'offset':offset, 'littleEndian':littleEndian, 'noAssert':noAssert, 'this':this, 'arguments':arguments}, var)
                    var.registers(['littleEndian', 'buf', 'value', 'offset', 'noAssert'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkIEEE754')(var.get('buf'), var.get('value'), var.get('offset'), Js(4.0), Js(3.4028234663852886e+38), (-Js(3.4028234663852886e+38)))
                    var.get('ieee754').callprop('write', var.get('buf'), var.get('value'), var.get('offset'), var.get('littleEndian'), Js(23.0), Js(4.0))
                    return (var.get('offset')+Js(4.0))
                PyJsHoisted_writeFloat_.func_name = 'writeFloat'
                var.put('writeFloat', PyJsHoisted_writeFloat_)
                @Js
                def PyJsHoisted_writeDouble_(buf, value, offset, littleEndian, noAssert, this, arguments, var=var):
                    var = Scope({'buf':buf, 'value':value, 'offset':offset, 'littleEndian':littleEndian, 'noAssert':noAssert, 'this':this, 'arguments':arguments}, var)
                    var.registers(['littleEndian', 'buf', 'value', 'offset', 'noAssert'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkIEEE754')(var.get('buf'), var.get('value'), var.get('offset'), Js(8.0), Js(1.7976931348623157e+308), (-Js(1.7976931348623157e+308)))
                    var.get('ieee754').callprop('write', var.get('buf'), var.get('value'), var.get('offset'), var.get('littleEndian'), Js(52.0), Js(8.0))
                    return (var.get('offset')+Js(8.0))
                PyJsHoisted_writeDouble_.func_name = 'writeDouble'
                var.put('writeDouble', PyJsHoisted_writeDouble_)
                @Js
                def PyJsHoisted_base64clean_(str, this, arguments, var=var):
                    var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str'])
                    var.put('str', var.get('str').callprop('split', Js('=')).get('0'))
                    var.put('str', var.get('str').callprop('trim').callprop('replace', var.get('INVALID_BASE64_RE'), Js('')))
                    if (var.get('str').get('length')<Js(2.0)):
                        return Js('')
                    while PyJsStrictNeq((var.get('str').get('length')%Js(4.0)),Js(0.0)):
                        var.put('str', (var.get('str')+Js('=')))
                    return var.get('str')
                PyJsHoisted_base64clean_.func_name = 'base64clean'
                var.put('base64clean', PyJsHoisted_base64clean_)
                @Js
                def PyJsHoisted_toHex_(n, this, arguments, var=var):
                    var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n'])
                    if (var.get('n')<Js(16.0)):
                        return (Js('0')+var.get('n').callprop('toString', Js(16.0)))
                    return var.get('n').callprop('toString', Js(16.0))
                PyJsHoisted_toHex_.func_name = 'toHex'
                var.put('toHex', PyJsHoisted_toHex_)
                @Js
                def PyJsHoisted_utf8ToBytes_(string, units, this, arguments, var=var):
                    var = Scope({'string':string, 'units':units, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'i', 'length', 'leadSurrogate', 'units', 'codePoint', 'bytes'])
                    var.put('units', (var.get('units') or var.get('Infinity')))
                    pass
                    var.put('length', var.get('string').get('length'))
                    var.put('leadSurrogate', var.get(u"null"))
                    var.put('bytes', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            var.put('codePoint', var.get('string').callprop('charCodeAt', var.get('i')))
                            if ((var.get('codePoint')>Js(55295)) and (var.get('codePoint')<Js(57344))):
                                if var.get('leadSurrogate').neg():
                                    if (var.get('codePoint')>Js(56319)):
                                        if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                            var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                        continue
                                    else:
                                        if _seq((var.get('i')+Js(1.0)),var.get('length')):
                                            if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                                var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                            continue
                                    var.put('leadSurrogate', var.get('codePoint'))
                                    continue
                                if (var.get('codePoint')<Js(56320)):
                                    if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                        var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                    var.put('leadSurrogate', var.get('codePoint'))
                                    continue
                                var.put('codePoint', ((((var.get('leadSurrogate')-Js(55296))<<Js(10.0))|(var.get('codePoint')-Js(56320)))+Js(65536)))
                            else:
                                if var.get('leadSurrogate'):
                                    if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                        var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                            var.put('leadSurrogate', var.get(u"null"))
                            if (var.get('codePoint')<Js(128)):
                                if (var.put('units', Js(1.0), '-')<Js(0.0)):
                                    break
                                var.get('bytes').callprop('push', var.get('codePoint'))
                            else:
                                if (var.get('codePoint')<Js(2048)):
                                    if (var.put('units', Js(2.0), '-')<Js(0.0)):
                                        break
                                    var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(6))|Js(192)), ((var.get('codePoint')&Js(63))|Js(128)))
                                else:
                                    if (var.get('codePoint')<Js(65536)):
                                        if (var.put('units', Js(3.0), '-')<Js(0.0)):
                                            break
                                        var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(12))|Js(224)), (((var.get('codePoint')>>Js(6))&Js(63))|Js(128)), ((var.get('codePoint')&Js(63))|Js(128)))
                                    else:
                                        if (var.get('codePoint')<Js(1114112)):
                                            if (var.put('units', Js(4.0), '-')<Js(0.0)):
                                                break
                                            var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(18))|Js(240)), (((var.get('codePoint')>>Js(12))&Js(63))|Js(128)), (((var.get('codePoint')>>Js(6))&Js(63))|Js(128)), ((var.get('codePoint')&Js(63))|Js(128)))
                                        else:
                                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid code point')))
                                            raise PyJsTempException
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('bytes')
                PyJsHoisted_utf8ToBytes_.func_name = 'utf8ToBytes'
                var.put('utf8ToBytes', PyJsHoisted_utf8ToBytes_)
                @Js
                def PyJsHoisted_asciiToBytes_(str, this, arguments, var=var):
                    var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'str', 'byteArray'])
                    var.put('byteArray', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('str').get('length')):
                        try:
                            var.get('byteArray').callprop('push', (var.get('str').callprop('charCodeAt', var.get('i'))&Js(255)))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('byteArray')
                PyJsHoisted_asciiToBytes_.func_name = 'asciiToBytes'
                var.put('asciiToBytes', PyJsHoisted_asciiToBytes_)
                @Js
                def PyJsHoisted_utf16leToBytes_(str, units, this, arguments, var=var):
                    var = Scope({'str':str, 'units':units, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str', 'i', 'c', 'lo', 'hi', 'units', 'byteArray'])
                    pass
                    var.put('byteArray', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('str').get('length')):
                        try:
                            if (var.put('units', Js(2.0), '-')<Js(0.0)):
                                break
                            var.put('c', var.get('str').callprop('charCodeAt', var.get('i')))
                            var.put('hi', (var.get('c')>>Js(8.0)))
                            var.put('lo', (var.get('c')%Js(256.0)))
                            var.get('byteArray').callprop('push', var.get('lo'))
                            var.get('byteArray').callprop('push', var.get('hi'))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('byteArray')
                PyJsHoisted_utf16leToBytes_.func_name = 'utf16leToBytes'
                var.put('utf16leToBytes', PyJsHoisted_utf16leToBytes_)
                @Js
                def PyJsHoisted_base64ToBytes_(str, this, arguments, var=var):
                    var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
                    var.registers(['str'])
                    return var.get('base64').callprop('toByteArray', var.get('base64clean')(var.get('str')))
                PyJsHoisted_base64ToBytes_.func_name = 'base64ToBytes'
                var.put('base64ToBytes', PyJsHoisted_base64ToBytes_)
                @Js
                def PyJsHoisted_blitBuffer_(src, dst, offset, length, this, arguments, var=var):
                    var = Scope({'src':src, 'dst':dst, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['dst', 'i', 'src', 'length', 'offset'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('length')):
                        try:
                            if (((var.get('i')+var.get('offset'))>=var.get('dst').get('length')) or (var.get('i')>=var.get('src').get('length'))):
                                break
                            var.get('dst').put((var.get('i')+var.get('offset')), var.get('src').get(var.get('i')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('i')
                PyJsHoisted_blitBuffer_.func_name = 'blitBuffer'
                var.put('blitBuffer', PyJsHoisted_blitBuffer_)
                @Js
                def PyJsHoisted_isInstance_(obj, type, this, arguments, var=var):
                    var = Scope({'obj':obj, 'type':type, 'this':this, 'arguments':arguments}, var)
                    var.registers(['type', 'obj'])
                    return (var.get('obj').instanceof(var.get('type')) or ((((var.get('obj')!=var.get(u"null")) and (var.get('obj').get('constructor')!=var.get(u"null"))) and (var.get('obj').get('constructor').get('name')!=var.get(u"null"))) and _seq(var.get('obj').get('constructor').get('name'),var.get('type').get('name'))))
                PyJsHoisted_isInstance_.func_name = 'isInstance'
                var.put('isInstance', PyJsHoisted_isInstance_)
                @Js
                def PyJsHoisted_numberIsNaN_(obj, this, arguments, var=var):
                    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                    var.registers(['obj'])
                    return PyJsStrictNeq(var.get('obj'),var.get('obj'))
                PyJsHoisted_numberIsNaN_.func_name = 'numberIsNaN'
                var.put('numberIsNaN', PyJsHoisted_numberIsNaN_)
                Js('use strict')
                var.put('base64', var.get('require')(Js('base64-js')))
                var.put('ieee754', var.get('require')(Js('ieee754')))
                var.get('exports').put('Buffer', var.get('Buffer'))
                var.get('exports').put('SlowBuffer', var.get('SlowBuffer'))
                var.get('exports').put('INSPECT_MAX_BYTES', Js(50.0))
                var.put('K_MAX_LENGTH', Js(2147483647))
                var.get('exports').put('kMaxLength', var.get('K_MAX_LENGTH'))
                var.get('Buffer').put('TYPED_ARRAY_SUPPORT', var.get('typedArraySupport')())
                if ((var.get('Buffer').get('TYPED_ARRAY_SUPPORT').neg() and PyJsStrictNeq(var.get('console',throw=False).typeof(),Js('undefined'))) and _seq(var.get('console').get('error').typeof(),Js('function'))):
                    var.get('console').callprop('error', (Js('This browser lacks typed array (Uint8Array) support which is required by ')+Js('`buffer` v5.x. Use `buffer` v4.x if you require old browser support.')))
                pass
                @Js
                def PyJs_get_764_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_764_}, var)
                    var.registers([])
                    if var.get('Buffer').callprop('isBuffer', var.get(u"this")).neg():
                        return var.get('undefined')
                    return var.get(u"this").get('buffer')
                PyJs_get_764_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Buffer').get('prototype'), Js('parent'), Js({'enumerable':Js(True),'get':PyJs_get_764_}))
                @Js
                def PyJs_get_765_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_765_}, var)
                    var.registers([])
                    if var.get('Buffer').callprop('isBuffer', var.get(u"this")).neg():
                        return var.get('undefined')
                    return var.get(u"this").get('byteOffset')
                PyJs_get_765_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('Buffer').get('prototype'), Js('offset'), Js({'enumerable':Js(True),'get':PyJs_get_765_}))
                pass
                pass
                if ((PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and (var.get('Symbol').get('species')!=var.get(u"null"))) and _seq(var.get('Buffer').get(var.get('Symbol').get('species')),var.get('Buffer'))):
                    var.get('Object').callprop('defineProperty', var.get('Buffer'), var.get('Symbol').get('species'), Js({'value':var.get(u"null"),'configurable':Js(True),'enumerable':Js(False),'writable':Js(False)}))
                var.get('Buffer').put('poolSize', Js(8192.0))
                pass
                @Js
                def PyJs_anonymous_766_(value, encodingOrOffset, length, this, arguments, var=var):
                    var = Scope({'value':value, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'value', 'encodingOrOffset'])
                    return var.get('from')(var.get('value'), var.get('encodingOrOffset'), var.get('length'))
                PyJs_anonymous_766_._set_name('anonymous')
                var.get('Buffer').put('from', PyJs_anonymous_766_)
                var.get('Buffer').get('prototype').put('__proto__', var.get('Uint8Array').get('prototype'))
                var.get('Buffer').put('__proto__', var.get('Uint8Array'))
                pass
                pass
                @Js
                def PyJs_anonymous_767_(size, fill, encoding, this, arguments, var=var):
                    var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fill', 'size', 'encoding'])
                    return var.get('alloc')(var.get('size'), var.get('fill'), var.get('encoding'))
                PyJs_anonymous_767_._set_name('anonymous')
                var.get('Buffer').put('alloc', PyJs_anonymous_767_)
                pass
                @Js
                def PyJs_anonymous_768_(size, this, arguments, var=var):
                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size'])
                    return var.get('allocUnsafe')(var.get('size'))
                PyJs_anonymous_768_._set_name('anonymous')
                var.get('Buffer').put('allocUnsafe', PyJs_anonymous_768_)
                @Js
                def PyJs_anonymous_769_(size, this, arguments, var=var):
                    var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size'])
                    return var.get('allocUnsafe')(var.get('size'))
                PyJs_anonymous_769_._set_name('anonymous')
                var.get('Buffer').put('allocUnsafeSlow', PyJs_anonymous_769_)
                pass
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_isBuffer_770_(b, this, arguments, var=var):
                    var = Scope({'b':b, 'this':this, 'arguments':arguments, 'isBuffer':PyJs_isBuffer_770_}, var)
                    var.registers(['b'])
                    return (((var.get('b')!=var.get(u"null")) and _seq(var.get('b').get('_isBuffer'),Js(True))) and PyJsStrictNeq(var.get('b'),var.get('Buffer').get('prototype')))
                PyJs_isBuffer_770_._set_name('isBuffer')
                var.get('Buffer').put('isBuffer', PyJs_isBuffer_770_)
                @Js
                def PyJs_compare_771_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'compare':PyJs_compare_771_}, var)
                    var.registers(['a', 'i', 'x', 'len', 'y', 'b'])
                    if var.get('isInstance')(var.get('a'), var.get('Uint8Array')):
                        var.put('a', var.get('Buffer').callprop('from', var.get('a'), var.get('a').get('offset'), var.get('a').get('byteLength')))
                    if var.get('isInstance')(var.get('b'), var.get('Uint8Array')):
                        var.put('b', var.get('Buffer').callprop('from', var.get('b'), var.get('b').get('offset'), var.get('b').get('byteLength')))
                    if (var.get('Buffer').callprop('isBuffer', var.get('a')).neg() or var.get('Buffer').callprop('isBuffer', var.get('b')).neg()):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array')))
                        raise PyJsTempException
                    if _seq(var.get('a'),var.get('b')):
                        return Js(0.0)
                    var.put('x', var.get('a').get('length'))
                    var.put('y', var.get('b').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('len', var.get('Math').callprop('min', var.get('x'), var.get('y')))
                    while (var.get('i')<var.get('len')):
                        try:
                            if PyJsStrictNeq(var.get('a').get(var.get('i')),var.get('b').get(var.get('i'))):
                                var.put('x', var.get('a').get(var.get('i')))
                                var.put('y', var.get('b').get(var.get('i')))
                                break
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('x')<var.get('y')):
                        return (-Js(1.0))
                    if (var.get('y')<var.get('x')):
                        return Js(1.0)
                    return Js(0.0)
                PyJs_compare_771_._set_name('compare')
                var.get('Buffer').put('compare', PyJs_compare_771_)
                @Js
                def PyJs_isEncoding_772_(encoding, this, arguments, var=var):
                    var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments, 'isEncoding':PyJs_isEncoding_772_}, var)
                    var.registers(['encoding'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('String')(var.get('encoding')).callprop('toLowerCase'))
                        if SWITCHED or _seq(CONDITION, Js('hex')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('utf8')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('utf-8')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('ascii')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('latin1')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('binary')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('base64')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('ucs2')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('ucs-2')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('utf16le')):
                            SWITCHED = True
                            pass
                        if SWITCHED or _seq(CONDITION, Js('utf-16le')):
                            SWITCHED = True
                            return Js(True)
                        if True:
                            SWITCHED = True
                            return Js(False)
                        SWITCHED = True
                        break
                PyJs_isEncoding_772_._set_name('isEncoding')
                var.get('Buffer').put('isEncoding', PyJs_isEncoding_772_)
                @Js
                def PyJs_concat_773_(list, length, this, arguments, var=var):
                    var = Scope({'list':list, 'length':length, 'this':this, 'arguments':arguments, 'concat':PyJs_concat_773_}, var)
                    var.registers(['buffer', 'i', 'buf', 'length', 'list', 'pos'])
                    if var.get('Array').callprop('isArray', var.get('list')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"list" argument must be an Array of Buffers')))
                        raise PyJsTempException
                    if _seq(var.get('list').get('length'),Js(0.0)):
                        return var.get('Buffer').callprop('alloc', Js(0.0))
                    pass
                    if _seq(var.get('length'),var.get('undefined')):
                        var.put('length', Js(0.0))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('list').get('length')):
                            try:
                                var.put('length', var.get('list').get(var.get('i')).get('length'), '+')
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('buffer', var.get('Buffer').callprop('allocUnsafe', var.get('length')))
                    var.put('pos', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('list').get('length')):
                        try:
                            var.put('buf', var.get('list').get(var.get('i')))
                            if var.get('isInstance')(var.get('buf'), var.get('Uint8Array')):
                                var.put('buf', var.get('Buffer').callprop('from', var.get('buf')))
                            if var.get('Buffer').callprop('isBuffer', var.get('buf')).neg():
                                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"list" argument must be an Array of Buffers')))
                                raise PyJsTempException
                            var.get('buf').callprop('copy', var.get('buffer'), var.get('pos'))
                            var.put('pos', var.get('buf').get('length'), '+')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('buffer')
                PyJs_concat_773_._set_name('concat')
                var.get('Buffer').put('concat', PyJs_concat_773_)
                pass
                var.get('Buffer').put('byteLength', var.get('byteLength'))
                pass
                var.get('Buffer').get('prototype').put('_isBuffer', Js(True))
                pass
                @Js
                def PyJs_swap16_774_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'swap16':PyJs_swap16_774_}, var)
                    var.registers(['len', 'i'])
                    var.put('len', var.get(u"this").get('length'))
                    if PyJsStrictNeq((var.get('len')%Js(2.0)),Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Buffer size must be a multiple of 16-bits')))
                        raise PyJsTempException
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        try:
                            var.get('swap')(var.get(u"this"), var.get('i'), (var.get('i')+Js(1.0)))
                        finally:
                                var.put('i', Js(2.0), '+')
                    return var.get(u"this")
                PyJs_swap16_774_._set_name('swap16')
                var.get('Buffer').get('prototype').put('swap16', PyJs_swap16_774_)
                @Js
                def PyJs_swap32_775_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'swap32':PyJs_swap32_775_}, var)
                    var.registers(['len', 'i'])
                    var.put('len', var.get(u"this").get('length'))
                    if PyJsStrictNeq((var.get('len')%Js(4.0)),Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Buffer size must be a multiple of 32-bits')))
                        raise PyJsTempException
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        try:
                            var.get('swap')(var.get(u"this"), var.get('i'), (var.get('i')+Js(3.0)))
                            var.get('swap')(var.get(u"this"), (var.get('i')+Js(1.0)), (var.get('i')+Js(2.0)))
                        finally:
                                var.put('i', Js(4.0), '+')
                    return var.get(u"this")
                PyJs_swap32_775_._set_name('swap32')
                var.get('Buffer').get('prototype').put('swap32', PyJs_swap32_775_)
                @Js
                def PyJs_swap64_776_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'swap64':PyJs_swap64_776_}, var)
                    var.registers(['len', 'i'])
                    var.put('len', var.get(u"this").get('length'))
                    if PyJsStrictNeq((var.get('len')%Js(8.0)),Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Buffer size must be a multiple of 64-bits')))
                        raise PyJsTempException
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        try:
                            var.get('swap')(var.get(u"this"), var.get('i'), (var.get('i')+Js(7.0)))
                            var.get('swap')(var.get(u"this"), (var.get('i')+Js(1.0)), (var.get('i')+Js(6.0)))
                            var.get('swap')(var.get(u"this"), (var.get('i')+Js(2.0)), (var.get('i')+Js(5.0)))
                            var.get('swap')(var.get(u"this"), (var.get('i')+Js(3.0)), (var.get('i')+Js(4.0)))
                        finally:
                                var.put('i', Js(8.0), '+')
                    return var.get(u"this")
                PyJs_swap64_776_._set_name('swap64')
                var.get('Buffer').get('prototype').put('swap64', PyJs_swap64_776_)
                @Js
                def PyJs_toString_777_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_777_}, var)
                    var.registers(['length'])
                    var.put('length', var.get(u"this").get('length'))
                    if _seq(var.get('length'),Js(0.0)):
                        return Js('')
                    if _seq(var.get('arguments').get('length'),Js(0.0)):
                        return var.get('utf8Slice')(var.get(u"this"), Js(0.0), var.get('length'))
                    return var.get('slowToString').callprop('apply', var.get(u"this"), var.get('arguments'))
                PyJs_toString_777_._set_name('toString')
                var.get('Buffer').get('prototype').put('toString', PyJs_toString_777_)
                var.get('Buffer').get('prototype').put('toLocaleString', var.get('Buffer').get('prototype').get('toString'))
                @Js
                def PyJs_equals_778_(b, this, arguments, var=var):
                    var = Scope({'b':b, 'this':this, 'arguments':arguments, 'equals':PyJs_equals_778_}, var)
                    var.registers(['b'])
                    if var.get('Buffer').callprop('isBuffer', var.get('b')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a Buffer')))
                        raise PyJsTempException
                    if _seq(var.get(u"this"),var.get('b')):
                        return Js(True)
                    return _seq(var.get('Buffer').callprop('compare', var.get(u"this"), var.get('b')),Js(0.0))
                PyJs_equals_778_._set_name('equals')
                var.get('Buffer').get('prototype').put('equals', PyJs_equals_778_)
                @Js
                def PyJs_inspect_779_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'inspect':PyJs_inspect_779_}, var)
                    var.registers(['str', 'max'])
                    var.put('str', Js(''))
                    var.put('max', var.get('exports').get('INSPECT_MAX_BYTES'))
                    var.put('str', var.get(u"this").callprop('toString', Js('hex'), Js(0.0), var.get('max')).callprop('replace', JsRegExp('/(.{2})/g'), Js('$1 ')).callprop('trim'))
                    if (var.get(u"this").get('length')>var.get('max')):
                        var.put('str', Js(' ... '), '+')
                    return ((Js('<Buffer ')+var.get('str'))+Js('>'))
                PyJs_inspect_779_._set_name('inspect')
                var.get('Buffer').get('prototype').put('inspect', PyJs_inspect_779_)
                @Js
                def PyJs_compare_780_(target, start, end, thisStart, thisEnd, this, arguments, var=var):
                    var = Scope({'target':target, 'start':start, 'end':end, 'thisStart':thisStart, 'thisEnd':thisEnd, 'this':this, 'arguments':arguments, 'compare':PyJs_compare_780_}, var)
                    var.registers(['thisStart', 'thisCopy', 'thisEnd', 'len', 'x', 'y', 'i', 'start', 'target', 'end', 'targetCopy'])
                    if var.get('isInstance')(var.get('target'), var.get('Uint8Array')):
                        var.put('target', var.get('Buffer').callprop('from', var.get('target'), var.get('target').get('offset'), var.get('target').get('byteLength')))
                    if var.get('Buffer').callprop('isBuffer', var.get('target')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The "target" argument must be one of type Buffer or Uint8Array. ')+Js('Received type '))+(Js('undefined') if _seq(var.get('target',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('target'))))))
                        raise PyJsTempException
                    if _seq(var.get('start'),var.get('undefined')):
                        var.put('start', Js(0.0))
                    if _seq(var.get('end'),var.get('undefined')):
                        var.put('end', (var.get('target').get('length') if var.get('target') else Js(0.0)))
                    if _seq(var.get('thisStart'),var.get('undefined')):
                        var.put('thisStart', Js(0.0))
                    if _seq(var.get('thisEnd'),var.get('undefined')):
                        var.put('thisEnd', var.get(u"this").get('length'))
                    if ((((var.get('start')<Js(0.0)) or (var.get('end')>var.get('target').get('length'))) or (var.get('thisStart')<Js(0.0))) or (var.get('thisEnd')>var.get(u"this").get('length'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('out of range index')))
                        raise PyJsTempException
                    if ((var.get('thisStart')>=var.get('thisEnd')) and (var.get('start')>=var.get('end'))):
                        return Js(0.0)
                    if (var.get('thisStart')>=var.get('thisEnd')):
                        return (-Js(1.0))
                    if (var.get('start')>=var.get('end')):
                        return Js(1.0)
                    var.put('start', Js(0.0), '>>>')
                    var.put('end', Js(0.0), '>>>')
                    var.put('thisStart', Js(0.0), '>>>')
                    var.put('thisEnd', Js(0.0), '>>>')
                    if _seq(var.get(u"this"),var.get('target')):
                        return Js(0.0)
                    var.put('x', (var.get('thisEnd')-var.get('thisStart')))
                    var.put('y', (var.get('end')-var.get('start')))
                    var.put('len', var.get('Math').callprop('min', var.get('x'), var.get('y')))
                    var.put('thisCopy', var.get(u"this").callprop('slice', var.get('thisStart'), var.get('thisEnd')))
                    var.put('targetCopy', var.get('target').callprop('slice', var.get('start'), var.get('end')))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('len')):
                        try:
                            if PyJsStrictNeq(var.get('thisCopy').get(var.get('i')),var.get('targetCopy').get(var.get('i'))):
                                var.put('x', var.get('thisCopy').get(var.get('i')))
                                var.put('y', var.get('targetCopy').get(var.get('i')))
                                break
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    if (var.get('x')<var.get('y')):
                        return (-Js(1.0))
                    if (var.get('y')<var.get('x')):
                        return Js(1.0)
                    return Js(0.0)
                PyJs_compare_780_._set_name('compare')
                var.get('Buffer').get('prototype').put('compare', PyJs_compare_780_)
                pass
                pass
                @Js
                def PyJs_includes_781_(val, byteOffset, encoding, this, arguments, var=var):
                    var = Scope({'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_781_}, var)
                    var.registers(['encoding', 'byteOffset', 'val'])
                    return PyJsStrictNeq(var.get(u"this").callprop('indexOf', var.get('val'), var.get('byteOffset'), var.get('encoding')),(-Js(1.0)))
                PyJs_includes_781_._set_name('includes')
                var.get('Buffer').get('prototype').put('includes', PyJs_includes_781_)
                @Js
                def PyJs_indexOf_782_(val, byteOffset, encoding, this, arguments, var=var):
                    var = Scope({'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_782_}, var)
                    var.registers(['encoding', 'byteOffset', 'val'])
                    return var.get('bidirectionalIndexOf')(var.get(u"this"), var.get('val'), var.get('byteOffset'), var.get('encoding'), Js(True))
                PyJs_indexOf_782_._set_name('indexOf')
                var.get('Buffer').get('prototype').put('indexOf', PyJs_indexOf_782_)
                @Js
                def PyJs_lastIndexOf_783_(val, byteOffset, encoding, this, arguments, var=var):
                    var = Scope({'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_783_}, var)
                    var.registers(['encoding', 'byteOffset', 'val'])
                    return var.get('bidirectionalIndexOf')(var.get(u"this"), var.get('val'), var.get('byteOffset'), var.get('encoding'), Js(False))
                PyJs_lastIndexOf_783_._set_name('lastIndexOf')
                var.get('Buffer').get('prototype').put('lastIndexOf', PyJs_lastIndexOf_783_)
                pass
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_write_784_(string, offset, length, encoding, this, arguments, var=var):
                    var = Scope({'string':string, 'offset':offset, 'length':length, 'encoding':encoding, 'this':this, 'arguments':arguments, 'write':PyJs_write_784_}, var)
                    var.registers(['string', 'length', 'loweredCase', 'remaining', 'encoding', 'offset'])
                    if _seq(var.get('offset'),var.get('undefined')):
                        var.put('encoding', Js('utf8'))
                        var.put('length', var.get(u"this").get('length'))
                        var.put('offset', Js(0.0))
                    else:
                        if (_seq(var.get('length'),var.get('undefined')) and _seq(var.get('offset',throw=False).typeof(),Js('string'))):
                            var.put('encoding', var.get('offset'))
                            var.put('length', var.get(u"this").get('length'))
                            var.put('offset', Js(0.0))
                        else:
                            if var.get('isFinite')(var.get('offset')):
                                var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                                if var.get('isFinite')(var.get('length')):
                                    var.put('length', PyJsBshift(var.get('length'),Js(0.0)))
                                    if _seq(var.get('encoding'),var.get('undefined')):
                                        var.put('encoding', Js('utf8'))
                                else:
                                    var.put('encoding', var.get('length'))
                                    var.put('length', var.get('undefined'))
                            else:
                                PyJsTempException = JsToPyException(var.get('Error').create(Js('Buffer.write(string, encoding, offset[, length]) is no longer supported')))
                                raise PyJsTempException
                    var.put('remaining', (var.get(u"this").get('length')-var.get('offset')))
                    if (_seq(var.get('length'),var.get('undefined')) or (var.get('length')>var.get('remaining'))):
                        var.put('length', var.get('remaining'))
                    if (((var.get('string').get('length')>Js(0.0)) and ((var.get('length')<Js(0.0)) or (var.get('offset')<Js(0.0)))) or (var.get('offset')>var.get(u"this").get('length'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Attempt to write outside buffer bounds')))
                        raise PyJsTempException
                    if var.get('encoding').neg():
                        var.put('encoding', Js('utf8'))
                    var.put('loweredCase', Js(False))
                    #for JS loop

                    while 1:
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('encoding'))
                            if SWITCHED or _seq(CONDITION, Js('hex')):
                                SWITCHED = True
                                return var.get('hexWrite')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or _seq(CONDITION, Js('utf8')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('utf-8')):
                                SWITCHED = True
                                return var.get('utf8Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or _seq(CONDITION, Js('ascii')):
                                SWITCHED = True
                                return var.get('asciiWrite')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or _seq(CONDITION, Js('latin1')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('binary')):
                                SWITCHED = True
                                return var.get('latin1Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or _seq(CONDITION, Js('base64')):
                                SWITCHED = True
                                return var.get('base64Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if SWITCHED or _seq(CONDITION, Js('ucs2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('ucs-2')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('utf16le')):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js('utf-16le')):
                                SWITCHED = True
                                return var.get('ucs2Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                            if True:
                                SWITCHED = True
                                if var.get('loweredCase'):
                                    PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                                    raise PyJsTempException
                                var.put('encoding', (Js('')+var.get('encoding')).callprop('toLowerCase'))
                                var.put('loweredCase', Js(True))
                            SWITCHED = True
                            break

                PyJs_write_784_._set_name('write')
                var.get('Buffer').get('prototype').put('write', PyJs_write_784_)
                @Js
                def PyJs_toJSON_785_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_785_}, var)
                    var.registers([])
                    return Js({'type':Js('Buffer'),'data':var.get('Array').get('prototype').get('slice').callprop('call', (var.get(u"this").get('_arr') or var.get(u"this")), Js(0.0))})
                PyJs_toJSON_785_._set_name('toJSON')
                var.get('Buffer').get('prototype').put('toJSON', PyJs_toJSON_785_)
                pass
                pass
                var.put('MAX_ARGUMENTS_LENGTH', Js(4096))
                pass
                pass
                pass
                pass
                pass
                @Js
                def PyJs_slice_786_(start, end, this, arguments, var=var):
                    var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_786_}, var)
                    var.registers(['len', 'end', 'newBuf', 'start'])
                    var.put('len', var.get(u"this").get('length'))
                    var.put('start', (~(~var.get('start'))))
                    var.put('end', (var.get('len') if _seq(var.get('end'),var.get('undefined')) else (~(~var.get('end')))))
                    if (var.get('start')<Js(0.0)):
                        var.put('start', var.get('len'), '+')
                        if (var.get('start')<Js(0.0)):
                            var.put('start', Js(0.0))
                    else:
                        if (var.get('start')>var.get('len')):
                            var.put('start', var.get('len'))
                    if (var.get('end')<Js(0.0)):
                        var.put('end', var.get('len'), '+')
                        if (var.get('end')<Js(0.0)):
                            var.put('end', Js(0.0))
                    else:
                        if (var.get('end')>var.get('len')):
                            var.put('end', var.get('len'))
                    if (var.get('end')<var.get('start')):
                        var.put('end', var.get('start'))
                    var.put('newBuf', var.get(u"this").callprop('subarray', var.get('start'), var.get('end')))
                    var.get('newBuf').put('__proto__', var.get('Buffer').get('prototype'))
                    return var.get('newBuf')
                PyJs_slice_786_._set_name('slice')
                var.get('Buffer').get('prototype').put('slice', PyJs_slice_786_)
                pass
                @Js
                def PyJs_readUIntLE_787_(offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUIntLE':PyJs_readUIntLE_787_}, var)
                    var.registers(['noAssert', 'i', 'byteLength', 'val', 'mul', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
                    var.put('val', var.get(u"this").get(var.get('offset')))
                    var.put('mul', Js(1.0))
                    var.put('i', Js(0.0))
                    while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                        var.put('val', (var.get(u"this").get((var.get('offset')+var.get('i')))*var.get('mul')), '+')
                    return var.get('val')
                PyJs_readUIntLE_787_._set_name('readUIntLE')
                var.get('Buffer').get('prototype').put('readUIntLE', PyJs_readUIntLE_787_)
                @Js
                def PyJs_readUIntBE_788_(offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUIntBE':PyJs_readUIntBE_788_}, var)
                    var.registers(['byteLength', 'offset', 'mul', 'val', 'noAssert'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
                    var.put('val', var.get(u"this").get((var.get('offset')+var.put('byteLength',Js(var.get('byteLength').to_number())-Js(1)))))
                    var.put('mul', Js(1.0))
                    while ((var.get('byteLength')>Js(0.0)) and var.put('mul', Js(256), '*')):
                        var.put('val', (var.get(u"this").get((var.get('offset')+var.put('byteLength',Js(var.get('byteLength').to_number())-Js(1))))*var.get('mul')), '+')
                    return var.get('val')
                PyJs_readUIntBE_788_._set_name('readUIntBE')
                var.get('Buffer').get('prototype').put('readUIntBE', PyJs_readUIntBE_788_)
                @Js
                def PyJs_readUInt8_789_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt8':PyJs_readUInt8_789_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(1.0), var.get(u"this").get('length'))
                    return var.get(u"this").get(var.get('offset'))
                PyJs_readUInt8_789_._set_name('readUInt8')
                var.get('Buffer').get('prototype').put('readUInt8', PyJs_readUInt8_789_)
                @Js
                def PyJs_readUInt16LE_790_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt16LE':PyJs_readUInt16LE_790_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
                    return (var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))
                PyJs_readUInt16LE_790_._set_name('readUInt16LE')
                var.get('Buffer').get('prototype').put('readUInt16LE', PyJs_readUInt16LE_790_)
                @Js
                def PyJs_readUInt16BE_791_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt16BE':PyJs_readUInt16BE_791_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
                    return ((var.get(u"this").get(var.get('offset'))<<Js(8.0))|var.get(u"this").get((var.get('offset')+Js(1.0))))
                PyJs_readUInt16BE_791_._set_name('readUInt16BE')
                var.get('Buffer').get('prototype').put('readUInt16BE', PyJs_readUInt16BE_791_)
                @Js
                def PyJs_readUInt32LE_792_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt32LE':PyJs_readUInt32LE_792_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return (((var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(16.0)))+(var.get(u"this").get((var.get('offset')+Js(3.0)))*Js(16777216)))
                PyJs_readUInt32LE_792_._set_name('readUInt32LE')
                var.get('Buffer').get('prototype').put('readUInt32LE', PyJs_readUInt32LE_792_)
                @Js
                def PyJs_readUInt32BE_793_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt32BE':PyJs_readUInt32BE_793_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return ((var.get(u"this").get(var.get('offset'))*Js(16777216))+(((var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(16.0))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(8.0)))|var.get(u"this").get((var.get('offset')+Js(3.0)))))
                PyJs_readUInt32BE_793_._set_name('readUInt32BE')
                var.get('Buffer').get('prototype').put('readUInt32BE', PyJs_readUInt32BE_793_)
                @Js
                def PyJs_readIntLE_794_(offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readIntLE':PyJs_readIntLE_794_}, var)
                    var.registers(['noAssert', 'i', 'byteLength', 'val', 'mul', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
                    var.put('val', var.get(u"this").get(var.get('offset')))
                    var.put('mul', Js(1.0))
                    var.put('i', Js(0.0))
                    while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                        var.put('val', (var.get(u"this").get((var.get('offset')+var.get('i')))*var.get('mul')), '+')
                    var.put('mul', Js(128), '*')
                    if (var.get('val')>=var.get('mul')):
                        var.put('val', var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), '-')
                    return var.get('val')
                PyJs_readIntLE_794_._set_name('readIntLE')
                var.get('Buffer').get('prototype').put('readIntLE', PyJs_readIntLE_794_)
                @Js
                def PyJs_readIntBE_795_(offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readIntBE':PyJs_readIntBE_795_}, var)
                    var.registers(['noAssert', 'i', 'byteLength', 'val', 'mul', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
                    var.put('i', var.get('byteLength'))
                    var.put('mul', Js(1.0))
                    var.put('val', var.get(u"this").get((var.get('offset')+var.put('i',Js(var.get('i').to_number())-Js(1)))))
                    while ((var.get('i')>Js(0.0)) and var.put('mul', Js(256), '*')):
                        var.put('val', (var.get(u"this").get((var.get('offset')+var.put('i',Js(var.get('i').to_number())-Js(1))))*var.get('mul')), '+')
                    var.put('mul', Js(128), '*')
                    if (var.get('val')>=var.get('mul')):
                        var.put('val', var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), '-')
                    return var.get('val')
                PyJs_readIntBE_795_._set_name('readIntBE')
                var.get('Buffer').get('prototype').put('readIntBE', PyJs_readIntBE_795_)
                @Js
                def PyJs_readInt8_796_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt8':PyJs_readInt8_796_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(1.0), var.get(u"this").get('length'))
                    if (var.get(u"this").get(var.get('offset'))&Js(128)).neg():
                        return var.get(u"this").get(var.get('offset'))
                    return (((Js(255)-var.get(u"this").get(var.get('offset')))+Js(1.0))*(-Js(1.0)))
                PyJs_readInt8_796_._set_name('readInt8')
                var.get('Buffer').get('prototype').put('readInt8', PyJs_readInt8_796_)
                @Js
                def PyJs_readInt16LE_797_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt16LE':PyJs_readInt16LE_797_}, var)
                    var.registers(['noAssert', 'offset', 'val'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
                    var.put('val', (var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0))))
                    return ((var.get('val')|Js(4294901760)) if (var.get('val')&Js(32768)) else var.get('val'))
                PyJs_readInt16LE_797_._set_name('readInt16LE')
                var.get('Buffer').get('prototype').put('readInt16LE', PyJs_readInt16LE_797_)
                @Js
                def PyJs_readInt16BE_798_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt16BE':PyJs_readInt16BE_798_}, var)
                    var.registers(['noAssert', 'offset', 'val'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
                    var.put('val', (var.get(u"this").get((var.get('offset')+Js(1.0)))|(var.get(u"this").get(var.get('offset'))<<Js(8.0))))
                    return ((var.get('val')|Js(4294901760)) if (var.get('val')&Js(32768)) else var.get('val'))
                PyJs_readInt16BE_798_._set_name('readInt16BE')
                var.get('Buffer').get('prototype').put('readInt16BE', PyJs_readInt16BE_798_)
                @Js
                def PyJs_readInt32LE_799_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt32LE':PyJs_readInt32LE_799_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return (((var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(16.0)))|(var.get(u"this").get((var.get('offset')+Js(3.0)))<<Js(24.0)))
                PyJs_readInt32LE_799_._set_name('readInt32LE')
                var.get('Buffer').get('prototype').put('readInt32LE', PyJs_readInt32LE_799_)
                @Js
                def PyJs_readInt32BE_800_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt32BE':PyJs_readInt32BE_800_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return ((((var.get(u"this").get(var.get('offset'))<<Js(24.0))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(16.0)))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(8.0)))|var.get(u"this").get((var.get('offset')+Js(3.0))))
                PyJs_readInt32BE_800_._set_name('readInt32BE')
                var.get('Buffer').get('prototype').put('readInt32BE', PyJs_readInt32BE_800_)
                @Js
                def PyJs_readFloatLE_801_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readFloatLE':PyJs_readFloatLE_801_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(True), Js(23.0), Js(4.0))
                PyJs_readFloatLE_801_._set_name('readFloatLE')
                var.get('Buffer').get('prototype').put('readFloatLE', PyJs_readFloatLE_801_)
                @Js
                def PyJs_readFloatBE_802_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readFloatBE':PyJs_readFloatBE_802_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
                    return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(False), Js(23.0), Js(4.0))
                PyJs_readFloatBE_802_._set_name('readFloatBE')
                var.get('Buffer').get('prototype').put('readFloatBE', PyJs_readFloatBE_802_)
                @Js
                def PyJs_readDoubleLE_803_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readDoubleLE':PyJs_readDoubleLE_803_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(8.0), var.get(u"this").get('length'))
                    return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(True), Js(52.0), Js(8.0))
                PyJs_readDoubleLE_803_._set_name('readDoubleLE')
                var.get('Buffer').get('prototype').put('readDoubleLE', PyJs_readDoubleLE_803_)
                @Js
                def PyJs_readDoubleBE_804_(offset, noAssert, this, arguments, var=var):
                    var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readDoubleBE':PyJs_readDoubleBE_804_}, var)
                    var.registers(['noAssert', 'offset'])
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkOffset')(var.get('offset'), Js(8.0), var.get(u"this").get('length'))
                    return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(False), Js(52.0), Js(8.0))
                PyJs_readDoubleBE_804_._set_name('readDoubleBE')
                var.get('Buffer').get('prototype').put('readDoubleBE', PyJs_readDoubleBE_804_)
                pass
                @Js
                def PyJs_writeUIntLE_805_(value, offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUIntLE':PyJs_writeUIntLE_805_}, var)
                    var.registers(['noAssert', 'i', 'byteLength', 'value', 'mul', 'maxBytes', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.put('maxBytes', (var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength')))-Js(1.0)))
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), var.get('maxBytes'), Js(0.0))
                    var.put('mul', Js(1.0))
                    var.put('i', Js(0.0))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                        var.get(u"this").put((var.get('offset')+var.get('i')), ((var.get('value')/var.get('mul'))&Js(255)))
                    return (var.get('offset')+var.get('byteLength'))
                PyJs_writeUIntLE_805_._set_name('writeUIntLE')
                var.get('Buffer').get('prototype').put('writeUIntLE', PyJs_writeUIntLE_805_)
                @Js
                def PyJs_writeUIntBE_806_(value, offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUIntBE':PyJs_writeUIntBE_806_}, var)
                    var.registers(['noAssert', 'i', 'byteLength', 'value', 'mul', 'maxBytes', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.put('maxBytes', (var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength')))-Js(1.0)))
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), var.get('maxBytes'), Js(0.0))
                    var.put('i', (var.get('byteLength')-Js(1.0)))
                    var.put('mul', Js(1.0))
                    var.get(u"this").put((var.get('offset')+var.get('i')), (var.get('value')&Js(255)))
                    while ((var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)) and var.put('mul', Js(256), '*')):
                        var.get(u"this").put((var.get('offset')+var.get('i')), ((var.get('value')/var.get('mul'))&Js(255)))
                    return (var.get('offset')+var.get('byteLength'))
                PyJs_writeUIntBE_806_._set_name('writeUIntBE')
                var.get('Buffer').get('prototype').put('writeUIntBE', PyJs_writeUIntBE_806_)
                @Js
                def PyJs_writeUInt8_807_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt8':PyJs_writeUInt8_807_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(1.0), Js(255), Js(0.0))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(1.0))
                PyJs_writeUInt8_807_._set_name('writeUInt8')
                var.get('Buffer').get('prototype').put('writeUInt8', PyJs_writeUInt8_807_)
                @Js
                def PyJs_writeUInt16LE_808_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt16LE':PyJs_writeUInt16LE_808_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(65535), Js(0.0))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    return (var.get('offset')+Js(2.0))
                PyJs_writeUInt16LE_808_._set_name('writeUInt16LE')
                var.get('Buffer').get('prototype').put('writeUInt16LE', PyJs_writeUInt16LE_808_)
                @Js
                def PyJs_writeUInt16BE_809_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt16BE':PyJs_writeUInt16BE_809_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(65535), Js(0.0))
                    var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(2.0))
                PyJs_writeUInt16BE_809_._set_name('writeUInt16BE')
                var.get('Buffer').get('prototype').put('writeUInt16BE', PyJs_writeUInt16BE_809_)
                @Js
                def PyJs_writeUInt32LE_810_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt32LE':PyJs_writeUInt32LE_810_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(4294967295), Js(0.0))
                    var.get(u"this").put((var.get('offset')+Js(3.0)), PyJsBshift(var.get('value'),Js(24.0)))
                    var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(16.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(4.0))
                PyJs_writeUInt32LE_810_._set_name('writeUInt32LE')
                var.get('Buffer').get('prototype').put('writeUInt32LE', PyJs_writeUInt32LE_810_)
                @Js
                def PyJs_writeUInt32BE_811_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt32BE':PyJs_writeUInt32BE_811_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(4294967295), Js(0.0))
                    var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(24.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(16.0)))
                    var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(3.0)), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(4.0))
                PyJs_writeUInt32BE_811_._set_name('writeUInt32BE')
                var.get('Buffer').get('prototype').put('writeUInt32BE', PyJs_writeUInt32BE_811_)
                @Js
                def PyJs_writeIntLE_812_(value, offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeIntLE':PyJs_writeIntLE_812_}, var)
                    var.registers(['noAssert', 'i', 'byteLength', 'value', 'mul', 'limit', 'sub', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.put('limit', var.get('Math').callprop('pow', Js(2.0), ((Js(8.0)*var.get('byteLength'))-Js(1.0))))
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), (var.get('limit')-Js(1.0)), (-var.get('limit')))
                    var.put('i', Js(0.0))
                    var.put('mul', Js(1.0))
                    var.put('sub', Js(0.0))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                        if (((var.get('value')<Js(0.0)) and _seq(var.get('sub'),Js(0.0))) and PyJsStrictNeq(var.get(u"this").get(((var.get('offset')+var.get('i'))-Js(1.0))),Js(0.0))):
                            var.put('sub', Js(1.0))
                        var.get(u"this").put((var.get('offset')+var.get('i')), ((((var.get('value')/var.get('mul'))>>Js(0.0))-var.get('sub'))&Js(255)))
                    return (var.get('offset')+var.get('byteLength'))
                PyJs_writeIntLE_812_._set_name('writeIntLE')
                var.get('Buffer').get('prototype').put('writeIntLE', PyJs_writeIntLE_812_)
                @Js
                def PyJs_writeIntBE_813_(value, offset, byteLength, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeIntBE':PyJs_writeIntBE_813_}, var)
                    var.registers(['noAssert', 'i', 'byteLength', 'value', 'mul', 'limit', 'sub', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.put('limit', var.get('Math').callprop('pow', Js(2.0), ((Js(8.0)*var.get('byteLength'))-Js(1.0))))
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), (var.get('limit')-Js(1.0)), (-var.get('limit')))
                    var.put('i', (var.get('byteLength')-Js(1.0)))
                    var.put('mul', Js(1.0))
                    var.put('sub', Js(0.0))
                    var.get(u"this").put((var.get('offset')+var.get('i')), (var.get('value')&Js(255)))
                    while ((var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)) and var.put('mul', Js(256), '*')):
                        if (((var.get('value')<Js(0.0)) and _seq(var.get('sub'),Js(0.0))) and PyJsStrictNeq(var.get(u"this").get(((var.get('offset')+var.get('i'))+Js(1.0))),Js(0.0))):
                            var.put('sub', Js(1.0))
                        var.get(u"this").put((var.get('offset')+var.get('i')), ((((var.get('value')/var.get('mul'))>>Js(0.0))-var.get('sub'))&Js(255)))
                    return (var.get('offset')+var.get('byteLength'))
                PyJs_writeIntBE_813_._set_name('writeIntBE')
                var.get('Buffer').get('prototype').put('writeIntBE', PyJs_writeIntBE_813_)
                @Js
                def PyJs_writeInt8_814_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt8':PyJs_writeInt8_814_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(1.0), Js(127), (-Js(128)))
                    if (var.get('value')<Js(0.0)):
                        var.put('value', ((Js(255)+var.get('value'))+Js(1.0)))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(1.0))
                PyJs_writeInt8_814_._set_name('writeInt8')
                var.get('Buffer').get('prototype').put('writeInt8', PyJs_writeInt8_814_)
                @Js
                def PyJs_writeInt16LE_815_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt16LE':PyJs_writeInt16LE_815_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(32767), (-Js(32768)))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    return (var.get('offset')+Js(2.0))
                PyJs_writeInt16LE_815_._set_name('writeInt16LE')
                var.get('Buffer').get('prototype').put('writeInt16LE', PyJs_writeInt16LE_815_)
                @Js
                def PyJs_writeInt16BE_816_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt16BE':PyJs_writeInt16BE_816_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(32767), (-Js(32768)))
                    var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(2.0))
                PyJs_writeInt16BE_816_._set_name('writeInt16BE')
                var.get('Buffer').get('prototype').put('writeInt16BE', PyJs_writeInt16BE_816_)
                @Js
                def PyJs_writeInt32LE_817_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt32LE':PyJs_writeInt32LE_817_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(2147483647), (-Js(2147483648)))
                    var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(16.0)))
                    var.get(u"this").put((var.get('offset')+Js(3.0)), PyJsBshift(var.get('value'),Js(24.0)))
                    return (var.get('offset')+Js(4.0))
                PyJs_writeInt32LE_817_._set_name('writeInt32LE')
                var.get('Buffer').get('prototype').put('writeInt32LE', PyJs_writeInt32LE_817_)
                @Js
                def PyJs_writeInt32BE_818_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt32BE':PyJs_writeInt32BE_818_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    var.put('value', (+var.get('value')))
                    var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                    if var.get('noAssert').neg():
                        var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(2147483647), (-Js(2147483648)))
                    if (var.get('value')<Js(0.0)):
                        var.put('value', ((Js(4294967295)+var.get('value'))+Js(1.0)))
                    var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(24.0)))
                    var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(16.0)))
                    var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(8.0)))
                    var.get(u"this").put((var.get('offset')+Js(3.0)), (var.get('value')&Js(255)))
                    return (var.get('offset')+Js(4.0))
                PyJs_writeInt32BE_818_._set_name('writeInt32BE')
                var.get('Buffer').get('prototype').put('writeInt32BE', PyJs_writeInt32BE_818_)
                pass
                pass
                @Js
                def PyJs_writeFloatLE_819_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeFloatLE':PyJs_writeFloatLE_819_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    return var.get('writeFloat')(var.get(u"this"), var.get('value'), var.get('offset'), Js(True), var.get('noAssert'))
                PyJs_writeFloatLE_819_._set_name('writeFloatLE')
                var.get('Buffer').get('prototype').put('writeFloatLE', PyJs_writeFloatLE_819_)
                @Js
                def PyJs_writeFloatBE_820_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeFloatBE':PyJs_writeFloatBE_820_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    return var.get('writeFloat')(var.get(u"this"), var.get('value'), var.get('offset'), Js(False), var.get('noAssert'))
                PyJs_writeFloatBE_820_._set_name('writeFloatBE')
                var.get('Buffer').get('prototype').put('writeFloatBE', PyJs_writeFloatBE_820_)
                pass
                @Js
                def PyJs_writeDoubleLE_821_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeDoubleLE':PyJs_writeDoubleLE_821_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    return var.get('writeDouble')(var.get(u"this"), var.get('value'), var.get('offset'), Js(True), var.get('noAssert'))
                PyJs_writeDoubleLE_821_._set_name('writeDoubleLE')
                var.get('Buffer').get('prototype').put('writeDoubleLE', PyJs_writeDoubleLE_821_)
                @Js
                def PyJs_writeDoubleBE_822_(value, offset, noAssert, this, arguments, var=var):
                    var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeDoubleBE':PyJs_writeDoubleBE_822_}, var)
                    var.registers(['noAssert', 'value', 'offset'])
                    return var.get('writeDouble')(var.get(u"this"), var.get('value'), var.get('offset'), Js(False), var.get('noAssert'))
                PyJs_writeDoubleBE_822_._set_name('writeDoubleBE')
                var.get('Buffer').get('prototype').put('writeDoubleBE', PyJs_writeDoubleBE_822_)
                @Js
                def PyJs_copy_823_(target, targetStart, start, end, this, arguments, var=var):
                    var = Scope({'target':target, 'targetStart':targetStart, 'start':start, 'end':end, 'this':this, 'arguments':arguments, 'copy':PyJs_copy_823_}, var)
                    var.registers(['len', 'i', 'targetStart', 'start', 'target', 'end'])
                    if var.get('Buffer').callprop('isBuffer', var.get('target')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('argument should be a Buffer')))
                        raise PyJsTempException
                    if var.get('start').neg():
                        var.put('start', Js(0.0))
                    if (var.get('end').neg() and PyJsStrictNeq(var.get('end'),Js(0.0))):
                        var.put('end', var.get(u"this").get('length'))
                    if (var.get('targetStart')>=var.get('target').get('length')):
                        var.put('targetStart', var.get('target').get('length'))
                    if var.get('targetStart').neg():
                        var.put('targetStart', Js(0.0))
                    if ((var.get('end')>Js(0.0)) and (var.get('end')<var.get('start'))):
                        var.put('end', var.get('start'))
                    if _seq(var.get('end'),var.get('start')):
                        return Js(0.0)
                    if (_seq(var.get('target').get('length'),Js(0.0)) or _seq(var.get(u"this").get('length'),Js(0.0))):
                        return Js(0.0)
                    if (var.get('targetStart')<Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('targetStart out of bounds')))
                        raise PyJsTempException
                    if ((var.get('start')<Js(0.0)) or (var.get('start')>=var.get(u"this").get('length'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                        raise PyJsTempException
                    if (var.get('end')<Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('sourceEnd out of bounds')))
                        raise PyJsTempException
                    if (var.get('end')>var.get(u"this").get('length')):
                        var.put('end', var.get(u"this").get('length'))
                    if ((var.get('target').get('length')-var.get('targetStart'))<(var.get('end')-var.get('start'))):
                        var.put('end', ((var.get('target').get('length')-var.get('targetStart'))+var.get('start')))
                    var.put('len', (var.get('end')-var.get('start')))
                    if (_seq(var.get(u"this"),var.get('target')) and _seq(var.get('Uint8Array').get('prototype').get('copyWithin').typeof(),Js('function'))):
                        var.get(u"this").callprop('copyWithin', var.get('targetStart'), var.get('start'), var.get('end'))
                    else:
                        if ((_seq(var.get(u"this"),var.get('target')) and (var.get('start')<var.get('targetStart'))) and (var.get('targetStart')<var.get('end'))):
                            #for JS loop
                            var.put('i', (var.get('len')-Js(1.0)))
                            while (var.get('i')>=Js(0.0)):
                                try:
                                    var.get('target').put((var.get('i')+var.get('targetStart')), var.get(u"this").get((var.get('i')+var.get('start'))))
                                finally:
                                        var.put('i',Js(var.get('i').to_number())-Js(1))
                        else:
                            var.get('Uint8Array').get('prototype').get('set').callprop('call', var.get('target'), var.get(u"this").callprop('subarray', var.get('start'), var.get('end')), var.get('targetStart'))
                    return var.get('len')
                PyJs_copy_823_._set_name('copy')
                var.get('Buffer').get('prototype').put('copy', PyJs_copy_823_)
                @Js
                def PyJs_fill_824_(val, start, end, encoding, this, arguments, var=var):
                    var = Scope({'val':val, 'start':start, 'end':end, 'encoding':encoding, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_824_}, var)
                    var.registers(['i', 'len', 'start', 'end', 'code', 'encoding', 'val', 'bytes'])
                    if _seq(var.get('val',throw=False).typeof(),Js('string')):
                        if _seq(var.get('start',throw=False).typeof(),Js('string')):
                            var.put('encoding', var.get('start'))
                            var.put('start', Js(0.0))
                            var.put('end', var.get(u"this").get('length'))
                        else:
                            if _seq(var.get('end',throw=False).typeof(),Js('string')):
                                var.put('encoding', var.get('end'))
                                var.put('end', var.get(u"this").get('length'))
                        if (PyJsStrictNeq(var.get('encoding'),var.get('undefined')) and PyJsStrictNeq(var.get('encoding',throw=False).typeof(),Js('string'))):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('encoding must be a string')))
                            raise PyJsTempException
                        if (_seq(var.get('encoding',throw=False).typeof(),Js('string')) and var.get('Buffer').callprop('isEncoding', var.get('encoding')).neg()):
                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                            raise PyJsTempException
                        if _seq(var.get('val').get('length'),Js(1.0)):
                            var.put('code', var.get('val').callprop('charCodeAt', Js(0.0)))
                            if ((_seq(var.get('encoding'),Js('utf8')) and (var.get('code')<Js(128.0))) or _seq(var.get('encoding'),Js('latin1'))):
                                var.put('val', var.get('code'))
                    else:
                        if _seq(var.get('val',throw=False).typeof(),Js('number')):
                            var.put('val', (var.get('val')&Js(255.0)))
                    if (((var.get('start')<Js(0.0)) or (var.get(u"this").get('length')<var.get('start'))) or (var.get(u"this").get('length')<var.get('end'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Out of range index')))
                        raise PyJsTempException
                    if (var.get('end')<=var.get('start')):
                        return var.get(u"this")
                    var.put('start', PyJsBshift(var.get('start'),Js(0.0)))
                    var.put('end', (var.get(u"this").get('length') if _seq(var.get('end'),var.get('undefined')) else PyJsBshift(var.get('end'),Js(0.0))))
                    if var.get('val').neg():
                        var.put('val', Js(0.0))
                    pass
                    if _seq(var.get('val',throw=False).typeof(),Js('number')):
                        #for JS loop
                        var.put('i', var.get('start'))
                        while (var.get('i')<var.get('end')):
                            try:
                                var.get(u"this").put(var.get('i'), var.get('val'))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                    else:
                        var.put('bytes', (var.get('val') if var.get('Buffer').callprop('isBuffer', var.get('val')) else var.get('Buffer').callprop('from', var.get('val'), var.get('encoding'))))
                        var.put('len', var.get('bytes').get('length'))
                        if _seq(var.get('len'),Js(0.0)):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The value "')+var.get('val'))+Js('" is invalid for argument "value"'))))
                            raise PyJsTempException
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<(var.get('end')-var.get('start'))):
                            try:
                                var.get(u"this").put((var.get('i')+var.get('start')), var.get('bytes').get((var.get('i')%var.get('len'))))
                            finally:
                                    var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get(u"this")
                PyJs_fill_824_._set_name('fill')
                var.get('Buffer').get('prototype').put('fill', PyJs_fill_824_)
                var.put('INVALID_BASE64_RE', JsRegExp('/[^+/0-9A-Za-z-_]/g'))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
            PyJs_anonymous_762_._set_name('anonymous')
            PyJs_anonymous_762_.callprop('call', var.get(u"this"))
        PyJs_anonymous_761_._set_name('anonymous')
        PyJs_anonymous_761_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_760_._set_name('anonymous')
    @Js
    def PyJs_anonymous_825_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'StringDecoder', 'require', 'Buffer', 'module', 'Transform', 'inherits', 'CipherBase'])
        @Js
        def PyJsHoisted_CipherBase_(hashMode, this, arguments, var=var):
            var = Scope({'hashMode':hashMode, 'this':this, 'arguments':arguments}, var)
            var.registers(['hashMode'])
            var.get('Transform').callprop('call', var.get(u"this"))
            var.get(u"this").put('hashMode', _seq(var.get('hashMode',throw=False).typeof(),Js('string')))
            if var.get(u"this").get('hashMode'):
                var.get(u"this").put(var.get('hashMode'), var.get(u"this").get('_finalOrDigest'))
            else:
                var.get(u"this").put('final', var.get(u"this").get('_finalOrDigest'))
            if var.get(u"this").get('_final'):
                var.get(u"this").put('__final', var.get(u"this").get('_final'))
                var.get(u"this").put('_final', var.get(u"null"))
            var.get(u"this").put('_decoder', var.get(u"null"))
            var.get(u"this").put('_encoding', var.get(u"null"))
        PyJsHoisted_CipherBase_.func_name = 'CipherBase'
        var.put('CipherBase', PyJsHoisted_CipherBase_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('Transform', var.get('require')(Js('stream')).get('Transform'))
        var.put('StringDecoder', var.get('require')(Js('string_decoder')).get('StringDecoder'))
        var.put('inherits', var.get('require')(Js('inherits')))
        pass
        var.get('inherits')(var.get('CipherBase'), var.get('Transform'))
        @Js
        def PyJs_anonymous_826_(data, inputEnc, outputEnc, this, arguments, var=var):
            var = Scope({'data':data, 'inputEnc':inputEnc, 'outputEnc':outputEnc, 'this':this, 'arguments':arguments}, var)
            var.registers(['inputEnc', 'data', 'outputEnc', 'outData'])
            if _seq(var.get('data',throw=False).typeof(),Js('string')):
                var.put('data', var.get('Buffer').callprop('from', var.get('data'), var.get('inputEnc')))
            var.put('outData', var.get(u"this").callprop('_update', var.get('data')))
            if var.get(u"this").get('hashMode'):
                return var.get(u"this")
            if var.get('outputEnc'):
                var.put('outData', var.get(u"this").callprop('_toString', var.get('outData'), var.get('outputEnc')))
            return var.get('outData')
        PyJs_anonymous_826_._set_name('anonymous')
        var.get('CipherBase').get('prototype').put('update', PyJs_anonymous_826_)
        @Js
        def PyJs_anonymous_827_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJs_anonymous_827_._set_name('anonymous')
        var.get('CipherBase').get('prototype').put('setAutoPadding', PyJs_anonymous_827_)
        @Js
        def PyJs_anonymous_828_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('trying to get auth tag in unsupported state')))
            raise PyJsTempException
        PyJs_anonymous_828_._set_name('anonymous')
        var.get('CipherBase').get('prototype').put('getAuthTag', PyJs_anonymous_828_)
        @Js
        def PyJs_anonymous_829_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('trying to set auth tag in unsupported state')))
            raise PyJsTempException
        PyJs_anonymous_829_._set_name('anonymous')
        var.get('CipherBase').get('prototype').put('setAuthTag', PyJs_anonymous_829_)
        @Js
        def PyJs_anonymous_830_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('trying to set aad in unsupported state')))
            raise PyJsTempException
        PyJs_anonymous_830_._set_name('anonymous')
        var.get('CipherBase').get('prototype').put('setAAD', PyJs_anonymous_830_)
        @Js
        def PyJs_anonymous_831_(data, _, next, this, arguments, var=var):
            var = Scope({'data':data, '_':_, 'next':next, 'this':this, 'arguments':arguments}, var)
            var.registers(['_', 'err', 'next', 'data'])
            pass
            try:
                if var.get(u"this").get('hashMode'):
                    var.get(u"this").callprop('_update', var.get('data'))
                else:
                    var.get(u"this").callprop('push', var.get(u"this").callprop('_update', var.get('data')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_48117682 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('err', var.get('e'))
                finally:
                    if PyJsHolder_65_48117682 is not None:
                        var.own['e'] = PyJsHolder_65_48117682
                    else:
                        del var.own['e']
                    del PyJsHolder_65_48117682
            finally:
                var.get('next')(var.get('err'))
        PyJs_anonymous_831_._set_name('anonymous')
        var.get('CipherBase').get('prototype').put('_transform', PyJs_anonymous_831_)
        @Js
        def PyJs_anonymous_832_(done, this, arguments, var=var):
            var = Scope({'done':done, 'this':this, 'arguments':arguments}, var)
            var.registers(['err', 'done'])
            pass
            try:
                var.get(u"this").callprop('push', var.get(u"this").callprop('__final'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_48229762 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('err', var.get('e'))
                finally:
                    if PyJsHolder_65_48229762 is not None:
                        var.own['e'] = PyJsHolder_65_48229762
                    else:
                        del var.own['e']
                    del PyJsHolder_65_48229762
            var.get('done')(var.get('err'))
        PyJs_anonymous_832_._set_name('anonymous')
        var.get('CipherBase').get('prototype').put('_flush', PyJs_anonymous_832_)
        @Js
        def PyJs_anonymous_833_(outputEnc, this, arguments, var=var):
            var = Scope({'outputEnc':outputEnc, 'this':this, 'arguments':arguments}, var)
            var.registers(['outputEnc', 'outData'])
            var.put('outData', (var.get(u"this").callprop('__final') or var.get('Buffer').callprop('alloc', Js(0.0))))
            if var.get('outputEnc'):
                var.put('outData', var.get(u"this").callprop('_toString', var.get('outData'), var.get('outputEnc'), Js(True)))
            return var.get('outData')
        PyJs_anonymous_833_._set_name('anonymous')
        var.get('CipherBase').get('prototype').put('_finalOrDigest', PyJs_anonymous_833_)
        @Js
        def PyJs_anonymous_834_(value, enc, fin, this, arguments, var=var):
            var = Scope({'value':value, 'enc':enc, 'fin':fin, 'this':this, 'arguments':arguments}, var)
            var.registers(['out', 'value', 'fin', 'enc'])
            if var.get(u"this").get('_decoder').neg():
                var.get(u"this").put('_decoder', var.get('StringDecoder').create(var.get('enc')))
                var.get(u"this").put('_encoding', var.get('enc'))
            if PyJsStrictNeq(var.get(u"this").get('_encoding'),var.get('enc')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js("can't switch encodings")))
                raise PyJsTempException
            var.put('out', var.get(u"this").get('_decoder').callprop('write', var.get('value')))
            if var.get('fin'):
                var.put('out', var.get(u"this").get('_decoder').callprop('end'), '+')
            return var.get('out')
        PyJs_anonymous_834_._set_name('anonymous')
        var.get('CipherBase').get('prototype').put('_toString', PyJs_anonymous_834_)
        var.get('module').put('exports', var.get('CipherBase'))
    PyJs_anonymous_825_._set_name('anonymous')
    @Js
    def PyJs_anonymous_835_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('../../modules/core.regexp.escape'))
        var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('RegExp').get('escape'))
    PyJs_anonymous_835_._set_name('anonymous')
    @Js
    def PyJs_anonymous_836_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_837_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it',throw=False).typeof()!=Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not a function!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_837_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_837_)
    PyJs_anonymous_836_._set_name('anonymous')
    @Js
    def PyJs_anonymous_838_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'cof', 'module'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_anonymous_839_(it, msg, this, arguments, var=var):
            var = Scope({'it':it, 'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['msg', 'it'])
            if ((var.get('it',throw=False).typeof()!=Js('number')) and (var.get('cof')(var.get('it'))!=Js('Number'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(var.get('msg')))
                raise PyJsTempException
            return (+var.get('it'))
        PyJs_anonymous_839_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_839_)
    PyJs_anonymous_838_._set_name('anonymous')
    @Js
    def PyJs_anonymous_840_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'UNSCOPABLES', 'ArrayProto'])
        var.put('UNSCOPABLES', var.get('require')(Js('./_wks'))(Js('unscopables')))
        var.put('ArrayProto', var.get('Array').get('prototype'))
        if (var.get('ArrayProto').get(var.get('UNSCOPABLES'))==var.get('undefined')):
            var.get('require')(Js('./_hide'))(var.get('ArrayProto'), var.get('UNSCOPABLES'), Js({}))
        @Js
        def PyJs_anonymous_841_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.get('ArrayProto').get(var.get('UNSCOPABLES')).put(var.get('key'), Js(True))
        PyJs_anonymous_841_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_841_)
    PyJs_anonymous_840_._set_name('anonymous')
    @Js
    def PyJs_anonymous_842_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'at', 'require', 'module'])
        Js('use strict')
        var.put('at', var.get('require')(Js('./_string-at'))(Js(True)))
        @Js
        def PyJs_anonymous_843_(S, index, unicode, this, arguments, var=var):
            var = Scope({'S':S, 'index':index, 'unicode':unicode, 'this':this, 'arguments':arguments}, var)
            var.registers(['S', 'index', 'unicode'])
            return (var.get('index')+(var.get('at')(var.get('S'), var.get('index')).get('length') if var.get('unicode') else Js(1.0)))
        PyJs_anonymous_843_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_843_)
    PyJs_anonymous_842_._set_name('anonymous')
    @Js
    def PyJs_anonymous_844_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_845_(it, Constructor, name, forbiddenField, this, arguments, var=var):
            var = Scope({'it':it, 'Constructor':Constructor, 'name':name, 'forbiddenField':forbiddenField, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'Constructor', 'it', 'forbiddenField'])
            if (var.get('it').instanceof(var.get('Constructor')).neg() or (PyJsStrictNeq(var.get('forbiddenField'),var.get('undefined')) and var.get('it').contains(var.get('forbiddenField')))):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('name')+Js(': incorrect invocation!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_845_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_845_)
    PyJs_anonymous_844_._set_name('anonymous')
    @Js
    def PyJs_anonymous_846_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'isObject', 'require', 'module'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_847_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if var.get('isObject')(var.get('it')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not an object!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_847_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_847_)
    PyJs_anonymous_846_._set_name('anonymous')
    @Js
    def PyJs_anonymous_848_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'toAbsoluteIndex', 'toObject'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_copyWithin_849_(target, start, this, arguments, var=var):
            var = Scope({'target':target, 'start':start, 'this':this, 'arguments':arguments, 'copyWithin':PyJs_copyWithin_849_}, var)
            var.registers(['inc', 'len', 'from', 'count', 'start', 'target', 'end', 'O', 'to'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('len', var.get('toLength')(var.get('O').get('length')))
            var.put('to', var.get('toAbsoluteIndex')(var.get('target'), var.get('len')))
            var.put('from', var.get('toAbsoluteIndex')(var.get('start'), var.get('len')))
            var.put('end', (var.get('arguments').get('2') if (var.get('arguments').get('length')>Js(2.0)) else var.get('undefined')))
            var.put('count', var.get('Math').callprop('min', ((var.get('len') if _seq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('len')))-var.get('from')), (var.get('len')-var.get('to'))))
            var.put('inc', Js(1.0))
            if ((var.get('from')<var.get('to')) and (var.get('to')<(var.get('from')+var.get('count')))):
                var.put('inc', (-Js(1.0)))
                var.put('from', (var.get('count')-Js(1.0)), '+')
                var.put('to', (var.get('count')-Js(1.0)), '+')
            while ((var.put('count',Js(var.get('count').to_number())-Js(1))+Js(1))>Js(0.0)):
                if var.get('O').contains(var.get('from')):
                    var.get('O').put(var.get('to'), var.get('O').get(var.get('from')))
                else:
                    var.get('O').delete(var.get('to'))
                var.put('to', var.get('inc'), '+')
                var.put('from', var.get('inc'), '+')
            return var.get('O')
        PyJs_copyWithin_849_._set_name('copyWithin')
        var.get('module').put('exports', (Js([]).get('copyWithin') or PyJs_copyWithin_849_))
    PyJs_anonymous_848_._set_name('anonymous')
    @Js
    def PyJs_anonymous_850_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'toAbsoluteIndex', 'toObject'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_fill_851_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_851_}, var)
            var.registers(['length', 'index', 'endPos', 'end', 'value', 'O', 'aLen'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('index', var.get('toAbsoluteIndex')((var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')), var.get('length')))
            var.put('end', (var.get('arguments').get('2') if (var.get('aLen')>Js(2.0)) else var.get('undefined')))
            var.put('endPos', (var.get('length') if _seq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('length'))))
            while (var.get('endPos')>var.get('index')):
                var.get('O').put((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('value'))
            return var.get('O')
        PyJs_fill_851_._set_name('fill')
        var.get('module').put('exports', PyJs_fill_851_)
    PyJs_anonymous_850_._set_name('anonymous')
    @Js
    def PyJs_anonymous_852_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'forOf'])
        var.put('forOf', var.get('require')(Js('./_for-of')))
        @Js
        def PyJs_anonymous_853_(iter, ITERATOR, this, arguments, var=var):
            var = Scope({'iter':iter, 'ITERATOR':ITERATOR, 'this':this, 'arguments':arguments}, var)
            var.registers(['ITERATOR', 'iter', 'result'])
            var.put('result', Js([]))
            var.get('forOf')(var.get('iter'), Js(False), var.get('result').get('push'), var.get('result'), var.get('ITERATOR'))
            return var.get('result')
        PyJs_anonymous_853_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_853_)
    PyJs_anonymous_852_._set_name('anonymous')
    @Js
    def PyJs_anonymous_854_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'toIObject', 'toAbsoluteIndex'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        @Js
        def PyJs_anonymous_855_(IS_INCLUDES, this, arguments, var=var):
            var = Scope({'IS_INCLUDES':IS_INCLUDES, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_INCLUDES'])
            @Js
            def PyJs_anonymous_856_(PyJsArg_2474686973_, el, fromIndex, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'el':el, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                var.registers(['$this', 'length', 'index', 'fromIndex', 'value', 'el', 'O'])
                var.put('O', var.get('toIObject')(var.get('$this')))
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                var.put('index', var.get('toAbsoluteIndex')(var.get('fromIndex'), var.get('length')))
                pass
                if (var.get('IS_INCLUDES') and (var.get('el')!=var.get('el'))):
                    while (var.get('length')>var.get('index')):
                        var.put('value', var.get('O').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                        if (var.get('value')!=var.get('value')):
                            return Js(True)
                else:
                    #for JS loop

                    while (var.get('length')>var.get('index')):
                        try:
                            if (var.get('IS_INCLUDES') or var.get('O').contains(var.get('index'))):
                                if _seq(var.get('O').get(var.get('index')),var.get('el')):
                                    return ((var.get('IS_INCLUDES') or var.get('index')) or Js(0.0))
                        finally:
                                (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return (var.get('IS_INCLUDES').neg() and (-Js(1.0)))
            PyJs_anonymous_856_._set_name('anonymous')
            return PyJs_anonymous_856_
        PyJs_anonymous_855_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_855_)
    PyJs_anonymous_854_._set_name('anonymous')
    @Js
    def PyJs_anonymous_857_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'toObject', 'ctx', 'asc', 'IObject'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('asc', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_anonymous_858_(TYPE, PyJsArg_24637265617465_, this, arguments, var=var):
            var = Scope({'TYPE':TYPE, '$create':PyJsArg_24637265617465_, 'this':this, 'arguments':arguments}, var)
            var.registers(['TYPE', 'IS_EVERY', '$create', 'IS_FILTER', 'create', 'IS_MAP', 'NO_HOLES', 'IS_FIND_INDEX', 'IS_SOME'])
            var.put('IS_MAP', (var.get('TYPE')==Js(1.0)))
            var.put('IS_FILTER', (var.get('TYPE')==Js(2.0)))
            var.put('IS_SOME', (var.get('TYPE')==Js(3.0)))
            var.put('IS_EVERY', (var.get('TYPE')==Js(4.0)))
            var.put('IS_FIND_INDEX', (var.get('TYPE')==Js(6.0)))
            var.put('NO_HOLES', ((var.get('TYPE')==Js(5.0)) or var.get('IS_FIND_INDEX')))
            var.put('create', (var.get('$create') or var.get('asc')))
            @Js
            def PyJs_anonymous_859_(PyJsArg_2474686973_, callbackfn, that, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'callbackfn':callbackfn, 'that':that, 'this':this, 'arguments':arguments}, var)
                var.registers(['$this', 'self', 'f', 'callbackfn', 'length', 'index', 'that', 'O', 'val', 'result', 'res'])
                var.put('O', var.get('toObject')(var.get('$this')))
                var.put('self', var.get('IObject')(var.get('O')))
                var.put('f', var.get('ctx')(var.get('callbackfn'), var.get('that'), Js(3.0)))
                var.put('length', var.get('toLength')(var.get('self').get('length')))
                var.put('index', Js(0.0))
                var.put('result', (var.get('create')(var.get('$this'), var.get('length')) if var.get('IS_MAP') else (var.get('create')(var.get('$this'), Js(0.0)) if var.get('IS_FILTER') else var.get('undefined'))))
                pass
                #for JS loop

                while (var.get('length')>var.get('index')):
                    try:
                        if (var.get('NO_HOLES') or var.get('self').contains(var.get('index'))):
                            var.put('val', var.get('self').get(var.get('index')))
                            var.put('res', var.get('f')(var.get('val'), var.get('index'), var.get('O')))
                            if var.get('TYPE'):
                                if var.get('IS_MAP'):
                                    var.get('result').put(var.get('index'), var.get('res'))
                                else:
                                    if var.get('res'):
                                        while 1:
                                            SWITCHED = False
                                            CONDITION = (var.get('TYPE'))
                                            if SWITCHED or _seq(CONDITION, Js(3.0)):
                                                SWITCHED = True
                                                return Js(True)
                                            if SWITCHED or _seq(CONDITION, Js(5.0)):
                                                SWITCHED = True
                                                return var.get('val')
                                            if SWITCHED or _seq(CONDITION, Js(6.0)):
                                                SWITCHED = True
                                                return var.get('index')
                                            if SWITCHED or _seq(CONDITION, Js(2.0)):
                                                SWITCHED = True
                                                var.get('result').callprop('push', var.get('val'))
                                            SWITCHED = True
                                            break
                                    else:
                                        if var.get('IS_EVERY'):
                                            return Js(False)
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return ((-Js(1.0)) if var.get('IS_FIND_INDEX') else (var.get('IS_EVERY') if (var.get('IS_SOME') or var.get('IS_EVERY')) else var.get('result')))
            PyJs_anonymous_859_._set_name('anonymous')
            return PyJs_anonymous_859_
        PyJs_anonymous_858_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_858_)
    PyJs_anonymous_857_._set_name('anonymous')
    @Js
    def PyJs_anonymous_860_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'aFunction', 'toObject', 'IObject'])
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_anonymous_861_(that, callbackfn, aLen, memo, isRight, this, arguments, var=var):
            var = Scope({'that':that, 'callbackfn':callbackfn, 'aLen':aLen, 'memo':memo, 'isRight':isRight, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'memo', 'callbackfn', 'i', 'length', 'index', 'that', 'isRight', 'O', 'aLen'])
            var.get('aFunction')(var.get('callbackfn'))
            var.put('O', var.get('toObject')(var.get('that')))
            var.put('self', var.get('IObject')(var.get('O')))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('index', ((var.get('length')-Js(1.0)) if var.get('isRight') else Js(0.0)))
            var.put('i', ((-Js(1.0)) if var.get('isRight') else Js(1.0)))
            if (var.get('aLen')<Js(2.0)):
                #for JS loop

                while 1:
                    if var.get('self').contains(var.get('index')):
                        var.put('memo', var.get('self').get(var.get('index')))
                        var.put('index', var.get('i'), '+')
                        break
                    var.put('index', var.get('i'), '+')
                    if ((var.get('index')<Js(0.0)) if var.get('isRight') else (var.get('length')<=var.get('index'))):
                        PyJsTempException = JsToPyException(var.get('TypeError')(Js('Reduce of empty array with no initial value')))
                        raise PyJsTempException

            #for JS loop

            while ((var.get('index')>=Js(0.0)) if var.get('isRight') else (var.get('length')>var.get('index'))):
                try:
                    if var.get('self').contains(var.get('index')):
                        var.put('memo', var.get('callbackfn')(var.get('memo'), var.get('self').get(var.get('index')), var.get('index'), var.get('O')))
                finally:
                        var.put('index', var.get('i'), '+')
            return var.get('memo')
        PyJs_anonymous_861_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_861_)
    PyJs_anonymous_860_._set_name('anonymous')
    @Js
    def PyJs_anonymous_862_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'isArray', 'isObject', 'SPECIES'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_863_(original, this, arguments, var=var):
            var = Scope({'original':original, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'original'])
            pass
            if var.get('isArray')(var.get('original')):
                var.put('C', var.get('original').get('constructor'))
                if ((var.get('C',throw=False).typeof()==Js('function')) and (_seq(var.get('C'),var.get('Array')) or var.get('isArray')(var.get('C').get('prototype')))):
                    var.put('C', var.get('undefined'))
                if var.get('isObject')(var.get('C')):
                    var.put('C', var.get('C').get(var.get('SPECIES')))
                    if _seq(var.get('C'),var.get(u"null")):
                        var.put('C', var.get('undefined'))
            return (var.get('Array') if _seq(var.get('C'),var.get('undefined')) else var.get('C'))
        PyJs_anonymous_863_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_863_)
    PyJs_anonymous_862_._set_name('anonymous')
    @Js
    def PyJs_anonymous_864_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'speciesConstructor', 'require', 'module'])
        var.put('speciesConstructor', var.get('require')(Js('./_array-species-constructor')))
        @Js
        def PyJs_anonymous_865_(original, length, this, arguments, var=var):
            var = Scope({'original':original, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'original'])
            return var.get('speciesConstructor')(var.get('original')).create(var.get('length'))
        PyJs_anonymous_865_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_865_)
    PyJs_anonymous_864_._set_name('anonymous')
    @Js
    def PyJs_anonymous_866_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'factories', 'require', 'arraySlice', 'module', 'aFunction', 'isObject', 'invoke', 'construct'])
        Js('use strict')
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('invoke', var.get('require')(Js('./_invoke')))
        var.put('arraySlice', Js([]).get('slice'))
        var.put('factories', Js({}))
        @Js
        def PyJs_construct_867_(F, len, args, this, arguments, var=var):
            var = Scope({'F':F, 'len':len, 'args':args, 'this':this, 'arguments':arguments, 'construct':PyJs_construct_867_}, var)
            var.registers(['i', 'len', 'n', 'F', 'args'])
            if var.get('factories').contains(var.get('len')).neg():
                #for JS loop
                var.put('n', Js([]))
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('n').put(var.get('i'), ((Js('a[')+var.get('i'))+Js(']')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('factories').put(var.get('len'), var.get('Function')(Js('F,a'), ((Js('return new F(')+var.get('n').callprop('join', Js(',')))+Js(')'))))
            return var.get('factories').callprop(var.get('len'), var.get('F'), var.get('args'))
        PyJs_construct_867_._set_name('construct')
        var.put('construct', PyJs_construct_867_)
        @Js
        def PyJs_bind_868_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments, 'bind':PyJs_bind_868_}, var)
            var.registers(['fn', 'that', 'bound', 'partArgs'])
            var.put('fn', var.get('aFunction')(var.get(u"this")))
            var.put('partArgs', var.get('arraySlice').callprop('call', var.get('arguments'), Js(1.0)))
            @Js
            def PyJs_bound_869_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'bound':PyJs_bound_869_}, var)
                var.registers(['args'])
                var.put('args', var.get('partArgs').callprop('concat', var.get('arraySlice').callprop('call', var.get('arguments'))))
                return (var.get('construct')(var.get('fn'), var.get('args').get('length'), var.get('args')) if var.get(u"this").instanceof(var.get('bound')) else var.get('invoke')(var.get('fn'), var.get('args'), var.get('that')))
            PyJs_bound_869_._set_name('bound')
            var.put('bound', PyJs_bound_869_)
            if var.get('isObject')(var.get('fn').get('prototype')):
                var.get('bound').put('prototype', var.get('fn').get('prototype'))
            return var.get('bound')
        PyJs_bind_868_._set_name('bind')
        var.get('module').put('exports', (var.get('Function').get('bind') or PyJs_bind_868_))
    PyJs_anonymous_866_._set_name('anonymous')
    @Js
    def PyJs_anonymous_870_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'TAG', 'module', 'tryGet', 'ARG', 'cof'])
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
        @Js
        def PyJs_anonymous_871_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('arguments')
        PyJs_anonymous_871_._set_name('anonymous')
        var.put('ARG', (var.get('cof')(PyJs_anonymous_871_())==Js('Arguments')))
        @Js
        def PyJs_tryGet_872_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'tryGet':PyJs_tryGet_872_}, var)
            var.registers(['key', 'it'])
            try:
                return var.get('it').get(var.get('key'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_44310374 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_44310374 is not None:
                        var.own['e'] = PyJsHolder_65_44310374
                    else:
                        del var.own['e']
                    del PyJsHolder_65_44310374
        PyJs_tryGet_872_._set_name('tryGet')
        var.put('tryGet', PyJs_tryGet_872_)
        @Js
        def PyJs_anonymous_873_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['T', 'B', 'it', 'O'])
            pass
            def PyJs_LONG_874_(var=var):
                return (Js('Null') if _seq(var.get('it'),var.get(u"null")) else (var.get('T') if (var.put('T', var.get('tryGet')(var.put('O', var.get('Object')(var.get('it'))), var.get('TAG'))).typeof()==Js('string')) else (var.get('cof')(var.get('O')) if var.get('ARG') else (Js('Arguments') if ((var.put('B', var.get('cof')(var.get('O')))==Js('Object')) and (var.get('O').get('callee').typeof()==Js('function'))) else var.get('B')))))
            return (Js('Undefined') if _seq(var.get('it'),var.get('undefined')) else PyJs_LONG_874_())
        PyJs_anonymous_873_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_873_)
    PyJs_anonymous_870_._set_name('anonymous')
    @Js
    def PyJs_anonymous_875_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toString'])
        var.put('toString', Js({}).get('toString'))
        @Js
        def PyJs_anonymous_876_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('toString').callprop('call', var.get('it')).callprop('slice', Js(8.0), (-Js(1.0)))
        PyJs_anonymous_876_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_876_)
    PyJs_anonymous_875_._set_name('anonymous')
    @Js
    def PyJs_anonymous_877_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'validate', 'module', 'setSpecies', 'create', 'anInstance', '$iterDefine', 'dP', 'DESCRIPTORS', 'getEntry', 'forOf', 'fastKey', 'SIZE', 'redefineAll', 'ctx', 'step'])
        Js('use strict')
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('$iterDefine', var.get('require')(Js('./_iter-define')))
        var.put('step', var.get('require')(Js('./_iter-step')))
        var.put('setSpecies', var.get('require')(Js('./_set-species')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('fastKey', var.get('require')(Js('./_meta')).get('fastKey'))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('SIZE', (Js('_s') if var.get('DESCRIPTORS') else Js('size')))
        @Js
        def PyJs_getEntry_878_(that, key, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'this':this, 'arguments':arguments, 'getEntry':PyJs_getEntry_878_}, var)
            var.registers(['that', 'entry', 'index', 'key'])
            var.put('index', var.get('fastKey')(var.get('key')))
            pass
            if PyJsStrictNeq(var.get('index'),Js('F')):
                return var.get('that').get('_i').get(var.get('index'))
            #for JS loop
            var.put('entry', var.get('that').get('_f'))
            while var.get('entry'):
                try:
                    if (var.get('entry').get('k')==var.get('key')):
                        return var.get('entry')
                finally:
                        var.put('entry', var.get('entry').get('n'))
        PyJs_getEntry_878_._set_name('getEntry')
        var.put('getEntry', PyJs_getEntry_878_)
        @Js
        def PyJs_getConstructor_879_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
            var = Scope({'wrapper':wrapper, 'NAME':NAME, 'IS_MAP':IS_MAP, 'ADDER':ADDER, 'this':this, 'arguments':arguments, 'getConstructor':PyJs_getConstructor_879_}, var)
            var.registers(['ADDER', 'C', 'NAME', 'wrapper', 'IS_MAP'])
            @Js
            def PyJs_anonymous_880_(that, iterable, this, arguments, var=var):
                var = Scope({'that':that, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                var.registers(['that', 'iterable'])
                var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
                var.get('that').put('_t', var.get('NAME'))
                var.get('that').put('_i', var.get('create')(var.get(u"null")))
                var.get('that').put('_f', var.get('undefined'))
                var.get('that').put('_l', var.get('undefined'))
                var.get('that').put(var.get('SIZE'), Js(0.0))
                if (var.get('iterable')!=var.get('undefined')):
                    var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
            PyJs_anonymous_880_._set_name('anonymous')
            var.put('C', var.get('wrapper')(PyJs_anonymous_880_))
            @Js
            def PyJs_clear_881_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'clear':PyJs_clear_881_}, var)
                var.registers(['that', 'data', 'entry'])
                #for JS loop
                var.put('that', var.get('validate')(var.get(u"this"), var.get('NAME')))
                var.put('data', var.get('that').get('_i'))
                var.put('entry', var.get('that').get('_f'))
                while var.get('entry'):
                    try:
                        var.get('entry').put('r', Js(True))
                        if var.get('entry').get('p'):
                            var.get('entry').put('p', var.get('entry').get('p').put('n', var.get('undefined')))
                        var.get('data').delete(var.get('entry').get('i'))
                    finally:
                            var.put('entry', var.get('entry').get('n'))
                var.get('that').put('_f', var.get('that').put('_l', var.get('undefined')))
                var.get('that').put(var.get('SIZE'), Js(0.0))
            PyJs_clear_881_._set_name('clear')
            @Js
            def PyJs__delete_882_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_882_}, var)
                var.registers(['next', 'that', 'entry', 'key', 'prev'])
                var.put('that', var.get('validate')(var.get(u"this"), var.get('NAME')))
                var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
                if var.get('entry'):
                    var.put('next', var.get('entry').get('n'))
                    var.put('prev', var.get('entry').get('p'))
                    var.get('that').get('_i').delete(var.get('entry').get('i'))
                    var.get('entry').put('r', Js(True))
                    if var.get('prev'):
                        var.get('prev').put('n', var.get('next'))
                    if var.get('next'):
                        var.get('next').put('p', var.get('prev'))
                    if (var.get('that').get('_f')==var.get('entry')):
                        var.get('that').put('_f', var.get('next'))
                    if (var.get('that').get('_l')==var.get('entry')):
                        var.get('that').put('_l', var.get('prev'))
                    (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())-Js(1))+Js(1))
                return var.get('entry').neg().neg()
            PyJs__delete_882_._set_name('_delete')
            @Js
            def PyJs_forEach_883_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_883_}, var)
                var.registers(['entry', 'f', 'callbackfn'])
                var.get('validate')(var.get(u"this"), var.get('NAME'))
                var.put('f', var.get('ctx')(var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(3.0)))
                pass
                while var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get(u"this").get('_f'))):
                    var.get('f')(var.get('entry').get('v'), var.get('entry').get('k'), var.get(u"this"))
                    while (var.get('entry') and var.get('entry').get('r')):
                        var.put('entry', var.get('entry').get('p'))
            PyJs_forEach_883_._set_name('forEach')
            @Js
            def PyJs_has_884_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_884_}, var)
                var.registers(['key'])
                return var.get('getEntry')(var.get('validate')(var.get(u"this"), var.get('NAME')), var.get('key')).neg().neg()
            PyJs_has_884_._set_name('has')
            var.get('redefineAll')(var.get('C').get('prototype'), Js({'clear':PyJs_clear_881_,'delete':PyJs__delete_882_,'forEach':PyJs_forEach_883_,'has':PyJs_has_884_}))
            if var.get('DESCRIPTORS'):
                @Js
                def PyJs_get_885_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_885_}, var)
                    var.registers([])
                    return var.get('validate')(var.get(u"this"), var.get('NAME')).get(var.get('SIZE'))
                PyJs_get_885_._set_name('get')
                var.get('dP')(var.get('C').get('prototype'), Js('size'), Js({'get':PyJs_get_885_}))
            return var.get('C')
        PyJs_getConstructor_879_._set_name('getConstructor')
        @Js
        def PyJs_InlineNonPyName_886_(that, key, value, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'value':value, 'this':this, 'arguments':arguments, 'def':PyJs_InlineNonPyName_886_}, var)
            var.registers(['index', 'that', 'entry', 'key', 'value', 'prev'])
            var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
            pass
            if var.get('entry'):
                var.get('entry').put('v', var.get('value'))
            else:
                var.get('that').put('_l', var.put('entry', Js({'i':var.put('index', var.get('fastKey')(var.get('key'), Js(True))),'k':var.get('key'),'v':var.get('value'),'p':var.put('prev', var.get('that').get('_l')),'n':var.get('undefined'),'r':Js(False)})))
                if var.get('that').get('_f').neg():
                    var.get('that').put('_f', var.get('entry'))
                if var.get('prev'):
                    var.get('prev').put('n', var.get('entry'))
                (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('index'),Js('F')):
                    var.get('that').get('_i').put(var.get('index'), var.get('entry'))
            return var.get('that')
        PyJs_InlineNonPyName_886_._set_name('def')
        @Js
        def PyJs_setStrong_887_(C, NAME, IS_MAP, this, arguments, var=var):
            var = Scope({'C':C, 'NAME':NAME, 'IS_MAP':IS_MAP, 'this':this, 'arguments':arguments, 'setStrong':PyJs_setStrong_887_}, var)
            var.registers(['NAME', 'C', 'IS_MAP'])
            @Js
            def PyJs_anonymous_888_(iterated, kind, this, arguments, var=var):
                var = Scope({'iterated':iterated, 'kind':kind, 'this':this, 'arguments':arguments}, var)
                var.registers(['kind', 'iterated'])
                var.get(u"this").put('_t', var.get('validate')(var.get('iterated'), var.get('NAME')))
                var.get(u"this").put('_k', var.get('kind'))
                var.get(u"this").put('_l', var.get('undefined'))
            PyJs_anonymous_888_._set_name('anonymous')
            @Js
            def PyJs_anonymous_889_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['that', 'entry', 'kind'])
                var.put('that', var.get(u"this"))
                var.put('kind', var.get('that').get('_k'))
                var.put('entry', var.get('that').get('_l'))
                while (var.get('entry') and var.get('entry').get('r')):
                    var.put('entry', var.get('entry').get('p'))
                if (var.get('that').get('_t').neg() or var.get('that').put('_l', var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get('that').get('_t').get('_f')))).neg()):
                    var.get('that').put('_t', var.get('undefined'))
                    return var.get('step')(Js(1.0))
                if (var.get('kind')==Js('keys')):
                    return var.get('step')(Js(0.0), var.get('entry').get('k'))
                if (var.get('kind')==Js('values')):
                    return var.get('step')(Js(0.0), var.get('entry').get('v'))
                return var.get('step')(Js(0.0), Js([var.get('entry').get('k'), var.get('entry').get('v')]))
            PyJs_anonymous_889_._set_name('anonymous')
            var.get('$iterDefine')(var.get('C'), var.get('NAME'), PyJs_anonymous_888_, PyJs_anonymous_889_, (Js('entries') if var.get('IS_MAP') else Js('values')), var.get('IS_MAP').neg(), Js(True))
            var.get('setSpecies')(var.get('NAME'))
        PyJs_setStrong_887_._set_name('setStrong')
        var.get('module').put('exports', Js({'getConstructor':PyJs_getConstructor_879_,'def':PyJs_InlineNonPyName_886_,'getEntry':var.get('getEntry'),'setStrong':PyJs_setStrong_887_}))
    PyJs_anonymous_877_._set_name('anonymous')
    @Js
    def PyJs_anonymous_890_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'from', 'classof'])
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('from', var.get('require')(Js('./_array-from-iterable')))
        @Js
        def PyJs_anonymous_891_(NAME, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME'])
            @Js
            def PyJs_toJSON_892_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_892_}, var)
                var.registers([])
                if (var.get('classof')(var.get(u"this"))!=var.get('NAME')):
                    PyJsTempException = JsToPyException(var.get('TypeError')((var.get('NAME')+Js("#toJSON isn't generic"))))
                    raise PyJsTempException
                return var.get('from')(var.get(u"this"))
            PyJs_toJSON_892_._set_name('toJSON')
            return PyJs_toJSON_892_
        PyJs_anonymous_891_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_891_)
    PyJs_anonymous_890_._set_name('anonymous')
    @Js
    def PyJs_anonymous_893_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'validate', 'module', 'arrayFindIndex', 'isObject', 'createArrayMethod', 'anObject', 'anInstance', 'findUncaughtFrozen', 'id', 'uncaughtFrozenStore', 'UncaughtFrozenStore', 'forOf', 'getWeak', 'arrayFind', 'redefineAll', '$has'])
        Js('use strict')
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('getWeak', var.get('require')(Js('./_meta')).get('getWeak'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('createArrayMethod', var.get('require')(Js('./_array-methods')))
        var.put('$has', var.get('require')(Js('./_has')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('arrayFind', var.get('createArrayMethod')(Js(5.0)))
        var.put('arrayFindIndex', var.get('createArrayMethod')(Js(6.0)))
        var.put('id', Js(0.0))
        @Js
        def PyJs_uncaughtFrozenStore_894_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments, 'uncaughtFrozenStore':PyJs_uncaughtFrozenStore_894_}, var)
            var.registers(['that'])
            return (var.get('that').get('_l') or var.get('that').put('_l', var.get('UncaughtFrozenStore').create()))
        PyJs_uncaughtFrozenStore_894_._set_name('uncaughtFrozenStore')
        var.put('uncaughtFrozenStore', PyJs_uncaughtFrozenStore_894_)
        @Js
        def PyJs_UncaughtFrozenStore_895_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'UncaughtFrozenStore':PyJs_UncaughtFrozenStore_895_}, var)
            var.registers([])
            var.get(u"this").put('a', Js([]))
        PyJs_UncaughtFrozenStore_895_._set_name('UncaughtFrozenStore')
        var.put('UncaughtFrozenStore', PyJs_UncaughtFrozenStore_895_)
        @Js
        def PyJs_findUncaughtFrozen_896_(store, key, this, arguments, var=var):
            var = Scope({'store':store, 'key':key, 'this':this, 'arguments':arguments, 'findUncaughtFrozen':PyJs_findUncaughtFrozen_896_}, var)
            var.registers(['key', 'store'])
            @Js
            def PyJs_anonymous_897_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return _seq(var.get('it').get('0'),var.get('key'))
            PyJs_anonymous_897_._set_name('anonymous')
            return var.get('arrayFind')(var.get('store').get('a'), PyJs_anonymous_897_)
        PyJs_findUncaughtFrozen_896_._set_name('findUncaughtFrozen')
        var.put('findUncaughtFrozen', PyJs_findUncaughtFrozen_896_)
        @Js
        def PyJs_get_898_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_898_}, var)
            var.registers(['entry', 'key'])
            var.put('entry', var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')))
            if var.get('entry'):
                return var.get('entry').get('1')
        PyJs_get_898_._set_name('get')
        @Js
        def PyJs_has_899_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_899_}, var)
            var.registers(['key'])
            return var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')).neg().neg()
        PyJs_has_899_._set_name('has')
        @Js
        def PyJs_set_900_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_900_}, var)
            var.registers(['entry', 'key', 'value'])
            var.put('entry', var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')))
            if var.get('entry'):
                var.get('entry').put('1', var.get('value'))
            else:
                var.get(u"this").get('a').callprop('push', Js([var.get('key'), var.get('value')]))
        PyJs_set_900_._set_name('set')
        @Js
        def PyJs__delete_901_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_901_}, var)
            var.registers(['index', 'key'])
            @Js
            def PyJs_anonymous_902_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return _seq(var.get('it').get('0'),var.get('key'))
            PyJs_anonymous_902_._set_name('anonymous')
            var.put('index', var.get('arrayFindIndex')(var.get(u"this").get('a'), PyJs_anonymous_902_))
            if (~var.get('index')):
                var.get(u"this").get('a').callprop('splice', var.get('index'), Js(1.0))
            return (~var.get('index')).neg().neg()
        PyJs__delete_901_._set_name('_delete')
        var.get('UncaughtFrozenStore').put('prototype', Js({'get':PyJs_get_898_,'has':PyJs_has_899_,'set':PyJs_set_900_,'delete':PyJs__delete_901_}))
        @Js
        def PyJs_getConstructor_903_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
            var = Scope({'wrapper':wrapper, 'NAME':NAME, 'IS_MAP':IS_MAP, 'ADDER':ADDER, 'this':this, 'arguments':arguments, 'getConstructor':PyJs_getConstructor_903_}, var)
            var.registers(['ADDER', 'C', 'NAME', 'wrapper', 'IS_MAP'])
            @Js
            def PyJs_anonymous_904_(that, iterable, this, arguments, var=var):
                var = Scope({'that':that, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                var.registers(['that', 'iterable'])
                var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
                var.get('that').put('_t', var.get('NAME'))
                var.get('that').put('_i', (var.put('id',Js(var.get('id').to_number())+Js(1))-Js(1)))
                var.get('that').put('_l', var.get('undefined'))
                if (var.get('iterable')!=var.get('undefined')):
                    var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
            PyJs_anonymous_904_._set_name('anonymous')
            var.put('C', var.get('wrapper')(PyJs_anonymous_904_))
            @Js
            def PyJs__delete_905_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_905_}, var)
                var.registers(['data', 'key'])
                if var.get('isObject')(var.get('key')).neg():
                    return Js(False)
                var.put('data', var.get('getWeak')(var.get('key')))
                if _seq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('NAME'))).callprop('delete', var.get('key'))
                return ((var.get('data') and var.get('$has')(var.get('data'), var.get(u"this").get('_i'))) and var.get('data').delete(var.get(u"this").get('_i')))
            PyJs__delete_905_._set_name('_delete')
            @Js
            def PyJs_has_906_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_906_}, var)
                var.registers(['data', 'key'])
                if var.get('isObject')(var.get('key')).neg():
                    return Js(False)
                var.put('data', var.get('getWeak')(var.get('key')))
                if _seq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('NAME'))).callprop('has', var.get('key'))
                return (var.get('data') and var.get('$has')(var.get('data'), var.get(u"this").get('_i')))
            PyJs_has_906_._set_name('has')
            var.get('redefineAll')(var.get('C').get('prototype'), Js({'delete':PyJs__delete_905_,'has':PyJs_has_906_}))
            return var.get('C')
        PyJs_getConstructor_903_._set_name('getConstructor')
        @Js
        def PyJs_InlineNonPyName_907_(that, key, value, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'value':value, 'this':this, 'arguments':arguments, 'def':PyJs_InlineNonPyName_907_}, var)
            var.registers(['that', 'data', 'key', 'value'])
            var.put('data', var.get('getWeak')(var.get('anObject')(var.get('key')), Js(True)))
            if _seq(var.get('data'),Js(True)):
                var.get('uncaughtFrozenStore')(var.get('that')).callprop('set', var.get('key'), var.get('value'))
            else:
                var.get('data').put(var.get('that').get('_i'), var.get('value'))
            return var.get('that')
        PyJs_InlineNonPyName_907_._set_name('def')
        var.get('module').put('exports', Js({'getConstructor':PyJs_getConstructor_903_,'def':PyJs_InlineNonPyName_907_,'ufstore':var.get('uncaughtFrozenStore')}))
    PyJs_anonymous_893_._set_name('anonymous')
    @Js
    def PyJs_anonymous_908_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'inheritIfRequired', 'require', 'setToStringTag', 'module', 'isObject', 'anInstance', 'fails', 'global', 'meta', 'forOf', '$export', 'redefineAll', '$iterDetect', 'redefine'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('meta', var.get('require')(Js('./_meta')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$iterDetect', var.get('require')(Js('./_iter-detect')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        @Js
        def PyJs_anonymous_909_(NAME, wrapper, methods, common, IS_MAP, IS_WEAK, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'wrapper':wrapper, 'methods':methods, 'common':common, 'IS_MAP':IS_MAP, 'IS_WEAK':IS_WEAK, 'this':this, 'arguments':arguments}, var)
            var.registers(['ADDER', 'C', 'HASNT_CHAINING', 'proto', 'ACCEPT_ITERABLES', 'BUGGY_ZERO', 'methods', 'IS_WEAK', 'Base', 'fixMethod', 'NAME', 'wrapper', 'common', 'IS_MAP', 'O', 'instance', 'THROWS_ON_PRIMITIVES'])
            var.put('Base', var.get('global').get(var.get('NAME')))
            var.put('C', var.get('Base'))
            var.put('ADDER', (Js('set') if var.get('IS_MAP') else Js('add')))
            var.put('proto', (var.get('C') and var.get('C').get('prototype')))
            var.put('O', Js({}))
            @Js
            def PyJs_fixMethod_910_(KEY, this, arguments, var=var):
                var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments, 'fixMethod':PyJs_fixMethod_910_}, var)
                var.registers(['fn', 'KEY'])
                var.put('fn', var.get('proto').get(var.get('KEY')))
                @Js
                def PyJs_anonymous_911_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a'])
                    return (Js(False) if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if _seq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_anonymous_911_._set_name('anonymous')
                @Js
                def PyJs_has_912_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'has':PyJs_has_912_}, var)
                    var.registers(['a'])
                    return (Js(False) if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if _seq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_has_912_._set_name('has')
                @Js
                def PyJs_get_913_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'get':PyJs_get_913_}, var)
                    var.registers(['a'])
                    return (var.get('undefined') if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if _seq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_get_913_._set_name('get')
                @Js
                def PyJs_add_914_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'add':PyJs_add_914_}, var)
                    var.registers(['a'])
                    var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if _seq(var.get('a'),Js(0.0)) else var.get('a')))
                    return var.get(u"this")
                PyJs_add_914_._set_name('add')
                @Js
                def PyJs_set_915_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'set':PyJs_set_915_}, var)
                    var.registers(['a', 'b'])
                    var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if _seq(var.get('a'),Js(0.0)) else var.get('a')), var.get('b'))
                    return var.get(u"this")
                PyJs_set_915_._set_name('set')
                var.get('redefine')(var.get('proto'), var.get('KEY'), (PyJs_anonymous_911_ if (var.get('KEY')==Js('delete')) else (PyJs_has_912_ if (var.get('KEY')==Js('has')) else (PyJs_get_913_ if (var.get('KEY')==Js('get')) else (PyJs_add_914_ if (var.get('KEY')==Js('add')) else PyJs_set_915_)))))
            PyJs_fixMethod_910_._set_name('fixMethod')
            var.put('fixMethod', PyJs_fixMethod_910_)
            @Js
            def PyJs_anonymous_916_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('C').create().callprop('entries').callprop('next')
            PyJs_anonymous_916_._set_name('anonymous')
            if ((var.get('C',throw=False).typeof()!=Js('function')) or (var.get('IS_WEAK') or (var.get('proto').get('forEach') and var.get('fails')(PyJs_anonymous_916_).neg())).neg()):
                var.put('C', var.get('common').callprop('getConstructor', var.get('wrapper'), var.get('NAME'), var.get('IS_MAP'), var.get('ADDER')))
                var.get('redefineAll')(var.get('C').get('prototype'), var.get('methods'))
                var.get('meta').put('NEED', Js(True))
            else:
                var.put('instance', var.get('C').create())
                var.put('HASNT_CHAINING', (var.get('instance').callprop(var.get('ADDER'), (Js({}) if var.get('IS_WEAK') else (-Js(0.0))), Js(1.0))!=var.get('instance')))
                @Js
                def PyJs_anonymous_917_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('instance').callprop('has', Js(1.0))
                PyJs_anonymous_917_._set_name('anonymous')
                var.put('THROWS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_917_))
                @Js
                def PyJs_anonymous_918_(iter, this, arguments, var=var):
                    var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['iter'])
                    var.get('C').create(var.get('iter'))
                PyJs_anonymous_918_._set_name('anonymous')
                var.put('ACCEPT_ITERABLES', var.get('$iterDetect')(PyJs_anonymous_918_))
                @Js
                def PyJs_anonymous_919_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['index', '$instance'])
                    var.put('$instance', var.get('C').create())
                    var.put('index', Js(5.0))
                    while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                        var.get('$instance').callprop(var.get('ADDER'), var.get('index'), var.get('index'))
                    return var.get('$instance').callprop('has', (-Js(0.0))).neg()
                PyJs_anonymous_919_._set_name('anonymous')
                var.put('BUGGY_ZERO', (var.get('IS_WEAK').neg() and var.get('fails')(PyJs_anonymous_919_)))
                if var.get('ACCEPT_ITERABLES').neg():
                    @Js
                    def PyJs_anonymous_920_(target, iterable, this, arguments, var=var):
                        var = Scope({'target':target, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                        var.registers(['that', 'target', 'iterable'])
                        var.get('anInstance')(var.get('target'), var.get('C'), var.get('NAME'))
                        var.put('that', var.get('inheritIfRequired')(var.get('Base').create(), var.get('target'), var.get('C')))
                        if (var.get('iterable')!=var.get('undefined')):
                            var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
                        return var.get('that')
                    PyJs_anonymous_920_._set_name('anonymous')
                    var.put('C', var.get('wrapper')(PyJs_anonymous_920_))
                    var.get('C').put('prototype', var.get('proto'))
                    var.get('proto').put('constructor', var.get('C'))
                if (var.get('THROWS_ON_PRIMITIVES') or var.get('BUGGY_ZERO')):
                    var.get('fixMethod')(Js('delete'))
                    var.get('fixMethod')(Js('has'))
                    (var.get('IS_MAP') and var.get('fixMethod')(Js('get')))
                if (var.get('BUGGY_ZERO') or var.get('HASNT_CHAINING')):
                    var.get('fixMethod')(var.get('ADDER'))
                if (var.get('IS_WEAK') and var.get('proto').get('clear')):
                    var.get('proto').delete('clear')
            var.get('setToStringTag')(var.get('C'), var.get('NAME'))
            var.get('O').put(var.get('NAME'), var.get('C'))
            var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*(var.get('C')!=var.get('Base')))), var.get('O'))
            if var.get('IS_WEAK').neg():
                var.get('common').callprop('setStrong', var.get('C'), var.get('NAME'), var.get('IS_MAP'))
            return var.get('C')
        PyJs_anonymous_909_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_909_)
    PyJs_anonymous_908_._set_name('anonymous')
    @Js
    def PyJs_anonymous_921_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'core', 'module'])
        var.put('core', var.get('module').put('exports', Js({'version':Js('2.6.12')})))
        if (var.get('__e',throw=False).typeof()==Js('number')):
            var.put('__e', var.get('core'))
    PyJs_anonymous_921_._set_name('anonymous')
    @Js
    def PyJs_anonymous_922_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$defineProperty', 'createDesc'])
        Js('use strict')
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        @Js
        def PyJs_anonymous_923_(object, index, value, this, arguments, var=var):
            var = Scope({'object':object, 'index':index, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'index', 'value'])
            if var.get('object').contains(var.get('index')):
                var.get('$defineProperty').callprop('f', var.get('object'), var.get('index'), var.get('createDesc')(Js(0.0), var.get('value')))
            else:
                var.get('object').put(var.get('index'), var.get('value'))
        PyJs_anonymous_923_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_923_)
    PyJs_anonymous_922_._set_name('anonymous')
    @Js
    def PyJs_anonymous_924_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'aFunction', 'require', 'module'])
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        @Js
        def PyJs_anonymous_925_(fn, that, length, this, arguments, var=var):
            var = Scope({'fn':fn, 'that':that, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn', 'that', 'length'])
            var.get('aFunction')(var.get('fn'))
            if _seq(var.get('that'),var.get('undefined')):
                return var.get('fn')
            while 1:
                SWITCHED = False
                CONDITION = (var.get('length'))
                if SWITCHED or _seq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_926_(a, this, arguments, var=var):
                        var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'))
                    PyJs_anonymous_926_._set_name('anonymous')
                    return PyJs_anonymous_926_
                if SWITCHED or _seq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_927_(a, b, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a', 'b'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'))
                    PyJs_anonymous_927_._set_name('anonymous')
                    return PyJs_anonymous_927_
                if SWITCHED or _seq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_928_(a, b, c, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'c':c, 'this':this, 'arguments':arguments}, var)
                        var.registers(['c', 'a', 'b'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'), var.get('c'))
                    PyJs_anonymous_928_._set_name('anonymous')
                    return PyJs_anonymous_928_
                SWITCHED = True
                break
            @Js
            def PyJs_anonymous_929_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('fn').callprop('apply', var.get('that'), var.get('arguments'))
            PyJs_anonymous_929_._set_name('anonymous')
            return PyJs_anonymous_929_
        PyJs_anonymous_925_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_925_)
    PyJs_anonymous_924_._set_name('anonymous')
    @Js
    def PyJs_anonymous_930_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'getTime', 'fails', '$toISOString', 'lz'])
        Js('use strict')
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('getTime', var.get('Date').get('prototype').get('getTime'))
        var.put('$toISOString', var.get('Date').get('prototype').get('toISOString'))
        @Js
        def PyJs_lz_931_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lz':PyJs_lz_931_}, var)
            var.registers(['num'])
            return (var.get('num') if (var.get('num')>Js(9.0)) else (Js('0')+var.get('num')))
        PyJs_lz_931_._set_name('lz')
        var.put('lz', PyJs_lz_931_)
        @Js
        def PyJs_toISOString_932_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toISOString':PyJs_toISOString_932_}, var)
            var.registers(['y', 'd', 'm', 's'])
            if var.get('isFinite')(var.get('getTime').callprop('call', var.get(u"this"))).neg():
                PyJsTempException = JsToPyException(var.get('RangeError')(Js('Invalid time value')))
                raise PyJsTempException
            var.put('d', var.get(u"this"))
            var.put('y', var.get('d').callprop('getUTCFullYear'))
            var.put('m', var.get('d').callprop('getUTCMilliseconds'))
            var.put('s', (Js('-') if (var.get('y')<Js(0.0)) else (Js('+') if (var.get('y')>Js(9999.0)) else Js(''))))
            def PyJs_LONG_933_(var=var):
                return (((((((((var.get('s')+(Js('00000')+var.get('Math').callprop('abs', var.get('y'))).callprop('slice', ((-Js(6.0)) if var.get('s') else (-Js(4.0)))))+Js('-'))+var.get('lz')((var.get('d').callprop('getUTCMonth')+Js(1.0))))+Js('-'))+var.get('lz')(var.get('d').callprop('getUTCDate')))+Js('T'))+var.get('lz')(var.get('d').callprop('getUTCHours')))+Js(':'))+var.get('lz')(var.get('d').callprop('getUTCMinutes')))
            return (((((PyJs_LONG_933_()+Js(':'))+var.get('lz')(var.get('d').callprop('getUTCSeconds')))+Js('.'))+(var.get('m') if (var.get('m')>Js(99.0)) else (Js('0')+var.get('lz')(var.get('m')))))+Js('Z'))
        PyJs_toISOString_932_._set_name('toISOString')
        @Js
        def PyJs_anonymous_934_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('$toISOString').callprop('call', var.get('Date').create(((-Js(50000000000000.0))-Js(1.0))))!=Js('0385-07-25T07:06:39.999Z'))
        PyJs_anonymous_934_._set_name('anonymous')
        @Js
        def PyJs_anonymous_935_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$toISOString').callprop('call', var.get('Date').create(var.get('NaN')))
        PyJs_anonymous_935_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_toISOString_932_ if (var.get('fails')(PyJs_anonymous_934_) or var.get('fails')(PyJs_anonymous_935_).neg()) else var.get('$toISOString')))
    PyJs_anonymous_930_._set_name('anonymous')
    @Js
    def PyJs_anonymous_936_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'toPrimitive', 'module', 'anObject', 'NUMBER'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('NUMBER', Js('number'))
        @Js
        def PyJs_anonymous_937_(hint, this, arguments, var=var):
            var = Scope({'hint':hint, 'this':this, 'arguments':arguments}, var)
            var.registers(['hint'])
            if ((PyJsStrictNeq(var.get('hint'),Js('string')) and PyJsStrictNeq(var.get('hint'),var.get('NUMBER'))) and PyJsStrictNeq(var.get('hint'),Js('default'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Incorrect hint')))
                raise PyJsTempException
            return var.get('toPrimitive')(var.get('anObject')(var.get(u"this")), (var.get('hint')!=var.get('NUMBER')))
        PyJs_anonymous_937_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_937_)
    PyJs_anonymous_936_._set_name('anonymous')
    @Js
    def PyJs_anonymous_938_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_939_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it')==var.get('undefined')):
                PyJsTempException = JsToPyException(var.get('TypeError')((Js("Can't call method on  ")+var.get('it'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_939_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_939_)
    PyJs_anonymous_938_._set_name('anonymous')
    @Js
    def PyJs_anonymous_940_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_941_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_942_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_942_}, var)
                var.registers([])
                return Js(7.0)
            PyJs_get_942_._set_name('get')
            return (var.get('Object').callprop('defineProperty', Js({}), Js('a'), Js({'get':PyJs_get_942_})).get('a')!=Js(7.0))
        PyJs_anonymous_941_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_fails'))(PyJs_anonymous_941_).neg())
    PyJs_anonymous_940_._set_name('anonymous')
    @Js
    def PyJs_anonymous_943_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'is', 'document', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('document', var.get('require')(Js('./_global')).get('document'))
        var.put('is', (var.get('isObject')(var.get('document')) and var.get('isObject')(var.get('document').get('createElement'))))
        @Js
        def PyJs_anonymous_944_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('document').callprop('createElement', var.get('it')) if var.get('is') else Js({}))
        PyJs_anonymous_944_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_944_)
    PyJs_anonymous_943_._set_name('anonymous')
    @Js
    def PyJs_anonymous_945_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('module').put('exports', Js('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf').callprop('split', Js(',')))
    PyJs_anonymous_945_._set_name('anonymous')
    @Js
    def PyJs_anonymous_946_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'pIE', 'gOPS', 'getKeys'])
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        @Js
        def PyJs_anonymous_947_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['isEnum', 'i', 'it', 'symbols', 'key', 'getSymbols', 'result'])
            var.put('result', var.get('getKeys')(var.get('it')))
            var.put('getSymbols', var.get('gOPS').get('f'))
            if var.get('getSymbols'):
                var.put('symbols', var.get('getSymbols')(var.get('it')))
                var.put('isEnum', var.get('pIE').get('f'))
                var.put('i', Js(0.0))
                pass
                while (var.get('symbols').get('length')>var.get('i')):
                    if var.get('isEnum').callprop('call', var.get('it'), var.put('key', var.get('symbols').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                        var.get('result').callprop('push', var.get('key'))
            return var.get('result')
        PyJs_anonymous_947_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_947_)
    PyJs_anonymous_946_._set_name('anonymous')
    @Js
    def PyJs_anonymous_948_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'PROTOTYPE', 'hide', 'global', 'core', '$export', 'ctx', 'redefine'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('PROTOTYPE', Js('prototype'))
        @Js
        def PyJs_InlineNonPyName_949_(type, name, source, this, arguments, var=var):
            var = Scope({'type':type, 'name':name, 'source':source, 'this':this, 'arguments':arguments, '$export':PyJs_InlineNonPyName_949_}, var)
            var.registers(['IS_GLOBAL', 'IS_BIND', 'exports', 'expProto', 'IS_FORCED', 'out', 'exp', 'IS_PROTO', 'source', 'own', 'target', 'key', 'name', 'IS_STATIC', 'type'])
            var.put('IS_FORCED', (var.get('type')&var.get('$export').get('F')))
            var.put('IS_GLOBAL', (var.get('type')&var.get('$export').get('G')))
            var.put('IS_STATIC', (var.get('type')&var.get('$export').get('S')))
            var.put('IS_PROTO', (var.get('type')&var.get('$export').get('P')))
            var.put('IS_BIND', (var.get('type')&var.get('$export').get('B')))
            var.put('target', (var.get('global') if var.get('IS_GLOBAL') else ((var.get('global').get(var.get('name')) or var.get('global').put(var.get('name'), Js({}))) if var.get('IS_STATIC') else (var.get('global').get(var.get('name')) or Js({})).get(var.get('PROTOTYPE')))))
            var.put('exports', (var.get('core') if var.get('IS_GLOBAL') else (var.get('core').get(var.get('name')) or var.get('core').put(var.get('name'), Js({})))))
            var.put('expProto', (var.get('exports').get(var.get('PROTOTYPE')) or var.get('exports').put(var.get('PROTOTYPE'), Js({}))))
            pass
            if var.get('IS_GLOBAL'):
                var.put('source', var.get('name'))
            for PyJsTemp in var.get('source'):
                var.put('key', PyJsTemp)
                var.put('own', ((var.get('IS_FORCED').neg() and var.get('target')) and PyJsStrictNeq(var.get('target').get(var.get('key')),var.get('undefined'))))
                var.put('out', (var.get('target') if var.get('own') else var.get('source')).get(var.get('key')))
                var.put('exp', (var.get('ctx')(var.get('out'), var.get('global')) if (var.get('IS_BIND') and var.get('own')) else (var.get('ctx')(var.get('Function').get('call'), var.get('out')) if (var.get('IS_PROTO') and (var.get('out',throw=False).typeof()==Js('function'))) else var.get('out'))))
                if var.get('target'):
                    var.get('redefine')(var.get('target'), var.get('key'), var.get('out'), (var.get('type')&var.get('$export').get('U')))
                if (var.get('exports').get(var.get('key'))!=var.get('out')):
                    var.get('hide')(var.get('exports'), var.get('key'), var.get('exp'))
                if (var.get('IS_PROTO') and (var.get('expProto').get(var.get('key'))!=var.get('out'))):
                    var.get('expProto').put(var.get('key'), var.get('out'))
        PyJs_InlineNonPyName_949_._set_name('$export')
        var.put('$export', PyJs_InlineNonPyName_949_)
        var.get('global').put('core', var.get('core'))
        var.get('$export').put('F', Js(1.0))
        var.get('$export').put('G', Js(2.0))
        var.get('$export').put('S', Js(4.0))
        var.get('$export').put('P', Js(8.0))
        var.get('$export').put('B', Js(16.0))
        var.get('$export').put('W', Js(32.0))
        var.get('$export').put('U', Js(64.0))
        var.get('$export').put('R', Js(128.0))
        var.get('module').put('exports', var.get('$export'))
    PyJs_anonymous_948_._set_name('anonymous')
    @Js
    def PyJs_anonymous_950_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['MATCH', 'require', 'exports', 'module'])
        var.put('MATCH', var.get('require')(Js('./_wks'))(Js('match')))
        @Js
        def PyJs_anonymous_951_(KEY, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments}, var)
            var.registers(['KEY', 're'])
            var.put('re', JsRegExp('/./'))
            try:
                Js('/./').callprop(var.get('KEY'), var.get('re'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_6446798 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        var.get('re').put(var.get('MATCH'), Js(False))
                        return Js('/./').callprop(var.get('KEY'), var.get('re')).neg()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_66_67102041 = var.own.get('f')
                        var.force_own_put('f', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_66_67102041 is not None:
                                var.own['f'] = PyJsHolder_66_67102041
                            else:
                                del var.own['f']
                            del PyJsHolder_66_67102041
                finally:
                    if PyJsHolder_65_6446798 is not None:
                        var.own['e'] = PyJsHolder_65_6446798
                    else:
                        del var.own['e']
                    del PyJsHolder_65_6446798
            return Js(True)
        PyJs_anonymous_951_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_951_)
    PyJs_anonymous_950_._set_name('anonymous')
    @Js
    def PyJs_anonymous_952_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_953_(exec, this, arguments, var=var):
            var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec'])
            try:
                return var.get('exec')().neg().neg()
            except PyJsException as PyJsTempException:
                PyJsHolder_65_1179852 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(True)
                finally:
                    if PyJsHolder_65_1179852 is not None:
                        var.own['e'] = PyJsHolder_65_1179852
                    else:
                        del var.own['e']
                    del PyJsHolder_65_1179852
        PyJs_anonymous_953_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_953_)
    PyJs_anonymous_952_._set_name('anonymous')
    @Js
    def PyJs_anonymous_954_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'REPLACE_SUPPORTS_NAMED_GROUPS', 'module', 'SPECIES', 'fails', 'hide', 'SPLIT_WORKS_WITH_OVERWRITTEN_EXEC', 'defined', 'regexpExec', 'wks', 'redefine'])
        Js('use strict')
        var.get('require')(Js('./es6.regexp.exec'))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.put('SPECIES', var.get('wks')(Js('species')))
        @Js
        def PyJs_anonymous_955_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re'])
            var.put('re', JsRegExp('/./'))
            @Js
            def PyJs_anonymous_956_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['result'])
                var.put('result', Js([]))
                var.get('result').put('groups', Js({'a':Js('7')}))
                return var.get('result')
            PyJs_anonymous_956_._set_name('anonymous')
            var.get('re').put('exec', PyJs_anonymous_956_)
            return PyJsStrictNeq(Js('').callprop('replace', var.get('re'), Js('$<a>')),Js('7'))
        PyJs_anonymous_955_._set_name('anonymous')
        var.put('REPLACE_SUPPORTS_NAMED_GROUPS', var.get('fails')(PyJs_anonymous_955_).neg())
        @Js
        def PyJs_anonymous_957_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['originalExec', 'result', 're'])
            var.put('re', JsRegExp('/(?:)/'))
            var.put('originalExec', var.get('re').get('exec'))
            @Js
            def PyJs_anonymous_958_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('originalExec').callprop('apply', var.get(u"this"), var.get('arguments'))
            PyJs_anonymous_958_._set_name('anonymous')
            var.get('re').put('exec', PyJs_anonymous_958_)
            var.put('result', Js('ab').callprop('split', var.get('re')))
            return ((_seq(var.get('result').get('length'),Js(2.0)) and _seq(var.get('result').get('0'),Js('a'))) and _seq(var.get('result').get('1'),Js('b')))
        PyJs_anonymous_957_._set_name('anonymous')
        var.put('SPLIT_WORKS_WITH_OVERWRITTEN_EXEC', PyJs_anonymous_957_())
        @Js
        def PyJs_anonymous_959_(KEY, length, exec, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'length':length, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['KEY', 'DELEGATES_TO_SYMBOL', 'rxfn', 'exec', 'DELEGATES_TO_EXEC', 'length', 'SYMBOL', 'fns', 'strfn', 'nativeRegExpMethod'])
            var.put('SYMBOL', var.get('wks')(var.get('KEY')))
            @Js
            def PyJs_anonymous_960_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['O'])
                var.put('O', Js({}))
                @Js
                def PyJs_anonymous_961_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js(7.0)
                PyJs_anonymous_961_._set_name('anonymous')
                var.get('O').put(var.get('SYMBOL'), PyJs_anonymous_961_)
                return (Js('').callprop(var.get('KEY'), var.get('O'))!=Js(7.0))
            PyJs_anonymous_960_._set_name('anonymous')
            var.put('DELEGATES_TO_SYMBOL', var.get('fails')(PyJs_anonymous_960_).neg())
            @Js
            def PyJs_anonymous_962_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['execCalled', 're'])
                var.put('execCalled', Js(False))
                var.put('re', JsRegExp('/a/'))
                @Js
                def PyJs_anonymous_963_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('execCalled', Js(True))
                    return var.get(u"null")
                PyJs_anonymous_963_._set_name('anonymous')
                var.get('re').put('exec', PyJs_anonymous_963_)
                if _seq(var.get('KEY'),Js('split')):
                    var.get('re').put('constructor', Js({}))
                    @Js
                    def PyJs_anonymous_964_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('re')
                    PyJs_anonymous_964_._set_name('anonymous')
                    var.get('re').get('constructor').put(var.get('SPECIES'), PyJs_anonymous_964_)
                var.get('re').callprop(var.get('SYMBOL'), Js(''))
                return var.get('execCalled').neg()
            PyJs_anonymous_962_._set_name('anonymous')
            var.put('DELEGATES_TO_EXEC', (var.get('fails')(PyJs_anonymous_962_).neg() if var.get('DELEGATES_TO_SYMBOL') else var.get('undefined')))
            if (((var.get('DELEGATES_TO_SYMBOL').neg() or var.get('DELEGATES_TO_EXEC').neg()) or (_seq(var.get('KEY'),Js('replace')) and var.get('REPLACE_SUPPORTS_NAMED_GROUPS').neg())) or (_seq(var.get('KEY'),Js('split')) and var.get('SPLIT_WORKS_WITH_OVERWRITTEN_EXEC').neg())):
                var.put('nativeRegExpMethod', JsRegExp('/./').get(var.get('SYMBOL')))
                @Js
                def PyJs_maybeCallNative_965_(nativeMethod, regexp, str, arg2, forceStringMethod, this, arguments, var=var):
                    var = Scope({'nativeMethod':nativeMethod, 'regexp':regexp, 'str':str, 'arg2':arg2, 'forceStringMethod':forceStringMethod, 'this':this, 'arguments':arguments, 'maybeCallNative':PyJs_maybeCallNative_965_}, var)
                    var.registers(['str', 'forceStringMethod', 'arg2', 'regexp', 'nativeMethod'])
                    if _seq(var.get('regexp').get('exec'),var.get('regexpExec')):
                        if (var.get('DELEGATES_TO_SYMBOL') and var.get('forceStringMethod').neg()):
                            return Js({'done':Js(True),'value':var.get('nativeRegExpMethod').callprop('call', var.get('regexp'), var.get('str'), var.get('arg2'))})
                        return Js({'done':Js(True),'value':var.get('nativeMethod').callprop('call', var.get('str'), var.get('regexp'), var.get('arg2'))})
                    return Js({'done':Js(False)})
                PyJs_maybeCallNative_965_._set_name('maybeCallNative')
                var.put('fns', var.get('exec')(var.get('defined'), var.get('SYMBOL'), Js('').get(var.get('KEY')), PyJs_maybeCallNative_965_))
                var.put('strfn', var.get('fns').get('0'))
                var.put('rxfn', var.get('fns').get('1'))
                var.get('redefine')(var.get('String').get('prototype'), var.get('KEY'), var.get('strfn'))
                @Js
                def PyJs_anonymous_966_(string, arg, this, arguments, var=var):
                    var = Scope({'string':string, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['arg', 'string'])
                    return var.get('rxfn').callprop('call', var.get('string'), var.get(u"this"), var.get('arg'))
                PyJs_anonymous_966_._set_name('anonymous')
                @Js
                def PyJs_anonymous_967_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('rxfn').callprop('call', var.get('string'), var.get(u"this"))
                PyJs_anonymous_967_._set_name('anonymous')
                var.get('hide')(var.get('RegExp').get('prototype'), var.get('SYMBOL'), (PyJs_anonymous_966_ if (var.get('length')==Js(2.0)) else PyJs_anonymous_967_))
        PyJs_anonymous_959_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_959_)
    PyJs_anonymous_954_._set_name('anonymous')
    @Js
    def PyJs_anonymous_968_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'anObject', 'module'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_anonymous_969_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['that', 'result'])
            var.put('that', var.get('anObject')(var.get(u"this")))
            var.put('result', Js(''))
            if var.get('that').get('global'):
                var.put('result', Js('g'), '+')
            if var.get('that').get('ignoreCase'):
                var.put('result', Js('i'), '+')
            if var.get('that').get('multiline'):
                var.put('result', Js('m'), '+')
            if var.get('that').get('unicode'):
                var.put('result', Js('u'), '+')
            if var.get('that').get('sticky'):
                var.put('result', Js('y'), '+')
            return var.get('result')
        PyJs_anonymous_969_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_969_)
    PyJs_anonymous_968_._set_name('anonymous')
    @Js
    def PyJs_anonymous_970_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'isArray', 'isObject', 'flattenIntoArray', 'IS_CONCAT_SPREADABLE', 'ctx'])
        @Js
        def PyJsHoisted_flattenIntoArray_(target, original, source, sourceLen, start, depth, mapper, thisArg, this, arguments, var=var):
            var = Scope({'target':target, 'original':original, 'source':source, 'sourceLen':sourceLen, 'start':start, 'depth':depth, 'mapper':mapper, 'thisArg':thisArg, 'this':this, 'arguments':arguments}, var)
            var.registers(['element', 'spreadable', 'thisArg', 'start', 'target', 'sourceIndex', 'sourceLen', 'mapper', 'depth', 'mapFn', 'targetIndex', 'original', 'source'])
            var.put('targetIndex', var.get('start'))
            var.put('sourceIndex', Js(0.0))
            var.put('mapFn', (var.get('ctx')(var.get('mapper'), var.get('thisArg'), Js(3.0)) if var.get('mapper') else Js(False)))
            pass
            while (var.get('sourceIndex')<var.get('sourceLen')):
                if var.get('source').contains(var.get('sourceIndex')):
                    var.put('element', (var.get('mapFn')(var.get('source').get(var.get('sourceIndex')), var.get('sourceIndex'), var.get('original')) if var.get('mapFn') else var.get('source').get(var.get('sourceIndex'))))
                    var.put('spreadable', Js(False))
                    if var.get('isObject')(var.get('element')):
                        var.put('spreadable', var.get('element').get(var.get('IS_CONCAT_SPREADABLE')))
                        var.put('spreadable', (var.get('spreadable').neg().neg() if PyJsStrictNeq(var.get('spreadable'),var.get('undefined')) else var.get('isArray')(var.get('element'))))
                    if (var.get('spreadable') and (var.get('depth')>Js(0.0))):
                        var.put('targetIndex', (var.get('flattenIntoArray')(var.get('target'), var.get('original'), var.get('element'), var.get('toLength')(var.get('element').get('length')), var.get('targetIndex'), (var.get('depth')-Js(1.0)))-Js(1.0)))
                    else:
                        if (var.get('targetIndex')>=Js(9007199254740991)):
                            PyJsTempException = JsToPyException(var.get('TypeError')())
                            raise PyJsTempException
                        var.get('target').put(var.get('targetIndex'), var.get('element'))
                    (var.put('targetIndex',Js(var.get('targetIndex').to_number())+Js(1))-Js(1))
                (var.put('sourceIndex',Js(var.get('sourceIndex').to_number())+Js(1))-Js(1))
            return var.get('targetIndex')
        PyJsHoisted_flattenIntoArray_.func_name = 'flattenIntoArray'
        var.put('flattenIntoArray', PyJsHoisted_flattenIntoArray_)
        Js('use strict')
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('IS_CONCAT_SPREADABLE', var.get('require')(Js('./_wks'))(Js('isConcatSpreadable')))
        pass
        var.get('module').put('exports', var.get('flattenIntoArray'))
    PyJs_anonymous_970_._set_name('anonymous')
    @Js
    def PyJs_anonymous_971_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'getIterFn', 'require', 'module', 'toLength', 'anObject', 'isArrayIter', 'BREAK', 'call', 'RETURN', 'ctx'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('call', var.get('require')(Js('./_iter-call')))
        var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
        var.put('BREAK', Js({}))
        var.put('RETURN', Js({}))
        @Js
        def PyJs_anonymous_972_(iterable, entries, fn, that, ITERATOR, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'entries':entries, 'fn':fn, 'that':that, 'ITERATOR':ITERATOR, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn', 'f', 'length', 'index', 'that', 'entries', 'ITERATOR', 'result', 'iterable', 'iterator', 'step', 'iterFn'])
            @Js
            def PyJs_anonymous_973_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('iterable')
            PyJs_anonymous_973_._set_name('anonymous')
            var.put('iterFn', (PyJs_anonymous_973_ if var.get('ITERATOR') else var.get('getIterFn')(var.get('iterable'))))
            var.put('f', var.get('ctx')(var.get('fn'), var.get('that'), (Js(2.0) if var.get('entries') else Js(1.0))))
            var.put('index', Js(0.0))
            pass
            if (var.get('iterFn',throw=False).typeof()!=Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('iterable')+Js(' is not iterable!'))))
                raise PyJsTempException
            if var.get('isArrayIter')(var.get('iterFn')):
                #for JS loop
                var.put('length', var.get('toLength')(var.get('iterable').get('length')))
                while (var.get('length')>var.get('index')):
                    try:
                        var.put('result', (var.get('f')(var.get('anObject')(var.put('step', var.get('iterable').get(var.get('index')))).get('0'), var.get('step').get('1')) if var.get('entries') else var.get('f')(var.get('iterable').get(var.get('index')))))
                        if (_seq(var.get('result'),var.get('BREAK')) or _seq(var.get('result'),var.get('RETURN'))):
                            return var.get('result')
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            else:
                #for JS loop
                var.put('iterator', var.get('iterFn').callprop('call', var.get('iterable')))
                while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                    var.put('result', var.get('call')(var.get('iterator'), var.get('f'), var.get('step').get('value'), var.get('entries')))
                    if (_seq(var.get('result'),var.get('BREAK')) or _seq(var.get('result'),var.get('RETURN'))):
                        return var.get('result')

        PyJs_anonymous_972_._set_name('anonymous')
        var.put('exports', var.get('module').put('exports', PyJs_anonymous_972_))
        var.get('exports').put('BREAK', var.get('BREAK'))
        var.get('exports').put('RETURN', var.get('RETURN'))
    PyJs_anonymous_971_._set_name('anonymous')
    @Js
    def PyJs_anonymous_974_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('module').put('exports', var.get('require')(Js('./_shared'))(Js('native-function-to-string'), var.get('Function').get('toString')))
    PyJs_anonymous_974_._set_name('anonymous')
    @Js
    def PyJs_anonymous_975_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'global', 'module'])
        var.put('global', var.get('module').put('exports', (var.get('window') if ((var.get('window',throw=False).typeof()!=Js('undefined')) and (var.get('window').get('Math')==var.get('Math'))) else (var.get('self') if ((var.get('self',throw=False).typeof()!=Js('undefined')) and (var.get('self').get('Math')==var.get('Math'))) else var.get('Function')(Js('return this'))()))))
        if (var.get('__g',throw=False).typeof()==Js('number')):
            var.put('__g', var.get('global'))
    PyJs_anonymous_975_._set_name('anonymous')
    @Js
    def PyJs_anonymous_976_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hasOwnProperty', 'require', 'exports', 'module'])
        var.put('hasOwnProperty', Js({}).get('hasOwnProperty'))
        @Js
        def PyJs_anonymous_977_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'it'])
            return var.get('hasOwnProperty').callprop('call', var.get('it'), var.get('key'))
        PyJs_anonymous_977_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_977_)
    PyJs_anonymous_976_._set_name('anonymous')
    @Js
    def PyJs_anonymous_978_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'dP', 'createDesc'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        @Js
        def PyJs_anonymous_979_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'key', 'value'])
            return var.get('dP').callprop('f', var.get('object'), var.get('key'), var.get('createDesc')(Js(1.0), var.get('value')))
        PyJs_anonymous_979_._set_name('anonymous')
        @Js
        def PyJs_anonymous_980_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'key', 'value'])
            var.get('object').put(var.get('key'), var.get('value'))
            return var.get('object')
        PyJs_anonymous_980_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_anonymous_979_ if var.get('require')(Js('./_descriptors')) else PyJs_anonymous_980_))
    PyJs_anonymous_978_._set_name('anonymous')
    @Js
    def PyJs_anonymous_981_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'document'])
        var.put('document', var.get('require')(Js('./_global')).get('document'))
        var.get('module').put('exports', (var.get('document') and var.get('document').get('documentElement')))
    PyJs_anonymous_981_._set_name('anonymous')
    @Js
    def PyJs_anonymous_982_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_983_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_984_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_984_}, var)
                var.registers([])
                return Js(7.0)
            PyJs_get_984_._set_name('get')
            return (var.get('Object').callprop('defineProperty', var.get('require')(Js('./_dom-create'))(Js('div')), Js('a'), Js({'get':PyJs_get_984_})).get('a')!=Js(7.0))
        PyJs_anonymous_983_._set_name('anonymous')
        var.get('module').put('exports', (var.get('require')(Js('./_descriptors')).neg() and var.get('require')(Js('./_fails'))(PyJs_anonymous_983_).neg()))
    PyJs_anonymous_982_._set_name('anonymous')
    @Js
    def PyJs_anonymous_985_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'setPrototypeOf', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('setPrototypeOf', var.get('require')(Js('./_set-proto')).get('set'))
        @Js
        def PyJs_anonymous_986_(that, target, C, this, arguments, var=var):
            var = Scope({'that':that, 'target':target, 'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['P', 'S', 'C', 'that', 'target'])
            var.put('S', var.get('target').get('constructor'))
            pass
            if ((((PyJsStrictNeq(var.get('S'),var.get('C')) and (var.get('S',throw=False).typeof()==Js('function'))) and PyJsStrictNeq(var.put('P', var.get('S').get('prototype')),var.get('C').get('prototype'))) and var.get('isObject')(var.get('P'))) and var.get('setPrototypeOf')):
                var.get('setPrototypeOf')(var.get('that'), var.get('P'))
            return var.get('that')
        PyJs_anonymous_986_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_986_)
    PyJs_anonymous_985_._set_name('anonymous')
    @Js
    def PyJs_anonymous_987_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_988_(fn, args, that, this, arguments, var=var):
            var = Scope({'fn':fn, 'args':args, 'that':that, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn', 'that', 'args', 'un'])
            var.put('un', _seq(var.get('that'),var.get('undefined')))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('args').get('length'))
                if SWITCHED or _seq(CONDITION, Js(0.0)):
                    SWITCHED = True
                    return (var.get('fn')() if var.get('un') else var.get('fn').callprop('call', var.get('that')))
                if SWITCHED or _seq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0')))
                if SWITCHED or _seq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1')))
                if SWITCHED or _seq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')))
                if SWITCHED or _seq(CONDITION, Js(4.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3')))
                SWITCHED = True
                break
            return var.get('fn').callprop('apply', var.get('that'), var.get('args'))
        PyJs_anonymous_988_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_988_)
    PyJs_anonymous_987_._set_name('anonymous')
    @Js
    def PyJs_anonymous_989_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'cof', 'module'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_anonymous_990_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('it').callprop('split', Js('')) if (var.get('cof')(var.get('it'))==Js('String')) else var.get('Object')(var.get('it')))
        PyJs_anonymous_990_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object') if var.get('Object')(Js('z')).callprop('propertyIsEnumerable', Js(0.0)) else PyJs_anonymous_990_))
    PyJs_anonymous_989_._set_name('anonymous')
    @Js
    def PyJs_anonymous_991_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'ArrayProto', 'Iterators', 'ITERATOR'])
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('ArrayProto', var.get('Array').get('prototype'))
        @Js
        def PyJs_anonymous_992_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get('undefined')) and (_seq(var.get('Iterators').get('Array'),var.get('it')) or _seq(var.get('ArrayProto').get(var.get('ITERATOR')),var.get('it'))))
        PyJs_anonymous_992_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_992_)
    PyJs_anonymous_991_._set_name('anonymous')
    @Js
    def PyJs_anonymous_993_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'cof', 'module'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_isArray_994_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments, 'isArray':PyJs_isArray_994_}, var)
            var.registers(['arg'])
            return (var.get('cof')(var.get('arg'))==Js('Array'))
        PyJs_isArray_994_._set_name('isArray')
        var.get('module').put('exports', (var.get('Array').get('isArray') or PyJs_isArray_994_))
    PyJs_anonymous_993_._set_name('anonymous')
    @Js
    def PyJs_anonymous_995_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'floor', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('floor', var.get('Math').get('floor'))
        @Js
        def PyJs_isInteger_996_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isInteger':PyJs_isInteger_996_}, var)
            var.registers(['it'])
            return ((var.get('isObject')(var.get('it')).neg() and var.get('isFinite')(var.get('it'))) and _seq(var.get('floor')(var.get('it')),var.get('it')))
        PyJs_isInteger_996_._set_name('isInteger')
        var.get('module').put('exports', PyJs_isInteger_996_)
    PyJs_anonymous_995_._set_name('anonymous')
    @Js
    def PyJs_anonymous_997_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_998_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get(u"null")) if _seq((Js('undefined') if _seq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it'))),Js('object')) else _seq(var.get('it',throw=False).typeof(),Js('function')))
        PyJs_anonymous_998_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_998_)
    PyJs_anonymous_997_._set_name('anonymous')
    @Js
    def PyJs_anonymous_999_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'isObject', 'MATCH', 'cof'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('MATCH', var.get('require')(Js('./_wks'))(Js('match')))
        @Js
        def PyJs_anonymous_1000_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['isRegExp', 'it'])
            pass
            return (var.get('isObject')(var.get('it')) and (var.get('isRegExp').neg().neg() if PyJsStrictNeq(var.put('isRegExp', var.get('it').get(var.get('MATCH'))),var.get('undefined')) else (var.get('cof')(var.get('it'))==Js('RegExp'))))
        PyJs_anonymous_1000_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1000_)
    PyJs_anonymous_999_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1001_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'anObject', 'module'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_anonymous_1002_(iterator, fn, value, entries, this, arguments, var=var):
            var = Scope({'iterator':iterator, 'fn':fn, 'value':value, 'entries':entries, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn', 'entries', 'value', 'ret', 'iterator'])
            try:
                return (var.get('fn')(var.get('anObject')(var.get('value')).get('0'), var.get('value').get('1')) if var.get('entries') else var.get('fn')(var.get('value')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_27730534 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('ret', var.get('iterator').get('return'))
                    if PyJsStrictNeq(var.get('ret'),var.get('undefined')):
                        var.get('anObject')(var.get('ret').callprop('call', var.get('iterator')))
                    PyJsTempException = JsToPyException(var.get('e'))
                    raise PyJsTempException
                finally:
                    if PyJsHolder_65_27730534 is not None:
                        var.own['e'] = PyJsHolder_65_27730534
                    else:
                        del var.own['e']
                    del PyJsHolder_65_27730534
        PyJs_anonymous_1002_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1002_)
    PyJs_anonymous_1001_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1003_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'IteratorPrototype', 'require', 'setToStringTag', 'module', 'create', 'descriptor'])
        Js('use strict')
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('descriptor', var.get('require')(Js('./_property-desc')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('IteratorPrototype', Js({}))
        @Js
        def PyJs_anonymous_1004_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_1004_._set_name('anonymous')
        var.get('require')(Js('./_hide'))(var.get('IteratorPrototype'), var.get('require')(Js('./_wks'))(Js('iterator')), PyJs_anonymous_1004_)
        @Js
        def PyJs_anonymous_1005_(Constructor, NAME, next, this, arguments, var=var):
            var = Scope({'Constructor':Constructor, 'NAME':NAME, 'next':next, 'this':this, 'arguments':arguments}, var)
            var.registers(['Constructor', 'NAME', 'next'])
            var.get('Constructor').put('prototype', var.get('create')(var.get('IteratorPrototype'), Js({'next':var.get('descriptor')(Js(1.0), var.get('next'))})))
            var.get('setToStringTag')(var.get('Constructor'), (var.get('NAME')+Js(' Iterator')))
        PyJs_anonymous_1005_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1005_)
    PyJs_anonymous_1003_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1006_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$iterCreate', 'returnThis', 'exports', 'Iterators', 'getPrototypeOf', 'setToStringTag', 'require', 'module', 'hide', 'KEYS', 'VALUES', 'BUGGY', 'FF_ITERATOR', '$export', 'ITERATOR', 'LIBRARY', 'redefine'])
        Js('use strict')
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('$iterCreate', var.get('require')(Js('./_iter-create')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('BUGGY', (Js([]).get('keys') and Js([]).callprop('keys').contains(Js('next'))).neg())
        var.put('FF_ITERATOR', Js('@@iterator'))
        var.put('KEYS', Js('keys'))
        var.put('VALUES', Js('values'))
        @Js
        def PyJs_returnThis_1007_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'returnThis':PyJs_returnThis_1007_}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_returnThis_1007_._set_name('returnThis')
        var.put('returnThis', PyJs_returnThis_1007_)
        @Js
        def PyJs_anonymous_1008_(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED, this, arguments, var=var):
            var = Scope({'Base':Base, 'NAME':NAME, 'Constructor':Constructor, 'next':next, 'DEFAULT':DEFAULT, 'IS_SET':IS_SET, 'FORCED':FORCED, 'this':this, 'arguments':arguments}, var)
            var.registers(['DEFAULT', '$native', 'IteratorPrototype', 'VALUES_BUG', 'getMethod', 'Base', 'NAME', 'DEF_VALUES', 'TAG', 'proto', 'FORCED', 'IS_SET', '$default', 'methods', '$entries', 'next', 'key', 'Constructor', '$anyNative'])
            var.get('$iterCreate')(var.get('Constructor'), var.get('NAME'), var.get('next'))
            @Js
            def PyJs_getMethod_1009_(kind, this, arguments, var=var):
                var = Scope({'kind':kind, 'this':this, 'arguments':arguments, 'getMethod':PyJs_getMethod_1009_}, var)
                var.registers(['kind'])
                if (var.get('BUGGY').neg() and var.get('proto').contains(var.get('kind'))):
                    return var.get('proto').get(var.get('kind'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('kind'))
                    if SWITCHED or _seq(CONDITION, var.get('KEYS')):
                        SWITCHED = True
                        @Js
                        def PyJs_keys_1010_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'keys':PyJs_keys_1010_}, var)
                            var.registers([])
                            return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                        PyJs_keys_1010_._set_name('keys')
                        return PyJs_keys_1010_
                    if SWITCHED or _seq(CONDITION, var.get('VALUES')):
                        SWITCHED = True
                        @Js
                        def PyJs_values_1011_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_1011_}, var)
                            var.registers([])
                            return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                        PyJs_values_1011_._set_name('values')
                        return PyJs_values_1011_
                    SWITCHED = True
                    break
                @Js
                def PyJs_entries_1012_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'entries':PyJs_entries_1012_}, var)
                    var.registers([])
                    return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                PyJs_entries_1012_._set_name('entries')
                return PyJs_entries_1012_
            PyJs_getMethod_1009_._set_name('getMethod')
            var.put('getMethod', PyJs_getMethod_1009_)
            var.put('TAG', (var.get('NAME')+Js(' Iterator')))
            var.put('DEF_VALUES', (var.get('DEFAULT')==var.get('VALUES')))
            var.put('VALUES_BUG', Js(False))
            var.put('proto', var.get('Base').get('prototype'))
            var.put('$native', ((var.get('proto').get(var.get('ITERATOR')) or var.get('proto').get(var.get('FF_ITERATOR'))) or (var.get('DEFAULT') and var.get('proto').get(var.get('DEFAULT')))))
            var.put('$default', (var.get('$native') or var.get('getMethod')(var.get('DEFAULT'))))
            var.put('$entries', ((var.get('$default') if var.get('DEF_VALUES').neg() else var.get('getMethod')(Js('entries'))) if var.get('DEFAULT') else var.get('undefined')))
            var.put('$anyNative', ((var.get('proto').get('entries') or var.get('$native')) if (var.get('NAME')==Js('Array')) else var.get('$native')))
            pass
            if var.get('$anyNative'):
                var.put('IteratorPrototype', var.get('getPrototypeOf')(var.get('$anyNative').callprop('call', var.get('Base').create())))
                if (PyJsStrictNeq(var.get('IteratorPrototype'),var.get('Object').get('prototype')) and var.get('IteratorPrototype').get('next')):
                    var.get('setToStringTag')(var.get('IteratorPrototype'), var.get('TAG'), Js(True))
                    if (var.get('LIBRARY').neg() and (var.get('IteratorPrototype').get(var.get('ITERATOR')).typeof()!=Js('function'))):
                        var.get('hide')(var.get('IteratorPrototype'), var.get('ITERATOR'), var.get('returnThis'))
            if ((var.get('DEF_VALUES') and var.get('$native')) and PyJsStrictNeq(var.get('$native').get('name'),var.get('VALUES'))):
                var.put('VALUES_BUG', Js(True))
                @Js
                def PyJs_values_1013_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_1013_}, var)
                    var.registers([])
                    return var.get('$native').callprop('call', var.get(u"this"))
                PyJs_values_1013_._set_name('values')
                var.put('$default', PyJs_values_1013_)
            if ((var.get('LIBRARY').neg() or var.get('FORCED')) and ((var.get('BUGGY') or var.get('VALUES_BUG')) or var.get('proto').get(var.get('ITERATOR')).neg())):
                var.get('hide')(var.get('proto'), var.get('ITERATOR'), var.get('$default'))
            var.get('Iterators').put(var.get('NAME'), var.get('$default'))
            var.get('Iterators').put(var.get('TAG'), var.get('returnThis'))
            if var.get('DEFAULT'):
                var.put('methods', Js({'values':(var.get('$default') if var.get('DEF_VALUES') else var.get('getMethod')(var.get('VALUES'))),'keys':(var.get('$default') if var.get('IS_SET') else var.get('getMethod')(var.get('KEYS'))),'entries':var.get('$entries')}))
                if var.get('FORCED'):
                    for PyJsTemp in var.get('methods'):
                        var.put('key', PyJsTemp)
                        if var.get('proto').contains(var.get('key')).neg():
                            var.get('redefine')(var.get('proto'), var.get('key'), var.get('methods').get(var.get('key')))
                else:
                    var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('BUGGY') or var.get('VALUES_BUG')))), var.get('NAME'), var.get('methods'))
            return var.get('methods')
        PyJs_anonymous_1008_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1008_)
    PyJs_anonymous_1006_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1014_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'SAFE_CLOSING', 'riter', 'ITERATOR'])
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('SAFE_CLOSING', Js(False))
        try:
            var.put('riter', Js([Js(7.0)]).callprop(var.get('ITERATOR')))
            @Js
            def PyJs_anonymous_1015_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('SAFE_CLOSING', Js(True))
            PyJs_anonymous_1015_._set_name('anonymous')
            var.get('riter').put('return', PyJs_anonymous_1015_)
            @Js
            def PyJs_anonymous_1016_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                PyJsTempException = JsToPyException(Js(2.0))
                raise PyJsTempException
            PyJs_anonymous_1016_._set_name('anonymous')
            var.get('Array').callprop('from', var.get('riter'), PyJs_anonymous_1016_)
        except PyJsException as PyJsTempException:
            PyJsHolder_65_2577470 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_2577470 is not None:
                    var.own['e'] = PyJsHolder_65_2577470
                else:
                    del var.own['e']
                del PyJsHolder_65_2577470
        @Js
        def PyJs_anonymous_1017_(exec, skipClosing, this, arguments, var=var):
            var = Scope({'exec':exec, 'skipClosing':skipClosing, 'this':this, 'arguments':arguments}, var)
            var.registers(['safe', 'arr', 'iter', 'skipClosing', 'exec'])
            if (var.get('skipClosing').neg() and var.get('SAFE_CLOSING').neg()):
                return Js(False)
            var.put('safe', Js(False))
            try:
                var.put('arr', Js([Js(7.0)]))
                var.put('iter', var.get('arr').callprop(var.get('ITERATOR')))
                @Js
                def PyJs_anonymous_1018_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js({'done':var.put('safe', Js(True))})
                PyJs_anonymous_1018_._set_name('anonymous')
                var.get('iter').put('next', PyJs_anonymous_1018_)
                @Js
                def PyJs_anonymous_1019_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('iter')
                PyJs_anonymous_1019_._set_name('anonymous')
                var.get('arr').put(var.get('ITERATOR'), PyJs_anonymous_1019_)
                var.get('exec')(var.get('arr'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_65040643 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_65040643 is not None:
                        var.own['e'] = PyJsHolder_65_65040643
                    else:
                        del var.own['e']
                    del PyJsHolder_65_65040643
            return var.get('safe')
        PyJs_anonymous_1017_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1017_)
    PyJs_anonymous_1014_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1020_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1021_(done, value, this, arguments, var=var):
            var = Scope({'done':done, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'done'])
            return Js({'value':var.get('value'),'done':var.get('done').neg().neg()})
        PyJs_anonymous_1021_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1021_)
    PyJs_anonymous_1020_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1022_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('module').put('exports', Js({}))
    PyJs_anonymous_1022_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1023_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('module').put('exports', Js(False))
    PyJs_anonymous_1023_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1024_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', '$expm1', 'require', 'module'])
        var.put('$expm1', var.get('Math').get('expm1'))
        @Js
        def PyJs_expm1_1025_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'expm1':PyJs_expm1_1025_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))==Js(0.0)) else ((var.get('x')+((var.get('x')*var.get('x'))/Js(2.0))) if ((var.get('x')>(-Js(1e-06))) and (var.get('x')<Js(1e-06))) else (var.get('Math').callprop('exp', var.get('x'))-Js(1.0))))
        PyJs_expm1_1025_._set_name('expm1')
        var.get('module').put('exports', (PyJs_expm1_1025_ if (((var.get('$expm1').neg() or (var.get('$expm1')(Js(10.0))>Js(22025.465794806718))) or (var.get('$expm1')(Js(10.0))<Js(22025.465794806718))) or (var.get('$expm1')((-Js(2e-17)))!=(-Js(2e-17)))) else var.get('$expm1')))
    PyJs_anonymous_1024_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1026_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['MIN32', 'exports', 'roundTiesToEven', 'require', 'module', 'EPSILON32', 'pow', 'sign', 'EPSILON', 'MAX32'])
        var.put('sign', var.get('require')(Js('./_math-sign')))
        var.put('pow', var.get('Math').get('pow'))
        var.put('EPSILON', var.get('pow')(Js(2.0), (-Js(52.0))))
        var.put('EPSILON32', var.get('pow')(Js(2.0), (-Js(23.0))))
        var.put('MAX32', (var.get('pow')(Js(2.0), Js(127.0))*(Js(2.0)-var.get('EPSILON32'))))
        var.put('MIN32', var.get('pow')(Js(2.0), (-Js(126.0))))
        @Js
        def PyJs_roundTiesToEven_1027_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, 'roundTiesToEven':PyJs_roundTiesToEven_1027_}, var)
            var.registers(['n'])
            return ((var.get('n')+(Js(1.0)/var.get('EPSILON')))-(Js(1.0)/var.get('EPSILON')))
        PyJs_roundTiesToEven_1027_._set_name('roundTiesToEven')
        var.put('roundTiesToEven', PyJs_roundTiesToEven_1027_)
        @Js
        def PyJs_fround_1028_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'fround':PyJs_fround_1028_}, var)
            var.registers(['a', '$sign', 'x', '$abs', 'result'])
            var.put('$abs', var.get('Math').callprop('abs', var.get('x')))
            var.put('$sign', var.get('sign')(var.get('x')))
            pass
            if (var.get('$abs')<var.get('MIN32')):
                return (((var.get('$sign')*var.get('roundTiesToEven')(((var.get('$abs')/var.get('MIN32'))/var.get('EPSILON32'))))*var.get('MIN32'))*var.get('EPSILON32'))
            var.put('a', ((Js(1.0)+(var.get('EPSILON32')/var.get('EPSILON')))*var.get('$abs')))
            var.put('result', (var.get('a')-(var.get('a')-var.get('$abs'))))
            if ((var.get('result')>var.get('MAX32')) or (var.get('result')!=var.get('result'))):
                return (var.get('$sign')*var.get('Infinity'))
            return (var.get('$sign')*var.get('result'))
        PyJs_fround_1028_._set_name('fround')
        var.get('module').put('exports', (var.get('Math').get('fround') or PyJs_fround_1028_))
    PyJs_anonymous_1026_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1029_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_log1p_1030_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log1p':PyJs_log1p_1030_}, var)
            var.registers(['x'])
            return ((var.get('x')-((var.get('x')*var.get('x'))/Js(2.0))) if ((var.put('x', (+var.get('x')))>(-Js(1e-08))) and (var.get('x')<Js(1e-08))) else var.get('Math').callprop('log', (Js(1.0)+var.get('x'))))
        PyJs_log1p_1030_._set_name('log1p')
        var.get('module').put('exports', (var.get('Math').get('log1p') or PyJs_log1p_1030_))
    PyJs_anonymous_1029_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1031_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_scale_1032_(x, inLow, inHigh, outLow, outHigh, this, arguments, var=var):
            var = Scope({'x':x, 'inLow':inLow, 'inHigh':inHigh, 'outLow':outLow, 'outHigh':outHigh, 'this':this, 'arguments':arguments, 'scale':PyJs_scale_1032_}, var)
            var.registers(['outHigh', 'x', 'outLow', 'inLow', 'inHigh'])
            if (((((_seq(var.get('arguments').get('length'),Js(0.0)) or (var.get('x')!=var.get('x'))) or (var.get('inLow')!=var.get('inLow'))) or (var.get('inHigh')!=var.get('inHigh'))) or (var.get('outLow')!=var.get('outLow'))) or (var.get('outHigh')!=var.get('outHigh'))):
                return var.get('NaN')
            if (_seq(var.get('x'),var.get('Infinity')) or _seq(var.get('x'),(-var.get('Infinity')))):
                return var.get('x')
            return ((((var.get('x')-var.get('inLow'))*(var.get('outHigh')-var.get('outLow')))/(var.get('inHigh')-var.get('inLow')))+var.get('outLow'))
        PyJs_scale_1032_._set_name('scale')
        var.get('module').put('exports', (var.get('Math').get('scale') or PyJs_scale_1032_))
    PyJs_anonymous_1031_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1033_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_sign_1034_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'sign':PyJs_sign_1034_}, var)
            var.registers(['x'])
            return (var.get('x') if ((var.put('x', (+var.get('x')))==Js(0.0)) or (var.get('x')!=var.get('x'))) else ((-Js(1.0)) if (var.get('x')<Js(0.0)) else Js(1.0)))
        PyJs_sign_1034_._set_name('sign')
        var.get('module').put('exports', (var.get('Math').get('sign') or PyJs_sign_1034_))
    PyJs_anonymous_1033_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1035_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'has', 'module', 'setDesc', 'getWeak', 'isObject', 'onFreeze', 'id', 'setMeta', 'FREEZE', 'meta', 'fastKey', 'isExtensible', 'META'])
        var.put('META', var.get('require')(Js('./_uid'))(Js('meta')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('setDesc', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('id', Js(0.0))
        @Js
        def PyJs_anonymous_1036_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(True)
        PyJs_anonymous_1036_._set_name('anonymous')
        var.put('isExtensible', (var.get('Object').get('isExtensible') or PyJs_anonymous_1036_))
        @Js
        def PyJs_anonymous_1037_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('isExtensible')(var.get('Object').callprop('preventExtensions', Js({})))
        PyJs_anonymous_1037_._set_name('anonymous')
        var.put('FREEZE', var.get('require')(Js('./_fails'))(PyJs_anonymous_1037_).neg())
        @Js
        def PyJs_setMeta_1038_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'setMeta':PyJs_setMeta_1038_}, var)
            var.registers(['it'])
            var.get('setDesc')(var.get('it'), var.get('META'), Js({'value':Js({'i':(Js('O')+var.put('id',Js(var.get('id').to_number())+Js(1))),'w':Js({})})}))
        PyJs_setMeta_1038_._set_name('setMeta')
        var.put('setMeta', PyJs_setMeta_1038_)
        @Js
        def PyJs_fastKey_1039_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments, 'fastKey':PyJs_fastKey_1039_}, var)
            var.registers(['create', 'it'])
            if var.get('isObject')(var.get('it')).neg():
                return (var.get('it') if ((Js('undefined') if _seq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol')) else ((Js('S') if (var.get('it',throw=False).typeof()==Js('string')) else Js('P'))+var.get('it')))
            if var.get('has')(var.get('it'), var.get('META')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js('F')
                if var.get('create').neg():
                    return Js('E')
                var.get('setMeta')(var.get('it'))
            return var.get('it').get(var.get('META')).get('i')
        PyJs_fastKey_1039_._set_name('fastKey')
        var.put('fastKey', PyJs_fastKey_1039_)
        @Js
        def PyJs_getWeak_1040_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments, 'getWeak':PyJs_getWeak_1040_}, var)
            var.registers(['create', 'it'])
            if var.get('has')(var.get('it'), var.get('META')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js(True)
                if var.get('create').neg():
                    return Js(False)
                var.get('setMeta')(var.get('it'))
            return var.get('it').get(var.get('META')).get('w')
        PyJs_getWeak_1040_._set_name('getWeak')
        var.put('getWeak', PyJs_getWeak_1040_)
        @Js
        def PyJs_onFreeze_1041_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'onFreeze':PyJs_onFreeze_1041_}, var)
            var.registers(['it'])
            if (((var.get('FREEZE') and var.get('meta').get('NEED')) and var.get('isExtensible')(var.get('it'))) and var.get('has')(var.get('it'), var.get('META')).neg()):
                var.get('setMeta')(var.get('it'))
            return var.get('it')
        PyJs_onFreeze_1041_._set_name('onFreeze')
        var.put('onFreeze', PyJs_onFreeze_1041_)
        var.put('meta', var.get('module').put('exports', Js({'KEY':var.get('META'),'NEED':Js(False),'fastKey':var.get('fastKey'),'getWeak':var.get('getWeak'),'onFreeze':var.get('onFreeze')})))
    PyJs_anonymous_1035_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1042_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'ordinaryDefineOwnMetadata', 'shared', 'ordinaryOwnMetadataKeys', 'module', 'toMetaKey', 'exp', 'ordinaryGetOwnMetadata', 'getOrCreateMetadataMap', '$export', 'store', 'Map', 'ordinaryHasOwnMetadata'])
        var.put('Map', var.get('require')(Js('./es6.map')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('shared', var.get('require')(Js('./_shared'))(Js('metadata')))
        var.put('store', (var.get('shared').get('store') or var.get('shared').put('store', var.get('require')(Js('./es6.weak-map')).create())))
        @Js
        def PyJs_getOrCreateMetadataMap_1043_(target, targetKey, create, this, arguments, var=var):
            var = Scope({'target':target, 'targetKey':targetKey, 'create':create, 'this':this, 'arguments':arguments, 'getOrCreateMetadataMap':PyJs_getOrCreateMetadataMap_1043_}, var)
            var.registers(['keyMetadata', 'targetMetadata', 'targetKey', 'create', 'target'])
            var.put('targetMetadata', var.get('store').callprop('get', var.get('target')))
            if var.get('targetMetadata').neg():
                if var.get('create').neg():
                    return var.get('undefined')
                var.get('store').callprop('set', var.get('target'), var.put('targetMetadata', var.get('Map').create()))
            var.put('keyMetadata', var.get('targetMetadata').callprop('get', var.get('targetKey')))
            if var.get('keyMetadata').neg():
                if var.get('create').neg():
                    return var.get('undefined')
                var.get('targetMetadata').callprop('set', var.get('targetKey'), var.put('keyMetadata', var.get('Map').create()))
            return var.get('keyMetadata')
        PyJs_getOrCreateMetadataMap_1043_._set_name('getOrCreateMetadataMap')
        var.put('getOrCreateMetadataMap', PyJs_getOrCreateMetadataMap_1043_)
        @Js
        def PyJs_ordinaryHasOwnMetadata_1044_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryHasOwnMetadata':PyJs_ordinaryHasOwnMetadata_1044_}, var)
            var.registers(['P', 'metadataMap', 'MetadataKey', 'O'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(False)))
            return (Js(False) if _seq(var.get('metadataMap'),var.get('undefined')) else var.get('metadataMap').callprop('has', var.get('MetadataKey')))
        PyJs_ordinaryHasOwnMetadata_1044_._set_name('ordinaryHasOwnMetadata')
        var.put('ordinaryHasOwnMetadata', PyJs_ordinaryHasOwnMetadata_1044_)
        @Js
        def PyJs_ordinaryGetOwnMetadata_1045_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryGetOwnMetadata':PyJs_ordinaryGetOwnMetadata_1045_}, var)
            var.registers(['P', 'metadataMap', 'MetadataKey', 'O'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(False)))
            return (var.get('undefined') if _seq(var.get('metadataMap'),var.get('undefined')) else var.get('metadataMap').callprop('get', var.get('MetadataKey')))
        PyJs_ordinaryGetOwnMetadata_1045_._set_name('ordinaryGetOwnMetadata')
        var.put('ordinaryGetOwnMetadata', PyJs_ordinaryGetOwnMetadata_1045_)
        @Js
        def PyJs_ordinaryDefineOwnMetadata_1046_(MetadataKey, MetadataValue, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'MetadataValue':MetadataValue, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryDefineOwnMetadata':PyJs_ordinaryDefineOwnMetadata_1046_}, var)
            var.registers(['P', 'MetadataKey', 'MetadataValue', 'O'])
            var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(True)).callprop('set', var.get('MetadataKey'), var.get('MetadataValue'))
        PyJs_ordinaryDefineOwnMetadata_1046_._set_name('ordinaryDefineOwnMetadata')
        var.put('ordinaryDefineOwnMetadata', PyJs_ordinaryDefineOwnMetadata_1046_)
        @Js
        def PyJs_ordinaryOwnMetadataKeys_1047_(target, targetKey, this, arguments, var=var):
            var = Scope({'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'ordinaryOwnMetadataKeys':PyJs_ordinaryOwnMetadataKeys_1047_}, var)
            var.registers(['metadataMap', 'target', 'targetKey', 'keys'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('target'), var.get('targetKey'), Js(False)))
            var.put('keys', Js([]))
            if var.get('metadataMap'):
                @Js
                def PyJs_anonymous_1048_(_, key, this, arguments, var=var):
                    var = Scope({'_':_, 'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['_', 'key'])
                    var.get('keys').callprop('push', var.get('key'))
                PyJs_anonymous_1048_._set_name('anonymous')
                var.get('metadataMap').callprop('forEach', PyJs_anonymous_1048_)
            return var.get('keys')
        PyJs_ordinaryOwnMetadataKeys_1047_._set_name('ordinaryOwnMetadataKeys')
        var.put('ordinaryOwnMetadataKeys', PyJs_ordinaryOwnMetadataKeys_1047_)
        @Js
        def PyJs_toMetaKey_1049_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'toMetaKey':PyJs_toMetaKey_1049_}, var)
            var.registers(['it'])
            return (var.get('it') if (_seq(var.get('it'),var.get('undefined')) or ((Js('undefined') if _seq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol'))) else var.get('String')(var.get('it')))
        PyJs_toMetaKey_1049_._set_name('toMetaKey')
        var.put('toMetaKey', PyJs_toMetaKey_1049_)
        @Js
        def PyJs_exp_1050_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'exp':PyJs_exp_1050_}, var)
            var.registers(['O'])
            var.get('$export')(var.get('$export').get('S'), Js('Reflect'), var.get('O'))
        PyJs_exp_1050_._set_name('exp')
        var.put('exp', PyJs_exp_1050_)
        var.get('module').put('exports', Js({'store':var.get('store'),'map':var.get('getOrCreateMetadataMap'),'has':var.get('ordinaryHasOwnMetadata'),'get':var.get('ordinaryGetOwnMetadata'),'set':var.get('ordinaryDefineOwnMetadata'),'keys':var.get('ordinaryOwnMetadataKeys'),'key':var.get('toMetaKey'),'exp':var.get('exp')}))
    PyJs_anonymous_1042_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1051_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'isNode', 'module', 'Promise', 'Observer', 'process', 'global', 'macrotask'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('macrotask', var.get('require')(Js('./_task')).get('set'))
        var.put('Observer', (var.get('global').get('MutationObserver') or var.get('global').get('WebKitMutationObserver')))
        var.put('process', var.get('global').get('process'))
        var.put('Promise', var.get('global').get('Promise'))
        var.put('isNode', (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')))
        @Js
        def PyJs_anonymous_1052_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['promise', 'head', 'last', 'toggle', 'notify', 'node', 'flush'])
            pass
            @Js
            def PyJs_flush_1053_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'flush':PyJs_flush_1053_}, var)
                var.registers(['fn', 'parent'])
                pass
                if (var.get('isNode') and var.put('parent', var.get('process').get('domain'))):
                    var.get('parent').callprop('exit')
                while var.get('head'):
                    var.put('fn', var.get('head').get('fn'))
                    var.put('head', var.get('head').get('next'))
                    try:
                        var.get('fn')()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_95267166 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('head'):
                                var.get('notify')()
                            else:
                                var.put('last', var.get('undefined'))
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_65_95267166 is not None:
                                var.own['e'] = PyJsHolder_65_95267166
                            else:
                                del var.own['e']
                            del PyJsHolder_65_95267166
                var.put('last', var.get('undefined'))
                if var.get('parent'):
                    var.get('parent').callprop('enter')
            PyJs_flush_1053_._set_name('flush')
            var.put('flush', PyJs_flush_1053_)
            if var.get('isNode'):
                @Js
                def PyJs_notify_1054_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_1054_}, var)
                    var.registers([])
                    var.get('process').callprop('nextTick', var.get('flush'))
                PyJs_notify_1054_._set_name('notify')
                var.put('notify', PyJs_notify_1054_)
            else:
                if (var.get('Observer') and (var.get('global').get('navigator') and var.get('global').get('navigator').get('standalone')).neg()):
                    var.put('toggle', Js(True))
                    var.put('node', var.get('document').callprop('createTextNode', Js('')))
                    var.get('Observer').create(var.get('flush')).callprop('observe', var.get('node'), Js({'characterData':Js(True)}))
                    @Js
                    def PyJs_notify_1055_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_1055_}, var)
                        var.registers([])
                        var.get('node').put('data', var.put('toggle', var.get('toggle').neg()))
                    PyJs_notify_1055_._set_name('notify')
                    var.put('notify', PyJs_notify_1055_)
                else:
                    if (var.get('Promise') and var.get('Promise').get('resolve')):
                        var.put('promise', var.get('Promise').callprop('resolve', var.get('undefined')))
                        @Js
                        def PyJs_notify_1056_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_1056_}, var)
                            var.registers([])
                            var.get('promise').callprop('then', var.get('flush'))
                        PyJs_notify_1056_._set_name('notify')
                        var.put('notify', PyJs_notify_1056_)
                    else:
                        @Js
                        def PyJs_notify_1057_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_1057_}, var)
                            var.registers([])
                            var.get('macrotask').callprop('call', var.get('global'), var.get('flush'))
                        PyJs_notify_1057_._set_name('notify')
                        var.put('notify', PyJs_notify_1057_)
            @Js
            def PyJs_anonymous_1058_(fn, this, arguments, var=var):
                var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                var.registers(['fn', 'task'])
                var.put('task', Js({'fn':var.get('fn'),'next':var.get('undefined')}))
                if var.get('last'):
                    var.get('last').put('next', var.get('task'))
                if var.get('head').neg():
                    var.put('head', var.get('task'))
                    var.get('notify')()
                var.put('last', var.get('task'))
            PyJs_anonymous_1058_._set_name('anonymous')
            return PyJs_anonymous_1058_
        PyJs_anonymous_1052_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1052_)
    PyJs_anonymous_1051_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1059_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'aFunction', 'PromiseCapability'])
        @Js
        def PyJsHoisted_PromiseCapability_(C, this, arguments, var=var):
            var = Scope({'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['resolve', 'C', 'reject'])
            pass
            @Js
            def PyJs_anonymous_1060_(PyJsArg_24247265736f6c7665_, PyJsArg_242472656a656374_, this, arguments, var=var):
                var = Scope({'$$resolve':PyJsArg_24247265736f6c7665_, '$$reject':PyJsArg_242472656a656374_, 'this':this, 'arguments':arguments}, var)
                var.registers(['$$resolve', '$$reject'])
                if (PyJsStrictNeq(var.get('resolve'),var.get('undefined')) or PyJsStrictNeq(var.get('reject'),var.get('undefined'))):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('Bad Promise constructor')))
                    raise PyJsTempException
                var.put('resolve', var.get('$$resolve'))
                var.put('reject', var.get('$$reject'))
            PyJs_anonymous_1060_._set_name('anonymous')
            var.get(u"this").put('promise', var.get('C').create(PyJs_anonymous_1060_))
            var.get(u"this").put('resolve', var.get('aFunction')(var.get('resolve')))
            var.get(u"this").put('reject', var.get('aFunction')(var.get('reject')))
        PyJsHoisted_PromiseCapability_.func_name = 'PromiseCapability'
        var.put('PromiseCapability', PyJsHoisted_PromiseCapability_)
        Js('use strict')
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        pass
        @Js
        def PyJs_anonymous_1061_(C, this, arguments, var=var):
            var = Scope({'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['C'])
            return var.get('PromiseCapability').create(var.get('C'))
        PyJs_anonymous_1061_._set_name('anonymous')
        var.get('module').get('exports').put('f', PyJs_anonymous_1061_)
    PyJs_anonymous_1059_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1062_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'pIE', 'gOPS', 'getKeys', 'DESCRIPTORS', 'toObject', '$assign', 'IObject'])
        Js('use strict')
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('$assign', var.get('Object').get('assign'))
        @Js
        def PyJs_assign_1063_(target, source, this, arguments, var=var):
            var = Scope({'target':target, 'source':source, 'this':this, 'arguments':arguments, 'assign':PyJs_assign_1063_}, var)
            var.registers(['isEnum', 'S', 'j', 'length', 'index', 'target', 'T', 'key', 'getSymbols', 'keys', 'aLen', 'source'])
            var.put('T', var.get('toObject')(var.get('target')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('index', Js(1.0))
            var.put('getSymbols', var.get('gOPS').get('f'))
            var.put('isEnum', var.get('pIE').get('f'))
            while (var.get('aLen')>var.get('index')):
                var.put('S', var.get('IObject')(var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))))
                var.put('keys', (var.get('getKeys')(var.get('S')).callprop('concat', var.get('getSymbols')(var.get('S'))) if var.get('getSymbols') else var.get('getKeys')(var.get('S'))))
                var.put('length', var.get('keys').get('length'))
                var.put('j', Js(0.0))
                pass
                while (var.get('length')>var.get('j')):
                    var.put('key', var.get('keys').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('isEnum').callprop('call', var.get('S'), var.get('key'))):
                        var.get('T').put(var.get('key'), var.get('S').get(var.get('key')))
            return var.get('T')
        PyJs_assign_1063_._set_name('assign')
        @Js
        def PyJs_anonymous_1064_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['S', 'K', 'B', 'A'])
            var.put('A', Js({}))
            var.put('B', Js({}))
            var.put('S', var.get('Symbol')())
            var.put('K', Js('abcdefghijklmnopqrst'))
            var.get('A').put(var.get('S'), Js(7.0))
            @Js
            def PyJs_anonymous_1065_(k, this, arguments, var=var):
                var = Scope({'k':k, 'this':this, 'arguments':arguments}, var)
                var.registers(['k'])
                var.get('B').put(var.get('k'), var.get('k'))
            PyJs_anonymous_1065_._set_name('anonymous')
            var.get('K').callprop('split', Js('')).callprop('forEach', PyJs_anonymous_1065_)
            return ((var.get('$assign')(Js({}), var.get('A')).get(var.get('S'))!=Js(7.0)) or (var.get('Object').callprop('keys', var.get('$assign')(Js({}), var.get('B'))).callprop('join', Js(''))!=var.get('K')))
        PyJs_anonymous_1064_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_assign_1063_ if (var.get('$assign').neg() or var.get('require')(Js('./_fails'))(PyJs_anonymous_1064_)) else var.get('$assign')))
    PyJs_anonymous_1062_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1066_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'Empty', 'dPs', 'enumBugKeys', 'IE_PROTO', 'PROTOTYPE', 'anObject', '_createDict'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('dPs', var.get('require')(Js('./_object-dps')))
        var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        @Js
        def PyJs_Empty_1067_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'Empty':PyJs_Empty_1067_}, var)
            var.registers([])
            pass
        PyJs_Empty_1067_._set_name('Empty')
        var.put('Empty', PyJs_Empty_1067_)
        var.put('PROTOTYPE', Js('prototype'))
        @Js
        def PyJs_createDict_1068_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'createDict':PyJs_createDict_1068_}, var)
            var.registers(['i', 'gt', 'iframe', 'iframeDocument', 'lt'])
            var.put('iframe', var.get('require')(Js('./_dom-create'))(Js('iframe')))
            var.put('i', var.get('enumBugKeys').get('length'))
            var.put('lt', Js('<'))
            var.put('gt', Js('>'))
            pass
            var.get('iframe').get('style').put('display', Js('none'))
            var.get('require')(Js('./_html')).callprop('appendChild', var.get('iframe'))
            var.get('iframe').put('src', Js('javascript:'))
            var.put('iframeDocument', var.get('iframe').get('contentWindow').get('document'))
            var.get('iframeDocument').callprop('open')
            var.get('iframeDocument').callprop('write', ((((((var.get('lt')+Js('script'))+var.get('gt'))+Js('document.F=Object'))+var.get('lt'))+Js('/script'))+var.get('gt')))
            var.get('iframeDocument').callprop('close')
            var.put('_createDict', var.get('iframeDocument').get('F'))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1)):
                var.get('_createDict').get(var.get('PROTOTYPE')).delete(var.get('enumBugKeys').get(var.get('i')))
            return var.get('_createDict')()
        PyJs_createDict_1068_._set_name('createDict')
        var.put('_createDict', PyJs_createDict_1068_)
        @Js
        def PyJs_create_1069_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'create':PyJs_create_1069_}, var)
            var.registers(['result', 'Properties', 'O'])
            pass
            if PyJsStrictNeq(var.get('O'),var.get(u"null")):
                var.get('Empty').put(var.get('PROTOTYPE'), var.get('anObject')(var.get('O')))
                var.put('result', var.get('Empty').create())
                var.get('Empty').put(var.get('PROTOTYPE'), var.get(u"null"))
                var.get('result').put(var.get('IE_PROTO'), var.get('O'))
            else:
                var.put('result', var.get('_createDict')())
            return (var.get('result') if _seq(var.get('Properties'),var.get('undefined')) else var.get('dPs')(var.get('result'), var.get('Properties')))
        PyJs_create_1069_._set_name('create')
        var.get('module').put('exports', (var.get('Object').get('create') or PyJs_create_1069_))
    PyJs_anonymous_1066_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1070_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'toPrimitive', 'module', 'IE8_DOM_DEFINE', 'anObject', 'dP'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('dP', var.get('Object').get('defineProperty'))
        @Js
        def PyJs_defineProperty_1071_(O, P, Attributes, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'Attributes':Attributes, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_1071_}, var)
            var.registers(['P', 'Attributes', 'O'])
            var.get('anObject')(var.get('O'))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            var.get('anObject')(var.get('Attributes'))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('dP')(var.get('O'), var.get('P'), var.get('Attributes'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_2629904 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_2629904 is not None:
                            var.own['e'] = PyJsHolder_65_2629904
                        else:
                            del var.own['e']
                        del PyJsHolder_65_2629904
            if (var.get('Attributes').contains(Js('get')) or var.get('Attributes').contains(Js('set'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Accessors not supported!')))
                raise PyJsTempException
            if var.get('Attributes').contains(Js('value')):
                var.get('O').put(var.get('P'), var.get('Attributes').get('value'))
            return var.get('O')
        PyJs_defineProperty_1071_._set_name('defineProperty')
        var.get('exports').put('f', (var.get('Object').get('defineProperty') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperty_1071_))
    PyJs_anonymous_1070_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1072_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'getKeys', 'anObject', 'dP'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        @Js
        def PyJs_defineProperties_1073_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'defineProperties':PyJs_defineProperties_1073_}, var)
            var.registers(['P', 'Properties', 'i', 'length', 'O', 'keys'])
            var.get('anObject')(var.get('O'))
            var.put('keys', var.get('getKeys')(var.get('Properties')))
            var.put('length', var.get('keys').get('length'))
            var.put('i', Js(0.0))
            pass
            while (var.get('length')>var.get('i')):
                var.get('dP').callprop('f', var.get('O'), var.put('P', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))), var.get('Properties').get(var.get('P')))
            return var.get('O')
        PyJs_defineProperties_1073_._set_name('defineProperties')
        var.get('module').put('exports', (var.get('Object').get('defineProperties') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperties_1073_))
    PyJs_anonymous_1072_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1074_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1075_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['K'])
            var.put('K', var.get('Math').callprop('random'))
            @Js
            def PyJs_anonymous_1076_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1076_._set_name('anonymous')
            var.get('__defineSetter__').callprop('call', var.get(u"null"), var.get('K'), PyJs_anonymous_1076_)
            var.get('require')(Js('./_global')).delete(var.get('K'))
        PyJs_anonymous_1075_._set_name('anonymous')
        var.get('module').put('exports', (var.get('require')(Js('./_library')) or var.get('require')(Js('./_fails'))(PyJs_anonymous_1075_).neg()))
    PyJs_anonymous_1074_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1077_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'toPrimitive', 'has', 'pIE', 'module', 'IE8_DOM_DEFINE', 'gOPD', 'toIObject', 'createDesc'])
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
        var.put('gOPD', var.get('Object').get('getOwnPropertyDescriptor'))
        @Js
        def PyJs_getOwnPropertyDescriptor_1078_(O, P, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1078_}, var)
            var.registers(['P', 'O'])
            var.put('O', var.get('toIObject')(var.get('O')))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('gOPD')(var.get('O'), var.get('P'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_17105716 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_17105716 is not None:
                            var.own['e'] = PyJsHolder_65_17105716
                        else:
                            del var.own['e']
                        del PyJsHolder_65_17105716
            if var.get('has')(var.get('O'), var.get('P')):
                return var.get('createDesc')(var.get('pIE').get('f').callprop('call', var.get('O'), var.get('P')).neg(), var.get('O').get(var.get('P')))
        PyJs_getOwnPropertyDescriptor_1078_._set_name('getOwnPropertyDescriptor')
        var.get('exports').put('f', (var.get('gOPD') if var.get('require')(Js('./_descriptors')) else PyJs_getOwnPropertyDescriptor_1078_))
    PyJs_anonymous_1077_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1079_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'gOPN', 'toIObject', 'windowNames', 'toString', 'getWindowNames'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('toString', Js({}).get('toString'))
        var.put('windowNames', (var.get('Object').callprop('getOwnPropertyNames', var.get('window')) if ((((Js('undefined') if _seq(var.get('window',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('window')))==Js('object')) and var.get('window')) and var.get('Object').get('getOwnPropertyNames')) else Js([])))
        @Js
        def PyJs_getWindowNames_1080_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getWindowNames':PyJs_getWindowNames_1080_}, var)
            var.registers(['it'])
            try:
                return var.get('gOPN')(var.get('it'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_97050765 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get('windowNames').callprop('slice')
                finally:
                    if PyJsHolder_65_97050765 is not None:
                        var.own['e'] = PyJsHolder_65_97050765
                    else:
                        del var.own['e']
                    del PyJsHolder_65_97050765
        PyJs_getWindowNames_1080_._set_name('getWindowNames')
        var.put('getWindowNames', PyJs_getWindowNames_1080_)
        @Js
        def PyJs_getOwnPropertyNames_1081_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_1081_}, var)
            var.registers(['it'])
            return (var.get('getWindowNames')(var.get('it')) if (var.get('windowNames') and (var.get('toString').callprop('call', var.get('it'))==Js('[object Window]'))) else var.get('gOPN')(var.get('toIObject')(var.get('it'))))
        PyJs_getOwnPropertyNames_1081_._set_name('getOwnPropertyNames')
        var.get('module').get('exports').put('f', PyJs_getOwnPropertyNames_1081_)
    PyJs_anonymous_1079_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1082_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'hiddenKeys', '$keys'])
        var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
        var.put('hiddenKeys', var.get('require')(Js('./_enum-bug-keys')).callprop('concat', Js('length'), Js('prototype')))
        @Js
        def PyJs_getOwnPropertyNames_1083_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_1083_}, var)
            var.registers(['O'])
            return var.get('$keys')(var.get('O'), var.get('hiddenKeys'))
        PyJs_getOwnPropertyNames_1083_._set_name('getOwnPropertyNames')
        var.get('exports').put('f', (var.get('Object').get('getOwnPropertyNames') or PyJs_getOwnPropertyNames_1083_))
    PyJs_anonymous_1082_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1084_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('exports').put('f', var.get('Object').get('getOwnPropertySymbols'))
    PyJs_anonymous_1084_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1085_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'has', 'module', 'IE_PROTO', 'toObject', 'ObjectProto'])
        var.put('has', var.get('require')(Js('./_has')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        var.put('ObjectProto', var.get('Object').get('prototype'))
        @Js
        def PyJs_anonymous_1086_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments}, var)
            var.registers(['O'])
            var.put('O', var.get('toObject')(var.get('O')))
            if var.get('has')(var.get('O'), var.get('IE_PROTO')):
                return var.get('O').get(var.get('IE_PROTO'))
            if ((var.get('O').get('constructor').typeof()==Js('function')) and var.get('O').instanceof(var.get('O').get('constructor'))):
                return var.get('O').get('constructor').get('prototype')
            return (var.get('ObjectProto') if var.get('O').instanceof(var.get('Object')) else var.get(u"null"))
        PyJs_anonymous_1086_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object').get('getPrototypeOf') or PyJs_anonymous_1086_))
    PyJs_anonymous_1085_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1087_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'arrayIndexOf', 'require', 'has', 'module', 'IE_PROTO', 'toIObject'])
        var.put('has', var.get('require')(Js('./_has')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('arrayIndexOf', var.get('require')(Js('./_array-includes'))(Js(False)))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        @Js
        def PyJs_anonymous_1088_(object, names, this, arguments, var=var):
            var = Scope({'object':object, 'names':names, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'names', 'object', 'key', 'O', 'result'])
            var.put('O', var.get('toIObject')(var.get('object')))
            var.put('i', Js(0.0))
            var.put('result', Js([]))
            pass
            for PyJsTemp in var.get('O'):
                var.put('key', PyJsTemp)
                if (var.get('key')!=var.get('IE_PROTO')):
                    (var.get('has')(var.get('O'), var.get('key')) and var.get('result').callprop('push', var.get('key')))
            while (var.get('names').get('length')>var.get('i')):
                if var.get('has')(var.get('O'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                    ((~var.get('arrayIndexOf')(var.get('result'), var.get('key'))) or var.get('result').callprop('push', var.get('key')))
            return var.get('result')
        PyJs_anonymous_1088_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1088_)
    PyJs_anonymous_1087_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1089_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'enumBugKeys', '$keys'])
        var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
        var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
        @Js
        def PyJs_keys_1090_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'keys':PyJs_keys_1090_}, var)
            var.registers(['O'])
            return var.get('$keys')(var.get('O'), var.get('enumBugKeys'))
        PyJs_keys_1090_._set_name('keys')
        var.get('module').put('exports', (var.get('Object').get('keys') or PyJs_keys_1090_))
    PyJs_anonymous_1089_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1091_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('exports').put('f', Js({}).get('propertyIsEnumerable'))
    PyJs_anonymous_1091_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1092_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'fails', '$export', 'core'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_1093_(KEY, exec, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn', 'KEY', 'exp', 'exec'])
            var.put('fn', ((var.get('core').get('Object') or Js({})).get(var.get('KEY')) or var.get('Object').get(var.get('KEY'))))
            var.put('exp', Js({}))
            var.get('exp').put(var.get('KEY'), var.get('exec')(var.get('fn')))
            @Js
            def PyJs_anonymous_1094_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('fn')(Js(1.0))
            PyJs_anonymous_1094_._set_name('anonymous')
            var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_1094_))), Js('Object'), var.get('exp'))
        PyJs_anonymous_1093_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1093_)
    PyJs_anonymous_1092_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1095_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isEnum', 'exports', 'require', 'module', 'getKeys', 'toIObject', 'DESCRIPTORS'])
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('isEnum', var.get('require')(Js('./_object-pie')).get('f'))
        @Js
        def PyJs_anonymous_1096_(isEntries, this, arguments, var=var):
            var = Scope({'isEntries':isEntries, 'this':this, 'arguments':arguments}, var)
            var.registers(['isEntries'])
            @Js
            def PyJs_anonymous_1097_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'length', 'it', 'key', 'O', 'keys', 'result'])
                var.put('O', var.get('toIObject')(var.get('it')))
                var.put('keys', var.get('getKeys')(var.get('O')))
                var.put('length', var.get('keys').get('length'))
                var.put('i', Js(0.0))
                var.put('result', Js([]))
                pass
                while (var.get('length')>var.get('i')):
                    var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('isEnum').callprop('call', var.get('O'), var.get('key'))):
                        var.get('result').callprop('push', (Js([var.get('key'), var.get('O').get(var.get('key'))]) if var.get('isEntries') else var.get('O').get(var.get('key'))))
                return var.get('result')
            PyJs_anonymous_1097_._set_name('anonymous')
            return PyJs_anonymous_1097_
        PyJs_anonymous_1096_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1096_)
    PyJs_anonymous_1095_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1098_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'gOPS', 'Reflect', 'gOPN', 'anObject'])
        var.put('gOPN', var.get('require')(Js('./_object-gopn')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('Reflect', var.get('require')(Js('./_global')).get('Reflect'))
        @Js
        def PyJs_ownKeys_1099_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'ownKeys':PyJs_ownKeys_1099_}, var)
            var.registers(['getSymbols', 'keys', 'it'])
            var.put('keys', var.get('gOPN').callprop('f', var.get('anObject')(var.get('it'))))
            var.put('getSymbols', var.get('gOPS').get('f'))
            return (var.get('keys').callprop('concat', var.get('getSymbols')(var.get('it'))) if var.get('getSymbols') else var.get('keys'))
        PyJs_ownKeys_1099_._set_name('ownKeys')
        var.get('module').put('exports', ((var.get('Reflect') and var.get('Reflect').get('ownKeys')) or PyJs_ownKeys_1099_))
    PyJs_anonymous_1098_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1100_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$parseFloat', '$trim'])
        var.put('$parseFloat', var.get('require')(Js('./_global')).get('parseFloat'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        @Js
        def PyJs_parseFloat_1101_(str, this, arguments, var=var):
            var = Scope({'str':str, 'this':this, 'arguments':arguments, 'parseFloat':PyJs_parseFloat_1101_}, var)
            var.registers(['string', 'result', 'str'])
            var.put('string', var.get('$trim')(var.get('String')(var.get('str')), Js(3.0)))
            var.put('result', var.get('$parseFloat')(var.get('string')))
            return ((-Js(0.0)) if (_seq(var.get('result'),Js(0.0)) and (var.get('string').callprop('charAt', Js(0.0))==Js('-'))) else var.get('result'))
        PyJs_parseFloat_1101_._set_name('parseFloat')
        var.get('module').put('exports', (PyJs_parseFloat_1101_ if PyJsStrictNeq((Js(1.0)/var.get('$parseFloat')((var.get('require')(Js('./_string-ws'))+Js('-0')))),(-var.get('Infinity'))) else var.get('$parseFloat')))
    PyJs_anonymous_1100_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1102_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$parseInt', 'hex', 'ws', '$trim'])
        var.put('$parseInt', var.get('require')(Js('./_global')).get('parseInt'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        var.put('ws', var.get('require')(Js('./_string-ws')))
        var.put('hex', JsRegExp('/^[-+]?0[xX]/'))
        @Js
        def PyJs_parseInt_1103_(str, radix, this, arguments, var=var):
            var = Scope({'str':str, 'radix':radix, 'this':this, 'arguments':arguments, 'parseInt':PyJs_parseInt_1103_}, var)
            var.registers(['string', 'radix', 'str'])
            var.put('string', var.get('$trim')(var.get('String')(var.get('str')), Js(3.0)))
            return var.get('$parseInt')(var.get('string'), (PyJsBshift(var.get('radix'),Js(0.0)) or (Js(16.0) if var.get('hex').callprop('test', var.get('string')) else Js(10.0))))
        PyJs_parseInt_1103_._set_name('parseInt')
        var.get('module').put('exports', (PyJs_parseInt_1103_ if (PyJsStrictNeq(var.get('$parseInt')((var.get('ws')+Js('08'))),Js(8.0)) or PyJsStrictNeq(var.get('$parseInt')((var.get('ws')+Js('0x16'))),Js(22.0))) else var.get('$parseInt')))
    PyJs_anonymous_1102_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1104_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1105_(exec, this, arguments, var=var):
            var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec'])
            try:
                return Js({'e':Js(False),'v':var.get('exec')()})
            except PyJsException as PyJsTempException:
                PyJsHolder_65_32165076 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js({'e':Js(True),'v':var.get('e')})
                finally:
                    if PyJsHolder_65_32165076 is not None:
                        var.own['e'] = PyJsHolder_65_32165076
                    else:
                        del var.own['e']
                    del PyJsHolder_65_32165076
        PyJs_anonymous_1105_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1105_)
    PyJs_anonymous_1104_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1106_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'newPromiseCapability', 'require', 'module', 'isObject', 'anObject'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('newPromiseCapability', var.get('require')(Js('./_new-promise-capability')))
        @Js
        def PyJs_anonymous_1107_(C, x, this, arguments, var=var):
            var = Scope({'C':C, 'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['resolve', 'x', 'C', 'promiseCapability'])
            var.get('anObject')(var.get('C'))
            if (var.get('isObject')(var.get('x')) and _seq(var.get('x').get('constructor'),var.get('C'))):
                return var.get('x')
            var.put('promiseCapability', var.get('newPromiseCapability').callprop('f', var.get('C')))
            var.put('resolve', var.get('promiseCapability').get('resolve'))
            var.get('resolve')(var.get('x'))
            return var.get('promiseCapability').get('promise')
        PyJs_anonymous_1107_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1107_)
    PyJs_anonymous_1106_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1108_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1109_(bitmap, value, this, arguments, var=var):
            var = Scope({'bitmap':bitmap, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['bitmap', 'value'])
            return Js({'enumerable':(var.get('bitmap')&Js(1.0)).neg(),'configurable':(var.get('bitmap')&Js(2.0)).neg(),'writable':(var.get('bitmap')&Js(4.0)).neg(),'value':var.get('value')})
        PyJs_anonymous_1109_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1109_)
    PyJs_anonymous_1108_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1110_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'redefine'])
        var.put('redefine', var.get('require')(Js('./_redefine')))
        @Js
        def PyJs_anonymous_1111_(target, src, safe, this, arguments, var=var):
            var = Scope({'target':target, 'src':src, 'safe':safe, 'this':this, 'arguments':arguments}, var)
            var.registers(['safe', 'src', 'target', 'key'])
            for PyJsTemp in var.get('src'):
                var.put('key', PyJsTemp)
                var.get('redefine')(var.get('target'), var.get('key'), var.get('src').get(var.get('key')), var.get('safe'))
            return var.get('target')
        PyJs_anonymous_1111_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1111_)
    PyJs_anonymous_1110_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1112_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'has', 'module', 'TPL', 'hide', 'global', '$toString', 'TO_STRING', 'SRC'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('SRC', var.get('require')(Js('./_uid'))(Js('src')))
        var.put('$toString', var.get('require')(Js('./_function-to-string')))
        var.put('TO_STRING', Js('toString'))
        var.put('TPL', (Js('')+var.get('$toString')).callprop('split', var.get('TO_STRING')))
        @Js
        def PyJs_anonymous_1113_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('$toString').callprop('call', var.get('it'))
        PyJs_anonymous_1113_._set_name('anonymous')
        var.get('require')(Js('./_core')).put('inspectSource', PyJs_anonymous_1113_)
        @Js
        def PyJs_toString_1114_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1114_}, var)
            var.registers([])
            return (((var.get(u"this",throw=False).typeof()==Js('function')) and var.get(u"this").get(var.get('SRC'))) or var.get('$toString').callprop('call', var.get(u"this")))
        PyJs_toString_1114_._set_name('toString')
        @Js
        def PyJs_anonymous_1115_(O, key, val, safe, this, arguments, var=var):
            var = Scope({'O':O, 'key':key, 'val':val, 'safe':safe, 'this':this, 'arguments':arguments}, var)
            var.registers(['isFunction', 'safe', 'O', 'key', 'val'])
            var.put('isFunction', (var.get('val',throw=False).typeof()==Js('function')))
            if var.get('isFunction'):
                (var.get('has')(var.get('val'), Js('name')) or var.get('hide')(var.get('val'), Js('name'), var.get('key')))
            if _seq(var.get('O').get(var.get('key')),var.get('val')):
                return var.get('undefined')
            if var.get('isFunction'):
                (var.get('has')(var.get('val'), var.get('SRC')) or var.get('hide')(var.get('val'), var.get('SRC'), ((Js('')+var.get('O').get(var.get('key'))) if var.get('O').get(var.get('key')) else var.get('TPL').callprop('join', var.get('String')(var.get('key'))))))
            if _seq(var.get('O'),var.get('global')):
                var.get('O').put(var.get('key'), var.get('val'))
            else:
                if var.get('safe').neg():
                    var.get('O').delete(var.get('key'))
                    var.get('hide')(var.get('O'), var.get('key'), var.get('val'))
                else:
                    if var.get('O').get(var.get('key')):
                        var.get('O').put(var.get('key'), var.get('val'))
                    else:
                        var.get('hide')(var.get('O'), var.get('key'), var.get('val'))
        PyJs_anonymous_1115_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1115_)(var.get('Function').get('prototype'), var.get('TO_STRING'), PyJs_toString_1114_)
    PyJs_anonymous_1112_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1116_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'builtinExec', 'classof'])
        Js('use strict')
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('builtinExec', var.get('RegExp').get('prototype').get('exec'))
        @Js
        def PyJs_anonymous_1117_(R, S, this, arguments, var=var):
            var = Scope({'R':R, 'S':S, 'this':this, 'arguments':arguments}, var)
            var.registers(['R', 'S', 'result', 'exec'])
            var.put('exec', var.get('R').get('exec'))
            if _seq(var.get('exec',throw=False).typeof(),Js('function')):
                var.put('result', var.get('exec').callprop('call', var.get('R'), var.get('S')))
                if PyJsStrictNeq((Js('undefined') if _seq(var.get('result',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('result'))),Js('object')):
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('RegExp exec method returned something other than an Object or null')))
                    raise PyJsTempException
                return var.get('result')
            if PyJsStrictNeq(var.get('classof')(var.get('R')),Js('RegExp')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('RegExp#exec called on incompatible receiver')))
                raise PyJsTempException
            return var.get('builtinExec').callprop('call', var.get('R'), var.get('S'))
        PyJs_anonymous_1117_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1117_)
    PyJs_anonymous_1116_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1118_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'PATCH', 'UPDATES_LAST_INDEX_WRONG', 'NPCG_INCLUDED', 'patchedExec', 'LAST_INDEX', 'nativeReplace', 'regexpFlags', 'nativeExec'])
        Js('use strict')
        var.put('regexpFlags', var.get('require')(Js('./_flags')))
        var.put('nativeExec', var.get('RegExp').get('prototype').get('exec'))
        var.put('nativeReplace', var.get('String').get('prototype').get('replace'))
        var.put('patchedExec', var.get('nativeExec'))
        var.put('LAST_INDEX', Js('lastIndex'))
        @Js
        def PyJs_anonymous_1119_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re2', 're1'])
            var.put('re1', JsRegExp('/a/'))
            var.put('re2', JsRegExp('/b*/g'))
            var.get('nativeExec').callprop('call', var.get('re1'), Js('a'))
            var.get('nativeExec').callprop('call', var.get('re2'), Js('a'))
            return (PyJsStrictNeq(var.get('re1').get(var.get('LAST_INDEX')),Js(0.0)) or PyJsStrictNeq(var.get('re2').get(var.get('LAST_INDEX')),Js(0.0)))
        PyJs_anonymous_1119_._set_name('anonymous')
        var.put('UPDATES_LAST_INDEX_WRONG', PyJs_anonymous_1119_())
        var.put('NPCG_INCLUDED', PyJsStrictNeq(JsRegExp('/()??/').callprop('exec', Js('')).get('1'),var.get('undefined')))
        var.put('PATCH', (var.get('UPDATES_LAST_INDEX_WRONG') or var.get('NPCG_INCLUDED')))
        if var.get('PATCH'):
            @Js
            def PyJs_exec_1120_(str, this, arguments, var=var):
                var = Scope({'str':str, 'this':this, 'arguments':arguments, 'exec':PyJs_exec_1120_}, var)
                var.registers(['str', 'i', 'lastIndex', 'reCopy', 're', 'match'])
                var.put('re', var.get(u"this"))
                pass
                if var.get('NPCG_INCLUDED'):
                    var.put('reCopy', var.get('RegExp').create(((Js('^')+var.get('re').get('source'))+Js('$(?!\\s)')), var.get('regexpFlags').callprop('call', var.get('re'))))
                if var.get('UPDATES_LAST_INDEX_WRONG'):
                    var.put('lastIndex', var.get('re').get(var.get('LAST_INDEX')))
                var.put('match', var.get('nativeExec').callprop('call', var.get('re'), var.get('str')))
                if (var.get('UPDATES_LAST_INDEX_WRONG') and var.get('match')):
                    var.get('re').put(var.get('LAST_INDEX'), ((var.get('match').get('index')+var.get('match').get('0').get('length')) if var.get('re').get('global') else var.get('lastIndex')))
                if ((var.get('NPCG_INCLUDED') and var.get('match')) and (var.get('match').get('length')>Js(1.0))):
                    @Js
                    def PyJs_anonymous_1121_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<(var.get('arguments').get('length')-Js(2.0))):
                            try:
                                if _seq(var.get('arguments').get(var.get('i')),var.get('undefined')):
                                    var.get('match').put(var.get('i'), var.get('undefined'))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    PyJs_anonymous_1121_._set_name('anonymous')
                    var.get('nativeReplace').callprop('call', var.get('match').get('0'), var.get('reCopy'), PyJs_anonymous_1121_)
                return var.get('match')
            PyJs_exec_1120_._set_name('exec')
            var.put('patchedExec', PyJs_exec_1120_)
        var.get('module').put('exports', var.get('patchedExec'))
    PyJs_anonymous_1118_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1122_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1123_(regExp, replace, this, arguments, var=var):
            var = Scope({'regExp':regExp, 'replace':replace, 'this':this, 'arguments':arguments}, var)
            var.registers(['replacer', 'replace', 'regExp'])
            @Js
            def PyJs_anonymous_1124_(part, this, arguments, var=var):
                var = Scope({'part':part, 'this':this, 'arguments':arguments}, var)
                var.registers(['part'])
                return var.get('replace').get(var.get('part'))
            PyJs_anonymous_1124_._set_name('anonymous')
            var.put('replacer', (PyJs_anonymous_1124_ if _seq(var.get('replace'),var.get('Object')(var.get('replace'))) else var.get('replace')))
            @Js
            def PyJs_anonymous_1125_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return var.get('String')(var.get('it')).callprop('replace', var.get('regExp'), var.get('replacer'))
            PyJs_anonymous_1125_._set_name('anonymous')
            return PyJs_anonymous_1125_
        PyJs_anonymous_1123_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1123_)
    PyJs_anonymous_1122_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1126_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_InlineNonPyName_1127_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments, 'is':PyJs_InlineNonPyName_1127_}, var)
            var.registers(['x', 'y'])
            return ((PyJsStrictNeq(var.get('x'),Js(0.0)) or _seq((Js(1.0)/var.get('x')),(Js(1.0)/var.get('y')))) if _seq(var.get('x'),var.get('y')) else ((var.get('x')!=var.get('x')) and (var.get('y')!=var.get('y'))))
        PyJs_InlineNonPyName_1127_._set_name('is')
        var.get('module').put('exports', (var.get('Object').get('is') or PyJs_InlineNonPyName_1127_))
    PyJs_anonymous_1126_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1128_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'aFunction', 'forOf', '$export', 'ctx'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        @Js
        def PyJs_anonymous_1129_(COLLECTION, this, arguments, var=var):
            var = Scope({'COLLECTION':COLLECTION, 'this':this, 'arguments':arguments}, var)
            var.registers(['COLLECTION'])
            @Js
            def PyJs_InlineNonPyName_1130_(source, this, arguments, var=var):
                var = Scope({'source':source, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_1130_}, var)
                var.registers(['mapping', 'cb', 'n', 'mapFn', 'A', 'source'])
                var.put('mapFn', var.get('arguments').get('1'))
                pass
                var.get('aFunction')(var.get(u"this"))
                var.put('mapping', PyJsStrictNeq(var.get('mapFn'),var.get('undefined')))
                if var.get('mapping'):
                    var.get('aFunction')(var.get('mapFn'))
                if (var.get('source')==var.get('undefined')):
                    return var.get(u"this").create()
                var.put('A', Js([]))
                if var.get('mapping'):
                    var.put('n', Js(0.0))
                    var.put('cb', var.get('ctx')(var.get('mapFn'), var.get('arguments').get('2'), Js(2.0)))
                    @Js
                    def PyJs_anonymous_1131_(nextItem, this, arguments, var=var):
                        var = Scope({'nextItem':nextItem, 'this':this, 'arguments':arguments}, var)
                        var.registers(['nextItem'])
                        var.get('A').callprop('push', var.get('cb')(var.get('nextItem'), (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))))
                    PyJs_anonymous_1131_._set_name('anonymous')
                    var.get('forOf')(var.get('source'), Js(False), PyJs_anonymous_1131_)
                else:
                    var.get('forOf')(var.get('source'), Js(False), var.get('A').get('push'), var.get('A'))
                return var.get(u"this").create(var.get('A'))
            PyJs_InlineNonPyName_1130_._set_name('from')
            var.get('$export')(var.get('$export').get('S'), var.get('COLLECTION'), Js({'from':PyJs_InlineNonPyName_1130_}))
        PyJs_anonymous_1129_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1129_)
    PyJs_anonymous_1128_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1132_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_anonymous_1133_(COLLECTION, this, arguments, var=var):
            var = Scope({'COLLECTION':COLLECTION, 'this':this, 'arguments':arguments}, var)
            var.registers(['COLLECTION'])
            @Js
            def PyJs_of_1134_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_1134_}, var)
                var.registers(['length', 'A'])
                var.put('length', var.get('arguments').get('length'))
                var.put('A', var.get('Array').create(var.get('length')))
                while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                    var.get('A').put(var.get('length'), var.get('arguments').get(var.get('length')))
                return var.get(u"this").create(var.get('A'))
            PyJs_of_1134_._set_name('of')
            var.get('$export')(var.get('$export').get('S'), var.get('COLLECTION'), Js({'of':PyJs_of_1134_}))
        PyJs_anonymous_1133_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1133_)
    PyJs_anonymous_1132_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1135_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'isObject', 'anObject', 'check'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_check_1136_(O, proto, this, arguments, var=var):
            var = Scope({'O':O, 'proto':proto, 'this':this, 'arguments':arguments, 'check':PyJs_check_1136_}, var)
            var.registers(['proto', 'O'])
            var.get('anObject')(var.get('O'))
            if (var.get('isObject')(var.get('proto')).neg() and PyJsStrictNeq(var.get('proto'),var.get(u"null"))):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('proto')+Js(": can't set as prototype!"))))
                raise PyJsTempException
        PyJs_check_1136_._set_name('check')
        var.put('check', PyJs_check_1136_)
        @Js
        def PyJs_anonymous_1137_(test, buggy, set, this, arguments, var=var):
            var = Scope({'test':test, 'buggy':buggy, 'set':set, 'this':this, 'arguments':arguments}, var)
            var.registers(['buggy', 'test', 'set'])
            try:
                var.put('set', var.get('require')(Js('./_ctx'))(var.get('Function').get('call'), var.get('require')(Js('./_object-gopd')).callprop('f', var.get('Object').get('prototype'), Js('__proto__')).get('set'), Js(2.0)))
                var.get('set')(var.get('test'), Js([]))
                var.put('buggy', var.get('test').instanceof(var.get('Array')).neg())
            except PyJsException as PyJsTempException:
                PyJsHolder_65_67335889 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('buggy', Js(True))
                finally:
                    if PyJsHolder_65_67335889 is not None:
                        var.own['e'] = PyJsHolder_65_67335889
                    else:
                        del var.own['e']
                    del PyJsHolder_65_67335889
            @Js
            def PyJs_setPrototypeOf_1138_(O, proto, this, arguments, var=var):
                var = Scope({'O':O, 'proto':proto, 'this':this, 'arguments':arguments, 'setPrototypeOf':PyJs_setPrototypeOf_1138_}, var)
                var.registers(['proto', 'O'])
                var.get('check')(var.get('O'), var.get('proto'))
                if var.get('buggy'):
                    var.get('O').put('__proto__', var.get('proto'))
                else:
                    var.get('set')(var.get('O'), var.get('proto'))
                return var.get('O')
            PyJs_setPrototypeOf_1138_._set_name('setPrototypeOf')
            return PyJs_setPrototypeOf_1138_
        PyJs_anonymous_1137_._set_name('anonymous')
        var.get('module').put('exports', Js({'set':(var.get('Object').get('setPrototypeOf') or (PyJs_anonymous_1137_(Js({}), Js(False)) if Js({}).contains(Js('__proto__')) else var.get('undefined'))),'check':var.get('check')}))
    PyJs_anonymous_1135_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1139_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'SPECIES', 'dP', 'global', 'DESCRIPTORS'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_1140_(KEY, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments}, var)
            var.registers(['KEY', 'C'])
            var.put('C', var.get('global').get(var.get('KEY')))
            if ((var.get('DESCRIPTORS') and var.get('C')) and var.get('C').get(var.get('SPECIES')).neg()):
                @Js
                def PyJs_get_1141_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1141_}, var)
                    var.registers([])
                    return var.get(u"this")
                PyJs_get_1141_._set_name('get')
                var.get('dP').callprop('f', var.get('C'), var.get('SPECIES'), Js({'configurable':Js(True),'get':PyJs_get_1141_}))
        PyJs_anonymous_1140_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1140_)
    PyJs_anonymous_1139_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1142_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'TAG', 'has', 'module', 'def'])
        var.put('def', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
        @Js
        def PyJs_anonymous_1143_(it, tag, stat, this, arguments, var=var):
            var = Scope({'it':it, 'tag':tag, 'stat':stat, 'this':this, 'arguments':arguments}, var)
            var.registers(['stat', 'it', 'tag'])
            if (var.get('it') and var.get('has')(var.put('it', (var.get('it') if var.get('stat') else var.get('it').get('prototype'))), var.get('TAG')).neg()):
                var.get('def')(var.get('it'), var.get('TAG'), Js({'configurable':Js(True),'value':var.get('tag')}))
        PyJs_anonymous_1143_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1143_)
    PyJs_anonymous_1142_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1144_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'shared', 'uid'])
        var.put('shared', var.get('require')(Js('./_shared'))(Js('keys')))
        var.put('uid', var.get('require')(Js('./_uid')))
        @Js
        def PyJs_anonymous_1145_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            return (var.get('shared').get(var.get('key')) or var.get('shared').put(var.get('key'), var.get('uid')(var.get('key'))))
        PyJs_anonymous_1145_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1145_)
    PyJs_anonymous_1144_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1146_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'SHARED', 'require', 'store', 'module', 'global', 'core'])
        var.put('core', var.get('require')(Js('./_core')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('SHARED', Js('__core-js_shared__'))
        var.put('store', (var.get('global').get(var.get('SHARED')) or var.get('global').put(var.get('SHARED'), Js({}))))
        @Js
        def PyJs_anonymous_1147_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'value'])
            return (var.get('store').get(var.get('key')) or var.get('store').put(var.get('key'), (var.get('value') if PyJsStrictNeq(var.get('value'),var.get('undefined')) else Js({}))))
        PyJs_anonymous_1147_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1147_)(Js('versions'), Js([])).callprop('push', Js({'version':var.get('core').get('version'),'mode':(Js('pure') if var.get('require')(Js('./_library')) else Js('global')),'copyright':Js('© 2020 Denis Pushkarev (zloirock.ru)')}))
    PyJs_anonymous_1146_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1148_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'aFunction', 'anObject', 'SPECIES'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_1149_(O, D, this, arguments, var=var):
            var = Scope({'O':O, 'D':D, 'this':this, 'arguments':arguments}, var)
            var.registers(['D', 'S', 'C', 'O'])
            var.put('C', var.get('anObject')(var.get('O')).get('constructor'))
            pass
            return (var.get('D') if (_seq(var.get('C'),var.get('undefined')) or (var.put('S', var.get('anObject')(var.get('C')).get(var.get('SPECIES')))==var.get('undefined'))) else var.get('aFunction')(var.get('S')))
        PyJs_anonymous_1149_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1149_)
    PyJs_anonymous_1148_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1150_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'fails', 'module'])
        Js('use strict')
        var.put('fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_1151_(method, arg, this, arguments, var=var):
            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'method'])
            @Js
            def PyJs_anonymous_1152_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_1153_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_1153_._set_name('anonymous')
                (var.get('method').callprop('call', var.get(u"null"), PyJs_anonymous_1153_, Js(1.0)) if var.get('arg') else var.get('method').callprop('call', var.get(u"null")))
            PyJs_anonymous_1152_._set_name('anonymous')
            return (var.get('method').neg().neg() and var.get('fails')(PyJs_anonymous_1152_))
        PyJs_anonymous_1151_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1151_)
    PyJs_anonymous_1150_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1154_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toInteger', 'defined'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1155_(TO_STRING, this, arguments, var=var):
            var = Scope({'TO_STRING':TO_STRING, 'this':this, 'arguments':arguments}, var)
            var.registers(['TO_STRING'])
            @Js
            def PyJs_anonymous_1156_(that, pos, this, arguments, var=var):
                var = Scope({'that':that, 'pos':pos, 'this':this, 'arguments':arguments}, var)
                var.registers(['a', 'i', 'l', 'b', 'that', 'pos', 's'])
                var.put('s', var.get('String')(var.get('defined')(var.get('that'))))
                var.put('i', var.get('toInteger')(var.get('pos')))
                var.put('l', var.get('s').get('length'))
                pass
                if ((var.get('i')<Js(0.0)) or (var.get('i')>=var.get('l'))):
                    return (Js('') if var.get('TO_STRING') else var.get('undefined'))
                var.put('a', var.get('s').callprop('charCodeAt', var.get('i')))
                def PyJs_LONG_1157_(var=var):
                    return ((var.get('s').callprop('charAt', var.get('i')) if var.get('TO_STRING') else var.get('a')) if (((((var.get('a')<Js(55296)) or (var.get('a')>Js(56319))) or _seq((var.get('i')+Js(1.0)),var.get('l'))) or (var.put('b', var.get('s').callprop('charCodeAt', (var.get('i')+Js(1.0))))<Js(56320))) or (var.get('b')>Js(57343))) else (var.get('s').callprop('slice', var.get('i'), (var.get('i')+Js(2.0))) if var.get('TO_STRING') else ((((var.get('a')-Js(55296))<<Js(10.0))+(var.get('b')-Js(56320)))+Js(65536))))
                return PyJs_LONG_1157_()
            PyJs_anonymous_1156_._set_name('anonymous')
            return PyJs_anonymous_1156_
        PyJs_anonymous_1155_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1155_)
    PyJs_anonymous_1154_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1158_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'defined', 'isRegExp'])
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1159_(that, searchString, NAME, this, arguments, var=var):
            var = Scope({'that':that, 'searchString':searchString, 'NAME':NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['that', 'searchString', 'NAME'])
            if var.get('isRegExp')(var.get('searchString')):
                PyJsTempException = JsToPyException(var.get('TypeError')(((Js('String#')+var.get('NAME'))+Js(" doesn't accept regex!"))))
                raise PyJsTempException
            return var.get('String')(var.get('defined')(var.get('that')))
        PyJs_anonymous_1159_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1159_)
    PyJs_anonymous_1158_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1160_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'quot', 'createHTML', 'fails', 'defined', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('quot', JsRegExp('/"/g'))
        @Js
        def PyJs_createHTML_1161_(string, tag, attribute, value, this, arguments, var=var):
            var = Scope({'string':string, 'tag':tag, 'attribute':attribute, 'value':value, 'this':this, 'arguments':arguments, 'createHTML':PyJs_createHTML_1161_}, var)
            var.registers(['string', 'S', 'tag', 'value', 'attribute', 'p1'])
            var.put('S', var.get('String')(var.get('defined')(var.get('string'))))
            var.put('p1', (Js('<')+var.get('tag')))
            if PyJsStrictNeq(var.get('attribute'),Js('')):
                var.put('p1', ((((Js(' ')+var.get('attribute'))+Js('="'))+var.get('String')(var.get('value')).callprop('replace', var.get('quot'), Js('&quot;')))+Js('"')), '+')
            return (((((var.get('p1')+Js('>'))+var.get('S'))+Js('</'))+var.get('tag'))+Js('>'))
        PyJs_createHTML_1161_._set_name('createHTML')
        var.put('createHTML', PyJs_createHTML_1161_)
        @Js
        def PyJs_anonymous_1162_(NAME, exec, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME', 'exec', 'O'])
            var.put('O', Js({}))
            var.get('O').put(var.get('NAME'), var.get('exec')(var.get('createHTML')))
            @Js
            def PyJs_anonymous_1163_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['test'])
                var.put('test', Js('').callprop(var.get('NAME'), Js('"')))
                return (PyJsStrictNeq(var.get('test'),var.get('test').callprop('toLowerCase')) or (var.get('test').callprop('split', Js('"')).get('length')>Js(3.0)))
            PyJs_anonymous_1163_._set_name('anonymous')
            var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_1163_))), Js('String'), var.get('O'))
        PyJs_anonymous_1162_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1162_)
    PyJs_anonymous_1160_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1164_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'repeat', 'require', 'module', 'toLength', 'defined'])
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('repeat', var.get('require')(Js('./_string-repeat')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1165_(that, maxLength, fillString, left, this, arguments, var=var):
            var = Scope({'that':that, 'maxLength':maxLength, 'fillString':fillString, 'left':left, 'this':this, 'arguments':arguments}, var)
            var.registers(['left', 'S', 'maxLength', 'stringLength', 'that', 'fillLen', 'fillString', 'stringFiller', 'fillStr', 'intMaxLength'])
            var.put('S', var.get('String')(var.get('defined')(var.get('that'))))
            var.put('stringLength', var.get('S').get('length'))
            var.put('fillStr', (Js(' ') if _seq(var.get('fillString'),var.get('undefined')) else var.get('String')(var.get('fillString'))))
            var.put('intMaxLength', var.get('toLength')(var.get('maxLength')))
            if ((var.get('intMaxLength')<=var.get('stringLength')) or (var.get('fillStr')==Js(''))):
                return var.get('S')
            var.put('fillLen', (var.get('intMaxLength')-var.get('stringLength')))
            var.put('stringFiller', var.get('repeat').callprop('call', var.get('fillStr'), var.get('Math').callprop('ceil', (var.get('fillLen')/var.get('fillStr').get('length')))))
            if (var.get('stringFiller').get('length')>var.get('fillLen')):
                var.put('stringFiller', var.get('stringFiller').callprop('slice', Js(0.0), var.get('fillLen')))
            return ((var.get('stringFiller')+var.get('S')) if var.get('left') else (var.get('S')+var.get('stringFiller')))
        PyJs_anonymous_1165_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1165_)
    PyJs_anonymous_1164_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1166_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toInteger', 'defined'])
        Js('use strict')
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_repeat_1167_(count, this, arguments, var=var):
            var = Scope({'count':count, 'this':this, 'arguments':arguments, 'repeat':PyJs_repeat_1167_}, var)
            var.registers(['str', 'count', 'n', 'res'])
            var.put('str', var.get('String')(var.get('defined')(var.get(u"this"))))
            var.put('res', Js(''))
            var.put('n', var.get('toInteger')(var.get('count')))
            if ((var.get('n')<Js(0.0)) or (var.get('n')==var.get('Infinity'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(Js("Count can't be negative")))
                raise PyJsTempException
            #for JS loop

            while (var.get('n')>Js(0.0)):
                try:
                    if (var.get('n')&Js(1.0)):
                        var.put('res', var.get('str'), '+')
                finally:
                        (var.put('n', Js(1.0), '>>>') and var.put('str', var.get('str'), '+'))
            return var.get('res')
        PyJs_repeat_1167_._set_name('repeat')
        var.get('module').put('exports', PyJs_repeat_1167_)
    PyJs_anonymous_1166_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1168_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'trim', 'require', 'module', 'non', 'space', 'fails', 'spaces', 'rtrim', 'defined', 'exporter', '$export', 'ltrim'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('spaces', var.get('require')(Js('./_string-ws')))
        var.put('space', ((Js('[')+var.get('spaces'))+Js(']')))
        var.put('non', Js('\u200b\x85'))
        var.put('ltrim', var.get('RegExp')((((Js('^')+var.get('space'))+var.get('space'))+Js('*'))))
        var.put('rtrim', var.get('RegExp')(((var.get('space')+var.get('space'))+Js('*$'))))
        @Js
        def PyJs_exporter_1169_(KEY, exec, ALIAS, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'exec':exec, 'ALIAS':ALIAS, 'this':this, 'arguments':arguments, 'exporter':PyJs_exporter_1169_}, var)
            var.registers(['fn', 'KEY', 'exp', 'FORCE', 'ALIAS', 'exec'])
            var.put('exp', Js({}))
            @Js
            def PyJs_anonymous_1170_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return (var.get('spaces').callprop(var.get('KEY')).neg().neg() or (var.get('non').callprop(var.get('KEY'))!=var.get('non')))
            PyJs_anonymous_1170_._set_name('anonymous')
            var.put('FORCE', var.get('fails')(PyJs_anonymous_1170_))
            var.put('fn', var.get('exp').put(var.get('KEY'), (var.get('exec')(var.get('trim')) if var.get('FORCE') else var.get('spaces').get(var.get('KEY')))))
            if var.get('ALIAS'):
                var.get('exp').put(var.get('ALIAS'), var.get('fn'))
            var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('FORCE'))), Js('String'), var.get('exp'))
        PyJs_exporter_1169_._set_name('exporter')
        var.put('exporter', PyJs_exporter_1169_)
        @Js
        def PyJs_anonymous_1171_(string, TYPE, this, arguments, var=var):
            var = Scope({'string':string, 'TYPE':TYPE, 'this':this, 'arguments':arguments}, var)
            var.registers(['string', 'TYPE'])
            var.put('string', var.get('String')(var.get('defined')(var.get('string'))))
            if (var.get('TYPE')&Js(1.0)):
                var.put('string', var.get('string').callprop('replace', var.get('ltrim'), Js('')))
            if (var.get('TYPE')&Js(2.0)):
                var.put('string', var.get('string').callprop('replace', var.get('rtrim'), Js('')))
            return var.get('string')
        PyJs_anonymous_1171_._set_name('anonymous')
        var.put('trim', var.get('exporter').put('trim', PyJs_anonymous_1171_))
        var.get('module').put('exports', var.get('exporter'))
    PyJs_anonymous_1168_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1172_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('module').put('exports', (Js('\t\n\x0b\x0c\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003')+Js('\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff')))
    PyJs_anonymous_1172_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1173_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['queue', 'module', 'clearTask', 'setTask', 'html', 'run', 'ONREADYSTATECHANGE', 'counter', 'Dispatch', 'require', 'channel', 'process', 'port', 'invoke', 'listener', 'exports', 'MessageChannel', 'cel', 'global', 'defer', 'ctx'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('invoke', var.get('require')(Js('./_invoke')))
        var.put('html', var.get('require')(Js('./_html')))
        var.put('cel', var.get('require')(Js('./_dom-create')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('process', var.get('global').get('process'))
        var.put('setTask', var.get('global').get('setImmediate'))
        var.put('clearTask', var.get('global').get('clearImmediate'))
        var.put('MessageChannel', var.get('global').get('MessageChannel'))
        var.put('Dispatch', var.get('global').get('Dispatch'))
        var.put('counter', Js(0.0))
        var.put('queue', Js({}))
        var.put('ONREADYSTATECHANGE', Js('onreadystatechange'))
        pass
        @Js
        def PyJs_run_1174_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'run':PyJs_run_1174_}, var)
            var.registers(['id', 'fn'])
            var.put('id', (+var.get(u"this")))
            if var.get('queue').callprop('hasOwnProperty', var.get('id')):
                var.put('fn', var.get('queue').get(var.get('id')))
                var.get('queue').delete(var.get('id'))
                var.get('fn')()
        PyJs_run_1174_._set_name('run')
        var.put('run', PyJs_run_1174_)
        @Js
        def PyJs_listener_1175_(event, this, arguments, var=var):
            var = Scope({'event':event, 'this':this, 'arguments':arguments, 'listener':PyJs_listener_1175_}, var)
            var.registers(['event'])
            var.get('run').callprop('call', var.get('event').get('data'))
        PyJs_listener_1175_._set_name('listener')
        var.put('listener', PyJs_listener_1175_)
        if (var.get('setTask').neg() or var.get('clearTask').neg()):
            @Js
            def PyJs_setImmediate_1176_(fn, this, arguments, var=var):
                var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'setImmediate':PyJs_setImmediate_1176_}, var)
                var.registers(['i', 'fn', 'args'])
                var.put('args', Js([]))
                var.put('i', Js(1.0))
                while (var.get('arguments').get('length')>var.get('i')):
                    var.get('args').callprop('push', var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                @Js
                def PyJs_anonymous_1177_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('invoke')((var.get('fn') if (var.get('fn',throw=False).typeof()==Js('function')) else var.get('Function')(var.get('fn'))), var.get('args'))
                PyJs_anonymous_1177_._set_name('anonymous')
                var.get('queue').put(var.put('counter',Js(var.get('counter').to_number())+Js(1)), PyJs_anonymous_1177_)
                var.get('defer')(var.get('counter'))
                return var.get('counter')
            PyJs_setImmediate_1176_._set_name('setImmediate')
            var.put('setTask', PyJs_setImmediate_1176_)
            @Js
            def PyJs_clearImmediate_1178_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments, 'clearImmediate':PyJs_clearImmediate_1178_}, var)
                var.registers(['id'])
                var.get('queue').delete(var.get('id'))
            PyJs_clearImmediate_1178_._set_name('clearImmediate')
            var.put('clearTask', PyJs_clearImmediate_1178_)
            if (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')):
                @Js
                def PyJs_defer_1179_(id, this, arguments, var=var):
                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1179_}, var)
                    var.registers(['id'])
                    var.get('process').callprop('nextTick', var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)))
                PyJs_defer_1179_._set_name('defer')
                var.put('defer', PyJs_defer_1179_)
            else:
                if (var.get('Dispatch') and var.get('Dispatch').get('now')):
                    @Js
                    def PyJs_defer_1180_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1180_}, var)
                        var.registers(['id'])
                        var.get('Dispatch').callprop('now', var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)))
                    PyJs_defer_1180_._set_name('defer')
                    var.put('defer', PyJs_defer_1180_)
                else:
                    if var.get('MessageChannel'):
                        var.put('channel', var.get('MessageChannel').create())
                        var.put('port', var.get('channel').get('port2'))
                        var.get('channel').get('port1').put('onmessage', var.get('listener'))
                        var.put('defer', var.get('ctx')(var.get('port').get('postMessage'), var.get('port'), Js(1.0)))
                    else:
                        if ((var.get('global').get('addEventListener') and (var.get('postMessage',throw=False).typeof()==Js('function'))) and var.get('global').get('importScripts').neg()):
                            @Js
                            def PyJs_defer_1181_(id, this, arguments, var=var):
                                var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1181_}, var)
                                var.registers(['id'])
                                var.get('global').callprop('postMessage', (var.get('id')+Js('')), Js('*'))
                            PyJs_defer_1181_._set_name('defer')
                            var.put('defer', PyJs_defer_1181_)
                            var.get('global').callprop('addEventListener', Js('message'), var.get('listener'), Js(False))
                        else:
                            if var.get('cel')(Js('script')).contains(var.get('ONREADYSTATECHANGE')):
                                @Js
                                def PyJs_defer_1182_(id, this, arguments, var=var):
                                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1182_}, var)
                                    var.registers(['id'])
                                    @Js
                                    def PyJs_anonymous_1183_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('html').callprop('removeChild', var.get(u"this"))
                                        var.get('run').callprop('call', var.get('id'))
                                    PyJs_anonymous_1183_._set_name('anonymous')
                                    var.get('html').callprop('appendChild', var.get('cel')(Js('script'))).put(var.get('ONREADYSTATECHANGE'), PyJs_anonymous_1183_)
                                PyJs_defer_1182_._set_name('defer')
                                var.put('defer', PyJs_defer_1182_)
                            else:
                                @Js
                                def PyJs_defer_1184_(id, this, arguments, var=var):
                                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_1184_}, var)
                                    var.registers(['id'])
                                    var.get('setTimeout')(var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)), Js(0.0))
                                PyJs_defer_1184_._set_name('defer')
                                var.put('defer', PyJs_defer_1184_)
        var.get('module').put('exports', Js({'set':var.get('setTask'),'clear':var.get('clearTask')}))
    PyJs_anonymous_1173_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1185_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'min', 'module', 'max', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('max', var.get('Math').get('max'))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_1186_(index, length, this, arguments, var=var):
            var = Scope({'index':index, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'index'])
            var.put('index', var.get('toInteger')(var.get('index')))
            return (var.get('max')((var.get('index')+var.get('length')), Js(0.0)) if (var.get('index')<Js(0.0)) else var.get('min')(var.get('index'), var.get('length')))
        PyJs_anonymous_1186_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1186_)
    PyJs_anonymous_1185_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1187_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_anonymous_1188_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['number', 'length', 'it'])
            if _seq(var.get('it'),var.get('undefined')):
                return Js(0.0)
            var.put('number', var.get('toInteger')(var.get('it')))
            var.put('length', var.get('toLength')(var.get('number')))
            if PyJsStrictNeq(var.get('number'),var.get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong length!')))
                raise PyJsTempException
            return var.get('length')
        PyJs_anonymous_1188_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1188_)
    PyJs_anonymous_1187_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1189_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'floor', 'ceil'])
        var.put('ceil', var.get('Math').get('ceil'))
        var.put('floor', var.get('Math').get('floor'))
        @Js
        def PyJs_anonymous_1190_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (Js(0.0) if var.get('isNaN')(var.put('it', (+var.get('it')))) else (var.get('floor') if (var.get('it')>Js(0.0)) else var.get('ceil'))(var.get('it')))
        PyJs_anonymous_1190_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1190_)
    PyJs_anonymous_1189_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1191_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'defined', 'IObject'])
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1192_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('IObject')(var.get('defined')(var.get('it')))
        PyJs_anonymous_1192_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1192_)
    PyJs_anonymous_1191_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1193_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'min', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_1194_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('min')(var.get('toInteger')(var.get('it')), Js(9007199254740991)) if (var.get('it')>Js(0.0)) else Js(0.0))
        PyJs_anonymous_1194_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1194_)
    PyJs_anonymous_1193_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1195_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'defined', 'module'])
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_1196_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('Object')(var.get('defined')(var.get('it')))
        PyJs_anonymous_1196_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1196_)
    PyJs_anonymous_1195_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1197_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'isObject', 'require', 'module'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1198_(it, S, this, arguments, var=var):
            var = Scope({'it':it, 'S':S, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn', 'S', 'it', 'val'])
            if var.get('isObject')(var.get('it')).neg():
                return var.get('it')
            pass
            if ((var.get('S') and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            if ((var.put('fn', var.get('it').get('valueOf')).typeof()==Js('function')) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            if ((var.get('S').neg() and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            PyJsTempException = JsToPyException(var.get('TypeError')(Js("Can't convert object to primitive value")))
            raise PyJsTempException
        PyJs_anonymous_1198_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1198_)
    PyJs_anonymous_1197_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1199_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['DEF_CONSTRUCTOR', 'anInstance', 'Uint8Array', '$export', 'wks', 'arrayEvery', 'arrayIncludes', 'toLength', 'arraySlice', 'toInteger', 'toAbsoluteIndex', '$map', '$iterDetect', 'arrayIndexOf', '$TypedArrayPrototype$', 'arrayFindIndex', 'SHARED_BUFFER', 'allocate', 'TYPED_ARRAY', 'fromList', '$typed', 'arrayFill', 'ArrayIterators', 'arrayReduceRight', 'arrayToLocaleString', 'arraySort', 'arrayValues', '$iterators', 'propertyDesc', 'TO_LOCALE_BUG', 'arrayToString', 'gOPD', 'dP', '$toLocaleString', 'LITTLE_ENDIAN', '$setDesc', 'TAG', 'TypeError', 'speciesFromList', 'toOffset', 'isTAIndex', 'toObject', '$from', 'arrayEntries', 'PROTOTYPE', 'BYTES_PER_ELEMENT', '$of', 'global', 'arraySome', 'arrayJoin', 'ctx', 'LIBRARY', 'fails', 'redefineAll', 'arrayReduce', 'isArrayIter', 'RangeError', 'getIterFn', 'toPrimitive', 'require', 'proto', 'speciesConstructor', 'TYPED_CONSTRUCTOR', 'Iterators', 'arrayFind', 'classof', '$buffer', 'ARRAY_BUFFER', 'exports', 'isObject', 'gOPN', '$DP', 'ArrayProto', 'toIndex', 'module', 'arrayLastIndexOf', 'createArrayMethod', 'ITERATOR', 'setSpecies', 'ALL_CONSTRUCTORS', 'has', 'getPrototypeOf', '$getDesc', '$set', 'create', 'hide', '$GOPD', 'arrayCopyWithin', 'createArrayIncludes', '$slice', 'validate', 'arrayKeys', '$DataView', 'FORCED_SET', '$ArrayBuffer', 'arrayForEach', 'VIEW', 'arrayFilter', 'uid', 'WRONG_LENGTH', 'addGetter'])
        Js('use strict')
        if var.get('require')(Js('./_descriptors')):
            var.put('LIBRARY', var.get('require')(Js('./_library')))
            var.put('global', var.get('require')(Js('./_global')))
            var.put('fails', var.get('require')(Js('./_fails')))
            var.put('$export', var.get('require')(Js('./_export')))
            var.put('$typed', var.get('require')(Js('./_typed')))
            var.put('$buffer', var.get('require')(Js('./_typed-buffer')))
            var.put('ctx', var.get('require')(Js('./_ctx')))
            var.put('anInstance', var.get('require')(Js('./_an-instance')))
            var.put('propertyDesc', var.get('require')(Js('./_property-desc')))
            var.put('hide', var.get('require')(Js('./_hide')))
            var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
            var.put('toInteger', var.get('require')(Js('./_to-integer')))
            var.put('toLength', var.get('require')(Js('./_to-length')))
            var.put('toIndex', var.get('require')(Js('./_to-index')))
            var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
            var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
            var.put('has', var.get('require')(Js('./_has')))
            var.put('classof', var.get('require')(Js('./_classof')))
            var.put('isObject', var.get('require')(Js('./_is-object')))
            var.put('toObject', var.get('require')(Js('./_to-object')))
            var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
            var.put('create', var.get('require')(Js('./_object-create')))
            var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
            var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
            var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
            var.put('uid', var.get('require')(Js('./_uid')))
            var.put('wks', var.get('require')(Js('./_wks')))
            var.put('createArrayMethod', var.get('require')(Js('./_array-methods')))
            var.put('createArrayIncludes', var.get('require')(Js('./_array-includes')))
            var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
            var.put('ArrayIterators', var.get('require')(Js('./es6.array.iterator')))
            var.put('Iterators', var.get('require')(Js('./_iterators')))
            var.put('$iterDetect', var.get('require')(Js('./_iter-detect')))
            var.put('setSpecies', var.get('require')(Js('./_set-species')))
            var.put('arrayFill', var.get('require')(Js('./_array-fill')))
            var.put('arrayCopyWithin', var.get('require')(Js('./_array-copy-within')))
            var.put('$DP', var.get('require')(Js('./_object-dp')))
            var.put('$GOPD', var.get('require')(Js('./_object-gopd')))
            var.put('dP', var.get('$DP').get('f'))
            var.put('gOPD', var.get('$GOPD').get('f'))
            var.put('RangeError', var.get('global').get('RangeError'))
            var.put('TypeError', var.get('global').get('TypeError'))
            var.put('Uint8Array', var.get('global').get('Uint8Array'))
            var.put('ARRAY_BUFFER', Js('ArrayBuffer'))
            var.put('SHARED_BUFFER', (Js('Shared')+var.get('ARRAY_BUFFER')))
            var.put('BYTES_PER_ELEMENT', Js('BYTES_PER_ELEMENT'))
            var.put('PROTOTYPE', Js('prototype'))
            var.put('ArrayProto', var.get('Array').get(var.get('PROTOTYPE')))
            var.put('$ArrayBuffer', var.get('$buffer').get('ArrayBuffer'))
            var.put('$DataView', var.get('$buffer').get('DataView'))
            var.put('arrayForEach', var.get('createArrayMethod')(Js(0.0)))
            var.put('arrayFilter', var.get('createArrayMethod')(Js(2.0)))
            var.put('arraySome', var.get('createArrayMethod')(Js(3.0)))
            var.put('arrayEvery', var.get('createArrayMethod')(Js(4.0)))
            var.put('arrayFind', var.get('createArrayMethod')(Js(5.0)))
            var.put('arrayFindIndex', var.get('createArrayMethod')(Js(6.0)))
            var.put('arrayIncludes', var.get('createArrayIncludes')(Js(True)))
            var.put('arrayIndexOf', var.get('createArrayIncludes')(Js(False)))
            var.put('arrayValues', var.get('ArrayIterators').get('values'))
            var.put('arrayKeys', var.get('ArrayIterators').get('keys'))
            var.put('arrayEntries', var.get('ArrayIterators').get('entries'))
            var.put('arrayLastIndexOf', var.get('ArrayProto').get('lastIndexOf'))
            var.put('arrayReduce', var.get('ArrayProto').get('reduce'))
            var.put('arrayReduceRight', var.get('ArrayProto').get('reduceRight'))
            var.put('arrayJoin', var.get('ArrayProto').get('join'))
            var.put('arraySort', var.get('ArrayProto').get('sort'))
            var.put('arraySlice', var.get('ArrayProto').get('slice'))
            var.put('arrayToString', var.get('ArrayProto').get('toString'))
            var.put('arrayToLocaleString', var.get('ArrayProto').get('toLocaleString'))
            var.put('ITERATOR', var.get('wks')(Js('iterator')))
            var.put('TAG', var.get('wks')(Js('toStringTag')))
            var.put('TYPED_CONSTRUCTOR', var.get('uid')(Js('typed_constructor')))
            var.put('DEF_CONSTRUCTOR', var.get('uid')(Js('def_constructor')))
            var.put('ALL_CONSTRUCTORS', var.get('$typed').get('CONSTR'))
            var.put('TYPED_ARRAY', var.get('$typed').get('TYPED'))
            var.put('VIEW', var.get('$typed').get('VIEW'))
            var.put('WRONG_LENGTH', Js('Wrong length!'))
            @Js
            def PyJs_anonymous_1200_(O, length, this, arguments, var=var):
                var = Scope({'O':O, 'length':length, 'this':this, 'arguments':arguments}, var)
                var.registers(['length', 'O'])
                return var.get('allocate')(var.get('speciesConstructor')(var.get('O'), var.get('O').get(var.get('DEF_CONSTRUCTOR'))), var.get('length'))
            PyJs_anonymous_1200_._set_name('anonymous')
            var.put('$map', var.get('createArrayMethod')(Js(1.0), PyJs_anonymous_1200_))
            @Js
            def PyJs_anonymous_1201_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return _seq(var.get('Uint8Array').create(var.get('Uint16Array').create(Js([Js(1.0)])).get('buffer')).get('0'),Js(1.0))
            PyJs_anonymous_1201_._set_name('anonymous')
            var.put('LITTLE_ENDIAN', var.get('fails')(PyJs_anonymous_1201_))
            @Js
            def PyJs_anonymous_1202_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('Uint8Array').create(Js(1.0)).callprop('set', Js({}))
            PyJs_anonymous_1202_._set_name('anonymous')
            var.put('FORCED_SET', ((var.get('Uint8Array').neg().neg() and var.get('Uint8Array').get(var.get('PROTOTYPE')).get('set').neg().neg()) and var.get('fails')(PyJs_anonymous_1202_)))
            @Js
            def PyJs_toOffset_1203_(it, BYTES, this, arguments, var=var):
                var = Scope({'it':it, 'BYTES':BYTES, 'this':this, 'arguments':arguments, 'toOffset':PyJs_toOffset_1203_}, var)
                var.registers(['BYTES', 'it', 'offset'])
                var.put('offset', var.get('toInteger')(var.get('it')))
                if ((var.get('offset')<Js(0.0)) or (var.get('offset')%var.get('BYTES'))):
                    PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong offset!')))
                    raise PyJsTempException
                return var.get('offset')
            PyJs_toOffset_1203_._set_name('toOffset')
            var.put('toOffset', PyJs_toOffset_1203_)
            @Js
            def PyJs_validate_1204_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'validate':PyJs_validate_1204_}, var)
                var.registers(['it'])
                if (var.get('isObject')(var.get('it')) and var.get('it').contains(var.get('TYPED_ARRAY'))):
                    return var.get('it')
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not a typed array!'))))
                raise PyJsTempException
            PyJs_validate_1204_._set_name('validate')
            var.put('validate', PyJs_validate_1204_)
            @Js
            def PyJs_allocate_1205_(C, length, this, arguments, var=var):
                var = Scope({'C':C, 'length':length, 'this':this, 'arguments':arguments, 'allocate':PyJs_allocate_1205_}, var)
                var.registers(['length', 'C'])
                if (var.get('isObject')(var.get('C')) and var.get('C').contains(var.get('TYPED_CONSTRUCTOR'))).neg():
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('It is not a typed array constructor!')))
                    raise PyJsTempException
                return var.get('C').create(var.get('length'))
            PyJs_allocate_1205_._set_name('allocate')
            var.put('allocate', PyJs_allocate_1205_)
            @Js
            def PyJs_speciesFromList_1206_(O, list, this, arguments, var=var):
                var = Scope({'O':O, 'list':list, 'this':this, 'arguments':arguments, 'speciesFromList':PyJs_speciesFromList_1206_}, var)
                var.registers(['list', 'O'])
                return var.get('fromList')(var.get('speciesConstructor')(var.get('O'), var.get('O').get(var.get('DEF_CONSTRUCTOR'))), var.get('list'))
            PyJs_speciesFromList_1206_._set_name('speciesFromList')
            var.put('speciesFromList', PyJs_speciesFromList_1206_)
            @Js
            def PyJs_fromList_1207_(C, list, this, arguments, var=var):
                var = Scope({'C':C, 'list':list, 'this':this, 'arguments':arguments, 'fromList':PyJs_fromList_1207_}, var)
                var.registers(['C', 'length', 'index', 'list', 'result'])
                var.put('index', Js(0.0))
                var.put('length', var.get('list').get('length'))
                var.put('result', var.get('allocate')(var.get('C'), var.get('length')))
                while (var.get('length')>var.get('index')):
                    var.get('result').put(var.get('index'), var.get('list').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                return var.get('result')
            PyJs_fromList_1207_._set_name('fromList')
            var.put('fromList', PyJs_fromList_1207_)
            @Js
            def PyJs_addGetter_1208_(it, key, internal, this, arguments, var=var):
                var = Scope({'it':it, 'key':key, 'internal':internal, 'this':this, 'arguments':arguments, 'addGetter':PyJs_addGetter_1208_}, var)
                var.registers(['key', 'internal', 'it'])
                @Js
                def PyJs_get_1209_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1209_}, var)
                    var.registers([])
                    return var.get(u"this").get('_d').get(var.get('internal'))
                PyJs_get_1209_._set_name('get')
                var.get('dP')(var.get('it'), var.get('key'), Js({'get':PyJs_get_1209_}))
            PyJs_addGetter_1208_._set_name('addGetter')
            var.put('addGetter', PyJs_addGetter_1208_)
            @Js
            def PyJs_InlineNonPyName_1210_(source, this, arguments, var=var):
                var = Scope({'source':source, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_1210_}, var)
                var.registers(['mapping', 'i', 'result', 'length', 'values', 'mapfn', 'source', 'O', 'aLen', 'iterator', 'step', 'iterFn'])
                var.put('O', var.get('toObject')(var.get('source')))
                var.put('aLen', var.get('arguments').get('length'))
                var.put('mapfn', (var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')))
                var.put('mapping', PyJsStrictNeq(var.get('mapfn'),var.get('undefined')))
                var.put('iterFn', var.get('getIterFn')(var.get('O')))
                pass
                if ((var.get('iterFn')!=var.get('undefined')) and var.get('isArrayIter')(var.get('iterFn')).neg()):
                    #for JS loop
                    PyJsComma(PyJsComma(var.put('iterator', var.get('iterFn').callprop('call', var.get('O'))),var.put('values', Js([]))),var.put('i', Js(0.0)))
                    while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                        try:
                            var.get('values').callprop('push', var.get('step').get('value'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('O', var.get('values'))
                if (var.get('mapping') and (var.get('aLen')>Js(2.0))):
                    var.put('mapfn', var.get('ctx')(var.get('mapfn'), var.get('arguments').get('2'), Js(2.0)))
                #for JS loop
                PyJsComma(PyJsComma(var.put('i', Js(0.0)),var.put('length', var.get('toLength')(var.get('O').get('length')))),var.put('result', var.get('allocate')(var.get(u"this"), var.get('length'))))
                while (var.get('length')>var.get('i')):
                    try:
                        var.get('result').put(var.get('i'), (var.get('mapfn')(var.get('O').get(var.get('i')), var.get('i')) if var.get('mapping') else var.get('O').get(var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('result')
            PyJs_InlineNonPyName_1210_._set_name('from')
            var.put('$from', PyJs_InlineNonPyName_1210_)
            @Js
            def PyJs_of_1211_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_1211_}, var)
                var.registers(['result', 'length', 'index'])
                var.put('index', Js(0.0))
                var.put('length', var.get('arguments').get('length'))
                var.put('result', var.get('allocate')(var.get(u"this"), var.get('length')))
                while (var.get('length')>var.get('index')):
                    var.get('result').put(var.get('index'), var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                return var.get('result')
            PyJs_of_1211_._set_name('of')
            var.put('$of', PyJs_of_1211_)
            @Js
            def PyJs_anonymous_1212_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('arrayToLocaleString').callprop('call', var.get('Uint8Array').create(Js(1.0)))
            PyJs_anonymous_1212_._set_name('anonymous')
            var.put('TO_LOCALE_BUG', (var.get('Uint8Array').neg().neg() and var.get('fails')(PyJs_anonymous_1212_)))
            @Js
            def PyJs_toLocaleString_1213_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toLocaleString':PyJs_toLocaleString_1213_}, var)
                var.registers([])
                return var.get('arrayToLocaleString').callprop('apply', (var.get('arraySlice').callprop('call', var.get('validate')(var.get(u"this"))) if var.get('TO_LOCALE_BUG') else var.get('validate')(var.get(u"this"))), var.get('arguments'))
            PyJs_toLocaleString_1213_._set_name('toLocaleString')
            var.put('$toLocaleString', PyJs_toLocaleString_1213_)
            @Js
            def PyJs_copyWithin_1214_(target, start, this, arguments, var=var):
                var = Scope({'target':target, 'start':start, 'this':this, 'arguments':arguments, 'copyWithin':PyJs_copyWithin_1214_}, var)
                var.registers(['target', 'start'])
                return var.get('arrayCopyWithin').callprop('call', var.get('validate')(var.get(u"this")), var.get('target'), var.get('start'), (var.get('arguments').get('2') if (var.get('arguments').get('length')>Js(2.0)) else var.get('undefined')))
            PyJs_copyWithin_1214_._set_name('copyWithin')
            @Js
            def PyJs_every_1215_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'every':PyJs_every_1215_}, var)
                var.registers(['callbackfn'])
                return var.get('arrayEvery')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_every_1215_._set_name('every')
            @Js
            def PyJs_fill_1216_(value, this, arguments, var=var):
                var = Scope({'value':value, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_1216_}, var)
                var.registers(['value'])
                return var.get('arrayFill').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_fill_1216_._set_name('fill')
            @Js
            def PyJs_filter_1217_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'filter':PyJs_filter_1217_}, var)
                var.registers(['callbackfn'])
                return var.get('speciesFromList')(var.get(u"this"), var.get('arrayFilter')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined'))))
            PyJs_filter_1217_._set_name('filter')
            @Js
            def PyJs_find_1218_(predicate, this, arguments, var=var):
                var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments, 'find':PyJs_find_1218_}, var)
                var.registers(['predicate'])
                return var.get('arrayFind')(var.get('validate')(var.get(u"this")), var.get('predicate'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_find_1218_._set_name('find')
            @Js
            def PyJs_findIndex_1219_(predicate, this, arguments, var=var):
                var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments, 'findIndex':PyJs_findIndex_1219_}, var)
                var.registers(['predicate'])
                return var.get('arrayFindIndex')(var.get('validate')(var.get(u"this")), var.get('predicate'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_findIndex_1219_._set_name('findIndex')
            @Js
            def PyJs_forEach_1220_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_1220_}, var)
                var.registers(['callbackfn'])
                var.get('arrayForEach')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_forEach_1220_._set_name('forEach')
            @Js
            def PyJs_indexOf_1221_(searchElement, this, arguments, var=var):
                var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_1221_}, var)
                var.registers(['searchElement'])
                return var.get('arrayIndexOf')(var.get('validate')(var.get(u"this")), var.get('searchElement'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_indexOf_1221_._set_name('indexOf')
            @Js
            def PyJs_includes_1222_(searchElement, this, arguments, var=var):
                var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_1222_}, var)
                var.registers(['searchElement'])
                return var.get('arrayIncludes')(var.get('validate')(var.get(u"this")), var.get('searchElement'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_includes_1222_._set_name('includes')
            @Js
            def PyJs_join_1223_(separator, this, arguments, var=var):
                var = Scope({'separator':separator, 'this':this, 'arguments':arguments, 'join':PyJs_join_1223_}, var)
                var.registers(['separator'])
                return var.get('arrayJoin').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_join_1223_._set_name('join')
            @Js
            def PyJs_lastIndexOf_1224_(searchElement, this, arguments, var=var):
                var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_1224_}, var)
                var.registers(['searchElement'])
                return var.get('arrayLastIndexOf').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_lastIndexOf_1224_._set_name('lastIndexOf')
            @Js
            def PyJs_map_1225_(mapfn, this, arguments, var=var):
                var = Scope({'mapfn':mapfn, 'this':this, 'arguments':arguments, 'map':PyJs_map_1225_}, var)
                var.registers(['mapfn'])
                return var.get('$map')(var.get('validate')(var.get(u"this")), var.get('mapfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_map_1225_._set_name('map')
            @Js
            def PyJs_reduce_1226_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduce':PyJs_reduce_1226_}, var)
                var.registers(['callbackfn'])
                return var.get('arrayReduce').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_reduce_1226_._set_name('reduce')
            @Js
            def PyJs_reduceRight_1227_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduceRight':PyJs_reduceRight_1227_}, var)
                var.registers(['callbackfn'])
                return var.get('arrayReduceRight').callprop('apply', var.get('validate')(var.get(u"this")), var.get('arguments'))
            PyJs_reduceRight_1227_._set_name('reduceRight')
            @Js
            def PyJs_reverse_1228_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'reverse':PyJs_reverse_1228_}, var)
                var.registers(['length', 'middle', 'index', 'that', 'value'])
                var.put('that', var.get(u"this"))
                var.put('length', var.get('validate')(var.get('that')).get('length'))
                var.put('middle', var.get('Math').callprop('floor', (var.get('length')/Js(2.0))))
                var.put('index', Js(0.0))
                pass
                while (var.get('index')<var.get('middle')):
                    var.put('value', var.get('that').get(var.get('index')))
                    var.get('that').put((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('that').get(var.put('length',Js(var.get('length').to_number())-Js(1))))
                    var.get('that').put(var.get('length'), var.get('value'))
                return var.get('that')
            PyJs_reverse_1228_._set_name('reverse')
            @Js
            def PyJs_some_1229_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'some':PyJs_some_1229_}, var)
                var.registers(['callbackfn'])
                return var.get('arraySome')(var.get('validate')(var.get(u"this")), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            PyJs_some_1229_._set_name('some')
            @Js
            def PyJs_sort_1230_(comparefn, this, arguments, var=var):
                var = Scope({'comparefn':comparefn, 'this':this, 'arguments':arguments, 'sort':PyJs_sort_1230_}, var)
                var.registers(['comparefn'])
                return var.get('arraySort').callprop('call', var.get('validate')(var.get(u"this")), var.get('comparefn'))
            PyJs_sort_1230_._set_name('sort')
            @Js
            def PyJs_subarray_1231_(begin, end, this, arguments, var=var):
                var = Scope({'begin':begin, 'end':end, 'this':this, 'arguments':arguments, 'subarray':PyJs_subarray_1231_}, var)
                var.registers(['length', 'begin', 'end', 'O', '$begin'])
                var.put('O', var.get('validate')(var.get(u"this")))
                var.put('length', var.get('O').get('length'))
                var.put('$begin', var.get('toAbsoluteIndex')(var.get('begin'), var.get('length')))
                return var.get('speciesConstructor')(var.get('O'), var.get('O').get(var.get('DEF_CONSTRUCTOR'))).create(var.get('O').get('buffer'), (var.get('O').get('byteOffset')+(var.get('$begin')*var.get('O').get('BYTES_PER_ELEMENT'))), var.get('toLength')(((var.get('length') if _seq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('length')))-var.get('$begin'))))
            PyJs_subarray_1231_._set_name('subarray')
            var.put('proto', Js({'copyWithin':PyJs_copyWithin_1214_,'every':PyJs_every_1215_,'fill':PyJs_fill_1216_,'filter':PyJs_filter_1217_,'find':PyJs_find_1218_,'findIndex':PyJs_findIndex_1219_,'forEach':PyJs_forEach_1220_,'indexOf':PyJs_indexOf_1221_,'includes':PyJs_includes_1222_,'join':PyJs_join_1223_,'lastIndexOf':PyJs_lastIndexOf_1224_,'map':PyJs_map_1225_,'reduce':PyJs_reduce_1226_,'reduceRight':PyJs_reduceRight_1227_,'reverse':PyJs_reverse_1228_,'some':PyJs_some_1229_,'sort':PyJs_sort_1230_,'subarray':PyJs_subarray_1231_}))
            @Js
            def PyJs_slice_1232_(start, end, this, arguments, var=var):
                var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_1232_}, var)
                var.registers(['end', 'start'])
                return var.get('speciesFromList')(var.get(u"this"), var.get('arraySlice').callprop('call', var.get('validate')(var.get(u"this")), var.get('start'), var.get('end')))
            PyJs_slice_1232_._set_name('slice')
            var.put('$slice', PyJs_slice_1232_)
            @Js
            def PyJs_set_1233_(arrayLike, this, arguments, var=var):
                var = Scope({'arrayLike':arrayLike, 'this':this, 'arguments':arguments, 'set':PyJs_set_1233_}, var)
                var.registers(['arrayLike', 'len', 'src', 'length', 'index', 'offset'])
                var.get('validate')(var.get(u"this"))
                var.put('offset', var.get('toOffset')(var.get('arguments').get('1'), Js(1.0)))
                var.put('length', var.get(u"this").get('length'))
                var.put('src', var.get('toObject')(var.get('arrayLike')))
                var.put('len', var.get('toLength')(var.get('src').get('length')))
                var.put('index', Js(0.0))
                if ((var.get('len')+var.get('offset'))>var.get('length')):
                    PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                    raise PyJsTempException
                while (var.get('index')<var.get('len')):
                    var.get(u"this").put((var.get('offset')+var.get('index')), var.get('src').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
            PyJs_set_1233_._set_name('set')
            var.put('$set', PyJs_set_1233_)
            @Js
            def PyJs_entries_1234_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'entries':PyJs_entries_1234_}, var)
                var.registers([])
                return var.get('arrayEntries').callprop('call', var.get('validate')(var.get(u"this")))
            PyJs_entries_1234_._set_name('entries')
            @Js
            def PyJs_keys_1235_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'keys':PyJs_keys_1235_}, var)
                var.registers([])
                return var.get('arrayKeys').callprop('call', var.get('validate')(var.get(u"this")))
            PyJs_keys_1235_._set_name('keys')
            @Js
            def PyJs_values_1236_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_1236_}, var)
                var.registers([])
                return var.get('arrayValues').callprop('call', var.get('validate')(var.get(u"this")))
            PyJs_values_1236_._set_name('values')
            var.put('$iterators', Js({'entries':PyJs_entries_1234_,'keys':PyJs_keys_1235_,'values':PyJs_values_1236_}))
            @Js
            def PyJs_isTAIndex_1237_(target, key, this, arguments, var=var):
                var = Scope({'target':target, 'key':key, 'this':this, 'arguments':arguments, 'isTAIndex':PyJs_isTAIndex_1237_}, var)
                var.registers(['target', 'key'])
                return ((((var.get('isObject')(var.get('target')) and var.get('target').get(var.get('TYPED_ARRAY'))) and ((Js('undefined') if _seq(var.get('key',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('key')))!=Js('symbol'))) and var.get('target').contains(var.get('key'))) and (var.get('String')((+var.get('key')))==var.get('String')(var.get('key'))))
            PyJs_isTAIndex_1237_._set_name('isTAIndex')
            var.put('isTAIndex', PyJs_isTAIndex_1237_)
            @Js
            def PyJs_getOwnPropertyDescriptor_1238_(target, key, this, arguments, var=var):
                var = Scope({'target':target, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1238_}, var)
                var.registers(['target', 'key'])
                return (var.get('propertyDesc')(Js(2.0), var.get('target').get(var.get('key'))) if var.get('isTAIndex')(var.get('target'), var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))) else var.get('gOPD')(var.get('target'), var.get('key')))
            PyJs_getOwnPropertyDescriptor_1238_._set_name('getOwnPropertyDescriptor')
            var.put('$getDesc', PyJs_getOwnPropertyDescriptor_1238_)
            @Js
            def PyJs_defineProperty_1239_(target, key, desc, this, arguments, var=var):
                var = Scope({'target':target, 'key':key, 'desc':desc, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_1239_}, var)
                var.registers(['desc', 'target', 'key'])
                def PyJs_LONG_1240_(var=var):
                    return ((((((var.get('isTAIndex')(var.get('target'), var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))) and var.get('isObject')(var.get('desc'))) and var.get('has')(var.get('desc'), Js('value'))) and var.get('has')(var.get('desc'), Js('get')).neg()) and var.get('has')(var.get('desc'), Js('set')).neg()) and var.get('desc').get('configurable').neg()) and (var.get('has')(var.get('desc'), Js('writable')).neg() or var.get('desc').get('writable')))
                if (PyJs_LONG_1240_() and (var.get('has')(var.get('desc'), Js('enumerable')).neg() or var.get('desc').get('enumerable'))):
                    var.get('target').put(var.get('key'), var.get('desc').get('value'))
                    return var.get('target')
                return var.get('dP')(var.get('target'), var.get('key'), var.get('desc'))
            PyJs_defineProperty_1239_._set_name('defineProperty')
            var.put('$setDesc', PyJs_defineProperty_1239_)
            if var.get('ALL_CONSTRUCTORS').neg():
                var.get('$GOPD').put('f', var.get('$getDesc'))
                var.get('$DP').put('f', var.get('$setDesc'))
            var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('ALL_CONSTRUCTORS').neg())), Js('Object'), Js({'getOwnPropertyDescriptor':var.get('$getDesc'),'defineProperty':var.get('$setDesc')}))
            @Js
            def PyJs_anonymous_1241_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('arrayToString').callprop('call', Js({}))
            PyJs_anonymous_1241_._set_name('anonymous')
            if var.get('fails')(PyJs_anonymous_1241_):
                @Js
                def PyJs_toString_1242_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1242_}, var)
                    var.registers([])
                    return var.get('arrayJoin').callprop('call', var.get(u"this"))
                PyJs_toString_1242_._set_name('toString')
                var.put('arrayToString', var.put('arrayToLocaleString', PyJs_toString_1242_))
            var.put('$TypedArrayPrototype$', var.get('redefineAll')(Js({}), var.get('proto')))
            var.get('redefineAll')(var.get('$TypedArrayPrototype$'), var.get('$iterators'))
            var.get('hide')(var.get('$TypedArrayPrototype$'), var.get('ITERATOR'), var.get('$iterators').get('values'))
            @Js
            def PyJs_constructor_1243_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'constructor':PyJs_constructor_1243_}, var)
                var.registers([])
                pass
            PyJs_constructor_1243_._set_name('constructor')
            var.get('redefineAll')(var.get('$TypedArrayPrototype$'), Js({'slice':var.get('$slice'),'set':var.get('$set'),'constructor':PyJs_constructor_1243_,'toString':var.get('arrayToString'),'toLocaleString':var.get('$toLocaleString')}))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('buffer'), Js('b'))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('byteOffset'), Js('o'))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('byteLength'), Js('l'))
            var.get('addGetter')(var.get('$TypedArrayPrototype$'), Js('length'), Js('e'))
            @Js
            def PyJs_get_1244_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1244_}, var)
                var.registers([])
                return var.get(u"this").get(var.get('TYPED_ARRAY'))
            PyJs_get_1244_._set_name('get')
            var.get('dP')(var.get('$TypedArrayPrototype$'), var.get('TAG'), Js({'get':PyJs_get_1244_}))
            @Js
            def PyJs_anonymous_1245_(KEY, BYTES, wrapper, CLAMPED, this, arguments, var=var):
                var = Scope({'KEY':KEY, 'BYTES':BYTES, 'wrapper':wrapper, 'CLAMPED':CLAMPED, 'this':this, 'arguments':arguments}, var)
                var.registers(['TypedArrayPrototype', '$nativeIterator', 'GETTER', 'addElement', 'Base', 'NAME', 'BYTES', '$iterator', 'KEY', 'setter', 'wrapper', 'TypedArray', 'O', 'FORCED', 'TAC', 'CORRECT_ITER_NAME', 'CLAMPED', 'getter', 'SETTER'])
                var.put('CLAMPED', var.get('CLAMPED').neg().neg())
                var.put('NAME', ((var.get('KEY')+(Js('Clamped') if var.get('CLAMPED') else Js('')))+Js('Array')))
                var.put('GETTER', (Js('get')+var.get('KEY')))
                var.put('SETTER', (Js('set')+var.get('KEY')))
                var.put('TypedArray', var.get('global').get(var.get('NAME')))
                var.put('Base', (var.get('TypedArray') or Js({})))
                var.put('TAC', (var.get('TypedArray') and var.get('getPrototypeOf')(var.get('TypedArray'))))
                var.put('FORCED', (var.get('TypedArray').neg() or var.get('$typed').get('ABV').neg()))
                var.put('O', Js({}))
                var.put('TypedArrayPrototype', (var.get('TypedArray') and var.get('TypedArray').get(var.get('PROTOTYPE'))))
                @Js
                def PyJs_getter_1246_(that, index, this, arguments, var=var):
                    var = Scope({'that':that, 'index':index, 'this':this, 'arguments':arguments, 'getter':PyJs_getter_1246_}, var)
                    var.registers(['that', 'data', 'index'])
                    var.put('data', var.get('that').get('_d'))
                    return var.get('data').get('v').callprop(var.get('GETTER'), ((var.get('index')*var.get('BYTES'))+var.get('data').get('o')), var.get('LITTLE_ENDIAN'))
                PyJs_getter_1246_._set_name('getter')
                var.put('getter', PyJs_getter_1246_)
                @Js
                def PyJs_setter_1247_(that, index, value, this, arguments, var=var):
                    var = Scope({'that':that, 'index':index, 'value':value, 'this':this, 'arguments':arguments, 'setter':PyJs_setter_1247_}, var)
                    var.registers(['that', 'data', 'index', 'value'])
                    var.put('data', var.get('that').get('_d'))
                    if var.get('CLAMPED'):
                        var.put('value', (Js(0.0) if (var.put('value', var.get('Math').callprop('round', var.get('value')))<Js(0.0)) else (Js(255) if (var.get('value')>Js(255)) else (var.get('value')&Js(255)))))
                    var.get('data').get('v').callprop(var.get('SETTER'), ((var.get('index')*var.get('BYTES'))+var.get('data').get('o')), var.get('value'), var.get('LITTLE_ENDIAN'))
                PyJs_setter_1247_._set_name('setter')
                var.put('setter', PyJs_setter_1247_)
                @Js
                def PyJs_addElement_1248_(that, index, this, arguments, var=var):
                    var = Scope({'that':that, 'index':index, 'this':this, 'arguments':arguments, 'addElement':PyJs_addElement_1248_}, var)
                    var.registers(['that', 'index'])
                    @Js
                    def PyJs_get_1249_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1249_}, var)
                        var.registers([])
                        return var.get('getter')(var.get(u"this"), var.get('index'))
                    PyJs_get_1249_._set_name('get')
                    @Js
                    def PyJs_set_1250_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_1250_}, var)
                        var.registers(['value'])
                        return var.get('setter')(var.get(u"this"), var.get('index'), var.get('value'))
                    PyJs_set_1250_._set_name('set')
                    var.get('dP')(var.get('that'), var.get('index'), Js({'get':PyJs_get_1249_,'set':PyJs_set_1250_,'enumerable':Js(True)}))
                PyJs_addElement_1248_._set_name('addElement')
                var.put('addElement', PyJs_addElement_1248_)
                if var.get('FORCED'):
                    @Js
                    def PyJs_anonymous_1251_(that, data, PyJsArg_246f6666736574_, PyJsArg_246c656e677468_, this, arguments, var=var):
                        var = Scope({'that':that, 'data':data, '$offset':PyJsArg_246f6666736574_, '$length':PyJsArg_246c656e677468_, 'this':this, 'arguments':arguments}, var)
                        var.registers(['$length', 'buffer', 'length', 'index', 'byteLength', '$len', 'that', '$offset', 'klass', 'data', 'offset'])
                        var.get('anInstance')(var.get('that'), var.get('TypedArray'), var.get('NAME'), Js('_d'))
                        var.put('index', Js(0.0))
                        var.put('offset', Js(0.0))
                        pass
                        if var.get('isObject')(var.get('data')).neg():
                            var.put('length', var.get('toIndex')(var.get('data')))
                            var.put('byteLength', (var.get('length')*var.get('BYTES')))
                            var.put('buffer', var.get('$ArrayBuffer').create(var.get('byteLength')))
                        else:
                            if ((var.get('data').instanceof(var.get('$ArrayBuffer')) or (var.put('klass', var.get('classof')(var.get('data')))==var.get('ARRAY_BUFFER'))) or (var.get('klass')==var.get('SHARED_BUFFER'))):
                                var.put('buffer', var.get('data'))
                                var.put('offset', var.get('toOffset')(var.get('$offset'), var.get('BYTES')))
                                var.put('$len', var.get('data').get('byteLength'))
                                if _seq(var.get('$length'),var.get('undefined')):
                                    if (var.get('$len')%var.get('BYTES')):
                                        PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                                        raise PyJsTempException
                                    var.put('byteLength', (var.get('$len')-var.get('offset')))
                                    if (var.get('byteLength')<Js(0.0)):
                                        PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                                        raise PyJsTempException
                                else:
                                    var.put('byteLength', (var.get('toLength')(var.get('$length'))*var.get('BYTES')))
                                    if ((var.get('byteLength')+var.get('offset'))>var.get('$len')):
                                        PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                                        raise PyJsTempException
                                var.put('length', (var.get('byteLength')/var.get('BYTES')))
                            else:
                                if var.get('data').contains(var.get('TYPED_ARRAY')):
                                    return var.get('fromList')(var.get('TypedArray'), var.get('data'))
                                else:
                                    return var.get('$from').callprop('call', var.get('TypedArray'), var.get('data'))
                        var.get('hide')(var.get('that'), Js('_d'), Js({'b':var.get('buffer'),'o':var.get('offset'),'l':var.get('byteLength'),'e':var.get('length'),'v':var.get('$DataView').create(var.get('buffer'))}))
                        while (var.get('index')<var.get('length')):
                            var.get('addElement')(var.get('that'), (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))
                    PyJs_anonymous_1251_._set_name('anonymous')
                    var.put('TypedArray', var.get('wrapper')(PyJs_anonymous_1251_))
                    var.put('TypedArrayPrototype', var.get('TypedArray').put(var.get('PROTOTYPE'), var.get('create')(var.get('$TypedArrayPrototype$'))))
                    var.get('hide')(var.get('TypedArrayPrototype'), Js('constructor'), var.get('TypedArray'))
                else:
                    @Js
                    def PyJs_anonymous_1252_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('TypedArray')(Js(1.0))
                    PyJs_anonymous_1252_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_1253_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get('TypedArray').create((-Js(1.0)))
                    PyJs_anonymous_1253_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_1254_(iter, this, arguments, var=var):
                        var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iter'])
                        var.get('TypedArray').create()
                        var.get('TypedArray').create(var.get(u"null"))
                        var.get('TypedArray').create(Js(1.5))
                        var.get('TypedArray').create(var.get('iter'))
                    PyJs_anonymous_1254_._set_name('anonymous')
                    if ((var.get('fails')(PyJs_anonymous_1252_).neg() or var.get('fails')(PyJs_anonymous_1253_).neg()) or var.get('$iterDetect')(PyJs_anonymous_1254_, Js(True)).neg()):
                        @Js
                        def PyJs_anonymous_1255_(that, data, PyJsArg_246f6666736574_, PyJsArg_246c656e677468_, this, arguments, var=var):
                            var = Scope({'that':that, 'data':data, '$offset':PyJsArg_246f6666736574_, '$length':PyJsArg_246c656e677468_, 'this':this, 'arguments':arguments}, var)
                            var.registers(['$length', 'that', '$offset', 'klass', 'data'])
                            var.get('anInstance')(var.get('that'), var.get('TypedArray'), var.get('NAME'))
                            pass
                            if var.get('isObject')(var.get('data')).neg():
                                return var.get('Base').create(var.get('toIndex')(var.get('data')))
                            if ((var.get('data').instanceof(var.get('$ArrayBuffer')) or (var.put('klass', var.get('classof')(var.get('data')))==var.get('ARRAY_BUFFER'))) or (var.get('klass')==var.get('SHARED_BUFFER'))):
                                return (var.get('Base').create(var.get('data'), var.get('toOffset')(var.get('$offset'), var.get('BYTES')), var.get('$length')) if PyJsStrictNeq(var.get('$length'),var.get('undefined')) else (var.get('Base').create(var.get('data'), var.get('toOffset')(var.get('$offset'), var.get('BYTES'))) if PyJsStrictNeq(var.get('$offset'),var.get('undefined')) else var.get('Base').create(var.get('data'))))
                            if var.get('data').contains(var.get('TYPED_ARRAY')):
                                return var.get('fromList')(var.get('TypedArray'), var.get('data'))
                            return var.get('$from').callprop('call', var.get('TypedArray'), var.get('data'))
                        PyJs_anonymous_1255_._set_name('anonymous')
                        var.put('TypedArray', var.get('wrapper')(PyJs_anonymous_1255_))
                        @Js
                        def PyJs_anonymous_1256_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            if var.get('TypedArray').contains(var.get('key')).neg():
                                var.get('hide')(var.get('TypedArray'), var.get('key'), var.get('Base').get(var.get('key')))
                        PyJs_anonymous_1256_._set_name('anonymous')
                        var.get('arrayForEach')((var.get('gOPN')(var.get('Base')).callprop('concat', var.get('gOPN')(var.get('TAC'))) if PyJsStrictNeq(var.get('TAC'),var.get('Function').get('prototype')) else var.get('gOPN')(var.get('Base'))), PyJs_anonymous_1256_)
                        var.get('TypedArray').put(var.get('PROTOTYPE'), var.get('TypedArrayPrototype'))
                        if var.get('LIBRARY').neg():
                            var.get('TypedArrayPrototype').put('constructor', var.get('TypedArray'))
                var.put('$nativeIterator', var.get('TypedArrayPrototype').get(var.get('ITERATOR')))
                var.put('CORRECT_ITER_NAME', (var.get('$nativeIterator').neg().neg() and ((var.get('$nativeIterator').get('name')==Js('values')) or (var.get('$nativeIterator').get('name')==var.get('undefined')))))
                var.put('$iterator', var.get('$iterators').get('values'))
                var.get('hide')(var.get('TypedArray'), var.get('TYPED_CONSTRUCTOR'), Js(True))
                var.get('hide')(var.get('TypedArrayPrototype'), var.get('TYPED_ARRAY'), var.get('NAME'))
                var.get('hide')(var.get('TypedArrayPrototype'), var.get('VIEW'), Js(True))
                var.get('hide')(var.get('TypedArrayPrototype'), var.get('DEF_CONSTRUCTOR'), var.get('TypedArray'))
                if ((var.get('TypedArray').create(Js(1.0)).get(var.get('TAG'))!=var.get('NAME')) if var.get('CLAMPED') else var.get('TypedArrayPrototype').contains(var.get('TAG')).neg()):
                    @Js
                    def PyJs_get_1257_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1257_}, var)
                        var.registers([])
                        return var.get('NAME')
                    PyJs_get_1257_._set_name('get')
                    var.get('dP')(var.get('TypedArrayPrototype'), var.get('TAG'), Js({'get':PyJs_get_1257_}))
                var.get('O').put(var.get('NAME'), var.get('TypedArray'))
                var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*(var.get('TypedArray')!=var.get('Base')))), var.get('O'))
                var.get('$export')(var.get('$export').get('S'), var.get('NAME'), Js({'BYTES_PER_ELEMENT':var.get('BYTES')}))
                @Js
                def PyJs_anonymous_1258_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('Base').get('of').callprop('call', var.get('TypedArray'), Js(1.0))
                PyJs_anonymous_1258_._set_name('anonymous')
                var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_1258_))), var.get('NAME'), Js({'from':var.get('$from'),'of':var.get('$of')}))
                if var.get('TypedArrayPrototype').contains(var.get('BYTES_PER_ELEMENT')).neg():
                    var.get('hide')(var.get('TypedArrayPrototype'), var.get('BYTES_PER_ELEMENT'), var.get('BYTES'))
                var.get('$export')(var.get('$export').get('P'), var.get('NAME'), var.get('proto'))
                var.get('setSpecies')(var.get('NAME'))
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('FORCED_SET'))), var.get('NAME'), Js({'set':var.get('$set')}))
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('CORRECT_ITER_NAME').neg())), var.get('NAME'), var.get('$iterators'))
                if (var.get('LIBRARY').neg() and (var.get('TypedArrayPrototype').get('toString')!=var.get('arrayToString'))):
                    var.get('TypedArrayPrototype').put('toString', var.get('arrayToString'))
                @Js
                def PyJs_anonymous_1259_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('TypedArray').create(Js(1.0)).callprop('slice')
                PyJs_anonymous_1259_._set_name('anonymous')
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_1259_))), var.get('NAME'), Js({'slice':var.get('$slice')}))
                @Js
                def PyJs_anonymous_1260_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return (Js([Js(1.0), Js(2.0)]).callprop('toLocaleString')!=var.get('TypedArray').create(Js([Js(1.0), Js(2.0)])).callprop('toLocaleString'))
                PyJs_anonymous_1260_._set_name('anonymous')
                @Js
                def PyJs_anonymous_1261_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('TypedArrayPrototype').get('toLocaleString').callprop('call', Js([Js(1.0), Js(2.0)]))
                PyJs_anonymous_1261_._set_name('anonymous')
                var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('fails')(PyJs_anonymous_1260_) or var.get('fails')(PyJs_anonymous_1261_).neg()))), var.get('NAME'), Js({'toLocaleString':var.get('$toLocaleString')}))
                var.get('Iterators').put(var.get('NAME'), (var.get('$nativeIterator') if var.get('CORRECT_ITER_NAME') else var.get('$iterator')))
                if (var.get('LIBRARY').neg() and var.get('CORRECT_ITER_NAME').neg()):
                    var.get('hide')(var.get('TypedArrayPrototype'), var.get('ITERATOR'), var.get('$iterator'))
            PyJs_anonymous_1245_._set_name('anonymous')
            var.get('module').put('exports', PyJs_anonymous_1245_)
        else:
            @Js
            def PyJs_anonymous_1262_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1262_._set_name('anonymous')
            var.get('module').put('exports', PyJs_anonymous_1262_)
    PyJs_anonymous_1199_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1263_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toIndex', 'module', 'packI16', 'j', 'floor', 'fails', 'anInstance', 'unpackIEEE754', 'DESCRIPTORS', '$OFFSET', 'redefineAll', 'packF32', 'log', '$BUFFER', 'toLength', 'Infinity', 'BYTE_OFFSET', 'packF64', 'hide', 'set', 'dP', 'WRONG_INDEX', 'get', 'keys', 'RangeError', 'BaseBuffer', 'require', 'setToStringTag', 'packIEEE754', '$setInt8', 'packI8', 'abs', 'toInteger', 'ArrayBufferProto', 'LN2', '$DataView', 'ARRAY_BUFFER', 'DATA_VIEW', '$LENGTH', 'exports', 'Math', 'packI32', 'view', 'PROTOTYPE', 'gOPN', 'BYTE_LENGTH', 'pow', '$typed', 'global', 'arrayFill', '$ArrayBuffer', 'unpackI32', 'key', 'BUFFER', 'WRONG_LENGTH', 'LIBRARY', 'addGetter'])
        @Js
        def PyJsHoisted_packIEEE754_(value, mLen, nBytes, this, arguments, var=var):
            var = Scope({'value':value, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer', 'i', 'e', 'c', 'eBias', 'm', 'mLen', 'value', 'eLen', 'rt', 'nBytes', 'eMax', 's'])
            var.put('buffer', var.get('Array').create(var.get('nBytes')))
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('rt', ((var.get('pow')(Js(2.0), (-Js(24.0)))-var.get('pow')(Js(2.0), (-Js(77.0)))) if _seq(var.get('mLen'),Js(23.0)) else Js(0.0)))
            var.put('i', Js(0.0))
            var.put('s', (Js(1.0) if ((var.get('value')<Js(0.0)) or (_seq(var.get('value'),Js(0.0)) and ((Js(1.0)/var.get('value'))<Js(0.0)))) else Js(0.0)))
            pass
            var.put('value', var.get('abs')(var.get('value')))
            if ((var.get('value')!=var.get('value')) or _seq(var.get('value'),var.get('Infinity'))):
                var.put('m', (Js(1.0) if (var.get('value')!=var.get('value')) else Js(0.0)))
                var.put('e', var.get('eMax'))
            else:
                var.put('e', var.get('floor')((var.get('log')(var.get('value'))/var.get('LN2'))))
                if ((var.get('value')*var.put('c', var.get('pow')(Js(2.0), (-var.get('e')))))<Js(1.0)):
                    (var.put('e',Js(var.get('e').to_number())-Js(1))+Js(1))
                    var.put('c', Js(2.0), '*')
                if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                    var.put('value', (var.get('rt')/var.get('c')), '+')
                else:
                    var.put('value', (var.get('rt')*var.get('pow')(Js(2.0), (Js(1.0)-var.get('eBias')))), '+')
                if ((var.get('value')*var.get('c'))>=Js(2.0)):
                    (var.put('e',Js(var.get('e').to_number())+Js(1))-Js(1))
                    var.put('c', Js(2.0), '/')
                if ((var.get('e')+var.get('eBias'))>=var.get('eMax')):
                    var.put('m', Js(0.0))
                    var.put('e', var.get('eMax'))
                else:
                    if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                        var.put('m', (((var.get('value')*var.get('c'))-Js(1.0))*var.get('pow')(Js(2.0), var.get('mLen'))))
                        var.put('e', (var.get('e')+var.get('eBias')))
                    else:
                        var.put('m', ((var.get('value')*var.get('pow')(Js(2.0), (var.get('eBias')-Js(1.0))))*var.get('pow')(Js(2.0), var.get('mLen'))))
                        var.put('e', Js(0.0))
            #for JS loop

            while (var.get('mLen')>=Js(8.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.get('buffer').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (var.get('m')&Js(255.0))),var.put('m', Js(256.0), '/')),var.put('mLen', Js(8.0), '-'))
            var.put('e', ((var.get('e')<<var.get('mLen'))|var.get('m')))
            var.put('eLen', var.get('mLen'), '+')
            #for JS loop

            while (var.get('eLen')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.get('buffer').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (var.get('e')&Js(255.0))),var.put('e', Js(256.0), '/')),var.put('eLen', Js(8.0), '-'))
            var.get('buffer').put(var.put('i',Js(var.get('i').to_number())-Js(1)), (var.get('s')*Js(128.0)), '|')
            return var.get('buffer')
        PyJsHoisted_packIEEE754_.func_name = 'packIEEE754'
        var.put('packIEEE754', PyJsHoisted_packIEEE754_)
        @Js
        def PyJsHoisted_unpackIEEE754_(buffer, mLen, nBytes, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer', 'i', 'e', 'eBias', 'm', 'mLen', 'nBits', 'eLen', 'nBytes', 'eMax', 's'])
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('nBits', (var.get('eLen')-Js(7.0)))
            var.put('i', (var.get('nBytes')-Js(1.0)))
            var.put('s', var.get('buffer').get((var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))))
            var.put('e', (var.get('s')&Js(127.0)))
            pass
            var.put('s', Js(7.0), '>>')
            #for JS loop

            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('e', ((var.get('e')*Js(256.0))+var.get('buffer').get(var.get('i')))),(var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))),var.put('nBits', Js(8.0), '-'))
            var.put('m', (var.get('e')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
            var.put('e', (-var.get('nBits')), '>>')
            var.put('nBits', var.get('mLen'), '+')
            #for JS loop

            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('m', ((var.get('m')*Js(256.0))+var.get('buffer').get(var.get('i')))),(var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))),var.put('nBits', Js(8.0), '-'))
            if _seq(var.get('e'),Js(0.0)):
                var.put('e', (Js(1.0)-var.get('eBias')))
            else:
                if _seq(var.get('e'),var.get('eMax')):
                    return (var.get('NaN') if var.get('m') else ((-var.get('Infinity')) if var.get('s') else var.get('Infinity')))
                else:
                    var.put('m', (var.get('m')+var.get('pow')(Js(2.0), var.get('mLen'))))
                    var.put('e', (var.get('e')-var.get('eBias')))
            return ((((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('m'))*var.get('pow')(Js(2.0), (var.get('e')-var.get('mLen'))))
        PyJsHoisted_unpackIEEE754_.func_name = 'unpackIEEE754'
        var.put('unpackIEEE754', PyJsHoisted_unpackIEEE754_)
        @Js
        def PyJsHoisted_unpackI32_(bytes, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['bytes'])
            return ((((var.get('bytes').get('3')<<Js(24.0))|(var.get('bytes').get('2')<<Js(16.0)))|(var.get('bytes').get('1')<<Js(8.0)))|var.get('bytes').get('0'))
        PyJsHoisted_unpackI32_.func_name = 'unpackI32'
        var.put('unpackI32', PyJsHoisted_unpackI32_)
        @Js
        def PyJsHoisted_packI8_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return Js([(var.get('it')&Js(255))])
        PyJsHoisted_packI8_.func_name = 'packI8'
        var.put('packI8', PyJsHoisted_packI8_)
        @Js
        def PyJsHoisted_packI16_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return Js([(var.get('it')&Js(255)), ((var.get('it')>>Js(8.0))&Js(255))])
        PyJsHoisted_packI16_.func_name = 'packI16'
        var.put('packI16', PyJsHoisted_packI16_)
        @Js
        def PyJsHoisted_packI32_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return Js([(var.get('it')&Js(255)), ((var.get('it')>>Js(8.0))&Js(255)), ((var.get('it')>>Js(16.0))&Js(255)), ((var.get('it')>>Js(24.0))&Js(255))])
        PyJsHoisted_packI32_.func_name = 'packI32'
        var.put('packI32', PyJsHoisted_packI32_)
        @Js
        def PyJsHoisted_packF64_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('packIEEE754')(var.get('it'), Js(52.0), Js(8.0))
        PyJsHoisted_packF64_.func_name = 'packF64'
        var.put('packF64', PyJsHoisted_packF64_)
        @Js
        def PyJsHoisted_packF32_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('packIEEE754')(var.get('it'), Js(23.0), Js(4.0))
        PyJsHoisted_packF32_.func_name = 'packF32'
        var.put('packF32', PyJsHoisted_packF32_)
        @Js
        def PyJsHoisted_addGetter_(C, key, internal, this, arguments, var=var):
            var = Scope({'C':C, 'key':key, 'internal':internal, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'C', 'internal'])
            @Js
            def PyJs_get_1264_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1264_}, var)
                var.registers([])
                return var.get(u"this").get(var.get('internal'))
            PyJs_get_1264_._set_name('get')
            var.get('dP')(var.get('C').get(var.get('PROTOTYPE')), var.get('key'), Js({'get':PyJs_get_1264_}))
        PyJsHoisted_addGetter_.func_name = 'addGetter'
        var.put('addGetter', PyJsHoisted_addGetter_)
        @Js
        def PyJsHoisted_get_(view, bytes, index, isLittleEndian, this, arguments, var=var):
            var = Scope({'view':view, 'bytes':bytes, 'index':index, 'isLittleEndian':isLittleEndian, 'this':this, 'arguments':arguments}, var)
            var.registers(['intIndex', 'isLittleEndian', 'view', 'numIndex', 'index', 'start', 'pack', 'store', 'bytes'])
            var.put('numIndex', (+var.get('index')))
            var.put('intIndex', var.get('toIndex')(var.get('numIndex')))
            if ((var.get('intIndex')+var.get('bytes'))>var.get('view').get(var.get('$LENGTH'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_INDEX')))
                raise PyJsTempException
            var.put('store', var.get('view').get(var.get('$BUFFER')).get('_b'))
            var.put('start', (var.get('intIndex')+var.get('view').get(var.get('$OFFSET'))))
            var.put('pack', var.get('store').callprop('slice', var.get('start'), (var.get('start')+var.get('bytes'))))
            return (var.get('pack') if var.get('isLittleEndian') else var.get('pack').callprop('reverse'))
        PyJsHoisted_get_.func_name = 'get'
        var.put('get', PyJsHoisted_get_)
        @Js
        def PyJsHoisted_set_(view, bytes, index, conversion, value, isLittleEndian, this, arguments, var=var):
            var = Scope({'view':view, 'bytes':bytes, 'index':index, 'conversion':conversion, 'value':value, 'isLittleEndian':isLittleEndian, 'this':this, 'arguments':arguments}, var)
            var.registers(['intIndex', 'isLittleEndian', 'view', 'numIndex', 'i', 'index', 'start', 'conversion', 'pack', 'value', 'store', 'bytes'])
            var.put('numIndex', (+var.get('index')))
            var.put('intIndex', var.get('toIndex')(var.get('numIndex')))
            if ((var.get('intIndex')+var.get('bytes'))>var.get('view').get(var.get('$LENGTH'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_INDEX')))
                raise PyJsTempException
            var.put('store', var.get('view').get(var.get('$BUFFER')).get('_b'))
            var.put('start', (var.get('intIndex')+var.get('view').get(var.get('$OFFSET'))))
            var.put('pack', var.get('conversion')((+var.get('value'))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('bytes')):
                try:
                    var.get('store').put((var.get('start')+var.get('i')), var.get('pack').get((var.get('i') if var.get('isLittleEndian') else ((var.get('bytes')-var.get('i'))-Js(1.0)))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted_set_.func_name = 'set'
        var.put('set', PyJsHoisted_set_)
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('$typed', var.get('require')(Js('./_typed')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toIndex', var.get('require')(Js('./_to-index')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('arrayFill', var.get('require')(Js('./_array-fill')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('ARRAY_BUFFER', Js('ArrayBuffer'))
        var.put('DATA_VIEW', Js('DataView'))
        var.put('PROTOTYPE', Js('prototype'))
        var.put('WRONG_LENGTH', Js('Wrong length!'))
        var.put('WRONG_INDEX', Js('Wrong index!'))
        var.put('$ArrayBuffer', var.get('global').get(var.get('ARRAY_BUFFER')))
        var.put('$DataView', var.get('global').get(var.get('DATA_VIEW')))
        var.put('Math', var.get('global').get('Math'))
        var.put('RangeError', var.get('global').get('RangeError'))
        var.put('Infinity', var.get('global').get('Infinity'))
        var.put('BaseBuffer', var.get('$ArrayBuffer'))
        var.put('abs', var.get('Math').get('abs'))
        var.put('pow', var.get('Math').get('pow'))
        var.put('floor', var.get('Math').get('floor'))
        var.put('log', var.get('Math').get('log'))
        var.put('LN2', var.get('Math').get('LN2'))
        var.put('BUFFER', Js('buffer'))
        var.put('BYTE_LENGTH', Js('byteLength'))
        var.put('BYTE_OFFSET', Js('byteOffset'))
        var.put('$BUFFER', (Js('_b') if var.get('DESCRIPTORS') else var.get('BUFFER')))
        var.put('$LENGTH', (Js('_l') if var.get('DESCRIPTORS') else var.get('BYTE_LENGTH')))
        var.put('$OFFSET', (Js('_o') if var.get('DESCRIPTORS') else var.get('BYTE_OFFSET')))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        if var.get('$typed').get('ABV').neg():
            @Js
            def PyJs_ArrayBuffer_1265_(length, this, arguments, var=var):
                var = Scope({'length':length, 'this':this, 'arguments':arguments, 'ArrayBuffer':PyJs_ArrayBuffer_1265_}, var)
                var.registers(['length', 'byteLength'])
                var.get('anInstance')(var.get(u"this"), var.get('$ArrayBuffer'), var.get('ARRAY_BUFFER'))
                var.put('byteLength', var.get('toIndex')(var.get('length')))
                var.get(u"this").put('_b', var.get('arrayFill').callprop('call', var.get('Array').create(var.get('byteLength')), Js(0.0)))
                var.get(u"this").put(var.get('$LENGTH'), var.get('byteLength'))
            PyJs_ArrayBuffer_1265_._set_name('ArrayBuffer')
            var.put('$ArrayBuffer', PyJs_ArrayBuffer_1265_)
            @Js
            def PyJs_DataView_1266_(buffer, byteOffset, byteLength, this, arguments, var=var):
                var = Scope({'buffer':buffer, 'byteOffset':byteOffset, 'byteLength':byteLength, 'this':this, 'arguments':arguments, 'DataView':PyJs_DataView_1266_}, var)
                var.registers(['buffer', 'byteLength', 'byteOffset', 'bufferLength', 'offset'])
                var.get('anInstance')(var.get(u"this"), var.get('$DataView'), var.get('DATA_VIEW'))
                var.get('anInstance')(var.get('buffer'), var.get('$ArrayBuffer'), var.get('DATA_VIEW'))
                var.put('bufferLength', var.get('buffer').get(var.get('$LENGTH')))
                var.put('offset', var.get('toInteger')(var.get('byteOffset')))
                if ((var.get('offset')<Js(0.0)) or (var.get('offset')>var.get('bufferLength'))):
                    PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong offset!')))
                    raise PyJsTempException
                var.put('byteLength', ((var.get('bufferLength')-var.get('offset')) if _seq(var.get('byteLength'),var.get('undefined')) else var.get('toLength')(var.get('byteLength'))))
                if ((var.get('offset')+var.get('byteLength'))>var.get('bufferLength')):
                    PyJsTempException = JsToPyException(var.get('RangeError')(var.get('WRONG_LENGTH')))
                    raise PyJsTempException
                var.get(u"this").put(var.get('$BUFFER'), var.get('buffer'))
                var.get(u"this").put(var.get('$OFFSET'), var.get('offset'))
                var.get(u"this").put(var.get('$LENGTH'), var.get('byteLength'))
            PyJs_DataView_1266_._set_name('DataView')
            var.put('$DataView', PyJs_DataView_1266_)
            if var.get('DESCRIPTORS'):
                var.get('addGetter')(var.get('$ArrayBuffer'), var.get('BYTE_LENGTH'), Js('_l'))
                var.get('addGetter')(var.get('$DataView'), var.get('BUFFER'), Js('_b'))
                var.get('addGetter')(var.get('$DataView'), var.get('BYTE_LENGTH'), Js('_l'))
                var.get('addGetter')(var.get('$DataView'), var.get('BYTE_OFFSET'), Js('_o'))
            def PyJs_LONG_1283_(var=var):
                @Js
                def PyJs_getInt8_1267_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getInt8':PyJs_getInt8_1267_}, var)
                    var.registers(['byteOffset'])
                    return ((var.get('get')(var.get(u"this"), Js(1.0), var.get('byteOffset')).get('0')<<Js(24.0))>>Js(24.0))
                PyJs_getInt8_1267_._set_name('getInt8')
                @Js
                def PyJs_getUint8_1268_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getUint8':PyJs_getUint8_1268_}, var)
                    var.registers(['byteOffset'])
                    return var.get('get')(var.get(u"this"), Js(1.0), var.get('byteOffset')).get('0')
                PyJs_getUint8_1268_._set_name('getUint8')
                @Js
                def PyJs_getInt16_1269_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getInt16':PyJs_getInt16_1269_}, var)
                    var.registers(['byteOffset', 'bytes'])
                    var.put('bytes', var.get('get')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('arguments').get('1')))
                    return ((((var.get('bytes').get('1')<<Js(8.0))|var.get('bytes').get('0'))<<Js(16.0))>>Js(16.0))
                PyJs_getInt16_1269_._set_name('getInt16')
                @Js
                def PyJs_getUint16_1270_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getUint16':PyJs_getUint16_1270_}, var)
                    var.registers(['byteOffset', 'bytes'])
                    var.put('bytes', var.get('get')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('arguments').get('1')))
                    return ((var.get('bytes').get('1')<<Js(8.0))|var.get('bytes').get('0'))
                PyJs_getUint16_1270_._set_name('getUint16')
                @Js
                def PyJs_getInt32_1271_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getInt32':PyJs_getInt32_1271_}, var)
                    var.registers(['byteOffset'])
                    return var.get('unpackI32')(var.get('get')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('arguments').get('1')))
                PyJs_getInt32_1271_._set_name('getInt32')
                @Js
                def PyJs_getUint32_1272_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getUint32':PyJs_getUint32_1272_}, var)
                    var.registers(['byteOffset'])
                    return PyJsBshift(var.get('unpackI32')(var.get('get')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('arguments').get('1'))),Js(0.0))
                PyJs_getUint32_1272_._set_name('getUint32')
                @Js
                def PyJs_getFloat32_1273_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getFloat32':PyJs_getFloat32_1273_}, var)
                    var.registers(['byteOffset'])
                    return var.get('unpackIEEE754')(var.get('get')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('arguments').get('1')), Js(23.0), Js(4.0))
                PyJs_getFloat32_1273_._set_name('getFloat32')
                @Js
                def PyJs_getFloat64_1274_(byteOffset, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'this':this, 'arguments':arguments, 'getFloat64':PyJs_getFloat64_1274_}, var)
                    var.registers(['byteOffset'])
                    return var.get('unpackIEEE754')(var.get('get')(var.get(u"this"), Js(8.0), var.get('byteOffset'), var.get('arguments').get('1')), Js(52.0), Js(8.0))
                PyJs_getFloat64_1274_._set_name('getFloat64')
                @Js
                def PyJs_setInt8_1275_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt8':PyJs_setInt8_1275_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('set')(var.get(u"this"), Js(1.0), var.get('byteOffset'), var.get('packI8'), var.get('value'))
                PyJs_setInt8_1275_._set_name('setInt8')
                @Js
                def PyJs_setUint8_1276_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint8':PyJs_setUint8_1276_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('set')(var.get(u"this"), Js(1.0), var.get('byteOffset'), var.get('packI8'), var.get('value'))
                PyJs_setUint8_1276_._set_name('setUint8')
                @Js
                def PyJs_setInt16_1277_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt16':PyJs_setInt16_1277_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('set')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('packI16'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setInt16_1277_._set_name('setInt16')
                @Js
                def PyJs_setUint16_1278_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint16':PyJs_setUint16_1278_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('set')(var.get(u"this"), Js(2.0), var.get('byteOffset'), var.get('packI16'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setUint16_1278_._set_name('setUint16')
                @Js
                def PyJs_setInt32_1279_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt32':PyJs_setInt32_1279_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('set')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('packI32'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setInt32_1279_._set_name('setInt32')
                @Js
                def PyJs_setUint32_1280_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint32':PyJs_setUint32_1280_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('set')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('packI32'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setUint32_1280_._set_name('setUint32')
                @Js
                def PyJs_setFloat32_1281_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setFloat32':PyJs_setFloat32_1281_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('set')(var.get(u"this"), Js(4.0), var.get('byteOffset'), var.get('packF32'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setFloat32_1281_._set_name('setFloat32')
                @Js
                def PyJs_setFloat64_1282_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setFloat64':PyJs_setFloat64_1282_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('set')(var.get(u"this"), Js(8.0), var.get('byteOffset'), var.get('packF64'), var.get('value'), var.get('arguments').get('2'))
                PyJs_setFloat64_1282_._set_name('setFloat64')
                return var.get('redefineAll')(var.get('$DataView').get(var.get('PROTOTYPE')), Js({'getInt8':PyJs_getInt8_1267_,'getUint8':PyJs_getUint8_1268_,'getInt16':PyJs_getInt16_1269_,'getUint16':PyJs_getUint16_1270_,'getInt32':PyJs_getInt32_1271_,'getUint32':PyJs_getUint32_1272_,'getFloat32':PyJs_getFloat32_1273_,'getFloat64':PyJs_getFloat64_1274_,'setInt8':PyJs_setInt8_1275_,'setUint8':PyJs_setUint8_1276_,'setInt16':PyJs_setInt16_1277_,'setUint16':PyJs_setUint16_1278_,'setInt32':PyJs_setInt32_1279_,'setUint32':PyJs_setUint32_1280_,'setFloat32':PyJs_setFloat32_1281_,'setFloat64':PyJs_setFloat64_1282_}))
            PyJs_LONG_1283_()
        else:
            @Js
            def PyJs_anonymous_1284_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$ArrayBuffer')(Js(1.0))
            PyJs_anonymous_1284_._set_name('anonymous')
            @Js
            def PyJs_anonymous_1285_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$ArrayBuffer').create((-Js(1.0)))
            PyJs_anonymous_1285_._set_name('anonymous')
            @Js
            def PyJs_anonymous_1286_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$ArrayBuffer').create()
                var.get('$ArrayBuffer').create(Js(1.5))
                var.get('$ArrayBuffer').create(var.get('NaN'))
                return (var.get('$ArrayBuffer').get('name')!=var.get('ARRAY_BUFFER'))
            PyJs_anonymous_1286_._set_name('anonymous')
            if ((var.get('fails')(PyJs_anonymous_1284_).neg() or var.get('fails')(PyJs_anonymous_1285_).neg()) or var.get('fails')(PyJs_anonymous_1286_)):
                @Js
                def PyJs_ArrayBuffer_1287_(length, this, arguments, var=var):
                    var = Scope({'length':length, 'this':this, 'arguments':arguments, 'ArrayBuffer':PyJs_ArrayBuffer_1287_}, var)
                    var.registers(['length'])
                    var.get('anInstance')(var.get(u"this"), var.get('$ArrayBuffer'))
                    return var.get('BaseBuffer').create(var.get('toIndex')(var.get('length')))
                PyJs_ArrayBuffer_1287_._set_name('ArrayBuffer')
                var.put('$ArrayBuffer', PyJs_ArrayBuffer_1287_)
                var.put('ArrayBufferProto', var.get('$ArrayBuffer').put(var.get('PROTOTYPE'), var.get('BaseBuffer').get(var.get('PROTOTYPE'))))
                #for JS loop
                var.put('keys', var.get('gOPN')(var.get('BaseBuffer')))
                var.put('j', Js(0.0))
                while (var.get('keys').get('length')>var.get('j')):
                    if var.get('$ArrayBuffer').contains(var.put('key', var.get('keys').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))).neg():
                        var.get('hide')(var.get('$ArrayBuffer'), var.get('key'), var.get('BaseBuffer').get(var.get('key')))

                if var.get('LIBRARY').neg():
                    var.get('ArrayBufferProto').put('constructor', var.get('$ArrayBuffer'))
            var.put('view', var.get('$DataView').create(var.get('$ArrayBuffer').create(Js(2.0))))
            var.put('$setInt8', var.get('$DataView').get(var.get('PROTOTYPE')).get('setInt8'))
            var.get('view').callprop('setInt8', Js(0.0), Js(2147483648.0))
            var.get('view').callprop('setInt8', Js(1.0), Js(2147483649.0))
            if (var.get('view').callprop('getInt8', Js(0.0)) or var.get('view').callprop('getInt8', Js(1.0)).neg()):
                @Js
                def PyJs_setInt8_1288_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setInt8':PyJs_setInt8_1288_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('$setInt8').callprop('call', var.get(u"this"), var.get('byteOffset'), ((var.get('value')<<Js(24.0))>>Js(24.0)))
                PyJs_setInt8_1288_._set_name('setInt8')
                @Js
                def PyJs_setUint8_1289_(byteOffset, value, this, arguments, var=var):
                    var = Scope({'byteOffset':byteOffset, 'value':value, 'this':this, 'arguments':arguments, 'setUint8':PyJs_setUint8_1289_}, var)
                    var.registers(['value', 'byteOffset'])
                    var.get('$setInt8').callprop('call', var.get(u"this"), var.get('byteOffset'), ((var.get('value')<<Js(24.0))>>Js(24.0)))
                PyJs_setUint8_1289_._set_name('setUint8')
                var.get('redefineAll')(var.get('$DataView').get(var.get('PROTOTYPE')), Js({'setInt8':PyJs_setInt8_1288_,'setUint8':PyJs_setUint8_1289_}), Js(True))
        var.get('setToStringTag')(var.get('$ArrayBuffer'), var.get('ARRAY_BUFFER'))
        var.get('setToStringTag')(var.get('$DataView'), var.get('DATA_VIEW'))
        var.get('hide')(var.get('$DataView').get(var.get('PROTOTYPE')), var.get('$typed').get('VIEW'), Js(True))
        var.get('exports').put(var.get('ARRAY_BUFFER'), var.get('$ArrayBuffer'))
        var.get('exports').put(var.get('DATA_VIEW'), var.get('$DataView'))
    PyJs_anonymous_1263_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1290_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'i', 'l', 'CONSTR', 'hide', 'TYPED', 'global', 'Typed', 'VIEW', 'TypedArrayConstructors', 'uid', 'ABV'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('uid', var.get('require')(Js('./_uid')))
        var.put('TYPED', var.get('uid')(Js('typed_array')))
        var.put('VIEW', var.get('uid')(Js('view')))
        var.put('ABV', (var.get('global').get('ArrayBuffer') and var.get('global').get('DataView')).neg().neg())
        var.put('CONSTR', var.get('ABV'))
        var.put('i', Js(0.0))
        var.put('l', Js(9.0))
        pass
        var.put('TypedArrayConstructors', Js('Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array').callprop('split', Js(',')))
        while (var.get('i')<var.get('l')):
            if var.put('Typed', var.get('global').get(var.get('TypedArrayConstructors').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                var.get('hide')(var.get('Typed').get('prototype'), var.get('TYPED'), Js(True))
                var.get('hide')(var.get('Typed').get('prototype'), var.get('VIEW'), Js(True))
            else:
                var.put('CONSTR', Js(False))
        var.get('module').put('exports', Js({'ABV':var.get('ABV'),'CONSTR':var.get('CONSTR'),'TYPED':var.get('TYPED'),'VIEW':var.get('VIEW')}))
    PyJs_anonymous_1290_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1291_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'id', 'px'])
        var.put('id', Js(0.0))
        var.put('px', var.get('Math').callprop('random'))
        @Js
        def PyJs_anonymous_1292_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            return Js('Symbol(').callprop('concat', (Js('') if _seq(var.get('key'),var.get('undefined')) else var.get('key')), Js(')_'), (var.put('id',Js(var.get('id').to_number())+Js(1))+var.get('px')).callprop('toString', Js(36.0)))
        PyJs_anonymous_1292_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1292_)
    PyJs_anonymous_1291_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1293_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'global', 'navigator'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('navigator', var.get('global').get('navigator'))
        var.get('module').put('exports', ((var.get('navigator') and var.get('navigator').get('userAgent')) or Js('')))
    PyJs_anonymous_1293_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1294_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'isObject', 'require', 'module'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1295_(it, TYPE, this, arguments, var=var):
            var = Scope({'it':it, 'TYPE':TYPE, 'this':this, 'arguments':arguments}, var)
            var.registers(['TYPE', 'it'])
            if (var.get('isObject')(var.get('it')).neg() or PyJsStrictNeq(var.get('it').get('_t'),var.get('TYPE'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(((Js('Incompatible receiver, ')+var.get('TYPE'))+Js(' required!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_1295_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1295_)
    PyJs_anonymous_1294_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1296_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'defineProperty', 'module', 'wksExt', 'global', 'core', 'LIBRARY'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('wksExt', var.get('require')(Js('./_wks-ext')))
        var.put('defineProperty', var.get('require')(Js('./_object-dp')).get('f'))
        @Js
        def PyJs_anonymous_1297_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['$Symbol', 'name'])
            var.put('$Symbol', (var.get('core').get('Symbol') or var.get('core').put('Symbol', (Js({}) if var.get('LIBRARY') else (var.get('global').get('Symbol') or Js({}))))))
            if ((var.get('name').callprop('charAt', Js(0.0))!=Js('_')) and var.get('$Symbol').contains(var.get('name')).neg()):
                var.get('defineProperty')(var.get('$Symbol'), var.get('name'), Js({'value':var.get('wksExt').callprop('f', var.get('name'))}))
        PyJs_anonymous_1297_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1297_)
    PyJs_anonymous_1296_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1298_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('exports').put('f', var.get('require')(Js('./_wks')))
    PyJs_anonymous_1298_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1299_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', '$exports', 'module', 'USE_SYMBOL', '_Symbol', 'uid', 'store'])
        var.put('store', var.get('require')(Js('./_shared'))(Js('wks')))
        var.put('uid', var.get('require')(Js('./_uid')))
        var.put('_Symbol', var.get('require')(Js('./_global')).get('Symbol'))
        var.put('USE_SYMBOL', (var.get('_Symbol',throw=False).typeof()==Js('function')))
        @Js
        def PyJs_anonymous_1300_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return (var.get('store').get(var.get('name')) or var.get('store').put(var.get('name'), ((var.get('USE_SYMBOL') and var.get('_Symbol').get(var.get('name'))) or (var.get('_Symbol') if var.get('USE_SYMBOL') else var.get('uid'))((Js('Symbol.')+var.get('name'))))))
        PyJs_anonymous_1300_._set_name('anonymous')
        var.put('$exports', var.get('module').put('exports', PyJs_anonymous_1300_))
        var.get('$exports').put('store', var.get('store'))
    PyJs_anonymous_1299_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1301_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'Iterators', 'ITERATOR', 'classof'])
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        @Js
        def PyJs_anonymous_1302_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it')!=var.get('undefined')):
                return ((var.get('it').get(var.get('ITERATOR')) or var.get('it').get('@@iterator')) or var.get('Iterators').get(var.get('classof')(var.get('it'))))
        PyJs_anonymous_1302_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_core')).put('getIteratorMethod', PyJs_anonymous_1302_))
    PyJs_anonymous_1301_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1303_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', '$re', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$re', var.get('require')(Js('./_replacer'))(JsRegExp('/[\\\\^$*+?.()|[\\]{}]/g'), Js('\\$&')))
        @Js
        def PyJs_escape_1304_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'escape':PyJs_escape_1304_}, var)
            var.registers(['it'])
            return var.get('$re')(var.get('it'))
        PyJs_escape_1304_._set_name('escape')
        var.get('$export')(var.get('$export').get('S'), Js('RegExp'), Js({'escape':PyJs_escape_1304_}))
    PyJs_anonymous_1303_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1305_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'copyWithin':var.get('require')(Js('./_array-copy-within'))}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('copyWithin'))
    PyJs_anonymous_1305_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1306_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$every', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$every', var.get('require')(Js('./_array-methods'))(Js(4.0)))
        @Js
        def PyJs_every_1307_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'every':PyJs_every_1307_}, var)
            var.registers(['callbackfn'])
            return var.get('$every')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_every_1307_._set_name('every')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('every'), Js(True)).neg())), Js('Array'), Js({'every':PyJs_every_1307_}))
    PyJs_anonymous_1306_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1308_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'fill':var.get('require')(Js('./_array-fill'))}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('fill'))
    PyJs_anonymous_1308_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1309_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$filter', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$filter', var.get('require')(Js('./_array-methods'))(Js(2.0)))
        @Js
        def PyJs_filter_1310_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'filter':PyJs_filter_1310_}, var)
            var.registers(['callbackfn'])
            return var.get('$filter')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_filter_1310_._set_name('filter')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('filter'), Js(True)).neg())), Js('Array'), Js({'filter':PyJs_filter_1310_}))
    PyJs_anonymous_1309_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1311_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'KEY', '$find', 'require', 'module', 'forced', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$find', var.get('require')(Js('./_array-methods'))(Js(6.0)))
        var.put('KEY', Js('findIndex'))
        var.put('forced', Js(True))
        if Js([]).contains(var.get('KEY')):
            @Js
            def PyJs_anonymous_1312_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('forced', Js(False))
            PyJs_anonymous_1312_._set_name('anonymous')
            var.get('Array')(Js(1.0)).callprop(var.get('KEY'), PyJs_anonymous_1312_)
        @Js
        def PyJs_findIndex_1313_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'findIndex':PyJs_findIndex_1313_}, var)
            var.registers(['callbackfn'])
            return var.get('$find')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_findIndex_1313_._set_name('findIndex')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('forced'))), Js('Array'), Js({'findIndex':PyJs_findIndex_1313_}))
        var.get('require')(Js('./_add-to-unscopables'))(var.get('KEY'))
    PyJs_anonymous_1311_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1314_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'KEY', '$find', 'require', 'module', 'forced', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$find', var.get('require')(Js('./_array-methods'))(Js(5.0)))
        var.put('KEY', Js('find'))
        var.put('forced', Js(True))
        if Js([]).contains(var.get('KEY')):
            @Js
            def PyJs_anonymous_1315_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('forced', Js(False))
            PyJs_anonymous_1315_._set_name('anonymous')
            var.get('Array')(Js(1.0)).callprop(var.get('KEY'), PyJs_anonymous_1315_)
        @Js
        def PyJs_find_1316_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'find':PyJs_find_1316_}, var)
            var.registers(['callbackfn'])
            return var.get('$find')(var.get(u"this"), var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_find_1316_._set_name('find')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('forced'))), Js('Array'), Js({'find':PyJs_find_1316_}))
        var.get('require')(Js('./_add-to-unscopables'))(var.get('KEY'))
    PyJs_anonymous_1314_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1317_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'STRICT', 'module', '$export', '$forEach'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$forEach', var.get('require')(Js('./_array-methods'))(Js(0.0)))
        var.put('STRICT', var.get('require')(Js('./_strict-method'))(Js([]).get('forEach'), Js(True)))
        @Js
        def PyJs_forEach_1318_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_1318_}, var)
            var.registers(['callbackfn'])
            return var.get('$forEach')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_forEach_1318_._set_name('forEach')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('STRICT').neg())), Js('Array'), Js({'forEach':PyJs_forEach_1318_}))
    PyJs_anonymous_1317_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1319_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'getIterFn', 'require', 'module', 'toLength', 'isArrayIter', 'toObject', 'call', '$export', 'createProperty', 'ctx'])
        Js('use strict')
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('call', var.get('require')(Js('./_iter-call')))
        var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('createProperty', var.get('require')(Js('./_create-property')))
        var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
        @Js
        def PyJs_anonymous_1320_(iter, this, arguments, var=var):
            var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter'])
            var.get('Array').callprop('from', var.get('iter'))
        PyJs_anonymous_1320_._set_name('anonymous')
        @Js
        def PyJs_InlineNonPyName_1321_(arrayLike, this, arguments, var=var):
            var = Scope({'arrayLike':arrayLike, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_1321_}, var)
            var.registers(['arrayLike', 'mapping', 'C', 'result', 'length', 'index', 'mapfn', 'O', 'aLen', 'iterator', 'step', 'iterFn'])
            var.put('O', var.get('toObject')(var.get('arrayLike')))
            var.put('C', (var.get(u"this") if (var.get(u"this",throw=False).typeof()==Js('function')) else var.get('Array')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('mapfn', (var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')))
            var.put('mapping', PyJsStrictNeq(var.get('mapfn'),var.get('undefined')))
            var.put('index', Js(0.0))
            var.put('iterFn', var.get('getIterFn')(var.get('O')))
            pass
            if var.get('mapping'):
                var.put('mapfn', var.get('ctx')(var.get('mapfn'), (var.get('arguments').get('2') if (var.get('aLen')>Js(2.0)) else var.get('undefined')), Js(2.0)))
            if ((var.get('iterFn')!=var.get('undefined')) and ((var.get('C')==var.get('Array')) and var.get('isArrayIter')(var.get('iterFn'))).neg()):
                #for JS loop
                PyJsComma(var.put('iterator', var.get('iterFn').callprop('call', var.get('O'))),var.put('result', var.get('C').create()))
                while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                    try:
                        var.get('createProperty')(var.get('result'), var.get('index'), (var.get('call')(var.get('iterator'), var.get('mapfn'), Js([var.get('step').get('value'), var.get('index')]), Js(True)) if var.get('mapping') else var.get('step').get('value')))
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            else:
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                #for JS loop
                var.put('result', var.get('C').create(var.get('length')))
                while (var.get('length')>var.get('index')):
                    try:
                        var.get('createProperty')(var.get('result'), var.get('index'), (var.get('mapfn')(var.get('O').get(var.get('index')), var.get('index')) if var.get('mapping') else var.get('O').get(var.get('index'))))
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            var.get('result').put('length', var.get('index'))
            return var.get('result')
        PyJs_InlineNonPyName_1321_._set_name('from')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_iter-detect'))(PyJs_anonymous_1320_).neg())), Js('Array'), Js({'from':PyJs_InlineNonPyName_1321_}))
    PyJs_anonymous_1319_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1322_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$indexOf', 'exports', 'require', 'module', 'NEGATIVE_ZERO', '$native', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$indexOf', var.get('require')(Js('./_array-includes'))(Js(False)))
        var.put('$native', Js([]).get('indexOf'))
        var.put('NEGATIVE_ZERO', (var.get('$native').neg().neg() and ((Js(1.0)/Js([Js(1.0)]).callprop('indexOf', Js(1.0), (-Js(0.0))))<Js(0.0))))
        @Js
        def PyJs_indexOf_1323_(searchElement, this, arguments, var=var):
            var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_1323_}, var)
            var.registers(['searchElement'])
            return ((var.get('$native').callprop('apply', var.get(u"this"), var.get('arguments')) or Js(0.0)) if var.get('NEGATIVE_ZERO') else var.get('$indexOf')(var.get(u"this"), var.get('searchElement'), var.get('arguments').get('1')))
        PyJs_indexOf_1323_._set_name('indexOf')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('NEGATIVE_ZERO') or var.get('require')(Js('./_strict-method'))(var.get('$native')).neg()))), Js('Array'), Js({'indexOf':PyJs_indexOf_1323_}))
    PyJs_anonymous_1322_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1324_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Array'), Js({'isArray':var.get('require')(Js('./_is-array'))}))
    PyJs_anonymous_1324_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1325_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'addToUnscopables', 'toIObject', 'Iterators', 'step'])
        Js('use strict')
        var.put('addToUnscopables', var.get('require')(Js('./_add-to-unscopables')))
        var.put('step', var.get('require')(Js('./_iter-step')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        @Js
        def PyJs_anonymous_1326_(iterated, kind, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'kind':kind, 'this':this, 'arguments':arguments}, var)
            var.registers(['kind', 'iterated'])
            var.get(u"this").put('_t', var.get('toIObject')(var.get('iterated')))
            var.get(u"this").put('_i', Js(0.0))
            var.get(u"this").put('_k', var.get('kind'))
        PyJs_anonymous_1326_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1327_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['kind', 'index', 'O'])
            var.put('O', var.get(u"this").get('_t'))
            var.put('kind', var.get(u"this").get('_k'))
            var.put('index', (var.get(u"this").put('_i',Js(var.get(u"this").get('_i').to_number())+Js(1))-Js(1)))
            if (var.get('O').neg() or (var.get('index')>=var.get('O').get('length'))):
                var.get(u"this").put('_t', var.get('undefined'))
                return var.get('step')(Js(1.0))
            if (var.get('kind')==Js('keys')):
                return var.get('step')(Js(0.0), var.get('index'))
            if (var.get('kind')==Js('values')):
                return var.get('step')(Js(0.0), var.get('O').get(var.get('index')))
            return var.get('step')(Js(0.0), Js([var.get('index'), var.get('O').get(var.get('index'))]))
        PyJs_anonymous_1327_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_iter-define'))(var.get('Array'), Js('Array'), PyJs_anonymous_1326_, PyJs_anonymous_1327_, Js('values')))
        var.get('Iterators').put('Arguments', var.get('Iterators').get('Array'))
        var.get('addToUnscopables')(Js('keys'))
        var.get('addToUnscopables')(Js('values'))
        var.get('addToUnscopables')(Js('entries'))
    PyJs_anonymous_1325_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1328_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toIObject', '$export', 'arrayJoin'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('arrayJoin', Js([]).get('join'))
        @Js
        def PyJs_join_1329_(separator, this, arguments, var=var):
            var = Scope({'separator':separator, 'this':this, 'arguments':arguments, 'join':PyJs_join_1329_}, var)
            var.registers(['separator'])
            return var.get('arrayJoin').callprop('call', var.get('toIObject')(var.get(u"this")), (Js(',') if _seq(var.get('separator'),var.get('undefined')) else var.get('separator')))
        PyJs_join_1329_._set_name('join')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*((var.get('require')(Js('./_iobject'))!=var.get('Object')) or var.get('require')(Js('./_strict-method'))(var.get('arrayJoin')).neg()))), Js('Array'), Js({'join':PyJs_join_1329_}))
    PyJs_anonymous_1328_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1330_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'toInteger', 'toIObject', 'NEGATIVE_ZERO', '$native', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('$native', Js([]).get('lastIndexOf'))
        var.put('NEGATIVE_ZERO', (var.get('$native').neg().neg() and ((Js(1.0)/Js([Js(1.0)]).callprop('lastIndexOf', Js(1.0), (-Js(0.0))))<Js(0.0))))
        @Js
        def PyJs_lastIndexOf_1331_(searchElement, this, arguments, var=var):
            var = Scope({'searchElement':searchElement, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_1331_}, var)
            var.registers(['searchElement', 'length', 'index', 'O'])
            if var.get('NEGATIVE_ZERO'):
                return (var.get('$native').callprop('apply', var.get(u"this"), var.get('arguments')) or Js(0.0))
            var.put('O', var.get('toIObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('index', (var.get('length')-Js(1.0)))
            if (var.get('arguments').get('length')>Js(1.0)):
                var.put('index', var.get('Math').callprop('min', var.get('index'), var.get('toInteger')(var.get('arguments').get('1'))))
            if (var.get('index')<Js(0.0)):
                var.put('index', (var.get('length')+var.get('index')))
            #for JS loop

            while (var.get('index')>=Js(0.0)):
                try:
                    if var.get('O').contains(var.get('index')):
                        if _seq(var.get('O').get(var.get('index')),var.get('searchElement')):
                            return (var.get('index') or Js(0.0))
                finally:
                        (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1))
            return (-Js(1.0))
        PyJs_lastIndexOf_1331_._set_name('lastIndexOf')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('NEGATIVE_ZERO') or var.get('require')(Js('./_strict-method'))(var.get('$native')).neg()))), Js('Array'), Js({'lastIndexOf':PyJs_lastIndexOf_1331_}))
    PyJs_anonymous_1330_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1332_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export', '$map'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$map', var.get('require')(Js('./_array-methods'))(Js(1.0)))
        @Js
        def PyJs_map_1333_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'map':PyJs_map_1333_}, var)
            var.registers(['callbackfn'])
            return var.get('$map')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_map_1333_._set_name('map')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('map'), Js(True)).neg())), Js('Array'), Js({'map':PyJs_map_1333_}))
    PyJs_anonymous_1332_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1334_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export', 'createProperty'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('createProperty', var.get('require')(Js('./_create-property')))
        @Js
        def PyJs_anonymous_1335_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['F'])
            @Js
            def PyJsHoisted_F_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_F_.func_name = 'F'
            var.put('F', PyJsHoisted_F_)
            pass
            return var.get('Array').get('of').callprop('call', var.get('F')).instanceof(var.get('F')).neg()
        PyJs_anonymous_1335_._set_name('anonymous')
        @Js
        def PyJs_of_1336_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_1336_}, var)
            var.registers(['aLen', 'result', 'index'])
            var.put('index', Js(0.0))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('result', (var.get(u"this") if (var.get(u"this",throw=False).typeof()==Js('function')) else var.get('Array')).create(var.get('aLen')))
            while (var.get('aLen')>var.get('index')):
                var.get('createProperty')(var.get('result'), var.get('index'), var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
            var.get('result').put('length', var.get('aLen'))
            return var.get('result')
        PyJs_of_1336_._set_name('of')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1335_))), Js('Array'), Js({'of':PyJs_of_1336_}))
    PyJs_anonymous_1334_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1337_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', '$reduce', 'module', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$reduce', var.get('require')(Js('./_array-reduce')))
        @Js
        def PyJs_reduceRight_1338_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduceRight':PyJs_reduceRight_1338_}, var)
            var.registers(['callbackfn'])
            return var.get('$reduce')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('length'), var.get('arguments').get('1'), Js(True))
        PyJs_reduceRight_1338_._set_name('reduceRight')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('reduceRight'), Js(True)).neg())), Js('Array'), Js({'reduceRight':PyJs_reduceRight_1338_}))
    PyJs_anonymous_1337_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1339_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', '$reduce', 'module', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$reduce', var.get('require')(Js('./_array-reduce')))
        @Js
        def PyJs_reduce_1340_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'reduce':PyJs_reduce_1340_}, var)
            var.registers(['callbackfn'])
            return var.get('$reduce')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('length'), var.get('arguments').get('1'), Js(False))
        PyJs_reduce_1340_._set_name('reduce')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('reduce'), Js(True)).neg())), Js('Array'), Js({'reduce':PyJs_reduce_1340_}))
    PyJs_anonymous_1339_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1341_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'arraySlice', 'module', 'toLength', 'html', 'toAbsoluteIndex', '$export', 'cof'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('html', var.get('require')(Js('./_html')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('arraySlice', Js([]).get('slice'))
        @Js
        def PyJs_anonymous_1342_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get('html'):
                var.get('arraySlice').callprop('call', var.get('html'))
        PyJs_anonymous_1342_._set_name('anonymous')
        @Js
        def PyJs_slice_1343_(begin, end, this, arguments, var=var):
            var = Scope({'begin':begin, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_1343_}, var)
            var.registers(['len', 'i', 'start', 'begin', 'cloned', 'size', 'end', 'klass', 'upTo'])
            var.put('len', var.get('toLength')(var.get(u"this").get('length')))
            var.put('klass', var.get('cof')(var.get(u"this")))
            var.put('end', (var.get('len') if _seq(var.get('end'),var.get('undefined')) else var.get('end')))
            if (var.get('klass')==Js('Array')):
                return var.get('arraySlice').callprop('call', var.get(u"this"), var.get('begin'), var.get('end'))
            var.put('start', var.get('toAbsoluteIndex')(var.get('begin'), var.get('len')))
            var.put('upTo', var.get('toAbsoluteIndex')(var.get('end'), var.get('len')))
            var.put('size', var.get('toLength')((var.get('upTo')-var.get('start'))))
            var.put('cloned', var.get('Array').create(var.get('size')))
            var.put('i', Js(0.0))
            #for JS loop

            while (var.get('i')<var.get('size')):
                try:
                    var.get('cloned').put(var.get('i'), (var.get(u"this").callprop('charAt', (var.get('start')+var.get('i'))) if (var.get('klass')==Js('String')) else var.get(u"this").get((var.get('start')+var.get('i')))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('cloned')
        PyJs_slice_1343_._set_name('slice')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1342_))), Js('Array'), Js({'slice':PyJs_slice_1343_}))
    PyJs_anonymous_1341_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1344_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', '$some', 'module', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$some', var.get('require')(Js('./_array-methods'))(Js(3.0)))
        @Js
        def PyJs_some_1345_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'some':PyJs_some_1345_}, var)
            var.registers(['callbackfn'])
            return var.get('$some')(var.get(u"this"), var.get('callbackfn'), var.get('arguments').get('1'))
        PyJs_some_1345_._set_name('some')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_strict-method'))(Js([]).get('some'), Js(True)).neg())), Js('Array'), Js({'some':PyJs_some_1345_}))
    PyJs_anonymous_1344_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1346_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'test', 'require', 'module', 'aFunction', 'fails', 'toObject', '$export', '$sort'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$sort', Js([]).get('sort'))
        var.put('test', Js([Js(1.0), Js(2.0), Js(3.0)]))
        @Js
        def PyJs_anonymous_1347_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('test').callprop('sort', var.get('undefined'))
        PyJs_anonymous_1347_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1348_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('test').callprop('sort', var.get(u"null"))
        PyJs_anonymous_1348_._set_name('anonymous')
        @Js
        def PyJs_sort_1349_(comparefn, this, arguments, var=var):
            var = Scope({'comparefn':comparefn, 'this':this, 'arguments':arguments, 'sort':PyJs_sort_1349_}, var)
            var.registers(['comparefn'])
            return (var.get('$sort').callprop('call', var.get('toObject')(var.get(u"this"))) if _seq(var.get('comparefn'),var.get('undefined')) else var.get('$sort').callprop('call', var.get('toObject')(var.get(u"this")), var.get('aFunction')(var.get('comparefn'))))
        PyJs_sort_1349_._set_name('sort')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*((var.get('fails')(PyJs_anonymous_1347_) or var.get('fails')(PyJs_anonymous_1348_).neg()) or var.get('require')(Js('./_strict-method'))(var.get('$sort')).neg()))), Js('Array'), Js({'sort':PyJs_sort_1349_}))
    PyJs_anonymous_1346_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1350_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_set-species'))(Js('Array'))
    PyJs_anonymous_1350_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1351_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_now_1352_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'now':PyJs_now_1352_}, var)
            var.registers([])
            return var.get('Date').create().callprop('getTime')
        PyJs_now_1352_._set_name('now')
        var.get('$export')(var.get('$export').get('S'), Js('Date'), Js({'now':PyJs_now_1352_}))
    PyJs_anonymous_1351_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1353_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'toISOString', 'require', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toISOString', var.get('require')(Js('./_date-to-iso-string')))
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*PyJsStrictNeq(var.get('Date').get('prototype').get('toISOString'),var.get('toISOString')))), Js('Date'), Js({'toISOString':var.get('toISOString')}))
    PyJs_anonymous_1353_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1354_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'toPrimitive', 'module', 'toObject', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        @Js
        def PyJs_anonymous_1355_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_toISOString_1356_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toISOString':PyJs_toISOString_1356_}, var)
                var.registers([])
                return Js(1.0)
            PyJs_toISOString_1356_._set_name('toISOString')
            return (PyJsStrictNeq(var.get('Date').create(var.get('NaN')).callprop('toJSON'),var.get(u"null")) or PyJsStrictNeq(var.get('Date').get('prototype').get('toJSON').callprop('call', Js({'toISOString':PyJs_toISOString_1356_})),Js(1.0)))
        PyJs_anonymous_1355_._set_name('anonymous')
        @Js
        def PyJs_toJSON_1357_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_1357_}, var)
            var.registers(['key', 'pv', 'O'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('pv', var.get('toPrimitive')(var.get('O')))
            return (var.get(u"null") if ((var.get('pv',throw=False).typeof()==Js('number')) and var.get('isFinite')(var.get('pv')).neg()) else var.get('O').callprop('toISOString'))
        PyJs_toJSON_1357_._set_name('toJSON')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1355_))), Js('Date'), Js({'toJSON':PyJs_toJSON_1357_}))
    PyJs_anonymous_1354_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1358_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'proto', 'TO_PRIMITIVE'])
        var.put('TO_PRIMITIVE', var.get('require')(Js('./_wks'))(Js('toPrimitive')))
        var.put('proto', var.get('Date').get('prototype'))
        if var.get('proto').contains(var.get('TO_PRIMITIVE')).neg():
            var.get('require')(Js('./_hide'))(var.get('proto'), var.get('TO_PRIMITIVE'), var.get('require')(Js('./_date-to-primitive')))
    PyJs_anonymous_1358_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1359_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'INVALID_DATE', 'module', 'getTime', '$toString', 'TO_STRING', 'DateProto'])
        var.put('DateProto', var.get('Date').get('prototype'))
        var.put('INVALID_DATE', Js('Invalid Date'))
        var.put('TO_STRING', Js('toString'))
        var.put('$toString', var.get('DateProto').get(var.get('TO_STRING')))
        var.put('getTime', var.get('DateProto').get('getTime'))
        if ((var.get('Date').create(var.get('NaN'))+Js(''))!=var.get('INVALID_DATE')):
            @Js
            def PyJs_toString_1360_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1360_}, var)
                var.registers(['value'])
                var.put('value', var.get('getTime').callprop('call', var.get(u"this")))
                return (var.get('$toString').callprop('call', var.get(u"this")) if _seq(var.get('value'),var.get('value')) else var.get('INVALID_DATE'))
            PyJs_toString_1360_._set_name('toString')
            var.get('require')(Js('./_redefine'))(var.get('DateProto'), var.get('TO_STRING'), PyJs_toString_1360_)
    PyJs_anonymous_1359_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1361_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('Function'), Js({'bind':var.get('require')(Js('./_bind'))}))
    PyJs_anonymous_1361_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1362_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'getPrototypeOf', 'module', 'isObject', 'HAS_INSTANCE', 'FunctionProto'])
        Js('use strict')
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('HAS_INSTANCE', var.get('require')(Js('./_wks'))(Js('hasInstance')))
        var.put('FunctionProto', var.get('Function').get('prototype'))
        if var.get('FunctionProto').contains(var.get('HAS_INSTANCE')).neg():
            @Js
            def PyJs_value_1363_(O, this, arguments, var=var):
                var = Scope({'O':O, 'this':this, 'arguments':arguments, 'value':PyJs_value_1363_}, var)
                var.registers(['O'])
                if ((var.get(u"this",throw=False).typeof()!=Js('function')) or var.get('isObject')(var.get('O')).neg()):
                    return Js(False)
                if var.get('isObject')(var.get(u"this").get('prototype')).neg():
                    return var.get('O').instanceof(var.get(u"this"))
                while var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                    if _seq(var.get(u"this").get('prototype'),var.get('O')):
                        return Js(True)
                return Js(False)
            PyJs_value_1363_._set_name('value')
            var.get('require')(Js('./_object-dp')).callprop('f', var.get('FunctionProto'), var.get('HAS_INSTANCE'), Js({'value':PyJs_value_1363_}))
    PyJs_anonymous_1362_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1364_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'FProto', 'NAME', 'dP', 'nameRE'])
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('FProto', var.get('Function').get('prototype'))
        var.put('nameRE', JsRegExp('/^\\s*function ([^ (]*)/'))
        var.put('NAME', Js('name'))
        @Js
        def PyJs_get_1365_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1365_}, var)
            var.registers([])
            try:
                return (Js('')+var.get(u"this")).callprop('match', var.get('nameRE')).get('1')
            except PyJsException as PyJsTempException:
                PyJsHolder_65_45377271 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js('')
                finally:
                    if PyJsHolder_65_45377271 is not None:
                        var.own['e'] = PyJsHolder_65_45377271
                    else:
                        del var.own['e']
                    del PyJsHolder_65_45377271
        PyJs_get_1365_._set_name('get')
        (var.get('FProto').contains(var.get('NAME')) or (var.get('require')(Js('./_descriptors')) and var.get('dP')(var.get('FProto'), var.get('NAME'), Js({'configurable':Js(True),'get':PyJs_get_1365_}))))
    PyJs_anonymous_1364_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1366_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'MAP', 'validate', 'module', 'strong'])
        Js('use strict')
        var.put('strong', var.get('require')(Js('./_collection-strong')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('MAP', Js('Map'))
        @Js
        def PyJs_anonymous_1367_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments}, var)
            var.registers(['get'])
            @Js
            def PyJs_Map_1368_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'Map':PyJs_Map_1368_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_Map_1368_._set_name('Map')
            return PyJs_Map_1368_
        PyJs_anonymous_1367_._set_name('anonymous')
        @Js
        def PyJs_get_1369_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_1369_}, var)
            var.registers(['entry', 'key'])
            var.put('entry', var.get('strong').callprop('getEntry', var.get('validate')(var.get(u"this"), var.get('MAP')), var.get('key')))
            return (var.get('entry') and var.get('entry').get('v'))
        PyJs_get_1369_._set_name('get')
        @Js
        def PyJs_set_1370_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_1370_}, var)
            var.registers(['key', 'value'])
            return var.get('strong').callprop('def', var.get('validate')(var.get(u"this"), var.get('MAP')), (Js(0.0) if _seq(var.get('key'),Js(0.0)) else var.get('key')), var.get('value'))
        PyJs_set_1370_._set_name('set')
        var.get('module').put('exports', var.get('require')(Js('./_collection'))(var.get('MAP'), PyJs_anonymous_1367_, Js({'get':PyJs_get_1369_,'set':PyJs_set_1370_}), var.get('strong'), Js(True)))
    PyJs_anonymous_1366_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1371_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'sqrt', 'require', 'module', '$export', '$acosh', 'log1p'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('log1p', var.get('require')(Js('./_math-log1p')))
        var.put('sqrt', var.get('Math').get('sqrt'))
        var.put('$acosh', var.get('Math').get('acosh'))
        @Js
        def PyJs_acosh_1372_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'acosh':PyJs_acosh_1372_}, var)
            var.registers(['x'])
            return (var.get('NaN') if (var.put('x', (+var.get('x')))<Js(1.0)) else ((var.get('Math').callprop('log', var.get('x'))+var.get('Math').get('LN2')) if (var.get('x')>Js(94906265.62425156)) else var.get('log1p')(((var.get('x')-Js(1.0))+(var.get('sqrt')((var.get('x')-Js(1.0)))*var.get('sqrt')((var.get('x')+Js(1.0))))))))
        PyJs_acosh_1372_._set_name('acosh')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*((var.get('$acosh') and (var.get('Math').callprop('floor', var.get('$acosh')(var.get('Number').get('MAX_VALUE')))==Js(710.0))) and (var.get('$acosh')(var.get('Infinity'))==var.get('Infinity'))).neg())), Js('Math'), Js({'acosh':PyJs_acosh_1372_}))
    PyJs_anonymous_1371_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1373_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'asinh', '$export', '$asinh'])
        @Js
        def PyJsHoisted_asinh_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return (var.get('x') if (var.get('isFinite')(var.put('x', (+var.get('x')))).neg() or (var.get('x')==Js(0.0))) else ((-var.get('asinh')((-var.get('x')))) if (var.get('x')<Js(0.0)) else var.get('Math').callprop('log', (var.get('x')+var.get('Math').callprop('sqrt', ((var.get('x')*var.get('x'))+Js(1.0)))))))
        PyJsHoisted_asinh_.func_name = 'asinh'
        var.put('asinh', PyJsHoisted_asinh_)
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$asinh', var.get('Math').get('asinh'))
        pass
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$asinh') and ((Js(1.0)/var.get('$asinh')(Js(0.0)))>Js(0.0))).neg())), Js('Math'), Js({'asinh':var.get('asinh')}))
    PyJs_anonymous_1373_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1374_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', '$atanh', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$atanh', var.get('Math').get('atanh'))
        @Js
        def PyJs_atanh_1375_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'atanh':PyJs_atanh_1375_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))==Js(0.0)) else (var.get('Math').callprop('log', ((Js(1.0)+var.get('x'))/(Js(1.0)-var.get('x'))))/Js(2.0)))
        PyJs_atanh_1375_._set_name('atanh')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$atanh') and ((Js(1.0)/var.get('$atanh')((-Js(0.0))))<Js(0.0))).neg())), Js('Math'), Js({'atanh':PyJs_atanh_1375_}))
    PyJs_anonymous_1374_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1376_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'sign', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('sign', var.get('require')(Js('./_math-sign')))
        @Js
        def PyJs_cbrt_1377_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'cbrt':PyJs_cbrt_1377_}, var)
            var.registers(['x'])
            return (var.get('sign')(var.put('x', (+var.get('x'))))*var.get('Math').callprop('pow', var.get('Math').callprop('abs', var.get('x')), (Js(1.0)/Js(3.0))))
        PyJs_cbrt_1377_._set_name('cbrt')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'cbrt':PyJs_cbrt_1377_}))
    PyJs_anonymous_1376_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1378_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_clz32_1379_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'clz32':PyJs_clz32_1379_}, var)
            var.registers(['x'])
            return ((Js(31.0)-var.get('Math').callprop('floor', (var.get('Math').callprop('log', (var.get('x')+Js(0.5)))*var.get('Math').get('LOG2E')))) if var.put('x', Js(0.0), '>>>') else Js(32.0))
        PyJs_clz32_1379_._set_name('clz32')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'clz32':PyJs_clz32_1379_}))
    PyJs_anonymous_1378_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1380_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'exp', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('exp', var.get('Math').get('exp'))
        @Js
        def PyJs_cosh_1381_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'cosh':PyJs_cosh_1381_}, var)
            var.registers(['x'])
            return ((var.get('exp')(var.put('x', (+var.get('x'))))+var.get('exp')((-var.get('x'))))/Js(2.0))
        PyJs_cosh_1381_._set_name('cosh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'cosh':PyJs_cosh_1381_}))
    PyJs_anonymous_1380_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1382_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$expm1', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$expm1', var.get('require')(Js('./_math-expm1')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$expm1')!=var.get('Math').get('expm1')))), Js('Math'), Js({'expm1':var.get('$expm1')}))
    PyJs_anonymous_1382_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1383_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'fround':var.get('require')(Js('./_math-fround'))}))
    PyJs_anonymous_1383_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1384_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'abs', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('abs', var.get('Math').get('abs'))
        @Js
        def PyJs_hypot_1385_(value1, value2, this, arguments, var=var):
            var = Scope({'value1':value1, 'value2':value2, 'this':this, 'arguments':arguments, 'hypot':PyJs_hypot_1385_}, var)
            var.registers(['i', 'value2', 'arg', 'div', 'larg', 'aLen', 'sum', 'value1'])
            var.put('sum', Js(0.0))
            var.put('i', Js(0.0))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('larg', Js(0.0))
            pass
            while (var.get('i')<var.get('aLen')):
                var.put('arg', var.get('abs')(var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                if (var.get('larg')<var.get('arg')):
                    var.put('div', (var.get('larg')/var.get('arg')))
                    var.put('sum', (((var.get('sum')*var.get('div'))*var.get('div'))+Js(1.0)))
                    var.put('larg', var.get('arg'))
                else:
                    if (var.get('arg')>Js(0.0)):
                        var.put('div', (var.get('arg')/var.get('larg')))
                        var.put('sum', (var.get('div')*var.get('div')), '+')
                    else:
                        var.put('sum', var.get('arg'), '+')
            return (var.get('Infinity') if _seq(var.get('larg'),var.get('Infinity')) else (var.get('larg')*var.get('Math').callprop('sqrt', var.get('sum'))))
        PyJs_hypot_1385_._set_name('hypot')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'hypot':PyJs_hypot_1385_}))
    PyJs_anonymous_1384_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1386_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$imul', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$imul', var.get('Math').get('imul'))
        @Js
        def PyJs_anonymous_1387_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return ((var.get('$imul')(Js(4294967295), Js(5.0))!=(-Js(5.0))) or (var.get('$imul').get('length')!=Js(2.0)))
        PyJs_anonymous_1387_._set_name('anonymous')
        @Js
        def PyJs_imul_1388_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments, 'imul':PyJs_imul_1388_}, var)
            var.registers(['xl', 'yn', 'x', 'y', 'xn', 'yl', 'UINT16'])
            var.put('UINT16', Js(65535))
            var.put('xn', (+var.get('x')))
            var.put('yn', (+var.get('y')))
            var.put('xl', (var.get('UINT16')&var.get('xn')))
            var.put('yl', (var.get('UINT16')&var.get('yn')))
            return (Js(0.0)|((var.get('xl')*var.get('yl'))+PyJsBshift(((((var.get('UINT16')&PyJsBshift(var.get('xn'),Js(16.0)))*var.get('yl'))+(var.get('xl')*(var.get('UINT16')&PyJsBshift(var.get('yn'),Js(16.0)))))<<Js(16.0)),Js(0.0))))
        PyJs_imul_1388_._set_name('imul')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1387_))), Js('Math'), Js({'imul':PyJs_imul_1388_}))
    PyJs_anonymous_1386_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1389_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_log10_1390_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log10':PyJs_log10_1390_}, var)
            var.registers(['x'])
            return (var.get('Math').callprop('log', var.get('x'))*var.get('Math').get('LOG10E'))
        PyJs_log10_1390_._set_name('log10')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'log10':PyJs_log10_1390_}))
    PyJs_anonymous_1389_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1391_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'log1p':var.get('require')(Js('./_math-log1p'))}))
    PyJs_anonymous_1391_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1392_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_log2_1393_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log2':PyJs_log2_1393_}, var)
            var.registers(['x'])
            return (var.get('Math').callprop('log', var.get('x'))/var.get('Math').get('LN2'))
        PyJs_log2_1393_._set_name('log2')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'log2':PyJs_log2_1393_}))
    PyJs_anonymous_1392_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1394_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'sign':var.get('require')(Js('./_math-sign'))}))
    PyJs_anonymous_1394_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1395_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'expm1', 'exp', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('expm1', var.get('require')(Js('./_math-expm1')))
        var.put('exp', var.get('Math').get('exp'))
        @Js
        def PyJs_anonymous_1396_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('Math').callprop('sinh', (-Js(2e-17))).neg()!=(-Js(2e-17)))
        PyJs_anonymous_1396_._set_name('anonymous')
        @Js
        def PyJs_sinh_1397_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'sinh':PyJs_sinh_1397_}, var)
            var.registers(['x'])
            return (((var.get('expm1')(var.get('x'))-var.get('expm1')((-var.get('x'))))/Js(2.0)) if (var.get('Math').callprop('abs', var.put('x', (+var.get('x'))))<Js(1.0)) else ((var.get('exp')((var.get('x')-Js(1.0)))-var.get('exp')(((-var.get('x'))-Js(1.0))))*(var.get('Math').get('E')/Js(2.0))))
        PyJs_sinh_1397_._set_name('sinh')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1396_))), Js('Math'), Js({'sinh':PyJs_sinh_1397_}))
    PyJs_anonymous_1395_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1398_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'expm1', 'exp', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('expm1', var.get('require')(Js('./_math-expm1')))
        var.put('exp', var.get('Math').get('exp'))
        @Js
        def PyJs_tanh_1399_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'tanh':PyJs_tanh_1399_}, var)
            var.registers(['x', 'a', 'b'])
            var.put('a', var.get('expm1')(var.put('x', (+var.get('x')))))
            var.put('b', var.get('expm1')((-var.get('x'))))
            return (Js(1.0) if (var.get('a')==var.get('Infinity')) else ((-Js(1.0)) if (var.get('b')==var.get('Infinity')) else ((var.get('a')-var.get('b'))/(var.get('exp')(var.get('x'))+var.get('exp')((-var.get('x')))))))
        PyJs_tanh_1399_._set_name('tanh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'tanh':PyJs_tanh_1399_}))
    PyJs_anonymous_1398_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1400_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_trunc_1401_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'trunc':PyJs_trunc_1401_}, var)
            var.registers(['it'])
            return (var.get('Math').get('floor') if (var.get('it')>Js(0.0)) else var.get('Math').get('ceil'))(var.get('it'))
        PyJs_trunc_1401_._set_name('trunc')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'trunc':PyJs_trunc_1401_}))
    PyJs_anonymous_1400_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1402_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['inheritIfRequired', 'module', 'j', 'BROKEN_COF', 'fails', 'cof', 'has', 'Base', 'gOPD', 'toNumber', 'dP', 'NUMBER', 'keys', 'require', 'toPrimitive', 'proto', 'TRIM', 'exports', 'gOPN', 'global', 'key', '$Number', '$trim'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')).get('f'))
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        var.put('NUMBER', Js('Number'))
        var.put('$Number', var.get('global').get(var.get('NUMBER')))
        var.put('Base', var.get('$Number'))
        var.put('proto', var.get('$Number').get('prototype'))
        var.put('BROKEN_COF', (var.get('cof')(var.get('require')(Js('./_object-create'))(var.get('proto')))==var.get('NUMBER')))
        var.put('TRIM', var.get('String').get('prototype').contains(Js('trim')))
        @Js
        def PyJs_toNumber_1403_(argument, this, arguments, var=var):
            var = Scope({'argument':argument, 'this':this, 'arguments':arguments, 'toNumber':PyJs_toNumber_1403_}, var)
            var.registers(['first', 'digits', 'argument', 'third', 'i', 'l', 'it', 'code', 'maxCode', 'radix'])
            var.put('it', var.get('toPrimitive')(var.get('argument'), Js(False)))
            if ((var.get('it',throw=False).typeof()==Js('string')) and (var.get('it').get('length')>Js(2.0))):
                var.put('it', (var.get('it').callprop('trim') if var.get('TRIM') else var.get('$trim')(var.get('it'), Js(3.0))))
                var.put('first', var.get('it').callprop('charCodeAt', Js(0.0)))
                pass
                if (_seq(var.get('first'),Js(43.0)) or _seq(var.get('first'),Js(45.0))):
                    var.put('third', var.get('it').callprop('charCodeAt', Js(2.0)))
                    if (_seq(var.get('third'),Js(88.0)) or _seq(var.get('third'),Js(120.0))):
                        return var.get('NaN')
                else:
                    if _seq(var.get('first'),Js(48.0)):
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('it').callprop('charCodeAt', Js(1.0)))
                            if SWITCHED or _seq(CONDITION, Js(66.0)):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js(98.0)):
                                SWITCHED = True
                                var.put('radix', Js(2.0))
                                var.put('maxCode', Js(49.0))
                                break
                            if SWITCHED or _seq(CONDITION, Js(79.0)):
                                SWITCHED = True
                                pass
                            if SWITCHED or _seq(CONDITION, Js(111.0)):
                                SWITCHED = True
                                var.put('radix', Js(8.0))
                                var.put('maxCode', Js(55.0))
                                break
                            if True:
                                SWITCHED = True
                                return (+var.get('it'))
                            SWITCHED = True
                            break
                        #for JS loop
                        var.put('digits', var.get('it').callprop('slice', Js(2.0)))
                        var.put('i', Js(0.0))
                        var.put('l', var.get('digits').get('length'))
                        while (var.get('i')<var.get('l')):
                            try:
                                var.put('code', var.get('digits').callprop('charCodeAt', var.get('i')))
                                if ((var.get('code')<Js(48.0)) or (var.get('code')>var.get('maxCode'))):
                                    return var.get('NaN')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        return var.get('parseInt')(var.get('digits'), var.get('radix'))
            return (+var.get('it'))
        PyJs_toNumber_1403_._set_name('toNumber')
        var.put('toNumber', PyJs_toNumber_1403_)
        if ((var.get('$Number')(Js(' 0o1')).neg() or var.get('$Number')(Js('0b1')).neg()) or var.get('$Number')(Js('+0x1'))):
            @Js
            def PyJs_Number_1404_(value, this, arguments, var=var):
                var = Scope({'value':value, 'this':this, 'arguments':arguments, 'Number':PyJs_Number_1404_}, var)
                var.registers(['that', 'value', 'it'])
                var.put('it', (Js(0.0) if (var.get('arguments').get('length')<Js(1.0)) else var.get('value')))
                var.put('that', var.get(u"this"))
                @Js
                def PyJs_anonymous_1405_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('proto').get('valueOf').callprop('call', var.get('that'))
                PyJs_anonymous_1405_._set_name('anonymous')
                return (var.get('inheritIfRequired')(var.get('Base').create(var.get('toNumber')(var.get('it'))), var.get('that'), var.get('$Number')) if (var.get('that').instanceof(var.get('$Number')) and (var.get('fails')(PyJs_anonymous_1405_) if var.get('BROKEN_COF') else (var.get('cof')(var.get('that'))!=var.get('NUMBER')))) else var.get('toNumber')(var.get('it')))
            PyJs_Number_1404_._set_name('Number')
            var.put('$Number', PyJs_Number_1404_)
            #for JS loop
            var.put('keys', (var.get('gOPN')(var.get('Base')) if var.get('require')(Js('./_descriptors')) else ((Js('MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,')+Js('EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,'))+Js('MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger')).callprop('split', Js(','))))
            var.put('j', Js(0.0))
            while (var.get('keys').get('length')>var.get('j')):
                try:
                    if (var.get('has')(var.get('Base'), var.put('key', var.get('keys').get(var.get('j')))) and var.get('has')(var.get('$Number'), var.get('key')).neg()):
                        var.get('dP')(var.get('$Number'), var.get('key'), var.get('gOPD')(var.get('Base'), var.get('key')))
                finally:
                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
            var.get('$Number').put('prototype', var.get('proto'))
            var.get('proto').put('constructor', var.get('$Number'))
            var.get('require')(Js('./_redefine'))(var.get('global'), var.get('NUMBER'), var.get('$Number'))
    PyJs_anonymous_1402_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1406_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'EPSILON':var.get('Math').callprop('pow', Js(2.0), (-Js(52.0)))}))
    PyJs_anonymous_1406_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1407_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '_isFinite', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('_isFinite', var.get('require')(Js('./_global')).get('isFinite'))
        @Js
        def PyJs_isFinite_1408_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isFinite':PyJs_isFinite_1408_}, var)
            var.registers(['it'])
            return ((var.get('it',throw=False).typeof()==Js('number')) and var.get('_isFinite')(var.get('it')))
        PyJs_isFinite_1408_._set_name('isFinite')
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isFinite':PyJs_isFinite_1408_}))
    PyJs_anonymous_1407_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1409_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isInteger':var.get('require')(Js('./_is-integer'))}))
    PyJs_anonymous_1409_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1410_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_isNaN_1411_(number, this, arguments, var=var):
            var = Scope({'number':number, 'this':this, 'arguments':arguments, 'isNaN':PyJs_isNaN_1411_}, var)
            var.registers(['number'])
            return (var.get('number')!=var.get('number'))
        PyJs_isNaN_1411_._set_name('isNaN')
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isNaN':PyJs_isNaN_1411_}))
    PyJs_anonymous_1410_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1412_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'abs', 'isInteger', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('isInteger', var.get('require')(Js('./_is-integer')))
        var.put('abs', var.get('Math').get('abs'))
        @Js
        def PyJs_isSafeInteger_1413_(number, this, arguments, var=var):
            var = Scope({'number':number, 'this':this, 'arguments':arguments, 'isSafeInteger':PyJs_isSafeInteger_1413_}, var)
            var.registers(['number'])
            return (var.get('isInteger')(var.get('number')) and (var.get('abs')(var.get('number'))<=Js(9007199254740991)))
        PyJs_isSafeInteger_1413_._set_name('isSafeInteger')
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'isSafeInteger':PyJs_isSafeInteger_1413_}))
    PyJs_anonymous_1412_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1414_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'MAX_SAFE_INTEGER':Js(9007199254740991)}))
    PyJs_anonymous_1414_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1415_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Number'), Js({'MIN_SAFE_INTEGER':(-Js(9007199254740991))}))
    PyJs_anonymous_1415_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1416_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$parseFloat', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseFloat', var.get('require')(Js('./_parse-float')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('Number').get('parseFloat')!=var.get('$parseFloat')))), Js('Number'), Js({'parseFloat':var.get('$parseFloat')}))
    PyJs_anonymous_1416_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1417_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$parseInt', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseInt', var.get('require')(Js('./_parse-int')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('Number').get('parseInt')!=var.get('$parseInt')))), Js('Number'), Js({'parseInt':var.get('$parseInt')}))
    PyJs_anonymous_1417_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1418_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'repeat', 'log', 'require', 'module', 'numToString', 'floor', 'divide', 'aNumberValue', 'pow', 'toInteger', 'multiply', 'ZERO', '$export', 'data', '$toFixed', 'ERROR'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('aNumberValue', var.get('require')(Js('./_a-number-value')))
        var.put('repeat', var.get('require')(Js('./_string-repeat')))
        var.put('$toFixed', Js(1.0).get('toFixed'))
        var.put('floor', var.get('Math').get('floor'))
        var.put('data', Js([Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0), Js(0.0)]))
        var.put('ERROR', Js('Number.toFixed: incorrect invocation!'))
        var.put('ZERO', Js('0'))
        @Js
        def PyJs_multiply_1419_(n, c, this, arguments, var=var):
            var = Scope({'n':n, 'c':c, 'this':this, 'arguments':arguments, 'multiply':PyJs_multiply_1419_}, var)
            var.registers(['i', 'c2', 'c', 'n'])
            var.put('i', (-Js(1.0)))
            var.put('c2', var.get('c'))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<Js(6.0)):
                var.put('c2', (var.get('n')*var.get('data').get(var.get('i'))), '+')
                var.get('data').put(var.get('i'), (var.get('c2')%Js(10000000.0)))
                var.put('c2', var.get('floor')((var.get('c2')/Js(10000000.0))))
        PyJs_multiply_1419_._set_name('multiply')
        var.put('multiply', PyJs_multiply_1419_)
        @Js
        def PyJs_divide_1420_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, 'divide':PyJs_divide_1420_}, var)
            var.registers(['i', 'c', 'n'])
            var.put('i', Js(6.0))
            var.put('c', Js(0.0))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)):
                var.put('c', var.get('data').get(var.get('i')), '+')
                var.get('data').put(var.get('i'), var.get('floor')((var.get('c')/var.get('n'))))
                var.put('c', ((var.get('c')%var.get('n'))*Js(10000000.0)))
        PyJs_divide_1420_._set_name('divide')
        var.put('divide', PyJs_divide_1420_)
        @Js
        def PyJs_numToString_1421_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'numToString':PyJs_numToString_1421_}, var)
            var.registers(['i', 't', 's'])
            var.put('i', Js(6.0))
            var.put('s', Js(''))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)):
                if ((PyJsStrictNeq(var.get('s'),Js('')) or _seq(var.get('i'),Js(0.0))) or PyJsStrictNeq(var.get('data').get(var.get('i')),Js(0.0))):
                    var.put('t', var.get('String')(var.get('data').get(var.get('i'))))
                    var.put('s', (var.get('t') if _seq(var.get('s'),Js('')) else ((var.get('s')+var.get('repeat').callprop('call', var.get('ZERO'), (Js(7.0)-var.get('t').get('length'))))+var.get('t'))))
            return var.get('s')
        PyJs_numToString_1421_._set_name('numToString')
        var.put('numToString', PyJs_numToString_1421_)
        @Js
        def PyJs_pow_1422_(x, n, acc, this, arguments, var=var):
            var = Scope({'x':x, 'n':n, 'acc':acc, 'this':this, 'arguments':arguments, 'pow':PyJs_pow_1422_}, var)
            var.registers(['x', 'n', 'acc'])
            return (var.get('acc') if _seq(var.get('n'),Js(0.0)) else (var.get('pow')(var.get('x'), (var.get('n')-Js(1.0)), (var.get('acc')*var.get('x'))) if _seq((var.get('n')%Js(2.0)),Js(1.0)) else var.get('pow')((var.get('x')*var.get('x')), (var.get('n')/Js(2.0)), var.get('acc'))))
        PyJs_pow_1422_._set_name('pow')
        var.put('pow', PyJs_pow_1422_)
        @Js
        def PyJs_log_1423_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log':PyJs_log_1423_}, var)
            var.registers(['x2', 'x', 'n'])
            var.put('n', Js(0.0))
            var.put('x2', var.get('x'))
            while (var.get('x2')>=Js(4096.0)):
                var.put('n', Js(12.0), '+')
                var.put('x2', Js(4096.0), '/')
            while (var.get('x2')>=Js(2.0)):
                var.put('n', Js(1.0), '+')
                var.put('x2', Js(2.0), '/')
            return var.get('n')
        PyJs_log_1423_._set_name('log')
        var.put('log', PyJs_log_1423_)
        def PyJs_LONG_1425_(var=var):
            @Js
            def PyJs_anonymous_1424_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('$toFixed').callprop('call', Js({}))
            PyJs_anonymous_1424_._set_name('anonymous')
            return ((var.get('$toFixed').neg().neg() and (((PyJsStrictNeq(Js(8e-05).callprop('toFixed', Js(3.0)),Js('0.000')) or PyJsStrictNeq(Js(0.9).callprop('toFixed', Js(0.0)),Js('1'))) or PyJsStrictNeq(Js(1.255).callprop('toFixed', Js(2.0)),Js('1.25'))) or PyJsStrictNeq(Js(1.0000000000000001e+18).callprop('toFixed', Js(0.0)),Js('1000000000000000128')))) or var.get('require')(Js('./_fails'))(PyJs_anonymous_1424_).neg())
        @Js
        def PyJs_toFixed_1426_(fractionDigits, this, arguments, var=var):
            var = Scope({'fractionDigits':fractionDigits, 'this':this, 'arguments':arguments, 'toFixed':PyJs_toFixed_1426_}, var)
            var.registers(['z', 'f', 'j', 'e', 'x', 'm', 'k', 'fractionDigits', 's'])
            var.put('x', var.get('aNumberValue')(var.get(u"this"), var.get('ERROR')))
            var.put('f', var.get('toInteger')(var.get('fractionDigits')))
            var.put('s', Js(''))
            var.put('m', var.get('ZERO'))
            pass
            if ((var.get('f')<Js(0.0)) or (var.get('f')>Js(20.0))):
                PyJsTempException = JsToPyException(var.get('RangeError')(var.get('ERROR')))
                raise PyJsTempException
            if (var.get('x')!=var.get('x')):
                return Js('NaN')
            if ((var.get('x')<=(-Js(1e+21))) or (var.get('x')>=Js(1e+21))):
                return var.get('String')(var.get('x'))
            if (var.get('x')<Js(0.0)):
                var.put('s', Js('-'))
                var.put('x', (-var.get('x')))
            if (var.get('x')>Js(1e-21)):
                var.put('e', (var.get('log')((var.get('x')*var.get('pow')(Js(2.0), Js(69.0), Js(1.0))))-Js(69.0)))
                var.put('z', ((var.get('x')*var.get('pow')(Js(2.0), (-var.get('e')), Js(1.0))) if (var.get('e')<Js(0.0)) else (var.get('x')/var.get('pow')(Js(2.0), var.get('e'), Js(1.0)))))
                var.put('z', Js(4503599627370496), '*')
                var.put('e', (Js(52.0)-var.get('e')))
                if (var.get('e')>Js(0.0)):
                    var.get('multiply')(Js(0.0), var.get('z'))
                    var.put('j', var.get('f'))
                    while (var.get('j')>=Js(7.0)):
                        var.get('multiply')(Js(10000000.0), Js(0.0))
                        var.put('j', Js(7.0), '-')
                    var.get('multiply')(var.get('pow')(Js(10.0), var.get('j'), Js(1.0)), Js(0.0))
                    var.put('j', (var.get('e')-Js(1.0)))
                    while (var.get('j')>=Js(23.0)):
                        var.get('divide')((Js(1.0)<<Js(23.0)))
                        var.put('j', Js(23.0), '-')
                    var.get('divide')((Js(1.0)<<var.get('j')))
                    var.get('multiply')(Js(1.0), Js(1.0))
                    var.get('divide')(Js(2.0))
                    var.put('m', var.get('numToString')())
                else:
                    var.get('multiply')(Js(0.0), var.get('z'))
                    var.get('multiply')((Js(1.0)<<(-var.get('e'))), Js(0.0))
                    var.put('m', (var.get('numToString')()+var.get('repeat').callprop('call', var.get('ZERO'), var.get('f'))))
            if (var.get('f')>Js(0.0)):
                var.put('k', var.get('m').get('length'))
                var.put('m', (var.get('s')+(((Js('0.')+var.get('repeat').callprop('call', var.get('ZERO'), (var.get('f')-var.get('k'))))+var.get('m')) if (var.get('k')<=var.get('f')) else ((var.get('m').callprop('slice', Js(0.0), (var.get('k')-var.get('f')))+Js('.'))+var.get('m').callprop('slice', (var.get('k')-var.get('f')))))))
            else:
                var.put('m', (var.get('s')+var.get('m')))
            return var.get('m')
        PyJs_toFixed_1426_._set_name('toFixed')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*PyJs_LONG_1425_())), Js('Number'), Js({'toFixed':PyJs_toFixed_1426_}))
    PyJs_anonymous_1418_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1427_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'aNumberValue', '$toPrecision', '$fails', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$fails', var.get('require')(Js('./_fails')))
        var.put('aNumberValue', var.get('require')(Js('./_a-number-value')))
        var.put('$toPrecision', Js(1.0).get('toPrecision'))
        @Js
        def PyJs_anonymous_1428_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return PyJsStrictNeq(var.get('$toPrecision').callprop('call', Js(1.0), var.get('undefined')),Js('1'))
        PyJs_anonymous_1428_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1429_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$toPrecision').callprop('call', Js({}))
        PyJs_anonymous_1429_._set_name('anonymous')
        @Js
        def PyJs_toPrecision_1430_(precision, this, arguments, var=var):
            var = Scope({'precision':precision, 'this':this, 'arguments':arguments, 'toPrecision':PyJs_toPrecision_1430_}, var)
            var.registers(['that', 'precision'])
            var.put('that', var.get('aNumberValue')(var.get(u"this"), Js('Number#toPrecision: incorrect invocation!')))
            return (var.get('$toPrecision').callprop('call', var.get('that')) if _seq(var.get('precision'),var.get('undefined')) else var.get('$toPrecision').callprop('call', var.get('that'), var.get('precision')))
        PyJs_toPrecision_1430_._set_name('toPrecision')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('$fails')(PyJs_anonymous_1428_) or var.get('$fails')(PyJs_anonymous_1429_).neg()))), Js('Number'), Js({'toPrecision':PyJs_toPrecision_1430_}))
    PyJs_anonymous_1427_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1431_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('S')+var.get('$export').get('F')), Js('Object'), Js({'assign':var.get('require')(Js('./_object-assign'))}))
    PyJs_anonymous_1431_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1432_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'create':var.get('require')(Js('./_object-create'))}))
    PyJs_anonymous_1432_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1433_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_descriptors')).neg())), Js('Object'), Js({'defineProperties':var.get('require')(Js('./_object-dps'))}))
    PyJs_anonymous_1433_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1434_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_descriptors')).neg())), Js('Object'), Js({'defineProperty':var.get('require')(Js('./_object-dp')).get('f')}))
    PyJs_anonymous_1434_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1435_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'isObject', 'meta'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('meta', var.get('require')(Js('./_meta')).get('onFreeze'))
        @Js
        def PyJs_anonymous_1436_(PyJsArg_24667265657a65_, this, arguments, var=var):
            var = Scope({'$freeze':PyJsArg_24667265657a65_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$freeze'])
            @Js
            def PyJs_freeze_1437_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'freeze':PyJs_freeze_1437_}, var)
                var.registers(['it'])
                return (var.get('$freeze')(var.get('meta')(var.get('it'))) if (var.get('$freeze') and var.get('isObject')(var.get('it'))) else var.get('it'))
            PyJs_freeze_1437_._set_name('freeze')
            return PyJs_freeze_1437_
        PyJs_anonymous_1436_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('freeze'), PyJs_anonymous_1436_)
    PyJs_anonymous_1435_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1438_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$getOwnPropertyDescriptor', 'toIObject'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('$getOwnPropertyDescriptor', var.get('require')(Js('./_object-gopd')).get('f'))
        @Js
        def PyJs_anonymous_1439_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_getOwnPropertyDescriptor_1440_(it, key, this, arguments, var=var):
                var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1440_}, var)
                var.registers(['key', 'it'])
                return var.get('$getOwnPropertyDescriptor')(var.get('toIObject')(var.get('it')), var.get('key'))
            PyJs_getOwnPropertyDescriptor_1440_._set_name('getOwnPropertyDescriptor')
            return PyJs_getOwnPropertyDescriptor_1440_
        PyJs_anonymous_1439_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('getOwnPropertyDescriptor'), PyJs_anonymous_1439_)
    PyJs_anonymous_1438_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1441_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1442_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('require')(Js('./_object-gopn-ext')).get('f')
        PyJs_anonymous_1442_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('getOwnPropertyNames'), PyJs_anonymous_1442_)
    PyJs_anonymous_1441_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1443_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toObject', '$getPrototypeOf'])
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('$getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        @Js
        def PyJs_anonymous_1444_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_getPrototypeOf_1445_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getPrototypeOf':PyJs_getPrototypeOf_1445_}, var)
                var.registers(['it'])
                return var.get('$getPrototypeOf')(var.get('toObject')(var.get('it')))
            PyJs_getPrototypeOf_1445_._set_name('getPrototypeOf')
            return PyJs_getPrototypeOf_1445_
        PyJs_anonymous_1444_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('getPrototypeOf'), PyJs_anonymous_1444_)
    PyJs_anonymous_1443_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1446_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'isObject', 'require', 'module'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1447_(PyJsArg_246973457874656e7369626c65_, this, arguments, var=var):
            var = Scope({'$isExtensible':PyJsArg_246973457874656e7369626c65_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$isExtensible'])
            @Js
            def PyJs_isExtensible_1448_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isExtensible':PyJs_isExtensible_1448_}, var)
                var.registers(['it'])
                return ((var.get('$isExtensible')(var.get('it')) if var.get('$isExtensible') else Js(True)) if var.get('isObject')(var.get('it')) else Js(False))
            PyJs_isExtensible_1448_._set_name('isExtensible')
            return PyJs_isExtensible_1448_
        PyJs_anonymous_1447_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('isExtensible'), PyJs_anonymous_1447_)
    PyJs_anonymous_1446_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1449_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'isObject', 'require', 'module'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1450_(PyJsArg_24697346726f7a656e_, this, arguments, var=var):
            var = Scope({'$isFrozen':PyJsArg_24697346726f7a656e_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$isFrozen'])
            @Js
            def PyJs_isFrozen_1451_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isFrozen':PyJs_isFrozen_1451_}, var)
                var.registers(['it'])
                return ((var.get('$isFrozen')(var.get('it')) if var.get('$isFrozen') else Js(False)) if var.get('isObject')(var.get('it')) else Js(True))
            PyJs_isFrozen_1451_._set_name('isFrozen')
            return PyJs_isFrozen_1451_
        PyJs_anonymous_1450_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('isFrozen'), PyJs_anonymous_1450_)
    PyJs_anonymous_1449_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1452_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'isObject', 'require', 'module'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_1453_(PyJsArg_2469735365616c6564_, this, arguments, var=var):
            var = Scope({'$isSealed':PyJsArg_2469735365616c6564_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$isSealed'])
            @Js
            def PyJs_isSealed_1454_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isSealed':PyJs_isSealed_1454_}, var)
                var.registers(['it'])
                return ((var.get('$isSealed')(var.get('it')) if var.get('$isSealed') else Js(False)) if var.get('isObject')(var.get('it')) else Js(True))
            PyJs_isSealed_1454_._set_name('isSealed')
            return PyJs_isSealed_1454_
        PyJs_anonymous_1453_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('isSealed'), PyJs_anonymous_1453_)
    PyJs_anonymous_1452_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1455_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'is':var.get('require')(Js('./_same-value'))}))
    PyJs_anonymous_1455_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1456_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$keys', 'toObject'])
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('$keys', var.get('require')(Js('./_object-keys')))
        @Js
        def PyJs_anonymous_1457_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_keys_1458_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'keys':PyJs_keys_1458_}, var)
                var.registers(['it'])
                return var.get('$keys')(var.get('toObject')(var.get('it')))
            PyJs_keys_1458_._set_name('keys')
            return PyJs_keys_1458_
        PyJs_anonymous_1457_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('keys'), PyJs_anonymous_1457_)
    PyJs_anonymous_1456_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1459_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'isObject', 'meta'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('meta', var.get('require')(Js('./_meta')).get('onFreeze'))
        @Js
        def PyJs_anonymous_1460_(PyJsArg_2470726576656e74457874656e73696f6e73_, this, arguments, var=var):
            var = Scope({'$preventExtensions':PyJsArg_2470726576656e74457874656e73696f6e73_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$preventExtensions'])
            @Js
            def PyJs_preventExtensions_1461_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'preventExtensions':PyJs_preventExtensions_1461_}, var)
                var.registers(['it'])
                return (var.get('$preventExtensions')(var.get('meta')(var.get('it'))) if (var.get('$preventExtensions') and var.get('isObject')(var.get('it'))) else var.get('it'))
            PyJs_preventExtensions_1461_._set_name('preventExtensions')
            return PyJs_preventExtensions_1461_
        PyJs_anonymous_1460_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('preventExtensions'), PyJs_anonymous_1460_)
    PyJs_anonymous_1459_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1462_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'isObject', 'meta'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('meta', var.get('require')(Js('./_meta')).get('onFreeze'))
        @Js
        def PyJs_anonymous_1463_(PyJsArg_247365616c_, this, arguments, var=var):
            var = Scope({'$seal':PyJsArg_247365616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$seal'])
            @Js
            def PyJs_seal_1464_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments, 'seal':PyJs_seal_1464_}, var)
                var.registers(['it'])
                return (var.get('$seal')(var.get('meta')(var.get('it'))) if (var.get('$seal') and var.get('isObject')(var.get('it'))) else var.get('it'))
            PyJs_seal_1464_._set_name('seal')
            return PyJs_seal_1464_
        PyJs_anonymous_1463_._set_name('anonymous')
        var.get('require')(Js('./_object-sap'))(Js('seal'), PyJs_anonymous_1463_)
    PyJs_anonymous_1462_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1465_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'setPrototypeOf':var.get('require')(Js('./_set-proto')).get('set')}))
    PyJs_anonymous_1465_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1466_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'test', 'require', 'module', 'classof'])
        Js('use strict')
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('test', Js({}))
        var.get('test').put(var.get('require')(Js('./_wks'))(Js('toStringTag')), Js('z'))
        if ((var.get('test')+Js(''))!=Js('[object z]')):
            @Js
            def PyJs_toString_1467_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1467_}, var)
                var.registers([])
                return ((Js('[object ')+var.get('classof')(var.get(u"this")))+Js(']'))
            PyJs_toString_1467_._set_name('toString')
            var.get('require')(Js('./_redefine'))(var.get('Object').get('prototype'), Js('toString'), PyJs_toString_1467_, Js(True))
    PyJs_anonymous_1466_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1468_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$parseFloat', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseFloat', var.get('require')(Js('./_parse-float')))
        var.get('$export')((var.get('$export').get('G')+(var.get('$export').get('F')*(var.get('parseFloat')!=var.get('$parseFloat')))), Js({'parseFloat':var.get('$parseFloat')}))
    PyJs_anonymous_1468_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1469_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$parseInt', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$parseInt', var.get('require')(Js('./_parse-int')))
        var.get('$export')((var.get('$export').get('G')+(var.get('$export').get('F')*(var.get('parseInt')!=var.get('$parseInt')))), Js({'parseInt':var.get('$parseInt')}))
    PyJs_anonymous_1469_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1470_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['newPromiseCapability', 'onUnhandled', 'OwnPromiseCapability', 'module', 'aFunction', 'anInstance', 'newGenericPromiseCapability', 'ctx', '$export', 'promiseResolve', 'isThenable', 'PROMISE', 'isNode', 'forOf', 'isUnhandled', 'task', '$Promise', 'require', 'TypeError', 'process', 'newPromiseCapabilityModule', 'perform', 'onHandleUnhandled', 'speciesConstructor', 'versions', 'empty', 'classof', 'exports', 'Internal', 'USE_NATIVE', 'isObject', 'Wrapper', '$resolve', 'global', 'v8', 'userAgent', 'notify', 'microtask', '$reject', 'LIBRARY'])
        Js('use strict')
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('task', var.get('require')(Js('./_task')).get('set'))
        var.put('microtask', var.get('require')(Js('./_microtask'))())
        var.put('newPromiseCapabilityModule', var.get('require')(Js('./_new-promise-capability')))
        var.put('perform', var.get('require')(Js('./_perform')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('promiseResolve', var.get('require')(Js('./_promise-resolve')))
        var.put('PROMISE', Js('Promise'))
        var.put('TypeError', var.get('global').get('TypeError'))
        var.put('process', var.get('global').get('process'))
        var.put('versions', (var.get('process') and var.get('process').get('versions')))
        var.put('v8', ((var.get('versions') and var.get('versions').get('v8')) or Js('')))
        var.put('$Promise', var.get('global').get(var.get('PROMISE')))
        var.put('isNode', (var.get('classof')(var.get('process'))==Js('process')))
        @Js
        def PyJs_empty_1471_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'empty':PyJs_empty_1471_}, var)
            var.registers([])
            pass
        PyJs_empty_1471_._set_name('empty')
        var.put('empty', PyJs_empty_1471_)
        pass
        var.put('newPromiseCapability', var.put('newGenericPromiseCapability', var.get('newPromiseCapabilityModule').get('f')))
        @Js
        def PyJs_anonymous_1472_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['promise', 'FakePromise'])
            try:
                var.put('promise', var.get('$Promise').callprop('resolve', Js(1.0)))
                @Js
                def PyJs_anonymous_1473_(exec, this, arguments, var=var):
                    var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
                    var.registers(['exec'])
                    var.get('exec')(var.get('empty'), var.get('empty'))
                PyJs_anonymous_1473_._set_name('anonymous')
                var.put('FakePromise', var.get('promise').put('constructor', Js({})).put(var.get('require')(Js('./_wks'))(Js('species')), PyJs_anonymous_1473_))
                return ((((var.get('isNode') or (var.get('PromiseRejectionEvent',throw=False).typeof()==Js('function'))) and var.get('promise').callprop('then', var.get('empty')).instanceof(var.get('FakePromise'))) and PyJsStrictNeq(var.get('v8').callprop('indexOf', Js('6.6')),Js(0.0))) and _seq(var.get('userAgent').callprop('indexOf', Js('Chrome/66')),(-Js(1.0))))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_13454082 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_13454082 is not None:
                        var.own['e'] = PyJsHolder_65_13454082
                    else:
                        del var.own['e']
                    del PyJsHolder_65_13454082
        PyJs_anonymous_1472_._set_name('anonymous')
        var.put('USE_NATIVE', PyJs_anonymous_1472_().neg().neg())
        @Js
        def PyJs_isThenable_1474_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isThenable':PyJs_isThenable_1474_}, var)
            var.registers(['then', 'it'])
            pass
            return (var.get('then') if (var.get('isObject')(var.get('it')) and (var.put('then', var.get('it').get('then')).typeof()==Js('function'))) else Js(False))
        PyJs_isThenable_1474_._set_name('isThenable')
        var.put('isThenable', PyJs_isThenable_1474_)
        @Js
        def PyJs_notify_1475_(promise, isReject, this, arguments, var=var):
            var = Scope({'promise':promise, 'isReject':isReject, 'this':this, 'arguments':arguments, 'notify':PyJs_notify_1475_}, var)
            var.registers(['promise', 'chain', 'isReject'])
            if var.get('promise').get('_n'):
                return var.get('undefined')
            var.get('promise').put('_n', Js(True))
            var.put('chain', var.get('promise').get('_c'))
            @Js
            def PyJs_anonymous_1476_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'run', 'value', 'ok'])
                var.put('value', var.get('promise').get('_v'))
                var.put('ok', (var.get('promise').get('_s')==Js(1.0)))
                var.put('i', Js(0.0))
                @Js
                def PyJs_run_1477_(reaction, this, arguments, var=var):
                    var = Scope({'reaction':reaction, 'this':this, 'arguments':arguments, 'run':PyJs_run_1477_}, var)
                    var.registers(['then', 'reject', 'handler', 'reaction', 'exited', 'resolve', 'domain', 'result'])
                    var.put('handler', (var.get('reaction').get('ok') if var.get('ok') else var.get('reaction').get('fail')))
                    var.put('resolve', var.get('reaction').get('resolve'))
                    var.put('reject', var.get('reaction').get('reject'))
                    var.put('domain', var.get('reaction').get('domain'))
                    pass
                    try:
                        if var.get('handler'):
                            if var.get('ok').neg():
                                if (var.get('promise').get('_h')==Js(2.0)):
                                    var.get('onHandleUnhandled')(var.get('promise'))
                                var.get('promise').put('_h', Js(1.0))
                            if _seq(var.get('handler'),Js(True)):
                                var.put('result', var.get('value'))
                            else:
                                if var.get('domain'):
                                    var.get('domain').callprop('enter')
                                var.put('result', var.get('handler')(var.get('value')))
                                if var.get('domain'):
                                    var.get('domain').callprop('exit')
                                    var.put('exited', Js(True))
                            if _seq(var.get('result'),var.get('reaction').get('promise')):
                                var.get('reject')(var.get('TypeError')(Js('Promise-chain cycle')))
                            else:
                                if var.put('then', var.get('isThenable')(var.get('result'))):
                                    var.get('then').callprop('call', var.get('result'), var.get('resolve'), var.get('reject'))
                                else:
                                    var.get('resolve')(var.get('result'))
                        else:
                            var.get('reject')(var.get('value'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_47842726 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            if (var.get('domain') and var.get('exited').neg()):
                                var.get('domain').callprop('exit')
                            var.get('reject')(var.get('e'))
                        finally:
                            if PyJsHolder_65_47842726 is not None:
                                var.own['e'] = PyJsHolder_65_47842726
                            else:
                                del var.own['e']
                            del PyJsHolder_65_47842726
                PyJs_run_1477_._set_name('run')
                var.put('run', PyJs_run_1477_)
                while (var.get('chain').get('length')>var.get('i')):
                    var.get('run')(var.get('chain').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                var.get('promise').put('_c', Js([]))
                var.get('promise').put('_n', Js(False))
                if (var.get('isReject') and var.get('promise').get('_h').neg()):
                    var.get('onUnhandled')(var.get('promise'))
            PyJs_anonymous_1476_._set_name('anonymous')
            var.get('microtask')(PyJs_anonymous_1476_)
        PyJs_notify_1475_._set_name('notify')
        var.put('notify', PyJs_notify_1475_)
        @Js
        def PyJs_onUnhandled_1478_(promise, this, arguments, var=var):
            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'onUnhandled':PyJs_onUnhandled_1478_}, var)
            var.registers(['promise'])
            @Js
            def PyJs_anonymous_1479_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['console', 'handler', 'unhandled', 'value', 'result'])
                var.put('value', var.get('promise').get('_v'))
                var.put('unhandled', var.get('isUnhandled')(var.get('promise')))
                pass
                if var.get('unhandled'):
                    @Js
                    def PyJs_anonymous_1480_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if var.get('isNode'):
                            var.get('process').callprop('emit', Js('unhandledRejection'), var.get('value'), var.get('promise'))
                        else:
                            if var.put('handler', var.get('global').get('onunhandledrejection')):
                                var.get('handler')(Js({'promise':var.get('promise'),'reason':var.get('value')}))
                            else:
                                if (var.put('console', var.get('global').get('console')) and var.get('console').get('error')):
                                    var.get('console').callprop('error', Js('Unhandled promise rejection'), var.get('value'))
                    PyJs_anonymous_1480_._set_name('anonymous')
                    var.put('result', var.get('perform')(PyJs_anonymous_1480_))
                    var.get('promise').put('_h', (Js(2.0) if (var.get('isNode') or var.get('isUnhandled')(var.get('promise'))) else Js(1.0)))
                var.get('promise').put('_a', var.get('undefined'))
                if (var.get('unhandled') and var.get('result').get('e')):
                    PyJsTempException = JsToPyException(var.get('result').get('v'))
                    raise PyJsTempException
            PyJs_anonymous_1479_._set_name('anonymous')
            var.get('task').callprop('call', var.get('global'), PyJs_anonymous_1479_)
        PyJs_onUnhandled_1478_._set_name('onUnhandled')
        var.put('onUnhandled', PyJs_onUnhandled_1478_)
        @Js
        def PyJs_isUnhandled_1481_(promise, this, arguments, var=var):
            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'isUnhandled':PyJs_isUnhandled_1481_}, var)
            var.registers(['promise'])
            return (PyJsStrictNeq(var.get('promise').get('_h'),Js(1.0)) and _seq((var.get('promise').get('_a') or var.get('promise').get('_c')).get('length'),Js(0.0)))
        PyJs_isUnhandled_1481_._set_name('isUnhandled')
        var.put('isUnhandled', PyJs_isUnhandled_1481_)
        @Js
        def PyJs_onHandleUnhandled_1482_(promise, this, arguments, var=var):
            var = Scope({'promise':promise, 'this':this, 'arguments':arguments, 'onHandleUnhandled':PyJs_onHandleUnhandled_1482_}, var)
            var.registers(['promise'])
            @Js
            def PyJs_anonymous_1483_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['handler'])
                pass
                if var.get('isNode'):
                    var.get('process').callprop('emit', Js('rejectionHandled'), var.get('promise'))
                else:
                    if var.put('handler', var.get('global').get('onrejectionhandled')):
                        var.get('handler')(Js({'promise':var.get('promise'),'reason':var.get('promise').get('_v')}))
            PyJs_anonymous_1483_._set_name('anonymous')
            var.get('task').callprop('call', var.get('global'), PyJs_anonymous_1483_)
        PyJs_onHandleUnhandled_1482_._set_name('onHandleUnhandled')
        var.put('onHandleUnhandled', PyJs_onHandleUnhandled_1482_)
        @Js
        def PyJs_InlineNonPyName_1484_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, '$reject':PyJs_InlineNonPyName_1484_}, var)
            var.registers(['promise', 'value'])
            var.put('promise', var.get(u"this"))
            if var.get('promise').get('_d'):
                return var.get('undefined')
            var.get('promise').put('_d', Js(True))
            var.put('promise', (var.get('promise').get('_w') or var.get('promise')))
            var.get('promise').put('_v', var.get('value'))
            var.get('promise').put('_s', Js(2.0))
            if var.get('promise').get('_a').neg():
                var.get('promise').put('_a', var.get('promise').get('_c').callprop('slice'))
            var.get('notify')(var.get('promise'), Js(True))
        PyJs_InlineNonPyName_1484_._set_name('$reject')
        var.put('$reject', PyJs_InlineNonPyName_1484_)
        @Js
        def PyJs_InlineNonPyName_1485_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, '$resolve':PyJs_InlineNonPyName_1485_}, var)
            var.registers(['promise', 'value', 'then'])
            var.put('promise', var.get(u"this"))
            pass
            if var.get('promise').get('_d'):
                return var.get('undefined')
            var.get('promise').put('_d', Js(True))
            var.put('promise', (var.get('promise').get('_w') or var.get('promise')))
            try:
                if _seq(var.get('promise'),var.get('value')):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js("Promise can't be resolved itself")))
                    raise PyJsTempException
                if var.put('then', var.get('isThenable')(var.get('value'))):
                    @Js
                    def PyJs_anonymous_1486_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['wrapper'])
                        var.put('wrapper', Js({'_w':var.get('promise'),'_d':Js(False)}))
                        try:
                            var.get('then').callprop('call', var.get('value'), var.get('ctx')(var.get('$resolve'), var.get('wrapper'), Js(1.0)), var.get('ctx')(var.get('$reject'), var.get('wrapper'), Js(1.0)))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_47842257 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                var.get('$reject').callprop('call', var.get('wrapper'), var.get('e'))
                            finally:
                                if PyJsHolder_65_47842257 is not None:
                                    var.own['e'] = PyJsHolder_65_47842257
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_47842257
                    PyJs_anonymous_1486_._set_name('anonymous')
                    var.get('microtask')(PyJs_anonymous_1486_)
                else:
                    var.get('promise').put('_v', var.get('value'))
                    var.get('promise').put('_s', Js(1.0))
                    var.get('notify')(var.get('promise'), Js(False))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_82824996 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('$reject').callprop('call', Js({'_w':var.get('promise'),'_d':Js(False)}), var.get('e'))
                finally:
                    if PyJsHolder_65_82824996 is not None:
                        var.own['e'] = PyJsHolder_65_82824996
                    else:
                        del var.own['e']
                    del PyJsHolder_65_82824996
        PyJs_InlineNonPyName_1485_._set_name('$resolve')
        var.put('$resolve', PyJs_InlineNonPyName_1485_)
        if var.get('USE_NATIVE').neg():
            @Js
            def PyJs_Promise_1487_(executor, this, arguments, var=var):
                var = Scope({'executor':executor, 'this':this, 'arguments':arguments, 'Promise':PyJs_Promise_1487_}, var)
                var.registers(['executor'])
                var.get('anInstance')(var.get(u"this"), var.get('$Promise'), var.get('PROMISE'), Js('_h'))
                var.get('aFunction')(var.get('executor'))
                var.get('Internal').callprop('call', var.get(u"this"))
                try:
                    var.get('executor')(var.get('ctx')(var.get('$resolve'), var.get(u"this"), Js(1.0)), var.get('ctx')(var.get('$reject'), var.get(u"this"), Js(1.0)))
                except PyJsException as PyJsTempException:
                    PyJsHolder_657272_88508976 = var.own.get('err')
                    var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get('$reject').callprop('call', var.get(u"this"), var.get('err'))
                    finally:
                        if PyJsHolder_657272_88508976 is not None:
                            var.own['err'] = PyJsHolder_657272_88508976
                        else:
                            del var.own['err']
                        del PyJsHolder_657272_88508976
            PyJs_Promise_1487_._set_name('Promise')
            var.put('$Promise', PyJs_Promise_1487_)
            @Js
            def PyJs_Promise_1488_(executor, this, arguments, var=var):
                var = Scope({'executor':executor, 'this':this, 'arguments':arguments, 'Promise':PyJs_Promise_1488_}, var)
                var.registers(['executor'])
                var.get(u"this").put('_c', Js([]))
                var.get(u"this").put('_a', var.get('undefined'))
                var.get(u"this").put('_s', Js(0.0))
                var.get(u"this").put('_d', Js(False))
                var.get(u"this").put('_v', var.get('undefined'))
                var.get(u"this").put('_h', Js(0.0))
                var.get(u"this").put('_n', Js(False))
            PyJs_Promise_1488_._set_name('Promise')
            var.put('Internal', PyJs_Promise_1488_)
            @Js
            def PyJs_then_1489_(onFulfilled, onRejected, this, arguments, var=var):
                var = Scope({'onFulfilled':onFulfilled, 'onRejected':onRejected, 'this':this, 'arguments':arguments, 'then':PyJs_then_1489_}, var)
                var.registers(['reaction', 'onRejected', 'onFulfilled'])
                var.put('reaction', var.get('newPromiseCapability')(var.get('speciesConstructor')(var.get(u"this"), var.get('$Promise'))))
                var.get('reaction').put('ok', (var.get('onFulfilled') if (var.get('onFulfilled',throw=False).typeof()==Js('function')) else Js(True)))
                var.get('reaction').put('fail', ((var.get('onRejected',throw=False).typeof()==Js('function')) and var.get('onRejected')))
                var.get('reaction').put('domain', (var.get('process').get('domain') if var.get('isNode') else var.get('undefined')))
                var.get(u"this").get('_c').callprop('push', var.get('reaction'))
                if var.get(u"this").get('_a'):
                    var.get(u"this").get('_a').callprop('push', var.get('reaction'))
                if var.get(u"this").get('_s'):
                    var.get('notify')(var.get(u"this"), Js(False))
                return var.get('reaction').get('promise')
            PyJs_then_1489_._set_name('then')
            @Js
            def PyJs__catch_1490_(onRejected, this, arguments, var=var):
                var = Scope({'onRejected':onRejected, 'this':this, 'arguments':arguments, '_catch':PyJs__catch_1490_}, var)
                var.registers(['onRejected'])
                return var.get(u"this").callprop('then', var.get('undefined'), var.get('onRejected'))
            PyJs__catch_1490_._set_name('_catch')
            var.get('Internal').put('prototype', var.get('require')(Js('./_redefine-all'))(var.get('$Promise').get('prototype'), Js({'then':PyJs_then_1489_,'catch':PyJs__catch_1490_})))
            @Js
            def PyJs_OwnPromiseCapability_1491_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'OwnPromiseCapability':PyJs_OwnPromiseCapability_1491_}, var)
                var.registers(['promise'])
                var.put('promise', var.get('Internal').create())
                var.get(u"this").put('promise', var.get('promise'))
                var.get(u"this").put('resolve', var.get('ctx')(var.get('$resolve'), var.get('promise'), Js(1.0)))
                var.get(u"this").put('reject', var.get('ctx')(var.get('$reject'), var.get('promise'), Js(1.0)))
            PyJs_OwnPromiseCapability_1491_._set_name('OwnPromiseCapability')
            var.put('OwnPromiseCapability', PyJs_OwnPromiseCapability_1491_)
            @Js
            def PyJs_newPromiseCapability_1492_(C, this, arguments, var=var):
                var = Scope({'C':C, 'this':this, 'arguments':arguments, 'newPromiseCapability':PyJs_newPromiseCapability_1492_}, var)
                var.registers(['C'])
                return (var.get('OwnPromiseCapability').create(var.get('C')) if (_seq(var.get('C'),var.get('$Promise')) or _seq(var.get('C'),var.get('Wrapper'))) else var.get('newGenericPromiseCapability')(var.get('C')))
            PyJs_newPromiseCapability_1492_._set_name('newPromiseCapability')
            var.get('newPromiseCapabilityModule').put('f', var.put('newPromiseCapability', PyJs_newPromiseCapability_1492_))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js({'Promise':var.get('$Promise')}))
        var.get('require')(Js('./_set-to-string-tag'))(var.get('$Promise'), var.get('PROMISE'))
        var.get('require')(Js('./_set-species'))(var.get('PROMISE'))
        var.put('Wrapper', var.get('require')(Js('./_core')).get(var.get('PROMISE')))
        @Js
        def PyJs_reject_1493_(r, this, arguments, var=var):
            var = Scope({'r':r, 'this':this, 'arguments':arguments, 'reject':PyJs_reject_1493_}, var)
            var.registers(['r', 'capability', '$$reject'])
            var.put('capability', var.get('newPromiseCapability')(var.get(u"this")))
            var.put('$$reject', var.get('capability').get('reject'))
            var.get('$$reject')(var.get('r'))
            return var.get('capability').get('promise')
        PyJs_reject_1493_._set_name('reject')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), var.get('PROMISE'), Js({'reject':PyJs_reject_1493_}))
        @Js
        def PyJs_resolve_1494_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'resolve':PyJs_resolve_1494_}, var)
            var.registers(['x'])
            return var.get('promiseResolve')((var.get('$Promise') if (var.get('LIBRARY') and _seq(var.get(u"this"),var.get('Wrapper'))) else var.get(u"this")), var.get('x'))
        PyJs_resolve_1494_._set_name('resolve')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('LIBRARY') or var.get('USE_NATIVE').neg()))), var.get('PROMISE'), Js({'resolve':PyJs_resolve_1494_}))
        @Js
        def PyJs_anonymous_1495_(iter, this, arguments, var=var):
            var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter'])
            var.get('$Promise').callprop('all', var.get('iter')).callprop('catch', var.get('empty'))
        PyJs_anonymous_1495_._set_name('anonymous')
        @Js
        def PyJs_all_1496_(iterable, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments, 'all':PyJs_all_1496_}, var)
            var.registers(['C', 'reject', 'capability', 'resolve', 'result', 'iterable'])
            var.put('C', var.get(u"this"))
            var.put('capability', var.get('newPromiseCapability')(var.get('C')))
            var.put('resolve', var.get('capability').get('resolve'))
            var.put('reject', var.get('capability').get('reject'))
            @Js
            def PyJs_anonymous_1497_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['index', 'remaining', 'values'])
                var.put('values', Js([]))
                var.put('index', Js(0.0))
                var.put('remaining', Js(1.0))
                @Js
                def PyJs_anonymous_1498_(promise, this, arguments, var=var):
                    var = Scope({'promise':promise, 'this':this, 'arguments':arguments}, var)
                    var.registers(['promise', '$index', 'alreadyCalled'])
                    var.put('$index', (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))
                    var.put('alreadyCalled', Js(False))
                    var.get('values').callprop('push', var.get('undefined'))
                    (var.put('remaining',Js(var.get('remaining').to_number())+Js(1))-Js(1))
                    @Js
                    def PyJs_anonymous_1499_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if var.get('alreadyCalled'):
                            return var.get('undefined')
                        var.put('alreadyCalled', Js(True))
                        var.get('values').put(var.get('$index'), var.get('value'))
                        (var.put('remaining',Js(var.get('remaining').to_number())-Js(1)) or var.get('resolve')(var.get('values')))
                    PyJs_anonymous_1499_._set_name('anonymous')
                    var.get('C').callprop('resolve', var.get('promise')).callprop('then', PyJs_anonymous_1499_, var.get('reject'))
                PyJs_anonymous_1498_._set_name('anonymous')
                var.get('forOf')(var.get('iterable'), Js(False), PyJs_anonymous_1498_)
                (var.put('remaining',Js(var.get('remaining').to_number())-Js(1)) or var.get('resolve')(var.get('values')))
            PyJs_anonymous_1497_._set_name('anonymous')
            var.put('result', var.get('perform')(PyJs_anonymous_1497_))
            if var.get('result').get('e'):
                var.get('reject')(var.get('result').get('v'))
            return var.get('capability').get('promise')
        PyJs_all_1496_._set_name('all')
        @Js
        def PyJs_race_1500_(iterable, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'this':this, 'arguments':arguments, 'race':PyJs_race_1500_}, var)
            var.registers(['C', 'reject', 'capability', 'result', 'iterable'])
            var.put('C', var.get(u"this"))
            var.put('capability', var.get('newPromiseCapability')(var.get('C')))
            var.put('reject', var.get('capability').get('reject'))
            @Js
            def PyJs_anonymous_1501_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_1502_(promise, this, arguments, var=var):
                    var = Scope({'promise':promise, 'this':this, 'arguments':arguments}, var)
                    var.registers(['promise'])
                    var.get('C').callprop('resolve', var.get('promise')).callprop('then', var.get('capability').get('resolve'), var.get('reject'))
                PyJs_anonymous_1502_._set_name('anonymous')
                var.get('forOf')(var.get('iterable'), Js(False), PyJs_anonymous_1502_)
            PyJs_anonymous_1501_._set_name('anonymous')
            var.put('result', var.get('perform')(PyJs_anonymous_1501_))
            if var.get('result').get('e'):
                var.get('reject')(var.get('result').get('v'))
            return var.get('capability').get('promise')
        PyJs_race_1500_._set_name('race')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('USE_NATIVE') and var.get('require')(Js('./_iter-detect'))(PyJs_anonymous_1495_)).neg())), var.get('PROMISE'), Js({'all':PyJs_all_1496_,'race':PyJs_race_1500_}))
    PyJs_anonymous_1470_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1503_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['rApply', 'exports', 'require', 'module', 'aFunction', 'anObject', 'fApply', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('rApply', (var.get('require')(Js('./_global')).get('Reflect') or Js({})).get('apply'))
        var.put('fApply', var.get('Function').get('apply'))
        @Js
        def PyJs_anonymous_1504_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_1505_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1505_._set_name('anonymous')
            var.get('rApply')(PyJs_anonymous_1505_)
        PyJs_anonymous_1504_._set_name('anonymous')
        @Js
        def PyJs_apply_1506_(target, thisArgument, argumentsList, this, arguments, var=var):
            var = Scope({'target':target, 'thisArgument':thisArgument, 'argumentsList':argumentsList, 'this':this, 'arguments':arguments, 'apply':PyJs_apply_1506_}, var)
            var.registers(['thisArgument', 'L', 'target', 'T', 'argumentsList'])
            var.put('T', var.get('aFunction')(var.get('target')))
            var.put('L', var.get('anObject')(var.get('argumentsList')))
            return (var.get('rApply')(var.get('T'), var.get('thisArgument'), var.get('L')) if var.get('rApply') else var.get('fApply').callprop('call', var.get('T'), var.get('thisArgument'), var.get('L')))
        PyJs_apply_1506_._set_name('apply')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1504_).neg())), Js('Reflect'), Js({'apply':PyJs_apply_1506_}))
    PyJs_anonymous_1503_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1507_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'bind', 'module', 'aFunction', 'isObject', 'create', 'anObject', 'fails', 'NEW_TARGET_BUG', 'ARGS_BUG', 'rConstruct', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('bind', var.get('require')(Js('./_bind')))
        var.put('rConstruct', (var.get('require')(Js('./_global')).get('Reflect') or Js({})).get('construct'))
        @Js
        def PyJs_anonymous_1508_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['F'])
            @Js
            def PyJsHoisted_F_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_F_.func_name = 'F'
            var.put('F', PyJsHoisted_F_)
            pass
            @Js
            def PyJs_anonymous_1509_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1509_._set_name('anonymous')
            return var.get('rConstruct')(PyJs_anonymous_1509_, Js([]), var.get('F')).instanceof(var.get('F')).neg()
        PyJs_anonymous_1508_._set_name('anonymous')
        var.put('NEW_TARGET_BUG', var.get('fails')(PyJs_anonymous_1508_))
        @Js
        def PyJs_anonymous_1510_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_anonymous_1511_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_1511_._set_name('anonymous')
            var.get('rConstruct')(PyJs_anonymous_1511_)
        PyJs_anonymous_1510_._set_name('anonymous')
        var.put('ARGS_BUG', var.get('fails')(PyJs_anonymous_1510_).neg())
        @Js
        def PyJs_construct_1512_(Target, args, this, arguments, var=var):
            var = Scope({'Target':Target, 'args':args, 'this':this, 'arguments':arguments, 'construct':PyJs_construct_1512_}, var)
            var.registers(['proto', '$args', 'args', 'newTarget', 'result', 'Target', 'instance'])
            var.get('aFunction')(var.get('Target'))
            var.get('anObject')(var.get('args'))
            var.put('newTarget', (var.get('Target') if (var.get('arguments').get('length')<Js(3.0)) else var.get('aFunction')(var.get('arguments').get('2'))))
            if (var.get('ARGS_BUG') and var.get('NEW_TARGET_BUG').neg()):
                return var.get('rConstruct')(var.get('Target'), var.get('args'), var.get('newTarget'))
            if (var.get('Target')==var.get('newTarget')):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('args').get('length'))
                    if SWITCHED or _seq(CONDITION, Js(0.0)):
                        SWITCHED = True
                        return var.get('Target').create()
                    if SWITCHED or _seq(CONDITION, Js(1.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'))
                    if SWITCHED or _seq(CONDITION, Js(2.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'), var.get('args').get('1'))
                    if SWITCHED or _seq(CONDITION, Js(3.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'))
                    if SWITCHED or _seq(CONDITION, Js(4.0)):
                        SWITCHED = True
                        return var.get('Target').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'))
                    SWITCHED = True
                    break
                var.put('$args', Js([var.get(u"null")]))
                var.get('$args').get('push').callprop('apply', var.get('$args'), var.get('args'))
                return var.get('bind').callprop('apply', var.get('Target'), var.get('$args')).create()
            var.put('proto', var.get('newTarget').get('prototype'))
            var.put('instance', var.get('create')((var.get('proto') if var.get('isObject')(var.get('proto')) else var.get('Object').get('prototype'))))
            var.put('result', var.get('Function').get('apply').callprop('call', var.get('Target'), var.get('instance'), var.get('args')))
            return (var.get('result') if var.get('isObject')(var.get('result')) else var.get('instance'))
        PyJs_construct_1512_._set_name('construct')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('NEW_TARGET_BUG') or var.get('ARGS_BUG')))), Js('Reflect'), Js({'construct':PyJs_construct_1512_}))
    PyJs_anonymous_1507_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1513_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'toPrimitive', 'module', 'anObject', 'dP', '$export'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        @Js
        def PyJs_anonymous_1514_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('Reflect').callprop('defineProperty', var.get('dP').callprop('f', Js({}), Js(1.0), Js({'value':Js(1.0)})), Js(1.0), Js({'value':Js(2.0)}))
        PyJs_anonymous_1514_._set_name('anonymous')
        @Js
        def PyJs_defineProperty_1515_(target, propertyKey, attributes, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'attributes':attributes, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_1515_}, var)
            var.registers(['propertyKey', 'target', 'attributes'])
            var.get('anObject')(var.get('target'))
            var.put('propertyKey', var.get('toPrimitive')(var.get('propertyKey'), Js(True)))
            var.get('anObject')(var.get('attributes'))
            try:
                var.get('dP').callprop('f', var.get('target'), var.get('propertyKey'), var.get('attributes'))
                return Js(True)
            except PyJsException as PyJsTempException:
                PyJsHolder_65_88178607 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_65_88178607 is not None:
                        var.own['e'] = PyJsHolder_65_88178607
                    else:
                        del var.own['e']
                    del PyJsHolder_65_88178607
        PyJs_defineProperty_1515_._set_name('defineProperty')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1514_))), Js('Reflect'), Js({'defineProperty':PyJs_defineProperty_1515_}))
    PyJs_anonymous_1513_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1516_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'anObject', 'gOPD', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')).get('f'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_deleteProperty_1517_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments, 'deleteProperty':PyJs_deleteProperty_1517_}, var)
            var.registers(['desc', 'target', 'propertyKey'])
            var.put('desc', var.get('gOPD')(var.get('anObject')(var.get('target')), var.get('propertyKey')))
            return (Js(False) if (var.get('desc') and var.get('desc').get('configurable').neg()) else var.get('target').delete(var.get('propertyKey')))
        PyJs_deleteProperty_1517_._set_name('deleteProperty')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'deleteProperty':PyJs_deleteProperty_1517_}))
    PyJs_anonymous_1516_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1518_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Enumerate', 'module', 'anObject', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_Enumerate_1519_(iterated, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'this':this, 'arguments':arguments, 'Enumerate':PyJs_Enumerate_1519_}, var)
            var.registers(['keys', 'key', 'iterated'])
            var.get(u"this").put('_t', var.get('anObject')(var.get('iterated')))
            var.get(u"this").put('_i', Js(0.0))
            var.put('keys', var.get(u"this").put('_k', Js([])))
            pass
            for PyJsTemp in var.get('iterated'):
                var.put('key', PyJsTemp)
                var.get('keys').callprop('push', var.get('key'))
        PyJs_Enumerate_1519_._set_name('Enumerate')
        var.put('Enumerate', PyJs_Enumerate_1519_)
        @Js
        def PyJs_anonymous_1520_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['that', 'keys', 'key'])
            var.put('that', var.get(u"this"))
            var.put('keys', var.get('that').get('_k'))
            pass
            while 1:
                if (var.get('that').get('_i')>=var.get('keys').get('length')):
                    return Js({'value':var.get('undefined'),'done':Js(True)})
                if not var.get('that').get('_t').contains(var.put('key', var.get('keys').get((var.get('that').put('_i',Js(var.get('that').get('_i').to_number())+Js(1))-Js(1))))).neg():
                    break
            return Js({'value':var.get('key'),'done':Js(False)})
        PyJs_anonymous_1520_._set_name('anonymous')
        var.get('require')(Js('./_iter-create'))(var.get('Enumerate'), Js('Object'), PyJs_anonymous_1520_)
        @Js
        def PyJs_enumerate_1521_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'enumerate':PyJs_enumerate_1521_}, var)
            var.registers(['target'])
            return var.get('Enumerate').create(var.get('target'))
        PyJs_enumerate_1521_._set_name('enumerate')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'enumerate':PyJs_enumerate_1521_}))
    PyJs_anonymous_1518_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1522_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'anObject', 'gOPD', '$export'])
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_getOwnPropertyDescriptor_1523_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1523_}, var)
            var.registers(['propertyKey', 'target'])
            return var.get('gOPD').callprop('f', var.get('anObject')(var.get('target')), var.get('propertyKey'))
        PyJs_getOwnPropertyDescriptor_1523_._set_name('getOwnPropertyDescriptor')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1523_}))
    PyJs_anonymous_1522_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1524_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'anObject', 'getProto', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('getProto', var.get('require')(Js('./_object-gpo')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_getPrototypeOf_1525_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'getPrototypeOf':PyJs_getPrototypeOf_1525_}, var)
            var.registers(['target'])
            return var.get('getProto')(var.get('anObject')(var.get('target')))
        PyJs_getPrototypeOf_1525_._set_name('getPrototypeOf')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'getPrototypeOf':PyJs_getPrototypeOf_1525_}))
    PyJs_anonymous_1524_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1526_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'has', 'getPrototypeOf', 'module', 'isObject', 'anObject', 'gOPD', 'get', '$export'])
        @Js
        def PyJsHoisted_get_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments}, var)
            var.registers(['desc', 'proto', 'receiver', 'target', 'propertyKey'])
            var.put('receiver', (var.get('target') if (var.get('arguments').get('length')<Js(3.0)) else var.get('arguments').get('2')))
            pass
            if _seq(var.get('anObject')(var.get('target')),var.get('receiver')):
                return var.get('target').get(var.get('propertyKey'))
            if var.put('desc', var.get('gOPD').callprop('f', var.get('target'), var.get('propertyKey'))):
                return (var.get('desc').get('value') if var.get('has')(var.get('desc'), Js('value')) else (var.get('desc').get('get').callprop('call', var.get('receiver')) if PyJsStrictNeq(var.get('desc').get('get'),var.get('undefined')) else var.get('undefined')))
            if var.get('isObject')(var.put('proto', var.get('getPrototypeOf')(var.get('target')))):
                return var.get('get')(var.get('proto'), var.get('propertyKey'), var.get('receiver'))
        PyJsHoisted_get_.func_name = 'get'
        var.put('get', PyJsHoisted_get_)
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        pass
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'get':var.get('get')}))
    PyJs_anonymous_1526_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1527_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_has_1528_(target, propertyKey, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'this':this, 'arguments':arguments, 'has':PyJs_has_1528_}, var)
            var.registers(['propertyKey', 'target'])
            return var.get('target').contains(var.get('propertyKey'))
        PyJs_has_1528_._set_name('has')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'has':PyJs_has_1528_}))
    PyJs_anonymous_1527_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1529_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'anObject', '$isExtensible', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('$isExtensible', var.get('Object').get('isExtensible'))
        @Js
        def PyJs_isExtensible_1530_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'isExtensible':PyJs_isExtensible_1530_}, var)
            var.registers(['target'])
            var.get('anObject')(var.get('target'))
            return (var.get('$isExtensible')(var.get('target')) if var.get('$isExtensible') else Js(True))
        PyJs_isExtensible_1530_._set_name('isExtensible')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'isExtensible':PyJs_isExtensible_1530_}))
    PyJs_anonymous_1529_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1531_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'ownKeys':var.get('require')(Js('./_own-keys'))}))
    PyJs_anonymous_1531_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1532_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'anObject', '$preventExtensions', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('$preventExtensions', var.get('Object').get('preventExtensions'))
        @Js
        def PyJs_preventExtensions_1533_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'preventExtensions':PyJs_preventExtensions_1533_}, var)
            var.registers(['target'])
            var.get('anObject')(var.get('target'))
            try:
                if var.get('$preventExtensions'):
                    var.get('$preventExtensions')(var.get('target'))
                return Js(True)
            except PyJsException as PyJsTempException:
                PyJsHolder_65_59139302 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_65_59139302 is not None:
                        var.own['e'] = PyJsHolder_65_59139302
                    else:
                        del var.own['e']
                    del PyJsHolder_65_59139302
        PyJs_preventExtensions_1533_._set_name('preventExtensions')
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'preventExtensions':PyJs_preventExtensions_1533_}))
    PyJs_anonymous_1532_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1534_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export', 'setProto'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('setProto', var.get('require')(Js('./_set-proto')))
        if var.get('setProto'):
            @Js
            def PyJs_setPrototypeOf_1535_(target, proto, this, arguments, var=var):
                var = Scope({'target':target, 'proto':proto, 'this':this, 'arguments':arguments, 'setPrototypeOf':PyJs_setPrototypeOf_1535_}, var)
                var.registers(['target', 'proto'])
                var.get('setProto').callprop('check', var.get('target'), var.get('proto'))
                try:
                    var.get('setProto').callprop('set', var.get('target'), var.get('proto'))
                    return Js(True)
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_97624121 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        return Js(False)
                    finally:
                        if PyJsHolder_65_97624121 is not None:
                            var.own['e'] = PyJsHolder_65_97624121
                        else:
                            del var.own['e']
                        del PyJsHolder_65_97624121
            PyJs_setPrototypeOf_1535_._set_name('setPrototypeOf')
            var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'setPrototypeOf':PyJs_setPrototypeOf_1535_}))
    PyJs_anonymous_1534_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1536_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'has', 'getPrototypeOf', 'module', 'isObject', 'anObject', 'gOPD', 'set', 'dP', 'createDesc', '$export'])
        @Js
        def PyJsHoisted_set_(target, propertyKey, V, this, arguments, var=var):
            var = Scope({'target':target, 'propertyKey':propertyKey, 'V':V, 'this':this, 'arguments':arguments}, var)
            var.registers(['proto', 'V', 'ownDesc', 'receiver', 'target', 'existingDescriptor', 'propertyKey'])
            var.put('receiver', (var.get('target') if (var.get('arguments').get('length')<Js(4.0)) else var.get('arguments').get('3')))
            var.put('ownDesc', var.get('gOPD').callprop('f', var.get('anObject')(var.get('target')), var.get('propertyKey')))
            pass
            if var.get('ownDesc').neg():
                if var.get('isObject')(var.put('proto', var.get('getPrototypeOf')(var.get('target')))):
                    return var.get('set')(var.get('proto'), var.get('propertyKey'), var.get('V'), var.get('receiver'))
                var.put('ownDesc', var.get('createDesc')(Js(0.0)))
            if var.get('has')(var.get('ownDesc'), Js('value')):
                if (_seq(var.get('ownDesc').get('writable'),Js(False)) or var.get('isObject')(var.get('receiver')).neg()):
                    return Js(False)
                if var.put('existingDescriptor', var.get('gOPD').callprop('f', var.get('receiver'), var.get('propertyKey'))):
                    if ((var.get('existingDescriptor').get('get') or var.get('existingDescriptor').get('set')) or _seq(var.get('existingDescriptor').get('writable'),Js(False))):
                        return Js(False)
                    var.get('existingDescriptor').put('value', var.get('V'))
                    var.get('dP').callprop('f', var.get('receiver'), var.get('propertyKey'), var.get('existingDescriptor'))
                else:
                    var.get('dP').callprop('f', var.get('receiver'), var.get('propertyKey'), var.get('createDesc')(Js(0.0), var.get('V')))
                return Js(True)
            return (Js(False) if _seq(var.get('ownDesc').get('set'),var.get('undefined')) else PyJsComma(var.get('ownDesc').get('set').callprop('call', var.get('receiver'), var.get('V')),Js(True)))
        PyJsHoisted_set_.func_name = 'set'
        var.put('set', PyJsHoisted_set_)
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        pass
        var.get('$export')(var.get('$export').get('S'), Js('Reflect'), Js({'set':var.get('set')}))
    PyJs_anonymous_1536_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1537_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'inheritIfRequired', 're1', '$flags', 're2', 'require', 'proto', 'module', 'i', 'gOPN', 'Base', 'dP', 'global', 'CORRECT_NEW', '$RegExp', 'keys', 'isRegExp', 'proxy'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('$flags', var.get('require')(Js('./_flags')))
        var.put('$RegExp', var.get('global').get('RegExp'))
        var.put('Base', var.get('$RegExp'))
        var.put('proto', var.get('$RegExp').get('prototype'))
        var.put('re1', JsRegExp('/a/g'))
        var.put('re2', JsRegExp('/a/g'))
        var.put('CORRECT_NEW', PyJsStrictNeq(var.get('$RegExp').create(var.get('re1')),var.get('re1')))
        @Js
        def PyJs_anonymous_1538_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('re2').put(var.get('require')(Js('./_wks'))(Js('match')), Js(False))
            return (((var.get('$RegExp')(var.get('re1'))!=var.get('re1')) or (var.get('$RegExp')(var.get('re2'))==var.get('re2'))) or (var.get('$RegExp')(var.get('re1'), Js('i'))!=Js('/a/i')))
        PyJs_anonymous_1538_._set_name('anonymous')
        if (var.get('require')(Js('./_descriptors')) and (var.get('CORRECT_NEW').neg() or var.get('require')(Js('./_fails'))(PyJs_anonymous_1538_))):
            @Js
            def PyJs_RegExp_1539_(p, f, this, arguments, var=var):
                var = Scope({'p':p, 'f':f, 'this':this, 'arguments':arguments, 'RegExp':PyJs_RegExp_1539_}, var)
                var.registers(['f', 'piRE', 'p', 'tiRE', 'fiU'])
                var.put('tiRE', var.get(u"this").instanceof(var.get('$RegExp')))
                var.put('piRE', var.get('isRegExp')(var.get('p')))
                var.put('fiU', _seq(var.get('f'),var.get('undefined')))
                def PyJs_LONG_1540_(var=var):
                    return (var.get('Base').create((var.get('p').get('source') if (var.get('piRE') and var.get('fiU').neg()) else var.get('p')), var.get('f')) if var.get('CORRECT_NEW') else var.get('Base')((var.get('p').get('source') if var.put('piRE', var.get('p').instanceof(var.get('$RegExp'))) else var.get('p')), (var.get('$flags').callprop('call', var.get('p')) if (var.get('piRE') and var.get('fiU')) else var.get('f'))))
                return (var.get('p') if (((var.get('tiRE').neg() and var.get('piRE')) and _seq(var.get('p').get('constructor'),var.get('$RegExp'))) and var.get('fiU')) else var.get('inheritIfRequired')(PyJs_LONG_1540_(), (var.get(u"this") if var.get('tiRE') else var.get('proto')), var.get('$RegExp')))
            PyJs_RegExp_1539_._set_name('RegExp')
            var.put('$RegExp', PyJs_RegExp_1539_)
            @Js
            def PyJs_proxy_1541_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'proxy':PyJs_proxy_1541_}, var)
                var.registers(['key'])
                @Js
                def PyJs_get_1542_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1542_}, var)
                    var.registers([])
                    return var.get('Base').get(var.get('key'))
                PyJs_get_1542_._set_name('get')
                @Js
                def PyJs_set_1543_(it, this, arguments, var=var):
                    var = Scope({'it':it, 'this':this, 'arguments':arguments, 'set':PyJs_set_1543_}, var)
                    var.registers(['it'])
                    var.get('Base').put(var.get('key'), var.get('it'))
                PyJs_set_1543_._set_name('set')
                (var.get('$RegExp').contains(var.get('key')) or var.get('dP')(var.get('$RegExp'), var.get('key'), Js({'configurable':Js(True),'get':PyJs_get_1542_,'set':PyJs_set_1543_})))
            PyJs_proxy_1541_._set_name('proxy')
            var.put('proxy', PyJs_proxy_1541_)
            #for JS loop
            var.put('keys', var.get('gOPN')(var.get('Base')))
            var.put('i', Js(0.0))
            while (var.get('keys').get('length')>var.get('i')):
                var.get('proxy')(var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))

            var.get('proto').put('constructor', var.get('$RegExp'))
            var.get('$RegExp').put('prototype', var.get('proto'))
            var.get('require')(Js('./_redefine'))(var.get('global'), Js('RegExp'), var.get('$RegExp'))
        var.get('require')(Js('./_set-species'))(Js('RegExp'))
    PyJs_anonymous_1537_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1544_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'regexpExec'])
        Js('use strict')
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.get('require')(Js('./_export'))(Js({'target':Js('RegExp'),'proto':Js(True),'forced':PyJsStrictNeq(var.get('regexpExec'),JsRegExp('/./').get('exec'))}), Js({'exec':var.get('regexpExec')}))
    PyJs_anonymous_1544_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1545_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        if (var.get('require')(Js('./_descriptors')) and (JsRegExp('/./g').get('flags')!=Js('g'))):
            var.get('require')(Js('./_object-dp')).callprop('f', var.get('RegExp').get('prototype'), Js('flags'), Js({'configurable':Js(True),'get':var.get('require')(Js('./_flags'))}))
    PyJs_anonymous_1545_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1546_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'regExpExec', 'require', 'module', 'toLength', 'anObject', 'advanceStringIndex'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('advanceStringIndex', var.get('require')(Js('./_advance-string-index')))
        var.put('regExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        @Js
        def PyJs_anonymous_1547_(defined, MATCH, PyJsArg_246d61746368_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'MATCH':MATCH, '$match':PyJsArg_246d61746368_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['MATCH', 'defined', 'maybeCallNative', '$match'])
            @Js
            def PyJs_match_1548_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments, 'match':PyJs_match_1548_}, var)
                var.registers(['fn', 'regexp', 'O'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('fn', (var.get('undefined') if (var.get('regexp')==var.get('undefined')) else var.get('regexp').get(var.get('MATCH'))))
                return (var.get('fn').callprop('call', var.get('regexp'), var.get('O')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('RegExp').create(var.get('regexp')).callprop(var.get('MATCH'), var.get('String')(var.get('O'))))
            PyJs_match_1548_._set_name('match')
            @Js
            def PyJs_anonymous_1549_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments}, var)
                var.registers(['S', 'fullUnicode', 'n', 'matchStr', 'rx', 'regexp', 'result', 'A', 'res'])
                var.put('res', var.get('maybeCallNative')(var.get('$match'), var.get('regexp'), var.get(u"this")))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                if var.get('rx').get('global').neg():
                    return var.get('regExpExec')(var.get('rx'), var.get('S'))
                var.put('fullUnicode', var.get('rx').get('unicode'))
                var.get('rx').put('lastIndex', Js(0.0))
                var.put('A', Js([]))
                var.put('n', Js(0.0))
                pass
                while PyJsStrictNeq(var.put('result', var.get('regExpExec')(var.get('rx'), var.get('S'))),var.get(u"null")):
                    var.put('matchStr', var.get('String')(var.get('result').get('0')))
                    var.get('A').put(var.get('n'), var.get('matchStr'))
                    if _seq(var.get('matchStr'),Js('')):
                        var.get('rx').put('lastIndex', var.get('advanceStringIndex')(var.get('S'), var.get('toLength')(var.get('rx').get('lastIndex')), var.get('fullUnicode')))
                    (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                return (var.get(u"null") if _seq(var.get('n'),Js(0.0)) else var.get('A'))
            PyJs_anonymous_1549_._set_name('anonymous')
            return Js([PyJs_match_1548_, PyJs_anonymous_1549_])
        PyJs_anonymous_1547_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('match'), Js(1.0), PyJs_anonymous_1547_)
    PyJs_anonymous_1546_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1550_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'regExpExec', 'SUBSTITUTION_SYMBOLS_NO_NAMED', 'min', 'require', 'toLength', 'module', 'floor', 'max', 'anObject', 'toInteger', 'SUBSTITUTION_SYMBOLS', 'toObject', 'maybeToString', 'advanceStringIndex'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('advanceStringIndex', var.get('require')(Js('./_advance-string-index')))
        var.put('regExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        var.put('max', var.get('Math').get('max'))
        var.put('min', var.get('Math').get('min'))
        var.put('floor', var.get('Math').get('floor'))
        var.put('SUBSTITUTION_SYMBOLS', JsRegExp("/\\$([$&`']|\\d\\d?|<[^>]*>)/g"))
        var.put('SUBSTITUTION_SYMBOLS_NO_NAMED', JsRegExp("/\\$([$&`']|\\d\\d?)/g"))
        @Js
        def PyJs_maybeToString_1551_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'maybeToString':PyJs_maybeToString_1551_}, var)
            var.registers(['it'])
            return (var.get('it') if _seq(var.get('it'),var.get('undefined')) else var.get('String')(var.get('it')))
        PyJs_maybeToString_1551_._set_name('maybeToString')
        var.put('maybeToString', PyJs_maybeToString_1551_)
        @Js
        def PyJs_anonymous_1552_(defined, REPLACE, PyJsArg_247265706c616365_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'REPLACE':REPLACE, '$replace':PyJsArg_247265706c616365_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['getSubstitution', 'REPLACE', 'defined', 'maybeCallNative', '$replace'])
            @Js
            def PyJsHoisted_getSubstitution_(matched, str, position, captures, namedCaptures, replacement, this, arguments, var=var):
                var = Scope({'matched':matched, 'str':str, 'position':position, 'captures':captures, 'namedCaptures':namedCaptures, 'replacement':replacement, 'this':this, 'arguments':arguments}, var)
                var.registers(['str', 'replacement', 'matched', 'm', 'symbols', 'captures', 'tailPos', 'namedCaptures', 'position'])
                var.put('tailPos', (var.get('position')+var.get('matched').get('length')))
                var.put('m', var.get('captures').get('length'))
                var.put('symbols', var.get('SUBSTITUTION_SYMBOLS_NO_NAMED'))
                if PyJsStrictNeq(var.get('namedCaptures'),var.get('undefined')):
                    var.put('namedCaptures', var.get('toObject')(var.get('namedCaptures')))
                    var.put('symbols', var.get('SUBSTITUTION_SYMBOLS'))
                @Js
                def PyJs_anonymous_1555_(match, ch, this, arguments, var=var):
                    var = Scope({'match':match, 'ch':ch, 'this':this, 'arguments':arguments}, var)
                    var.registers(['f', 'ch', 'n', 'match', 'capture'])
                    pass
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('ch').callprop('charAt', Js(0.0)))
                        if SWITCHED or _seq(CONDITION, Js('$')):
                            SWITCHED = True
                            return Js('$')
                        if SWITCHED or _seq(CONDITION, Js('&')):
                            SWITCHED = True
                            return var.get('matched')
                        if SWITCHED or _seq(CONDITION, Js('`')):
                            SWITCHED = True
                            return var.get('str').callprop('slice', Js(0.0), var.get('position'))
                        if SWITCHED or _seq(CONDITION, Js("'")):
                            SWITCHED = True
                            return var.get('str').callprop('slice', var.get('tailPos'))
                        if SWITCHED or _seq(CONDITION, Js('<')):
                            SWITCHED = True
                            var.put('capture', var.get('namedCaptures').get(var.get('ch').callprop('slice', Js(1.0), (-Js(1.0)))))
                            break
                        if True:
                            SWITCHED = True
                            var.put('n', (+var.get('ch')))
                            if _seq(var.get('n'),Js(0.0)):
                                return var.get('match')
                            if (var.get('n')>var.get('m')):
                                var.put('f', var.get('floor')((var.get('n')/Js(10.0))))
                                if _seq(var.get('f'),Js(0.0)):
                                    return var.get('match')
                                if (var.get('f')<=var.get('m')):
                                    return (var.get('ch').callprop('charAt', Js(1.0)) if _seq(var.get('captures').get((var.get('f')-Js(1.0))),var.get('undefined')) else (var.get('captures').get((var.get('f')-Js(1.0)))+var.get('ch').callprop('charAt', Js(1.0))))
                                return var.get('match')
                            var.put('capture', var.get('captures').get((var.get('n')-Js(1.0))))
                        SWITCHED = True
                        break
                    return (Js('') if _seq(var.get('capture'),var.get('undefined')) else var.get('capture'))
                PyJs_anonymous_1555_._set_name('anonymous')
                return var.get('$replace').callprop('call', var.get('replacement'), var.get('symbols'), PyJs_anonymous_1555_)
            PyJsHoisted_getSubstitution_.func_name = 'getSubstitution'
            var.put('getSubstitution', PyJsHoisted_getSubstitution_)
            @Js
            def PyJs_replace_1553_(searchValue, replaceValue, this, arguments, var=var):
                var = Scope({'searchValue':searchValue, 'replaceValue':replaceValue, 'this':this, 'arguments':arguments, 'replace':PyJs_replace_1553_}, var)
                var.registers(['fn', 'searchValue', 'replaceValue', 'O'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('fn', (var.get('undefined') if (var.get('searchValue')==var.get('undefined')) else var.get('searchValue').get(var.get('REPLACE'))))
                return (var.get('fn').callprop('call', var.get('searchValue'), var.get('O'), var.get('replaceValue')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('$replace').callprop('call', var.get('String')(var.get('O')), var.get('searchValue'), var.get('replaceValue')))
            PyJs_replace_1553_._set_name('replace')
            @Js
            def PyJs_anonymous_1554_(regexp, replaceValue, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'replaceValue':replaceValue, 'this':this, 'arguments':arguments}, var)
                var.registers(['j', 'replacerArgs', 'captures', 'position', 'matchStr', 'i', 'matched', 'nextSourcePosition', 'functionalReplace', 'namedCaptures', 'result', 'replaceValue', 'res', 'replacement', 'results', 'rx', 'accumulatedResult', 'S', 'fullUnicode', 'global', 'regexp'])
                var.put('res', var.get('maybeCallNative')(var.get('$replace'), var.get('regexp'), var.get(u"this"), var.get('replaceValue')))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                var.put('functionalReplace', _seq(var.get('replaceValue',throw=False).typeof(),Js('function')))
                if var.get('functionalReplace').neg():
                    var.put('replaceValue', var.get('String')(var.get('replaceValue')))
                var.put('global', var.get('rx').get('global'))
                if var.get('global'):
                    var.put('fullUnicode', var.get('rx').get('unicode'))
                    var.get('rx').put('lastIndex', Js(0.0))
                var.put('results', Js([]))
                while Js(True):
                    var.put('result', var.get('regExpExec')(var.get('rx'), var.get('S')))
                    if _seq(var.get('result'),var.get(u"null")):
                        break
                    var.get('results').callprop('push', var.get('result'))
                    if var.get('global').neg():
                        break
                    var.put('matchStr', var.get('String')(var.get('result').get('0')))
                    if _seq(var.get('matchStr'),Js('')):
                        var.get('rx').put('lastIndex', var.get('advanceStringIndex')(var.get('S'), var.get('toLength')(var.get('rx').get('lastIndex')), var.get('fullUnicode')))
                var.put('accumulatedResult', Js(''))
                var.put('nextSourcePosition', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('results').get('length')):
                    try:
                        var.put('result', var.get('results').get(var.get('i')))
                        var.put('matched', var.get('String')(var.get('result').get('0')))
                        var.put('position', var.get('max')(var.get('min')(var.get('toInteger')(var.get('result').get('index')), var.get('S').get('length')), Js(0.0)))
                        var.put('captures', Js([]))
                        #for JS loop
                        var.put('j', Js(1.0))
                        while (var.get('j')<var.get('result').get('length')):
                            try:
                                var.get('captures').callprop('push', var.get('maybeToString')(var.get('result').get(var.get('j'))))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        var.put('namedCaptures', var.get('result').get('groups'))
                        if var.get('functionalReplace'):
                            var.put('replacerArgs', Js([var.get('matched')]).callprop('concat', var.get('captures'), var.get('position'), var.get('S')))
                            if PyJsStrictNeq(var.get('namedCaptures'),var.get('undefined')):
                                var.get('replacerArgs').callprop('push', var.get('namedCaptures'))
                            var.put('replacement', var.get('String')(var.get('replaceValue').callprop('apply', var.get('undefined'), var.get('replacerArgs'))))
                        else:
                            var.put('replacement', var.get('getSubstitution')(var.get('matched'), var.get('S'), var.get('position'), var.get('captures'), var.get('namedCaptures'), var.get('replaceValue')))
                        if (var.get('position')>=var.get('nextSourcePosition')):
                            var.put('accumulatedResult', (var.get('S').callprop('slice', var.get('nextSourcePosition'), var.get('position'))+var.get('replacement')), '+')
                            var.put('nextSourcePosition', (var.get('position')+var.get('matched').get('length')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return (var.get('accumulatedResult')+var.get('S').callprop('slice', var.get('nextSourcePosition')))
            PyJs_anonymous_1554_._set_name('anonymous')
            return Js([PyJs_replace_1553_, PyJs_anonymous_1554_])
            pass
        PyJs_anonymous_1552_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('replace'), Js(2.0), PyJs_anonymous_1552_)
    PyJs_anonymous_1550_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1556_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'regExpExec', 'require', 'module', 'anObject', 'sameValue'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('sameValue', var.get('require')(Js('./_same-value')))
        var.put('regExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        @Js
        def PyJs_anonymous_1557_(defined, SEARCH, PyJsArg_24736561726368_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'SEARCH':SEARCH, '$search':PyJsArg_24736561726368_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['maybeCallNative', 'defined', '$search', 'SEARCH'])
            @Js
            def PyJs_search_1558_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments, 'search':PyJs_search_1558_}, var)
                var.registers(['fn', 'regexp', 'O'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('fn', (var.get('undefined') if (var.get('regexp')==var.get('undefined')) else var.get('regexp').get(var.get('SEARCH'))))
                return (var.get('fn').callprop('call', var.get('regexp'), var.get('O')) if PyJsStrictNeq(var.get('fn'),var.get('undefined')) else var.get('RegExp').create(var.get('regexp')).callprop(var.get('SEARCH'), var.get('String')(var.get('O'))))
            PyJs_search_1558_._set_name('search')
            @Js
            def PyJs_anonymous_1559_(regexp, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments}, var)
                var.registers(['S', 'previousLastIndex', 'rx', 'regexp', 'result', 'res'])
                var.put('res', var.get('maybeCallNative')(var.get('$search'), var.get('regexp'), var.get(u"this")))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                var.put('previousLastIndex', var.get('rx').get('lastIndex'))
                if var.get('sameValue')(var.get('previousLastIndex'), Js(0.0)).neg():
                    var.get('rx').put('lastIndex', Js(0.0))
                var.put('result', var.get('regExpExec')(var.get('rx'), var.get('S')))
                if var.get('sameValue')(var.get('rx').get('lastIndex'), var.get('previousLastIndex')).neg():
                    var.get('rx').put('lastIndex', var.get('previousLastIndex'))
                return ((-Js(1.0)) if _seq(var.get('result'),var.get(u"null")) else var.get('result').get('index'))
            PyJs_anonymous_1559_._set_name('anonymous')
            return Js([PyJs_search_1558_, PyJs_anonymous_1559_])
        PyJs_anonymous_1557_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('search'), Js(1.0), PyJs_anonymous_1557_)
    PyJs_anonymous_1556_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1560_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'LENGTH', 'module', 'toLength', '$push', 'anObject', 'fails', '$SPLIT', 'callRegExpExec', 'speciesConstructor', 'MAX_UINT32', 'regexpExec', 'LAST_INDEX', '$min', 'isRegExp', 'advanceStringIndex', 'SUPPORTS_Y'])
        Js('use strict')
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('advanceStringIndex', var.get('require')(Js('./_advance-string-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('callRegExpExec', var.get('require')(Js('./_regexp-exec-abstract')))
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$min', var.get('Math').get('min'))
        var.put('$push', Js([]).get('push'))
        var.put('$SPLIT', Js('split'))
        var.put('LENGTH', Js('length'))
        var.put('LAST_INDEX', Js('lastIndex'))
        var.put('MAX_UINT32', Js(4294967295))
        @Js
        def PyJs_anonymous_1561_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('RegExp')(var.get('MAX_UINT32'), Js('y'))
        PyJs_anonymous_1561_._set_name('anonymous')
        var.put('SUPPORTS_Y', var.get('fails')(PyJs_anonymous_1561_).neg())
        @Js
        def PyJs_anonymous_1562_(defined, SPLIT, PyJsArg_2473706c6974_, maybeCallNative, this, arguments, var=var):
            var = Scope({'defined':defined, 'SPLIT':SPLIT, '$split':PyJsArg_2473706c6974_, 'maybeCallNative':maybeCallNative, 'this':this, 'arguments':arguments}, var)
            var.registers(['$split', 'defined', 'maybeCallNative', 'internalSplit', 'SPLIT'])
            pass
            def PyJs_LONG_1563_(var=var):
                return (((((Js('abbc').callprop(var.get('$SPLIT'), JsRegExp('/(b)*/')).get('1')==Js('c')) or (Js('test').callprop(var.get('$SPLIT'), JsRegExp('/(?:)/'), (-Js(1.0))).get(var.get('LENGTH'))!=Js(4.0))) or (Js('ab').callprop(var.get('$SPLIT'), JsRegExp('/(?:ab)*/')).get(var.get('LENGTH'))!=Js(2.0))) or (Js('.').callprop(var.get('$SPLIT'), JsRegExp('/(.?)(.?)/')).get(var.get('LENGTH'))!=Js(4.0))) or (Js('.').callprop(var.get('$SPLIT'), JsRegExp('/()()/')).get(var.get('LENGTH'))>Js(1.0)))
            if (PyJs_LONG_1563_() or Js('').callprop(var.get('$SPLIT'), JsRegExp('/.?/')).get(var.get('LENGTH'))):
                @Js
                def PyJs_internalSplit_1564_(separator, limit, this, arguments, var=var):
                    var = Scope({'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments, 'internalSplit':PyJs_internalSplit_1564_}, var)
                    var.registers(['string', 'lastLastIndex', 'lastIndex', 'output', 'limit', 'match', 'separatorCopy', 'separator', 'splitLimit', 'flags', 'lastLength'])
                    var.put('string', var.get('String')(var.get(u"this")))
                    if (_seq(var.get('separator'),var.get('undefined')) and _seq(var.get('limit'),Js(0.0))):
                        return Js([])
                    if var.get('isRegExp')(var.get('separator')).neg():
                        return var.get('$split').callprop('call', var.get('string'), var.get('separator'), var.get('limit'))
                    var.put('output', Js([]))
                    var.put('flags', ((((Js('i') if var.get('separator').get('ignoreCase') else Js(''))+(Js('m') if var.get('separator').get('multiline') else Js('')))+(Js('u') if var.get('separator').get('unicode') else Js('')))+(Js('y') if var.get('separator').get('sticky') else Js(''))))
                    var.put('lastLastIndex', Js(0.0))
                    var.put('splitLimit', (var.get('MAX_UINT32') if _seq(var.get('limit'),var.get('undefined')) else PyJsBshift(var.get('limit'),Js(0.0))))
                    var.put('separatorCopy', var.get('RegExp').create(var.get('separator').get('source'), (var.get('flags')+Js('g'))))
                    pass
                    while var.put('match', var.get('regexpExec').callprop('call', var.get('separatorCopy'), var.get('string'))):
                        var.put('lastIndex', var.get('separatorCopy').get(var.get('LAST_INDEX')))
                        if (var.get('lastIndex')>var.get('lastLastIndex')):
                            var.get('output').callprop('push', var.get('string').callprop('slice', var.get('lastLastIndex'), var.get('match').get('index')))
                            if ((var.get('match').get(var.get('LENGTH'))>Js(1.0)) and (var.get('match').get('index')<var.get('string').get(var.get('LENGTH')))):
                                var.get('$push').callprop('apply', var.get('output'), var.get('match').callprop('slice', Js(1.0)))
                            var.put('lastLength', var.get('match').get('0').get(var.get('LENGTH')))
                            var.put('lastLastIndex', var.get('lastIndex'))
                            if (var.get('output').get(var.get('LENGTH'))>=var.get('splitLimit')):
                                break
                        if _seq(var.get('separatorCopy').get(var.get('LAST_INDEX')),var.get('match').get('index')):
                            (var.get('separatorCopy').put(var.get('LAST_INDEX'),Js(var.get('separatorCopy').get(var.get('LAST_INDEX')).to_number())+Js(1))-Js(1))
                    if _seq(var.get('lastLastIndex'),var.get('string').get(var.get('LENGTH'))):
                        if (var.get('lastLength') or var.get('separatorCopy').callprop('test', Js('')).neg()):
                            var.get('output').callprop('push', Js(''))
                    else:
                        var.get('output').callprop('push', var.get('string').callprop('slice', var.get('lastLastIndex')))
                    return (var.get('output').callprop('slice', Js(0.0), var.get('splitLimit')) if (var.get('output').get(var.get('LENGTH'))>var.get('splitLimit')) else var.get('output'))
                PyJs_internalSplit_1564_._set_name('internalSplit')
                var.put('internalSplit', PyJs_internalSplit_1564_)
            else:
                if Js('0').callprop(var.get('$SPLIT'), var.get('undefined'), Js(0.0)).get(var.get('LENGTH')):
                    @Js
                    def PyJs_internalSplit_1565_(separator, limit, this, arguments, var=var):
                        var = Scope({'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments, 'internalSplit':PyJs_internalSplit_1565_}, var)
                        var.registers(['limit', 'separator'])
                        return (Js([]) if (_seq(var.get('separator'),var.get('undefined')) and _seq(var.get('limit'),Js(0.0))) else var.get('$split').callprop('call', var.get(u"this"), var.get('separator'), var.get('limit')))
                    PyJs_internalSplit_1565_._set_name('internalSplit')
                    var.put('internalSplit', PyJs_internalSplit_1565_)
                else:
                    var.put('internalSplit', var.get('$split'))
            @Js
            def PyJs_split_1566_(separator, limit, this, arguments, var=var):
                var = Scope({'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments, 'split':PyJs_split_1566_}, var)
                var.registers(['limit', 'splitter', 'separator', 'O'])
                var.put('O', var.get('defined')(var.get(u"this")))
                var.put('splitter', (var.get('undefined') if (var.get('separator')==var.get('undefined')) else var.get('separator').get(var.get('SPLIT'))))
                return (var.get('splitter').callprop('call', var.get('separator'), var.get('O'), var.get('limit')) if PyJsStrictNeq(var.get('splitter'),var.get('undefined')) else var.get('internalSplit').callprop('call', var.get('String')(var.get('O')), var.get('separator'), var.get('limit')))
            PyJs_split_1566_._set_name('split')
            @Js
            def PyJs_anonymous_1567_(regexp, limit, this, arguments, var=var):
                var = Scope({'regexp':regexp, 'limit':limit, 'this':this, 'arguments':arguments}, var)
                var.registers(['S', 'unicodeMatching', 'C', 'z', 'i', 'e', 'splitter', 'p', 'limit', 'lim', 'q', 'rx', 'regexp', 'flags', 'A', 'res'])
                var.put('res', var.get('maybeCallNative')(var.get('internalSplit'), var.get('regexp'), var.get(u"this"), var.get('limit'), PyJsStrictNeq(var.get('internalSplit'),var.get('$split'))))
                if var.get('res').get('done'):
                    return var.get('res').get('value')
                var.put('rx', var.get('anObject')(var.get('regexp')))
                var.put('S', var.get('String')(var.get(u"this")))
                var.put('C', var.get('speciesConstructor')(var.get('rx'), var.get('RegExp')))
                var.put('unicodeMatching', var.get('rx').get('unicode'))
                var.put('flags', ((((Js('i') if var.get('rx').get('ignoreCase') else Js(''))+(Js('m') if var.get('rx').get('multiline') else Js('')))+(Js('u') if var.get('rx').get('unicode') else Js('')))+(Js('y') if var.get('SUPPORTS_Y') else Js('g'))))
                var.put('splitter', var.get('C').create((var.get('rx') if var.get('SUPPORTS_Y') else ((Js('^(?:')+var.get('rx').get('source'))+Js(')'))), var.get('flags')))
                var.put('lim', (var.get('MAX_UINT32') if _seq(var.get('limit'),var.get('undefined')) else PyJsBshift(var.get('limit'),Js(0.0))))
                if _seq(var.get('lim'),Js(0.0)):
                    return Js([])
                if _seq(var.get('S').get('length'),Js(0.0)):
                    return (Js([var.get('S')]) if _seq(var.get('callRegExpExec')(var.get('splitter'), var.get('S')),var.get(u"null")) else Js([]))
                var.put('p', Js(0.0))
                var.put('q', Js(0.0))
                var.put('A', Js([]))
                while (var.get('q')<var.get('S').get('length')):
                    var.get('splitter').put('lastIndex', (var.get('q') if var.get('SUPPORTS_Y') else Js(0.0)))
                    var.put('z', var.get('callRegExpExec')(var.get('splitter'), (var.get('S') if var.get('SUPPORTS_Y') else var.get('S').callprop('slice', var.get('q')))))
                    pass
                    if (_seq(var.get('z'),var.get(u"null")) or _seq(var.put('e', var.get('$min')(var.get('toLength')((var.get('splitter').get('lastIndex')+(Js(0.0) if var.get('SUPPORTS_Y') else var.get('q')))), var.get('S').get('length'))),var.get('p'))):
                        var.put('q', var.get('advanceStringIndex')(var.get('S'), var.get('q'), var.get('unicodeMatching')))
                    else:
                        var.get('A').callprop('push', var.get('S').callprop('slice', var.get('p'), var.get('q')))
                        if _seq(var.get('A').get('length'),var.get('lim')):
                            return var.get('A')
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<=(var.get('z').get('length')-Js(1.0))):
                            try:
                                var.get('A').callprop('push', var.get('z').get(var.get('i')))
                                if _seq(var.get('A').get('length'),var.get('lim')):
                                    return var.get('A')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.put('q', var.put('p', var.get('e')))
                var.get('A').callprop('push', var.get('S').callprop('slice', var.get('p')))
                return var.get('A')
            PyJs_anonymous_1567_._set_name('anonymous')
            return Js([PyJs_split_1566_, PyJs_anonymous_1567_])
        PyJs_anonymous_1562_._set_name('anonymous')
        var.get('require')(Js('./_fix-re-wks'))(Js('split'), Js(2.0), PyJs_anonymous_1562_)
    PyJs_anonymous_1560_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1568_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', '$flags', 'require', 'module', 'define', 'anObject', 'DESCRIPTORS', '$toString', 'TO_STRING'])
        Js('use strict')
        var.get('require')(Js('./es6.regexp.flags'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('$flags', var.get('require')(Js('./_flags')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('TO_STRING', Js('toString'))
        var.put('$toString', JsRegExp('/./').get(var.get('TO_STRING')))
        @Js
        def PyJs_define_1569_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'define':PyJs_define_1569_}, var)
            var.registers(['fn'])
            var.get('require')(Js('./_redefine'))(var.get('RegExp').get('prototype'), var.get('TO_STRING'), var.get('fn'), Js(True))
        PyJs_define_1569_._set_name('define')
        var.put('define', PyJs_define_1569_)
        @Js
        def PyJs_anonymous_1570_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('$toString').callprop('call', Js({'source':Js('a'),'flags':Js('b')}))!=Js('/a/b'))
        PyJs_anonymous_1570_._set_name('anonymous')
        if var.get('require')(Js('./_fails'))(PyJs_anonymous_1570_):
            @Js
            def PyJs_toString_1571_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1571_}, var)
                var.registers(['R'])
                var.put('R', var.get('anObject')(var.get(u"this")))
                return Js('/').callprop('concat', var.get('R').get('source'), Js('/'), (var.get('R').get('flags') if var.get('R').contains(Js('flags')) else (var.get('$flags').callprop('call', var.get('R')) if (var.get('DESCRIPTORS').neg() and var.get('R').instanceof(var.get('RegExp'))) else var.get('undefined'))))
            PyJs_toString_1571_._set_name('toString')
            var.get('define')(PyJs_toString_1571_)
        else:
            if (var.get('$toString').get('name')!=var.get('TO_STRING')):
                @Js
                def PyJs_toString_1572_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1572_}, var)
                    var.registers([])
                    return var.get('$toString').callprop('call', var.get(u"this"))
                PyJs_toString_1572_._set_name('toString')
                var.get('define')(PyJs_toString_1572_)
    PyJs_anonymous_1568_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1573_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'validate', 'module', 'strong', 'SET'])
        Js('use strict')
        var.put('strong', var.get('require')(Js('./_collection-strong')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('SET', Js('Set'))
        @Js
        def PyJs_anonymous_1574_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments}, var)
            var.registers(['get'])
            @Js
            def PyJs_Set_1575_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'Set':PyJs_Set_1575_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_Set_1575_._set_name('Set')
            return PyJs_Set_1575_
        PyJs_anonymous_1574_._set_name('anonymous')
        @Js
        def PyJs_add_1576_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'add':PyJs_add_1576_}, var)
            var.registers(['value'])
            return var.get('strong').callprop('def', var.get('validate')(var.get(u"this"), var.get('SET')), var.put('value', (Js(0.0) if _seq(var.get('value'),Js(0.0)) else var.get('value'))), var.get('value'))
        PyJs_add_1576_._set_name('add')
        var.get('module').put('exports', var.get('require')(Js('./_collection'))(var.get('SET'), PyJs_anonymous_1574_, Js({'add':PyJs_add_1576_}), var.get('strong')))
    PyJs_anonymous_1573_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1577_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1578_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_anchor_1579_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments, 'anchor':PyJs_anchor_1579_}, var)
                var.registers(['name'])
                return var.get('createHTML')(var.get(u"this"), Js('a'), Js('name'), var.get('name'))
            PyJs_anchor_1579_._set_name('anchor')
            return PyJs_anchor_1579_
        PyJs_anonymous_1578_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('anchor'), PyJs_anonymous_1578_)
    PyJs_anonymous_1577_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1580_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1581_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_big_1582_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'big':PyJs_big_1582_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('big'), Js(''), Js(''))
            PyJs_big_1582_._set_name('big')
            return PyJs_big_1582_
        PyJs_anonymous_1581_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('big'), PyJs_anonymous_1581_)
    PyJs_anonymous_1580_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1583_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1584_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_blink_1585_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'blink':PyJs_blink_1585_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('blink'), Js(''), Js(''))
            PyJs_blink_1585_._set_name('blink')
            return PyJs_blink_1585_
        PyJs_anonymous_1584_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('blink'), PyJs_anonymous_1584_)
    PyJs_anonymous_1583_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1586_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1587_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_bold_1588_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'bold':PyJs_bold_1588_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('b'), Js(''), Js(''))
            PyJs_bold_1588_._set_name('bold')
            return PyJs_bold_1588_
        PyJs_anonymous_1587_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('bold'), PyJs_anonymous_1587_)
    PyJs_anonymous_1586_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1589_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$at', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$at', var.get('require')(Js('./_string-at'))(Js(False)))
        @Js
        def PyJs_codePointAt_1590_(pos, this, arguments, var=var):
            var = Scope({'pos':pos, 'this':this, 'arguments':arguments, 'codePointAt':PyJs_codePointAt_1590_}, var)
            var.registers(['pos'])
            return var.get('$at')(var.get(u"this"), var.get('pos'))
        PyJs_codePointAt_1590_._set_name('codePointAt')
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'codePointAt':PyJs_codePointAt_1590_}))
    PyJs_anonymous_1589_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1591_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$endsWith', 'toLength', 'ENDS_WITH', '$export', 'context'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('context', var.get('require')(Js('./_string-context')))
        var.put('ENDS_WITH', Js('endsWith'))
        var.put('$endsWith', Js('').get(var.get('ENDS_WITH')))
        @Js
        def PyJs_endsWith_1592_(searchString, this, arguments, var=var):
            var = Scope({'searchString':searchString, 'this':this, 'arguments':arguments, 'endsWith':PyJs_endsWith_1592_}, var)
            var.registers(['len', 'that', 'searchString', 'end', 'endPosition', 'search'])
            var.put('that', var.get('context')(var.get(u"this"), var.get('searchString'), var.get('ENDS_WITH')))
            var.put('endPosition', (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
            var.put('len', var.get('toLength')(var.get('that').get('length')))
            var.put('end', (var.get('len') if _seq(var.get('endPosition'),var.get('undefined')) else var.get('Math').callprop('min', var.get('toLength')(var.get('endPosition')), var.get('len'))))
            var.put('search', var.get('String')(var.get('searchString')))
            return (var.get('$endsWith').callprop('call', var.get('that'), var.get('search'), var.get('end')) if var.get('$endsWith') else _seq(var.get('that').callprop('slice', (var.get('end')-var.get('search').get('length')), var.get('end')),var.get('search')))
        PyJs_endsWith_1592_._set_name('endsWith')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails-is-regexp'))(var.get('ENDS_WITH')))), Js('String'), Js({'endsWith':PyJs_endsWith_1592_}))
    PyJs_anonymous_1591_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1593_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1594_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_fixed_1595_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'fixed':PyJs_fixed_1595_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('tt'), Js(''), Js(''))
            PyJs_fixed_1595_._set_name('fixed')
            return PyJs_fixed_1595_
        PyJs_anonymous_1594_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('fixed'), PyJs_anonymous_1594_)
    PyJs_anonymous_1593_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1596_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1597_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_fontcolor_1598_(color, this, arguments, var=var):
                var = Scope({'color':color, 'this':this, 'arguments':arguments, 'fontcolor':PyJs_fontcolor_1598_}, var)
                var.registers(['color'])
                return var.get('createHTML')(var.get(u"this"), Js('font'), Js('color'), var.get('color'))
            PyJs_fontcolor_1598_._set_name('fontcolor')
            return PyJs_fontcolor_1598_
        PyJs_anonymous_1597_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('fontcolor'), PyJs_anonymous_1597_)
    PyJs_anonymous_1596_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1599_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1600_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_fontsize_1601_(size, this, arguments, var=var):
                var = Scope({'size':size, 'this':this, 'arguments':arguments, 'fontsize':PyJs_fontsize_1601_}, var)
                var.registers(['size'])
                return var.get('createHTML')(var.get(u"this"), Js('font'), Js('size'), var.get('size'))
            PyJs_fontsize_1601_._set_name('fontsize')
            return PyJs_fontsize_1601_
        PyJs_anonymous_1600_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('fontsize'), PyJs_anonymous_1600_)
    PyJs_anonymous_1599_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1602_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toAbsoluteIndex', 'fromCharCode', '$export', '$fromCodePoint'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('fromCharCode', var.get('String').get('fromCharCode'))
        var.put('$fromCodePoint', var.get('String').get('fromCodePoint'))
        @Js
        def PyJs_fromCodePoint_1603_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'fromCodePoint':PyJs_fromCodePoint_1603_}, var)
            var.registers(['i', 'x', 'code', 'aLen', 'res'])
            var.put('res', Js([]))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('i', Js(0.0))
            pass
            while (var.get('aLen')>var.get('i')):
                var.put('code', (+var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                if PyJsStrictNeq(var.get('toAbsoluteIndex')(var.get('code'), Js(1114111)),var.get('code')):
                    PyJsTempException = JsToPyException(var.get('RangeError')((var.get('code')+Js(' is not a valid code point'))))
                    raise PyJsTempException
                var.get('res').callprop('push', (var.get('fromCharCode')(var.get('code')) if (var.get('code')<Js(65536)) else var.get('fromCharCode')(((var.put('code', Js(65536), '-')>>Js(10.0))+Js(55296)), ((var.get('code')%Js(1024))+Js(56320)))))
            return var.get('res').callprop('join', Js(''))
        PyJs_fromCodePoint_1603_._set_name('fromCodePoint')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('$fromCodePoint').neg().neg() and (var.get('$fromCodePoint').get('length')!=Js(1.0))))), Js('String'), Js({'fromCodePoint':PyJs_fromCodePoint_1603_}))
    PyJs_anonymous_1602_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1604_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'INCLUDES', '$export', 'context'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('context', var.get('require')(Js('./_string-context')))
        var.put('INCLUDES', Js('includes'))
        @Js
        def PyJs_includes_1605_(searchString, this, arguments, var=var):
            var = Scope({'searchString':searchString, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_1605_}, var)
            var.registers(['searchString'])
            return (~var.get('context')(var.get(u"this"), var.get('searchString'), var.get('INCLUDES')).callprop('indexOf', var.get('searchString'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))).neg().neg()
        PyJs_includes_1605_._set_name('includes')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails-is-regexp'))(var.get('INCLUDES')))), Js('String'), Js({'includes':PyJs_includes_1605_}))
    PyJs_anonymous_1604_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1606_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1607_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_italics_1608_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'italics':PyJs_italics_1608_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('i'), Js(''), Js(''))
            PyJs_italics_1608_._set_name('italics')
            return PyJs_italics_1608_
        PyJs_anonymous_1607_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('italics'), PyJs_anonymous_1607_)
    PyJs_anonymous_1606_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1609_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', '$at', 'require', 'module'])
        Js('use strict')
        var.put('$at', var.get('require')(Js('./_string-at'))(Js(True)))
        @Js
        def PyJs_anonymous_1610_(iterated, this, arguments, var=var):
            var = Scope({'iterated':iterated, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterated'])
            var.get(u"this").put('_t', var.get('String')(var.get('iterated')))
            var.get(u"this").put('_i', Js(0.0))
        PyJs_anonymous_1610_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1611_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'point', 'O'])
            var.put('O', var.get(u"this").get('_t'))
            var.put('index', var.get(u"this").get('_i'))
            pass
            if (var.get('index')>=var.get('O').get('length')):
                return Js({'value':var.get('undefined'),'done':Js(True)})
            var.put('point', var.get('$at')(var.get('O'), var.get('index')))
            var.get(u"this").put('_i', var.get('point').get('length'), '+')
            return Js({'value':var.get('point'),'done':Js(False)})
        PyJs_anonymous_1611_._set_name('anonymous')
        var.get('require')(Js('./_iter-define'))(var.get('String'), Js('String'), PyJs_anonymous_1610_, PyJs_anonymous_1611_)
    PyJs_anonymous_1609_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1612_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1613_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_link_1614_(url, this, arguments, var=var):
                var = Scope({'url':url, 'this':this, 'arguments':arguments, 'link':PyJs_link_1614_}, var)
                var.registers(['url'])
                return var.get('createHTML')(var.get(u"this"), Js('a'), Js('href'), var.get('url'))
            PyJs_link_1614_._set_name('link')
            return PyJs_link_1614_
        PyJs_anonymous_1613_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('link'), PyJs_anonymous_1613_)
    PyJs_anonymous_1612_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1615_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'toIObject', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_raw_1616_(callSite, this, arguments, var=var):
            var = Scope({'callSite':callSite, 'this':this, 'arguments':arguments, 'raw':PyJs_raw_1616_}, var)
            var.registers(['callSite', 'len', 'i', 'tpl', 'aLen', 'res'])
            var.put('tpl', var.get('toIObject')(var.get('callSite').get('raw')))
            var.put('len', var.get('toLength')(var.get('tpl').get('length')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('res', Js([]))
            var.put('i', Js(0.0))
            while (var.get('len')>var.get('i')):
                var.get('res').callprop('push', var.get('String')(var.get('tpl').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))))
                if (var.get('i')<var.get('aLen')):
                    var.get('res').callprop('push', var.get('String')(var.get('arguments').get(var.get('i'))))
            return var.get('res').callprop('join', Js(''))
        PyJs_raw_1616_._set_name('raw')
        var.get('$export')(var.get('$export').get('S'), Js('String'), Js({'raw':PyJs_raw_1616_}))
    PyJs_anonymous_1615_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1617_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'repeat':var.get('require')(Js('./_string-repeat'))}))
    PyJs_anonymous_1617_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1618_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1619_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_small_1620_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'small':PyJs_small_1620_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('small'), Js(''), Js(''))
            PyJs_small_1620_._set_name('small')
            return PyJs_small_1620_
        PyJs_anonymous_1619_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('small'), PyJs_anonymous_1619_)
    PyJs_anonymous_1618_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1621_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'STARTS_WITH', '$startsWith', '$export', 'context'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('context', var.get('require')(Js('./_string-context')))
        var.put('STARTS_WITH', Js('startsWith'))
        var.put('$startsWith', Js('').get(var.get('STARTS_WITH')))
        @Js
        def PyJs_startsWith_1622_(searchString, this, arguments, var=var):
            var = Scope({'searchString':searchString, 'this':this, 'arguments':arguments, 'startsWith':PyJs_startsWith_1622_}, var)
            var.registers(['that', 'searchString', 'index', 'search'])
            var.put('that', var.get('context')(var.get(u"this"), var.get('searchString'), var.get('STARTS_WITH')))
            var.put('index', var.get('toLength')(var.get('Math').callprop('min', (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), var.get('that').get('length'))))
            var.put('search', var.get('String')(var.get('searchString')))
            return (var.get('$startsWith').callprop('call', var.get('that'), var.get('search'), var.get('index')) if var.get('$startsWith') else _seq(var.get('that').callprop('slice', var.get('index'), (var.get('index')+var.get('search').get('length'))),var.get('search')))
        PyJs_startsWith_1622_._set_name('startsWith')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('require')(Js('./_fails-is-regexp'))(var.get('STARTS_WITH')))), Js('String'), Js({'startsWith':PyJs_startsWith_1622_}))
    PyJs_anonymous_1621_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1623_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1624_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_strike_1625_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'strike':PyJs_strike_1625_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('strike'), Js(''), Js(''))
            PyJs_strike_1625_._set_name('strike')
            return PyJs_strike_1625_
        PyJs_anonymous_1624_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('strike'), PyJs_anonymous_1624_)
    PyJs_anonymous_1623_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1626_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1627_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_sub_1628_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'sub':PyJs_sub_1628_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('sub'), Js(''), Js(''))
            PyJs_sub_1628_._set_name('sub')
            return PyJs_sub_1628_
        PyJs_anonymous_1627_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('sub'), PyJs_anonymous_1627_)
    PyJs_anonymous_1626_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1629_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1630_(createHTML, this, arguments, var=var):
            var = Scope({'createHTML':createHTML, 'this':this, 'arguments':arguments}, var)
            var.registers(['createHTML'])
            @Js
            def PyJs_sup_1631_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'sup':PyJs_sup_1631_}, var)
                var.registers([])
                return var.get('createHTML')(var.get(u"this"), Js('sup'), Js(''), Js(''))
            PyJs_sup_1631_._set_name('sup')
            return PyJs_sup_1631_
        PyJs_anonymous_1630_._set_name('anonymous')
        var.get('require')(Js('./_string-html'))(Js('sup'), PyJs_anonymous_1630_)
    PyJs_anonymous_1629_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1632_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1633_(PyJsArg_247472696d_, this, arguments, var=var):
            var = Scope({'$trim':PyJsArg_247472696d_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$trim'])
            @Js
            def PyJs_trim_1634_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'trim':PyJs_trim_1634_}, var)
                var.registers([])
                return var.get('$trim')(var.get(u"this"), Js(3.0))
            PyJs_trim_1634_._set_name('trim')
            return PyJs_trim_1634_
        PyJs_anonymous_1633_._set_name('anonymous')
        var.get('require')(Js('./_string-trim'))(Js('trim'), PyJs_anonymous_1633_)
    PyJs_anonymous_1632_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1635_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['es6Symbols', '$getOwnPropertySymbols', '$getOwnPropertyNames', '$defineProperty', 'module', 'j', 'setSymbolDesc', 'wellKnownSymbols', 'DESCRIPTORS', 'wksExt', 'createDesc', '$export', 'OPSymbols', 'wks', '$defineProperties', 'redefine', 'isEnum', 'has', '$create', 'TO_PRIMITIVE', 'AllSymbols', '$keys', 'gOPD', 'dP', 'toIObject', 'gOPNExt', '_stringify', '$GOPD', 'ObjectProto', 'META', 'enumKeys', 'require', 'toPrimitive', 'setToStringTag', 'setter', 'wrap', '$Symbol', '$getOwnPropertyDescriptor', 'anObject', 'k', 'FAILS_ON_PRIMITIVES', 'toObject', '$fails', '$GOPS', 'exports', '$JSON', '$propertyIsEnumerable', 'shared', '_create', 'isArray', 'PROTOTYPE', 'isObject', 'gOPN', 'USE_NATIVE', 'isSymbol', 'SymbolRegistry', 'HIDDEN', 'global', 'QObject', '$DP', 'uid', 'wksDefine'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('META', var.get('require')(Js('./_meta')).get('KEY'))
        var.put('$fails', var.get('require')(Js('./_fails')))
        var.put('shared', var.get('require')(Js('./_shared')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('uid', var.get('require')(Js('./_uid')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('wksExt', var.get('require')(Js('./_wks-ext')))
        var.put('wksDefine', var.get('require')(Js('./_wks-define')))
        var.put('enumKeys', var.get('require')(Js('./_enum-keys')))
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('_create', var.get('require')(Js('./_object-create')))
        var.put('gOPNExt', var.get('require')(Js('./_object-gopn-ext')))
        var.put('$GOPD', var.get('require')(Js('./_object-gopd')))
        var.put('$GOPS', var.get('require')(Js('./_object-gops')))
        var.put('$DP', var.get('require')(Js('./_object-dp')))
        var.put('$keys', var.get('require')(Js('./_object-keys')))
        var.put('gOPD', var.get('$GOPD').get('f'))
        var.put('dP', var.get('$DP').get('f'))
        var.put('gOPN', var.get('gOPNExt').get('f'))
        var.put('$Symbol', var.get('global').get('Symbol'))
        var.put('$JSON', var.get('global').get('JSON'))
        var.put('_stringify', (var.get('$JSON') and var.get('$JSON').get('stringify')))
        var.put('PROTOTYPE', Js('prototype'))
        var.put('HIDDEN', var.get('wks')(Js('_hidden')))
        var.put('TO_PRIMITIVE', var.get('wks')(Js('toPrimitive')))
        var.put('isEnum', Js({}).get('propertyIsEnumerable'))
        var.put('SymbolRegistry', var.get('shared')(Js('symbol-registry')))
        var.put('AllSymbols', var.get('shared')(Js('symbols')))
        var.put('OPSymbols', var.get('shared')(Js('op-symbols')))
        var.put('ObjectProto', var.get('Object').get(var.get('PROTOTYPE')))
        var.put('USE_NATIVE', ((var.get('$Symbol',throw=False).typeof()==Js('function')) and var.get('$GOPS').get('f').neg().neg()))
        var.put('QObject', var.get('global').get('QObject'))
        var.put('setter', ((var.get('QObject').neg() or var.get('QObject').get(var.get('PROTOTYPE')).neg()) or var.get('QObject').get(var.get('PROTOTYPE')).get('findChild').neg()))
        @Js
        def PyJs_anonymous_1636_(it, key, D, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'D':D, 'this':this, 'arguments':arguments}, var)
            var.registers(['D', 'protoDesc', 'key', 'it'])
            var.put('protoDesc', var.get('gOPD')(var.get('ObjectProto'), var.get('key')))
            if var.get('protoDesc'):
                var.get('ObjectProto').delete(var.get('key'))
            var.get('dP')(var.get('it'), var.get('key'), var.get('D'))
            if (var.get('protoDesc') and PyJsStrictNeq(var.get('it'),var.get('ObjectProto'))):
                var.get('dP')(var.get('ObjectProto'), var.get('key'), var.get('protoDesc'))
        PyJs_anonymous_1636_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1637_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_1638_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_1638_}, var)
                var.registers([])
                return var.get('dP')(var.get(u"this"), Js('a'), Js({'value':Js(7.0)})).get('a')
            PyJs_get_1638_._set_name('get')
            return (var.get('_create')(var.get('dP')(Js({}), Js('a'), Js({'get':PyJs_get_1638_}))).get('a')!=Js(7.0))
        PyJs_anonymous_1637_._set_name('anonymous')
        var.put('setSymbolDesc', (PyJs_anonymous_1636_ if (var.get('DESCRIPTORS') and var.get('$fails')(PyJs_anonymous_1637_)) else var.get('dP')))
        @Js
        def PyJs_wrap_1639_(tag, this, arguments, var=var):
            var = Scope({'tag':tag, 'this':this, 'arguments':arguments, 'wrap':PyJs_wrap_1639_}, var)
            var.registers(['tag', 'sym'])
            var.put('sym', var.get('AllSymbols').put(var.get('tag'), var.get('_create')(var.get('$Symbol').get(var.get('PROTOTYPE')))))
            var.get('sym').put('_k', var.get('tag'))
            return var.get('sym')
        PyJs_wrap_1639_._set_name('wrap')
        var.put('wrap', PyJs_wrap_1639_)
        @Js
        def PyJs_anonymous_1640_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return ((Js('undefined') if _seq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol'))
        PyJs_anonymous_1640_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1641_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('it').instanceof(var.get('$Symbol'))
        PyJs_anonymous_1641_._set_name('anonymous')
        var.put('isSymbol', (PyJs_anonymous_1640_ if (var.get('USE_NATIVE') and (var.get('_typeof')(var.get('$Symbol').get('iterator'))==Js('symbol'))) else PyJs_anonymous_1641_))
        @Js
        def PyJs_defineProperty_1642_(it, key, D, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'D':D, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_1642_}, var)
            var.registers(['D', 'key', 'it'])
            if _seq(var.get('it'),var.get('ObjectProto')):
                var.get('$defineProperty')(var.get('OPSymbols'), var.get('key'), var.get('D'))
            var.get('anObject')(var.get('it'))
            var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))
            var.get('anObject')(var.get('D'))
            if var.get('has')(var.get('AllSymbols'), var.get('key')):
                if var.get('D').get('enumerable').neg():
                    if var.get('has')(var.get('it'), var.get('HIDDEN')).neg():
                        var.get('dP')(var.get('it'), var.get('HIDDEN'), var.get('createDesc')(Js(1.0), Js({})))
                    var.get('it').get(var.get('HIDDEN')).put(var.get('key'), Js(True))
                else:
                    if (var.get('has')(var.get('it'), var.get('HIDDEN')) and var.get('it').get(var.get('HIDDEN')).get(var.get('key'))):
                        var.get('it').get(var.get('HIDDEN')).put(var.get('key'), Js(False))
                    var.put('D', var.get('_create')(var.get('D'), Js({'enumerable':var.get('createDesc')(Js(0.0), Js(False))})))
                return var.get('setSymbolDesc')(var.get('it'), var.get('key'), var.get('D'))
            return var.get('dP')(var.get('it'), var.get('key'), var.get('D'))
        PyJs_defineProperty_1642_._set_name('defineProperty')
        var.put('$defineProperty', PyJs_defineProperty_1642_)
        @Js
        def PyJs_defineProperties_1643_(it, P, this, arguments, var=var):
            var = Scope({'it':it, 'P':P, 'this':this, 'arguments':arguments, 'defineProperties':PyJs_defineProperties_1643_}, var)
            var.registers(['P', 'i', 'l', 'it', 'key', 'keys'])
            var.get('anObject')(var.get('it'))
            var.put('keys', var.get('enumKeys')(var.put('P', var.get('toIObject')(var.get('P')))))
            var.put('i', Js(0.0))
            var.put('l', var.get('keys').get('length'))
            pass
            while (var.get('l')>var.get('i')):
                var.get('$defineProperty')(var.get('it'), var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))), var.get('P').get(var.get('key')))
            return var.get('it')
        PyJs_defineProperties_1643_._set_name('defineProperties')
        var.put('$defineProperties', PyJs_defineProperties_1643_)
        @Js
        def PyJs_create_1644_(it, P, this, arguments, var=var):
            var = Scope({'it':it, 'P':P, 'this':this, 'arguments':arguments, 'create':PyJs_create_1644_}, var)
            var.registers(['P', 'it'])
            return (var.get('_create')(var.get('it')) if _seq(var.get('P'),var.get('undefined')) else var.get('$defineProperties')(var.get('_create')(var.get('it')), var.get('P')))
        PyJs_create_1644_._set_name('create')
        var.put('$create', PyJs_create_1644_)
        @Js
        def PyJs_propertyIsEnumerable_1645_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'propertyIsEnumerable':PyJs_propertyIsEnumerable_1645_}, var)
            var.registers(['E', 'key'])
            var.put('E', var.get('isEnum').callprop('call', var.get(u"this"), var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))))
            if ((_seq(var.get(u"this"),var.get('ObjectProto')) and var.get('has')(var.get('AllSymbols'), var.get('key'))) and var.get('has')(var.get('OPSymbols'), var.get('key')).neg()):
                return Js(False)
            return (var.get('E') if (((var.get('E') or var.get('has')(var.get(u"this"), var.get('key')).neg()) or var.get('has')(var.get('AllSymbols'), var.get('key')).neg()) or (var.get('has')(var.get(u"this"), var.get('HIDDEN')) and var.get(u"this").get(var.get('HIDDEN')).get(var.get('key')))) else Js(True))
        PyJs_propertyIsEnumerable_1645_._set_name('propertyIsEnumerable')
        var.put('$propertyIsEnumerable', PyJs_propertyIsEnumerable_1645_)
        @Js
        def PyJs_getOwnPropertyDescriptor_1646_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_1646_}, var)
            var.registers(['D', 'key', 'it'])
            var.put('it', var.get('toIObject')(var.get('it')))
            var.put('key', var.get('toPrimitive')(var.get('key'), Js(True)))
            if ((_seq(var.get('it'),var.get('ObjectProto')) and var.get('has')(var.get('AllSymbols'), var.get('key'))) and var.get('has')(var.get('OPSymbols'), var.get('key')).neg()):
                return var.get('undefined')
            var.put('D', var.get('gOPD')(var.get('it'), var.get('key')))
            if ((var.get('D') and var.get('has')(var.get('AllSymbols'), var.get('key'))) and (var.get('has')(var.get('it'), var.get('HIDDEN')) and var.get('it').get(var.get('HIDDEN')).get(var.get('key'))).neg()):
                var.get('D').put('enumerable', Js(True))
            return var.get('D')
        PyJs_getOwnPropertyDescriptor_1646_._set_name('getOwnPropertyDescriptor')
        var.put('$getOwnPropertyDescriptor', PyJs_getOwnPropertyDescriptor_1646_)
        @Js
        def PyJs_getOwnPropertyNames_1647_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_1647_}, var)
            var.registers(['i', 'it', 'names', 'key', 'result'])
            var.put('names', var.get('gOPN')(var.get('toIObject')(var.get('it'))))
            var.put('result', Js([]))
            var.put('i', Js(0.0))
            pass
            while (var.get('names').get('length')>var.get('i')):
                if ((var.get('has')(var.get('AllSymbols'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))).neg() and (var.get('key')!=var.get('HIDDEN'))) and (var.get('key')!=var.get('META'))):
                    var.get('result').callprop('push', var.get('key'))
            return var.get('result')
        PyJs_getOwnPropertyNames_1647_._set_name('getOwnPropertyNames')
        var.put('$getOwnPropertyNames', PyJs_getOwnPropertyNames_1647_)
        @Js
        def PyJs_getOwnPropertySymbols_1648_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_1648_}, var)
            var.registers(['i', 'it', 'names', 'IS_OP', 'key', 'result'])
            var.put('IS_OP', _seq(var.get('it'),var.get('ObjectProto')))
            var.put('names', var.get('gOPN')((var.get('OPSymbols') if var.get('IS_OP') else var.get('toIObject')(var.get('it')))))
            var.put('result', Js([]))
            var.put('i', Js(0.0))
            pass
            while (var.get('names').get('length')>var.get('i')):
                if (var.get('has')(var.get('AllSymbols'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))) and (var.get('has')(var.get('ObjectProto'), var.get('key')) if var.get('IS_OP') else Js(True))):
                    var.get('result').callprop('push', var.get('AllSymbols').get(var.get('key')))
            return var.get('result')
        PyJs_getOwnPropertySymbols_1648_._set_name('getOwnPropertySymbols')
        var.put('$getOwnPropertySymbols', PyJs_getOwnPropertySymbols_1648_)
        if var.get('USE_NATIVE').neg():
            @Js
            def PyJs__Symbol2_1649_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, '_Symbol2':PyJs__Symbol2_1649_}, var)
                var.registers(['$set', 'tag'])
                if var.get(u"this").instanceof(var.get('$Symbol')):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('Symbol is not a constructor!')))
                    raise PyJsTempException
                var.put('tag', var.get('uid')((var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined'))))
                @Js
                def PyJs_InlineNonPyName_1650_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, '$set':PyJs_InlineNonPyName_1650_}, var)
                    var.registers(['value'])
                    if _seq(var.get(u"this"),var.get('ObjectProto')):
                        var.get('$set').callprop('call', var.get('OPSymbols'), var.get('value'))
                    if (var.get('has')(var.get(u"this"), var.get('HIDDEN')) and var.get('has')(var.get(u"this").get(var.get('HIDDEN')), var.get('tag'))):
                        var.get(u"this").get(var.get('HIDDEN')).put(var.get('tag'), Js(False))
                    var.get('setSymbolDesc')(var.get(u"this"), var.get('tag'), var.get('createDesc')(Js(1.0), var.get('value')))
                PyJs_InlineNonPyName_1650_._set_name('$set')
                var.put('$set', PyJs_InlineNonPyName_1650_)
                if (var.get('DESCRIPTORS') and var.get('setter')):
                    var.get('setSymbolDesc')(var.get('ObjectProto'), var.get('tag'), Js({'configurable':Js(True),'set':var.get('$set')}))
                return var.get('wrap')(var.get('tag'))
            PyJs__Symbol2_1649_._set_name('_Symbol2')
            var.put('$Symbol', PyJs__Symbol2_1649_)
            @Js
            def PyJs_toString_1651_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_1651_}, var)
                var.registers([])
                return var.get(u"this").get('_k')
            PyJs_toString_1651_._set_name('toString')
            var.get('redefine')(var.get('$Symbol').get(var.get('PROTOTYPE')), Js('toString'), PyJs_toString_1651_)
            var.get('$GOPD').put('f', var.get('$getOwnPropertyDescriptor'))
            var.get('$DP').put('f', var.get('$defineProperty'))
            var.get('require')(Js('./_object-gopn')).put('f', var.get('gOPNExt').put('f', var.get('$getOwnPropertyNames')))
            var.get('require')(Js('./_object-pie')).put('f', var.get('$propertyIsEnumerable'))
            var.get('$GOPS').put('f', var.get('$getOwnPropertySymbols'))
            if (var.get('DESCRIPTORS') and var.get('require')(Js('./_library')).neg()):
                var.get('redefine')(var.get('ObjectProto'), Js('propertyIsEnumerable'), var.get('$propertyIsEnumerable'), Js(True))
            @Js
            def PyJs_anonymous_1652_(name, this, arguments, var=var):
                var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                var.registers(['name'])
                return var.get('wrap')(var.get('wks')(var.get('name')))
            PyJs_anonymous_1652_._set_name('anonymous')
            var.get('wksExt').put('f', PyJs_anonymous_1652_)
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js({'Symbol':var.get('$Symbol')}))
        #for JS loop
        var.put('es6Symbols', Js('hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables').callprop('split', Js(',')))
        var.put('j', Js(0.0))
        while (var.get('es6Symbols').get('length')>var.get('j')):
            var.get('wks')(var.get('es6Symbols').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))

        #for JS loop
        var.put('wellKnownSymbols', var.get('$keys')(var.get('wks').get('store')))
        var.put('k', Js(0.0))
        while (var.get('wellKnownSymbols').get('length')>var.get('k')):
            var.get('wksDefine')(var.get('wellKnownSymbols').get((var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))))

        @Js
        def PyJs__for_1653_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, '_for':PyJs__for_1653_}, var)
            var.registers(['key'])
            return (var.get('SymbolRegistry').get(var.get('key')) if var.get('has')(var.get('SymbolRegistry'), var.put('key', Js(''), '+')) else var.get('SymbolRegistry').put(var.get('key'), var.get('$Symbol')(var.get('key'))))
        PyJs__for_1653_._set_name('_for')
        @Js
        def PyJs_keyFor_1654_(sym, this, arguments, var=var):
            var = Scope({'sym':sym, 'this':this, 'arguments':arguments, 'keyFor':PyJs_keyFor_1654_}, var)
            var.registers(['key', 'sym'])
            if var.get('isSymbol')(var.get('sym')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('sym')+Js(' is not a symbol!'))))
                raise PyJsTempException
            for PyJsTemp in var.get('SymbolRegistry'):
                var.put('key', PyJsTemp)
                if _seq(var.get('SymbolRegistry').get(var.get('key')),var.get('sym')):
                    return var.get('key')
        PyJs_keyFor_1654_._set_name('keyFor')
        @Js
        def PyJs_useSetter_1655_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'useSetter':PyJs_useSetter_1655_}, var)
            var.registers([])
            var.put('setter', Js(True))
        PyJs_useSetter_1655_._set_name('useSetter')
        @Js
        def PyJs_useSimple_1656_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'useSimple':PyJs_useSimple_1656_}, var)
            var.registers([])
            var.put('setter', Js(False))
        PyJs_useSimple_1656_._set_name('useSimple')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js('Symbol'), Js({'for':PyJs__for_1653_,'keyFor':PyJs_keyFor_1654_,'useSetter':PyJs_useSetter_1655_,'useSimple':PyJs_useSimple_1656_}))
        def PyJs_LONG_1657_(var=var):
            return var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('USE_NATIVE').neg())), Js('Object'), Js({'create':var.get('$create'),'defineProperty':var.get('$defineProperty'),'defineProperties':var.get('$defineProperties'),'getOwnPropertyDescriptor':var.get('$getOwnPropertyDescriptor'),'getOwnPropertyNames':var.get('$getOwnPropertyNames'),'getOwnPropertySymbols':var.get('$getOwnPropertySymbols')}))
        PyJs_LONG_1657_()
        @Js
        def PyJs_anonymous_1658_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$GOPS').callprop('f', Js(1.0))
        PyJs_anonymous_1658_._set_name('anonymous')
        var.put('FAILS_ON_PRIMITIVES', var.get('$fails')(PyJs_anonymous_1658_))
        @Js
        def PyJs_getOwnPropertySymbols_1659_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_1659_}, var)
            var.registers(['it'])
            return var.get('$GOPS').callprop('f', var.get('toObject')(var.get('it')))
        PyJs_getOwnPropertySymbols_1659_._set_name('getOwnPropertySymbols')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('FAILS_ON_PRIMITIVES'))), Js('Object'), Js({'getOwnPropertySymbols':PyJs_getOwnPropertySymbols_1659_}))
        @Js
        def PyJs_anonymous_1660_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['S'])
            var.put('S', var.get('$Symbol')())
            return (((var.get('_stringify')(Js([var.get('S')]))!=Js('[null]')) or (var.get('_stringify')(Js({'a':var.get('S')}))!=Js('{}'))) or (var.get('_stringify')(var.get('Object')(var.get('S')))!=Js('{}')))
        PyJs_anonymous_1660_._set_name('anonymous')
        @Js
        def PyJs_stringify_1661_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1661_}, var)
            var.registers(['$replacer', 'i', 'it', 'replacer', 'args'])
            var.put('args', Js([var.get('it')]))
            var.put('i', Js(1.0))
            pass
            while (var.get('arguments').get('length')>var.get('i')):
                var.get('args').callprop('push', var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
            var.put('$replacer', var.put('replacer', var.get('args').get('1')))
            if ((var.get('isObject')(var.get('replacer')).neg() and _seq(var.get('it'),var.get('undefined'))) or var.get('isSymbol')(var.get('it'))):
                return var.get('undefined')
            if var.get('isArray')(var.get('replacer')).neg():
                @Js
                def PyJs_replacer_1662_(key, value, this, arguments, var=var):
                    var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'replacer':PyJs_replacer_1662_}, var)
                    var.registers(['key', 'value'])
                    if (var.get('$replacer',throw=False).typeof()==Js('function')):
                        var.put('value', var.get('$replacer').callprop('call', var.get(u"this"), var.get('key'), var.get('value')))
                    if var.get('isSymbol')(var.get('value')).neg():
                        return var.get('value')
                PyJs_replacer_1662_._set_name('replacer')
                var.put('replacer', PyJs_replacer_1662_)
            var.get('args').put('1', var.get('replacer'))
            return var.get('_stringify').callprop('apply', var.get('$JSON'), var.get('args'))
        PyJs_stringify_1661_._set_name('stringify')
        (var.get('$JSON') and var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*(var.get('USE_NATIVE').neg() or var.get('$fails')(PyJs_anonymous_1660_)))), Js('JSON'), Js({'stringify':PyJs_stringify_1661_})))
        (var.get('$Symbol').get(var.get('PROTOTYPE')).get(var.get('TO_PRIMITIVE')) or var.get('require')(Js('./_hide'))(var.get('$Symbol').get(var.get('PROTOTYPE')), var.get('TO_PRIMITIVE'), var.get('$Symbol').get(var.get('PROTOTYPE')).get('valueOf')))
        var.get('setToStringTag')(var.get('$Symbol'), Js('Symbol'))
        var.get('setToStringTag')(var.get('Math'), Js('Math'), Js(True))
        var.get('setToStringTag')(var.get('global').get('JSON'), Js('JSON'), Js(True))
    PyJs_anonymous_1635_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1663_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'buffer', 'module', 'toLength', 'ArrayBuffer', 'isObject', 'anObject', '$isView', '$typed', 'toAbsoluteIndex', 'speciesConstructor', '$ArrayBuffer', 'VIEW', '$export', '$DataView', '$slice', 'ARRAY_BUFFER'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$typed', var.get('require')(Js('./_typed')))
        var.put('buffer', var.get('require')(Js('./_typed-buffer')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('ArrayBuffer', var.get('require')(Js('./_global')).get('ArrayBuffer'))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('$ArrayBuffer', var.get('buffer').get('ArrayBuffer'))
        var.put('$DataView', var.get('buffer').get('DataView'))
        var.put('$isView', (var.get('$typed').get('ABV') and var.get('ArrayBuffer').get('isView')))
        var.put('$slice', var.get('$ArrayBuffer').get('prototype').get('slice'))
        var.put('VIEW', var.get('$typed').get('VIEW'))
        var.put('ARRAY_BUFFER', Js('ArrayBuffer'))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*PyJsStrictNeq(var.get('ArrayBuffer'),var.get('$ArrayBuffer')))), Js({'ArrayBuffer':var.get('$ArrayBuffer')}))
        @Js
        def PyJs_isView_1664_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isView':PyJs_isView_1664_}, var)
            var.registers(['it'])
            return ((var.get('$isView') and var.get('$isView')(var.get('it'))) or (var.get('isObject')(var.get('it')) and var.get('it').contains(var.get('VIEW'))))
        PyJs_isView_1664_._set_name('isView')
        var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('$typed').get('CONSTR').neg())), var.get('ARRAY_BUFFER'), Js({'isView':PyJs_isView_1664_}))
        @Js
        def PyJs_anonymous_1665_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('$ArrayBuffer').create(Js(2.0)).callprop('slice', Js(1.0), var.get('undefined')).get('byteLength').neg()
        PyJs_anonymous_1665_._set_name('anonymous')
        @Js
        def PyJs_slice_1666_(start, end, this, arguments, var=var):
            var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_1666_}, var)
            var.registers(['first', 'fin', 'len', 'viewS', 'viewT', 'index', 'start', 'end', 'result'])
            if (PyJsStrictNeq(var.get('$slice'),var.get('undefined')) and _seq(var.get('end'),var.get('undefined'))):
                return var.get('$slice').callprop('call', var.get('anObject')(var.get(u"this")), var.get('start'))
            var.put('len', var.get('anObject')(var.get(u"this")).get('byteLength'))
            var.put('first', var.get('toAbsoluteIndex')(var.get('start'), var.get('len')))
            var.put('fin', var.get('toAbsoluteIndex')((var.get('len') if _seq(var.get('end'),var.get('undefined')) else var.get('end')), var.get('len')))
            var.put('result', var.get('speciesConstructor')(var.get(u"this"), var.get('$ArrayBuffer')).create(var.get('toLength')((var.get('fin')-var.get('first')))))
            var.put('viewS', var.get('$DataView').create(var.get(u"this")))
            var.put('viewT', var.get('$DataView').create(var.get('result')))
            var.put('index', Js(0.0))
            while (var.get('first')<var.get('fin')):
                var.get('viewT').callprop('setUint8', (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('viewS').callprop('getUint8', (var.put('first',Js(var.get('first').to_number())+Js(1))-Js(1))))
            return var.get('result')
        PyJs_slice_1666_._set_name('slice')
        var.get('$export')(((var.get('$export').get('P')+var.get('$export').get('U'))+(var.get('$export').get('F')*var.get('require')(Js('./_fails'))(PyJs_anonymous_1665_))), var.get('ARRAY_BUFFER'), Js({'slice':PyJs_slice_1666_}))
        var.get('require')(Js('./_set-species'))(var.get('ARRAY_BUFFER'))
    PyJs_anonymous_1663_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1667_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*var.get('require')(Js('./_typed')).get('ABV').neg())), Js({'DataView':var.get('require')(Js('./_typed-buffer')).get('DataView')}))
    PyJs_anonymous_1667_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1668_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1669_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Float32Array_1670_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Float32Array':PyJs_Float32Array_1670_}, var)
                var.registers(['data', 'length', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Float32Array_1670_._set_name('Float32Array')
            return PyJs_Float32Array_1670_
        PyJs_anonymous_1669_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Float32'), Js(4.0), PyJs_anonymous_1669_)
    PyJs_anonymous_1668_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1671_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1672_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Float64Array_1673_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Float64Array':PyJs_Float64Array_1673_}, var)
                var.registers(['data', 'length', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Float64Array_1673_._set_name('Float64Array')
            return PyJs_Float64Array_1673_
        PyJs_anonymous_1672_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Float64'), Js(8.0), PyJs_anonymous_1672_)
    PyJs_anonymous_1671_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1674_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1675_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Int16Array_1676_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Int16Array':PyJs_Int16Array_1676_}, var)
                var.registers(['data', 'length', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Int16Array_1676_._set_name('Int16Array')
            return PyJs_Int16Array_1676_
        PyJs_anonymous_1675_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Int16'), Js(2.0), PyJs_anonymous_1675_)
    PyJs_anonymous_1674_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1677_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1678_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Int32Array_1679_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Int32Array':PyJs_Int32Array_1679_}, var)
                var.registers(['data', 'length', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Int32Array_1679_._set_name('Int32Array')
            return PyJs_Int32Array_1679_
        PyJs_anonymous_1678_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Int32'), Js(4.0), PyJs_anonymous_1678_)
    PyJs_anonymous_1677_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1680_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1681_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Int8Array_1682_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Int8Array':PyJs_Int8Array_1682_}, var)
                var.registers(['data', 'length', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Int8Array_1682_._set_name('Int8Array')
            return PyJs_Int8Array_1682_
        PyJs_anonymous_1681_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Int8'), Js(1.0), PyJs_anonymous_1681_)
    PyJs_anonymous_1680_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1683_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1684_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint16Array_1685_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint16Array':PyJs_Uint16Array_1685_}, var)
                var.registers(['data', 'length', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint16Array_1685_._set_name('Uint16Array')
            return PyJs_Uint16Array_1685_
        PyJs_anonymous_1684_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint16'), Js(2.0), PyJs_anonymous_1684_)
    PyJs_anonymous_1683_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1686_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1687_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint32Array_1688_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint32Array':PyJs_Uint32Array_1688_}, var)
                var.registers(['data', 'length', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint32Array_1688_._set_name('Uint32Array')
            return PyJs_Uint32Array_1688_
        PyJs_anonymous_1687_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint32'), Js(4.0), PyJs_anonymous_1687_)
    PyJs_anonymous_1686_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1689_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1690_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint8Array_1691_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint8Array':PyJs_Uint8Array_1691_}, var)
                var.registers(['data', 'length', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint8Array_1691_._set_name('Uint8Array')
            return PyJs_Uint8Array_1691_
        PyJs_anonymous_1690_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint8'), Js(1.0), PyJs_anonymous_1690_)
    PyJs_anonymous_1689_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1692_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1693_(init, this, arguments, var=var):
            var = Scope({'init':init, 'this':this, 'arguments':arguments}, var)
            var.registers(['init'])
            @Js
            def PyJs_Uint8ClampedArray_1694_(data, byteOffset, length, this, arguments, var=var):
                var = Scope({'data':data, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments, 'Uint8ClampedArray':PyJs_Uint8ClampedArray_1694_}, var)
                var.registers(['data', 'length', 'byteOffset'])
                return var.get('init')(var.get(u"this"), var.get('data'), var.get('byteOffset'), var.get('length'))
            PyJs_Uint8ClampedArray_1694_._set_name('Uint8ClampedArray')
            return PyJs_Uint8ClampedArray_1694_
        PyJs_anonymous_1693_._set_name('anonymous')
        var.get('require')(Js('./_typed-array'))(Js('Uint8'), Js(1.0), PyJs_anonymous_1693_, Js(True))
    PyJs_anonymous_1692_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1695_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'uncaughtFrozenStore', 'redefine', 'WEAK_MAP', 'InternalMap', 'meta', 'require', 'validate', '$WeakMap', 'each', 'wrapper', 'getWeak', 'assign', 'exports', 'methods', 'isObject', 'global', 'IS_IE11', 'weak', 'isExtensible', 'NATIVE_WEAK_MAP'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('each', var.get('require')(Js('./_array-methods'))(Js(0.0)))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('meta', var.get('require')(Js('./_meta')))
        var.put('assign', var.get('require')(Js('./_object-assign')))
        var.put('weak', var.get('require')(Js('./_collection-weak')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('NATIVE_WEAK_MAP', var.get('require')(Js('./_validate-collection')))
        var.put('IS_IE11', (var.get('global').get('ActiveXObject').neg() and var.get('global').contains(Js('ActiveXObject'))))
        var.put('WEAK_MAP', Js('WeakMap'))
        var.put('getWeak', var.get('meta').get('getWeak'))
        var.put('isExtensible', var.get('Object').get('isExtensible'))
        var.put('uncaughtFrozenStore', var.get('weak').get('ufstore'))
        pass
        @Js
        def PyJs_wrapper_1696_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments, 'wrapper':PyJs_wrapper_1696_}, var)
            var.registers(['get'])
            @Js
            def PyJs_WeakMap_1697_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'WeakMap':PyJs_WeakMap_1697_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_WeakMap_1697_._set_name('WeakMap')
            return PyJs_WeakMap_1697_
        PyJs_wrapper_1696_._set_name('wrapper')
        var.put('wrapper', PyJs_wrapper_1696_)
        @Js
        def PyJs_get_1698_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_1698_}, var)
            var.registers(['data', 'key'])
            if var.get('isObject')(var.get('key')):
                var.put('data', var.get('getWeak')(var.get('key')))
                if _seq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('WEAK_MAP'))).callprop('get', var.get('key'))
                return (var.get('data').get(var.get(u"this").get('_i')) if var.get('data') else var.get('undefined'))
        PyJs_get_1698_._set_name('get')
        @Js
        def PyJs_set_1699_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_1699_}, var)
            var.registers(['key', 'value'])
            return var.get('weak').callprop('def', var.get('validate')(var.get(u"this"), var.get('WEAK_MAP')), var.get('key'), var.get('value'))
        PyJs_set_1699_._set_name('set')
        var.put('methods', Js({'get':PyJs_get_1698_,'set':PyJs_set_1699_}))
        var.put('$WeakMap', var.get('module').put('exports', var.get('require')(Js('./_collection'))(var.get('WEAK_MAP'), var.get('wrapper'), var.get('methods'), var.get('weak'), Js(True), Js(True))))
        if (var.get('NATIVE_WEAK_MAP') and var.get('IS_IE11')):
            var.put('InternalMap', var.get('weak').callprop('getConstructor', var.get('wrapper'), var.get('WEAK_MAP')))
            var.get('assign')(var.get('InternalMap').get('prototype'), var.get('methods'))
            var.get('meta').put('NEED', Js(True))
            @Js
            def PyJs_anonymous_1700_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                var.registers(['key', 'proto', 'method'])
                var.put('proto', var.get('$WeakMap').get('prototype'))
                var.put('method', var.get('proto').get(var.get('key')))
                @Js
                def PyJs_anonymous_1701_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a', 'result', 'b'])
                    if (var.get('isObject')(var.get('a')) and var.get('isExtensible')(var.get('a')).neg()):
                        if var.get(u"this").get('_f').neg():
                            var.get(u"this").put('_f', var.get('InternalMap').create())
                        var.put('result', var.get(u"this").get('_f').callprop(var.get('key'), var.get('a'), var.get('b')))
                        return (var.get(u"this") if (var.get('key')==Js('set')) else var.get('result'))
                    return var.get('method').callprop('call', var.get(u"this"), var.get('a'), var.get('b'))
                PyJs_anonymous_1701_._set_name('anonymous')
                var.get('redefine')(var.get('proto'), var.get('key'), PyJs_anonymous_1701_)
            PyJs_anonymous_1700_._set_name('anonymous')
            var.get('each')(Js([Js('delete'), Js('has'), Js('get'), Js('set')]), PyJs_anonymous_1700_)
    PyJs_anonymous_1695_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1702_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'validate', 'module', 'WEAK_SET', 'weak'])
        Js('use strict')
        var.put('weak', var.get('require')(Js('./_collection-weak')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('WEAK_SET', Js('WeakSet'))
        @Js
        def PyJs_anonymous_1703_(get, this, arguments, var=var):
            var = Scope({'get':get, 'this':this, 'arguments':arguments}, var)
            var.registers(['get'])
            @Js
            def PyJs_WeakSet_1704_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'WeakSet':PyJs_WeakSet_1704_}, var)
                var.registers([])
                return var.get('get')(var.get(u"this"), (var.get('arguments').get('0') if (var.get('arguments').get('length')>Js(0.0)) else var.get('undefined')))
            PyJs_WeakSet_1704_._set_name('WeakSet')
            return PyJs_WeakSet_1704_
        PyJs_anonymous_1703_._set_name('anonymous')
        @Js
        def PyJs_add_1705_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'add':PyJs_add_1705_}, var)
            var.registers(['value'])
            return var.get('weak').callprop('def', var.get('validate')(var.get(u"this"), var.get('WEAK_SET')), var.get('value'), Js(True))
        PyJs_add_1705_._set_name('add')
        var.get('require')(Js('./_collection'))(var.get('WEAK_SET'), PyJs_anonymous_1703_, Js({'add':PyJs_add_1705_}), var.get('weak'), Js(False), Js(True))
    PyJs_anonymous_1702_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1706_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'aFunction', 'arraySpeciesCreate', 'flattenIntoArray', 'toObject', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('flattenIntoArray', var.get('require')(Js('./_flatten-into-array')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('arraySpeciesCreate', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_flatMap_1707_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'flatMap':PyJs_flatMap_1707_}, var)
            var.registers(['callbackfn', 'sourceLen', 'A', 'O'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            pass
            var.get('aFunction')(var.get('callbackfn'))
            var.put('sourceLen', var.get('toLength')(var.get('O').get('length')))
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), Js(0.0)))
            var.get('flattenIntoArray')(var.get('A'), var.get('O'), var.get('O'), var.get('sourceLen'), Js(0.0), Js(1.0), var.get('callbackfn'), var.get('arguments').get('1'))
            return var.get('A')
        PyJs_flatMap_1707_._set_name('flatMap')
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'flatMap':PyJs_flatMap_1707_}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('flatMap'))
    PyJs_anonymous_1706_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1708_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toLength', 'arraySpeciesCreate', 'toInteger', 'flattenIntoArray', 'toObject', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('flattenIntoArray', var.get('require')(Js('./_flatten-into-array')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('arraySpeciesCreate', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_flatten_1709_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'flatten':PyJs_flatten_1709_}, var)
            var.registers(['sourceLen', 'depthArg', 'A', 'O'])
            var.put('depthArg', var.get('arguments').get('0'))
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('sourceLen', var.get('toLength')(var.get('O').get('length')))
            var.put('A', var.get('arraySpeciesCreate')(var.get('O'), Js(0.0)))
            var.get('flattenIntoArray')(var.get('A'), var.get('O'), var.get('O'), var.get('sourceLen'), Js(0.0), (Js(1.0) if _seq(var.get('depthArg'),var.get('undefined')) else var.get('toInteger')(var.get('depthArg'))))
            return var.get('A')
        PyJs_flatten_1709_._set_name('flatten')
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'flatten':PyJs_flatten_1709_}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('flatten'))
    PyJs_anonymous_1708_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1710_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$includes', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$includes', var.get('require')(Js('./_array-includes'))(Js(True)))
        @Js
        def PyJs_includes_1711_(el, this, arguments, var=var):
            var = Scope({'el':el, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_1711_}, var)
            var.registers(['el'])
            return var.get('$includes')(var.get(u"this"), var.get('el'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')))
        PyJs_includes_1711_._set_name('includes')
        var.get('$export')(var.get('$export').get('P'), Js('Array'), Js({'includes':PyJs_includes_1711_}))
        var.get('require')(Js('./_add-to-unscopables'))(Js('includes'))
    PyJs_anonymous_1710_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1712_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'isNode', 'module', 'process', '$export', 'microtask'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('microtask', var.get('require')(Js('./_microtask'))())
        var.put('process', var.get('require')(Js('./_global')).get('process'))
        var.put('isNode', (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')))
        @Js
        def PyJs_asap_1713_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'asap':PyJs_asap_1713_}, var)
            var.registers(['fn', 'domain'])
            var.put('domain', (var.get('isNode') and var.get('process').get('domain')))
            var.get('microtask')((var.get('domain').callprop('bind', var.get('fn')) if var.get('domain') else var.get('fn')))
        PyJs_asap_1713_._set_name('asap')
        var.get('$export')(var.get('$export').get('G'), Js({'asap':PyJs_asap_1713_}))
    PyJs_anonymous_1712_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1714_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export', 'cof'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_isError_1715_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isError':PyJs_isError_1715_}, var)
            var.registers(['it'])
            return _seq(var.get('cof')(var.get('it')),Js('Error'))
        PyJs_isError_1715_._set_name('isError')
        var.get('$export')(var.get('$export').get('S'), Js('Error'), Js({'isError':PyJs_isError_1715_}))
    PyJs_anonymous_1714_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1716_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('G'), Js({'global':var.get('require')(Js('./_global'))}))
    PyJs_anonymous_1716_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1717_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_set-collection-from'))(Js('Map'))
    PyJs_anonymous_1717_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1718_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_set-collection-of'))(Js('Map'))
    PyJs_anonymous_1718_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1719_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Map'), Js({'toJSON':var.get('require')(Js('./_collection-to-json'))(Js('Map'))}))
    PyJs_anonymous_1719_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1720_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_clamp_1721_(x, lower, upper, this, arguments, var=var):
            var = Scope({'x':x, 'lower':lower, 'upper':upper, 'this':this, 'arguments':arguments, 'clamp':PyJs_clamp_1721_}, var)
            var.registers(['lower', 'x', 'upper'])
            return var.get('Math').callprop('min', var.get('upper'), var.get('Math').callprop('max', var.get('lower'), var.get('x')))
        PyJs_clamp_1721_._set_name('clamp')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'clamp':PyJs_clamp_1721_}))
    PyJs_anonymous_1720_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1722_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'DEG_PER_RAD':(var.get('Math').get('PI')/Js(180.0))}))
    PyJs_anonymous_1722_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1723_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'RAD_PER_DEG', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('RAD_PER_DEG', (Js(180.0)/var.get('Math').get('PI')))
        @Js
        def PyJs_degrees_1724_(radians, this, arguments, var=var):
            var = Scope({'radians':radians, 'this':this, 'arguments':arguments, 'degrees':PyJs_degrees_1724_}, var)
            var.registers(['radians'])
            return (var.get('radians')*var.get('RAD_PER_DEG'))
        PyJs_degrees_1724_._set_name('degrees')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'degrees':PyJs_degrees_1724_}))
    PyJs_anonymous_1723_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1725_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['scale', 'exports', 'require', 'module', 'fround', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('scale', var.get('require')(Js('./_math-scale')))
        var.put('fround', var.get('require')(Js('./_math-fround')))
        @Js
        def PyJs_fscale_1726_(x, inLow, inHigh, outLow, outHigh, this, arguments, var=var):
            var = Scope({'x':x, 'inLow':inLow, 'inHigh':inHigh, 'outLow':outLow, 'outHigh':outHigh, 'this':this, 'arguments':arguments, 'fscale':PyJs_fscale_1726_}, var)
            var.registers(['outHigh', 'x', 'outLow', 'inLow', 'inHigh'])
            return var.get('fround')(var.get('scale')(var.get('x'), var.get('inLow'), var.get('inHigh'), var.get('outLow'), var.get('outHigh')))
        PyJs_fscale_1726_._set_name('fscale')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'fscale':PyJs_fscale_1726_}))
    PyJs_anonymous_1725_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1727_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_iaddh_1728_(x0, x1, y0, y1, this, arguments, var=var):
            var = Scope({'x0':x0, 'x1':x1, 'y0':y0, 'y1':y1, 'this':this, 'arguments':arguments, 'iaddh':PyJs_iaddh_1728_}, var)
            var.registers(['x0', 'y1', '$x1', 'y0', '$y0', '$x0', 'x1'])
            var.put('$x0', PyJsBshift(var.get('x0'),Js(0.0)))
            var.put('$x1', PyJsBshift(var.get('x1'),Js(0.0)))
            var.put('$y0', PyJsBshift(var.get('y0'),Js(0.0)))
            return (((var.get('$x1')+PyJsBshift(var.get('y1'),Js(0.0)))+PyJsBshift(((var.get('$x0')&var.get('$y0'))|((var.get('$x0')|var.get('$y0'))&(~PyJsBshift((var.get('$x0')+var.get('$y0')),Js(0.0))))),Js(31.0)))|Js(0.0))
        PyJs_iaddh_1728_._set_name('iaddh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'iaddh':PyJs_iaddh_1728_}))
    PyJs_anonymous_1727_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1729_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_imulh_1730_(u, v, this, arguments, var=var):
            var = Scope({'u':u, 'v':v, 'this':this, 'arguments':arguments, 'imulh':PyJs_imulh_1730_}, var)
            var.registers(['u', 'v1', '$u', '$v', 'u1', 'v', 'u0', 'v0', 't', 'UINT16'])
            var.put('UINT16', Js(65535))
            var.put('$u', (+var.get('u')))
            var.put('$v', (+var.get('v')))
            var.put('u0', (var.get('$u')&var.get('UINT16')))
            var.put('v0', (var.get('$v')&var.get('UINT16')))
            var.put('u1', (var.get('$u')>>Js(16.0)))
            var.put('v1', (var.get('$v')>>Js(16.0)))
            var.put('t', (PyJsBshift((var.get('u1')*var.get('v0')),Js(0.0))+PyJsBshift((var.get('u0')*var.get('v0')),Js(16.0))))
            return (((var.get('u1')*var.get('v1'))+(var.get('t')>>Js(16.0)))+((PyJsBshift((var.get('u0')*var.get('v1')),Js(0.0))+(var.get('t')&var.get('UINT16')))>>Js(16.0)))
        PyJs_imulh_1730_._set_name('imulh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'imulh':PyJs_imulh_1730_}))
    PyJs_anonymous_1729_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1731_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_isubh_1732_(x0, x1, y0, y1, this, arguments, var=var):
            var = Scope({'x0':x0, 'x1':x1, 'y0':y0, 'y1':y1, 'this':this, 'arguments':arguments, 'isubh':PyJs_isubh_1732_}, var)
            var.registers(['x0', 'y1', '$x1', 'y0', '$y0', '$x0', 'x1'])
            var.put('$x0', PyJsBshift(var.get('x0'),Js(0.0)))
            var.put('$x1', PyJsBshift(var.get('x1'),Js(0.0)))
            var.put('$y0', PyJsBshift(var.get('y0'),Js(0.0)))
            return (((var.get('$x1')-PyJsBshift(var.get('y1'),Js(0.0)))-PyJsBshift((((~var.get('$x0'))&var.get('$y0'))|((~(var.get('$x0')^var.get('$y0')))&PyJsBshift((var.get('$x0')-var.get('$y0')),Js(0.0)))),Js(31.0)))|Js(0.0))
        PyJs_isubh_1732_._set_name('isubh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'isubh':PyJs_isubh_1732_}))
    PyJs_anonymous_1731_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1733_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'RAD_PER_DEG':(Js(180.0)/var.get('Math').get('PI'))}))
    PyJs_anonymous_1733_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1734_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export', 'DEG_PER_RAD'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('DEG_PER_RAD', (var.get('Math').get('PI')/Js(180.0)))
        @Js
        def PyJs_radians_1735_(degrees, this, arguments, var=var):
            var = Scope({'degrees':degrees, 'this':this, 'arguments':arguments, 'radians':PyJs_radians_1735_}, var)
            var.registers(['degrees'])
            return (var.get('degrees')*var.get('DEG_PER_RAD'))
        PyJs_radians_1735_._set_name('radians')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'radians':PyJs_radians_1735_}))
    PyJs_anonymous_1734_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1736_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'scale':var.get('require')(Js('./_math-scale'))}))
    PyJs_anonymous_1736_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1737_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_signbit_1738_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'signbit':PyJs_signbit_1738_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))!=var.get('x')) else (((Js(1.0)/var.get('x'))==var.get('Infinity')) if (var.get('x')==Js(0.0)) else (var.get('x')>Js(0.0))))
        PyJs_signbit_1738_._set_name('signbit')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'signbit':PyJs_signbit_1738_}))
    PyJs_anonymous_1737_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1739_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_umulh_1740_(u, v, this, arguments, var=var):
            var = Scope({'u':u, 'v':v, 'this':this, 'arguments':arguments, 'umulh':PyJs_umulh_1740_}, var)
            var.registers(['u', 'v1', '$u', '$v', 'u1', 'v', 'u0', 'v0', 't', 'UINT16'])
            var.put('UINT16', Js(65535))
            var.put('$u', (+var.get('u')))
            var.put('$v', (+var.get('v')))
            var.put('u0', (var.get('$u')&var.get('UINT16')))
            var.put('v0', (var.get('$v')&var.get('UINT16')))
            var.put('u1', PyJsBshift(var.get('$u'),Js(16.0)))
            var.put('v1', PyJsBshift(var.get('$v'),Js(16.0)))
            var.put('t', (PyJsBshift((var.get('u1')*var.get('v0')),Js(0.0))+PyJsBshift((var.get('u0')*var.get('v0')),Js(16.0))))
            return (((var.get('u1')*var.get('v1'))+PyJsBshift(var.get('t'),Js(16.0)))+PyJsBshift((PyJsBshift((var.get('u0')*var.get('v1')),Js(0.0))+(var.get('t')&var.get('UINT16'))),Js(16.0)))
        PyJs_umulh_1740_._set_name('umulh')
        var.get('$export')(var.get('$export').get('S'), Js('Math'), Js({'umulh':PyJs_umulh_1740_}))
    PyJs_anonymous_1739_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1741_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', '$defineProperty', 'module', 'aFunction', 'toObject', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        @Js
        def PyJs___defineGetter___1742_(P, getter, this, arguments, var=var):
            var = Scope({'P':P, 'getter':getter, 'this':this, 'arguments':arguments, '__defineGetter__':PyJs___defineGetter___1742_}, var)
            var.registers(['P', 'getter'])
            var.get('$defineProperty').callprop('f', var.get('toObject')(var.get(u"this")), var.get('P'), Js({'get':var.get('aFunction')(var.get('getter')),'enumerable':Js(True),'configurable':Js(True)}))
        PyJs___defineGetter___1742_._set_name('__defineGetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__defineGetter__':PyJs___defineGetter___1742_})))
    PyJs_anonymous_1741_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1743_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', '$defineProperty', 'module', 'aFunction', 'toObject', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        @Js
        def PyJs___defineSetter___1744_(P, setter, this, arguments, var=var):
            var = Scope({'P':P, 'setter':setter, 'this':this, 'arguments':arguments, '__defineSetter__':PyJs___defineSetter___1744_}, var)
            var.registers(['P', 'setter'])
            var.get('$defineProperty').callprop('f', var.get('toObject')(var.get(u"this")), var.get('P'), Js({'set':var.get('aFunction')(var.get('setter')),'enumerable':Js(True),'configurable':Js(True)}))
        PyJs___defineSetter___1744_._set_name('__defineSetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__defineSetter__':PyJs___defineSetter___1744_})))
    PyJs_anonymous_1743_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1745_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', '$entries', 'module', '$export'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$entries', var.get('require')(Js('./_object-to-array'))(Js(True)))
        @Js
        def PyJs_entries_1746_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'entries':PyJs_entries_1746_}, var)
            var.registers(['it'])
            return var.get('$entries')(var.get('it'))
        PyJs_entries_1746_._set_name('entries')
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'entries':PyJs_entries_1746_}))
    PyJs_anonymous_1745_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1747_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'ownKeys', 'gOPD', 'toIObject', '$export', 'createProperty'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('ownKeys', var.get('require')(Js('./_own-keys')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('gOPD', var.get('require')(Js('./_object-gopd')))
        var.put('createProperty', var.get('require')(Js('./_create-property')))
        @Js
        def PyJs_getOwnPropertyDescriptors_1748_(object, this, arguments, var=var):
            var = Scope({'object':object, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptors':PyJs_getOwnPropertyDescriptors_1748_}, var)
            var.registers(['desc', 'i', 'object', 'key', 'O', 'keys', 'result', 'getDesc'])
            var.put('O', var.get('toIObject')(var.get('object')))
            var.put('getDesc', var.get('gOPD').get('f'))
            var.put('keys', var.get('ownKeys')(var.get('O')))
            var.put('result', Js({}))
            var.put('i', Js(0.0))
            pass
            while (var.get('keys').get('length')>var.get('i')):
                var.put('desc', var.get('getDesc')(var.get('O'), var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))))
                if PyJsStrictNeq(var.get('desc'),var.get('undefined')):
                    var.get('createProperty')(var.get('result'), var.get('key'), var.get('desc'))
            return var.get('result')
        PyJs_getOwnPropertyDescriptors_1748_._set_name('getOwnPropertyDescriptors')
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'getOwnPropertyDescriptors':PyJs_getOwnPropertyDescriptors_1748_}))
    PyJs_anonymous_1747_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1749_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'getPrototypeOf', 'toPrimitive', 'module', 'toObject', 'getOwnPropertyDescriptor', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('getOwnPropertyDescriptor', var.get('require')(Js('./_object-gopd')).get('f'))
        @Js
        def PyJs___lookupGetter___1750_(P, this, arguments, var=var):
            var = Scope({'P':P, 'this':this, 'arguments':arguments, '__lookupGetter__':PyJs___lookupGetter___1750_}, var)
            var.registers(['D', 'P', 'K', 'O'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('K', var.get('toPrimitive')(var.get('P'), Js(True)))
            pass
            while 1:
                if var.put('D', var.get('getOwnPropertyDescriptor')(var.get('O'), var.get('K'))):
                    return var.get('D').get('get')
                if not var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                    break
        PyJs___lookupGetter___1750_._set_name('__lookupGetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__lookupGetter__':PyJs___lookupGetter___1750_})))
    PyJs_anonymous_1749_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1751_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'getPrototypeOf', 'toPrimitive', 'module', 'toObject', 'getOwnPropertyDescriptor', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('getOwnPropertyDescriptor', var.get('require')(Js('./_object-gopd')).get('f'))
        @Js
        def PyJs___lookupSetter___1752_(P, this, arguments, var=var):
            var = Scope({'P':P, 'this':this, 'arguments':arguments, '__lookupSetter__':PyJs___lookupSetter___1752_}, var)
            var.registers(['D', 'P', 'K', 'O'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('K', var.get('toPrimitive')(var.get('P'), Js(True)))
            pass
            while 1:
                if var.put('D', var.get('getOwnPropertyDescriptor')(var.get('O'), var.get('K'))):
                    return var.get('D').get('set')
                if not var.put('O', var.get('getPrototypeOf')(var.get('O'))):
                    break
        PyJs___lookupSetter___1752_._set_name('__lookupSetter__')
        (var.get('require')(Js('./_descriptors')) and var.get('$export')((var.get('$export').get('P')+var.get('require')(Js('./_object-forced-pam'))), Js('Object'), Js({'__lookupSetter__':PyJs___lookupSetter___1752_})))
    PyJs_anonymous_1751_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1753_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export', '$values'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$values', var.get('require')(Js('./_object-to-array'))(Js(False)))
        @Js
        def PyJs_values_1754_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'values':PyJs_values_1754_}, var)
            var.registers(['it'])
            return var.get('$values')(var.get('it'))
        PyJs_values_1754_._set_name('values')
        var.get('$export')(var.get('$export').get('S'), Js('Object'), Js({'values':PyJs_values_1754_}))
    PyJs_anonymous_1753_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1755_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'OBSERVABLE', 'aFunction', 'anInstance', '$export', 'redefineAll', 'core', 'getMethod', 'hide', 'forOf', 'subscriptionClosed', 'RETURN', 'require', 'anObject', 'closeSubscription', '$Observable', 'exports', 'SubscriptionObserver', 'global', 'Subscription', 'microtask', 'cleanupSubscription'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('microtask', var.get('require')(Js('./_microtask'))())
        var.put('OBSERVABLE', var.get('require')(Js('./_wks'))(Js('observable')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('RETURN', var.get('forOf').get('RETURN'))
        @Js
        def PyJs_getMethod_1756_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'getMethod':PyJs_getMethod_1756_}, var)
            var.registers(['fn'])
            return (var.get('undefined') if (var.get('fn')==var.get(u"null")) else var.get('aFunction')(var.get('fn')))
        PyJs_getMethod_1756_._set_name('getMethod')
        var.put('getMethod', PyJs_getMethod_1756_)
        @Js
        def PyJs_cleanupSubscription_1757_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'cleanupSubscription':PyJs_cleanupSubscription_1757_}, var)
            var.registers(['subscription', 'cleanup'])
            var.put('cleanup', var.get('subscription').get('_c'))
            if var.get('cleanup'):
                var.get('subscription').put('_c', var.get('undefined'))
                var.get('cleanup')()
        PyJs_cleanupSubscription_1757_._set_name('cleanupSubscription')
        var.put('cleanupSubscription', PyJs_cleanupSubscription_1757_)
        @Js
        def PyJs_subscriptionClosed_1758_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'subscriptionClosed':PyJs_subscriptionClosed_1758_}, var)
            var.registers(['subscription'])
            return _seq(var.get('subscription').get('_o'),var.get('undefined'))
        PyJs_subscriptionClosed_1758_._set_name('subscriptionClosed')
        var.put('subscriptionClosed', PyJs_subscriptionClosed_1758_)
        @Js
        def PyJs_closeSubscription_1759_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'closeSubscription':PyJs_closeSubscription_1759_}, var)
            var.registers(['subscription'])
            if var.get('subscriptionClosed')(var.get('subscription')).neg():
                var.get('subscription').put('_o', var.get('undefined'))
                var.get('cleanupSubscription')(var.get('subscription'))
        PyJs_closeSubscription_1759_._set_name('closeSubscription')
        var.put('closeSubscription', PyJs_closeSubscription_1759_)
        @Js
        def PyJs_Subscription_1760_(observer, subscriber, this, arguments, var=var):
            var = Scope({'observer':observer, 'subscriber':subscriber, 'this':this, 'arguments':arguments, 'Subscription':PyJs_Subscription_1760_}, var)
            var.registers(['subscriber', 'subscription', 'cleanup', 'observer'])
            var.get('anObject')(var.get('observer'))
            var.get(u"this").put('_c', var.get('undefined'))
            var.get(u"this").put('_o', var.get('observer'))
            var.put('observer', var.get('SubscriptionObserver').create(var.get(u"this")))
            try:
                var.put('cleanup', var.get('subscriber')(var.get('observer')))
                var.put('subscription', var.get('cleanup'))
                if (var.get('cleanup')!=var.get(u"null")):
                    if _seq(var.get('cleanup').get('unsubscribe').typeof(),Js('function')):
                        @Js
                        def PyJs_cleanup_1761_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'cleanup':PyJs_cleanup_1761_}, var)
                            var.registers([])
                            var.get('subscription').callprop('unsubscribe')
                        PyJs_cleanup_1761_._set_name('cleanup')
                        var.put('cleanup', PyJs_cleanup_1761_)
                    else:
                        var.get('aFunction')(var.get('cleanup'))
                    var.get(u"this").put('_c', var.get('cleanup'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_92649033 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.get('observer').callprop('error', var.get('e'))
                    return var.get('undefined')
                finally:
                    if PyJsHolder_65_92649033 is not None:
                        var.own['e'] = PyJsHolder_65_92649033
                    else:
                        del var.own['e']
                    del PyJsHolder_65_92649033
            if var.get('subscriptionClosed')(var.get(u"this")):
                var.get('cleanupSubscription')(var.get(u"this"))
        PyJs_Subscription_1760_._set_name('Subscription')
        var.put('Subscription', PyJs_Subscription_1760_)
        @Js
        def PyJs_unsubscribe_1762_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'unsubscribe':PyJs_unsubscribe_1762_}, var)
            var.registers([])
            var.get('closeSubscription')(var.get(u"this"))
        PyJs_unsubscribe_1762_._set_name('unsubscribe')
        var.get('Subscription').put('prototype', var.get('redefineAll')(Js({}), Js({'unsubscribe':PyJs_unsubscribe_1762_})))
        @Js
        def PyJs_SubscriptionObserver_1763_(subscription, this, arguments, var=var):
            var = Scope({'subscription':subscription, 'this':this, 'arguments':arguments, 'SubscriptionObserver':PyJs_SubscriptionObserver_1763_}, var)
            var.registers(['subscription'])
            var.get(u"this").put('_s', var.get('subscription'))
        PyJs_SubscriptionObserver_1763_._set_name('SubscriptionObserver')
        var.put('SubscriptionObserver', PyJs_SubscriptionObserver_1763_)
        @Js
        def PyJs_next_1764_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'next':PyJs_next_1764_}, var)
            var.registers(['subscription', 'value', 'm', 'observer'])
            var.put('subscription', var.get(u"this").get('_s'))
            if var.get('subscriptionClosed')(var.get('subscription')).neg():
                var.put('observer', var.get('subscription').get('_o'))
                try:
                    var.put('m', var.get('getMethod')(var.get('observer').get('next')))
                    if var.get('m'):
                        return var.get('m').callprop('call', var.get('observer'), var.get('value'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_95429056 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        try:
                            var.get('closeSubscription')(var.get('subscription'))
                        finally:
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                    finally:
                        if PyJsHolder_65_95429056 is not None:
                            var.own['e'] = PyJsHolder_65_95429056
                        else:
                            del var.own['e']
                        del PyJsHolder_65_95429056
        PyJs_next_1764_._set_name('next')
        @Js
        def PyJs_error_1765_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'error':PyJs_error_1765_}, var)
            var.registers(['subscription', 'value', 'm', 'observer'])
            var.put('subscription', var.get(u"this").get('_s'))
            if var.get('subscriptionClosed')(var.get('subscription')):
                PyJsTempException = JsToPyException(var.get('value'))
                raise PyJsTempException
            var.put('observer', var.get('subscription').get('_o'))
            var.get('subscription').put('_o', var.get('undefined'))
            try:
                var.put('m', var.get('getMethod')(var.get('observer').get('error')))
                if var.get('m').neg():
                    PyJsTempException = JsToPyException(var.get('value'))
                    raise PyJsTempException
                var.put('value', var.get('m').callprop('call', var.get('observer'), var.get('value')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_83228544 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        var.get('cleanupSubscription')(var.get('subscription'))
                    finally:
                        PyJsTempException = JsToPyException(var.get('e'))
                        raise PyJsTempException
                finally:
                    if PyJsHolder_65_83228544 is not None:
                        var.own['e'] = PyJsHolder_65_83228544
                    else:
                        del var.own['e']
                    del PyJsHolder_65_83228544
            var.get('cleanupSubscription')(var.get('subscription'))
            return var.get('value')
        PyJs_error_1765_._set_name('error')
        @Js
        def PyJs_complete_1766_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'complete':PyJs_complete_1766_}, var)
            var.registers(['subscription', 'value', 'm', 'observer'])
            var.put('subscription', var.get(u"this").get('_s'))
            if var.get('subscriptionClosed')(var.get('subscription')).neg():
                var.put('observer', var.get('subscription').get('_o'))
                var.get('subscription').put('_o', var.get('undefined'))
                try:
                    var.put('m', var.get('getMethod')(var.get('observer').get('complete')))
                    var.put('value', (var.get('m').callprop('call', var.get('observer'), var.get('value')) if var.get('m') else var.get('undefined')))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_12275484 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        try:
                            var.get('cleanupSubscription')(var.get('subscription'))
                        finally:
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                    finally:
                        if PyJsHolder_65_12275484 is not None:
                            var.own['e'] = PyJsHolder_65_12275484
                        else:
                            del var.own['e']
                        del PyJsHolder_65_12275484
                var.get('cleanupSubscription')(var.get('subscription'))
                return var.get('value')
        PyJs_complete_1766_._set_name('complete')
        var.get('SubscriptionObserver').put('prototype', var.get('redefineAll')(Js({}), Js({'next':PyJs_next_1764_,'error':PyJs_error_1765_,'complete':PyJs_complete_1766_})))
        @Js
        def PyJs_Observable_1767_(subscriber, this, arguments, var=var):
            var = Scope({'subscriber':subscriber, 'this':this, 'arguments':arguments, 'Observable':PyJs_Observable_1767_}, var)
            var.registers(['subscriber'])
            var.get('anInstance')(var.get(u"this"), var.get('$Observable'), Js('Observable'), Js('_f')).put('_f', var.get('aFunction')(var.get('subscriber')))
        PyJs_Observable_1767_._set_name('Observable')
        var.put('$Observable', PyJs_Observable_1767_)
        @Js
        def PyJs_subscribe_1768_(observer, this, arguments, var=var):
            var = Scope({'observer':observer, 'this':this, 'arguments':arguments, 'subscribe':PyJs_subscribe_1768_}, var)
            var.registers(['observer'])
            return var.get('Subscription').create(var.get('observer'), var.get(u"this").get('_f'))
        PyJs_subscribe_1768_._set_name('subscribe')
        @Js
        def PyJs_forEach_1769_(fn, this, arguments, var=var):
            var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_1769_}, var)
            var.registers(['that', 'fn'])
            var.put('that', var.get(u"this"))
            @Js
            def PyJs_anonymous_1770_(resolve, reject, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                var.registers(['resolve', 'subscription', 'reject'])
                var.get('aFunction')(var.get('fn'))
                @Js
                def PyJs_next_1771_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments, 'next':PyJs_next_1771_}, var)
                    var.registers(['value'])
                    try:
                        return var.get('fn')(var.get('value'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_93716731 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get('reject')(var.get('e'))
                            var.get('subscription').callprop('unsubscribe')
                        finally:
                            if PyJsHolder_65_93716731 is not None:
                                var.own['e'] = PyJsHolder_65_93716731
                            else:
                                del var.own['e']
                            del PyJsHolder_65_93716731
                PyJs_next_1771_._set_name('next')
                var.put('subscription', var.get('that').callprop('subscribe', Js({'next':PyJs_next_1771_,'error':var.get('reject'),'complete':var.get('resolve')})))
            PyJs_anonymous_1770_._set_name('anonymous')
            return (var.get('core').get('Promise') or var.get('global').get('Promise')).create(PyJs_anonymous_1770_)
        PyJs_forEach_1769_._set_name('forEach')
        var.get('redefineAll')(var.get('$Observable').get('prototype'), Js({'subscribe':PyJs_subscribe_1768_,'forEach':PyJs_forEach_1769_}))
        @Js
        def PyJs_InlineNonPyName_1772_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_1772_}, var)
            var.registers(['x', 'C', 'observable', 'method'])
            var.put('C', (var.get(u"this") if _seq(var.get(u"this",throw=False).typeof(),Js('function')) else var.get('$Observable')))
            var.put('method', var.get('getMethod')(var.get('anObject')(var.get('x')).get(var.get('OBSERVABLE'))))
            if var.get('method'):
                var.put('observable', var.get('anObject')(var.get('method').callprop('call', var.get('x'))))
                @Js
                def PyJs_anonymous_1773_(observer, this, arguments, var=var):
                    var = Scope({'observer':observer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['observer'])
                    return var.get('observable').callprop('subscribe', var.get('observer'))
                PyJs_anonymous_1773_._set_name('anonymous')
                return (var.get('observable') if _seq(var.get('observable').get('constructor'),var.get('C')) else var.get('C').create(PyJs_anonymous_1773_))
            @Js
            def PyJs_anonymous_1774_(observer, this, arguments, var=var):
                var = Scope({'observer':observer, 'this':this, 'arguments':arguments}, var)
                var.registers(['done', 'observer'])
                var.put('done', Js(False))
                @Js
                def PyJs_anonymous_1775_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get('done').neg():
                        try:
                            @Js
                            def PyJs_anonymous_1776_(it, this, arguments, var=var):
                                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                                var.registers(['it'])
                                var.get('observer').callprop('next', var.get('it'))
                                if var.get('done'):
                                    return var.get('RETURN')
                            PyJs_anonymous_1776_._set_name('anonymous')
                            if _seq(var.get('forOf')(var.get('x'), Js(False), PyJs_anonymous_1776_),var.get('RETURN')):
                                return var.get('undefined')
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_68142543 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                if var.get('done'):
                                    PyJsTempException = JsToPyException(var.get('e'))
                                    raise PyJsTempException
                                var.get('observer').callprop('error', var.get('e'))
                                return var.get('undefined')
                            finally:
                                if PyJsHolder_65_68142543 is not None:
                                    var.own['e'] = PyJsHolder_65_68142543
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_68142543
                        var.get('observer').callprop('complete')
                PyJs_anonymous_1775_._set_name('anonymous')
                var.get('microtask')(PyJs_anonymous_1775_)
                @Js
                def PyJs_anonymous_1777_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('done', Js(True))
                PyJs_anonymous_1777_._set_name('anonymous')
                return PyJs_anonymous_1777_
            PyJs_anonymous_1774_._set_name('anonymous')
            return var.get('C').create(PyJs_anonymous_1774_)
        PyJs_InlineNonPyName_1772_._set_name('from')
        @Js
        def PyJs_of_1778_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_1778_}, var)
            var.registers(['i', 'items', 'l'])
            #for JS loop
            var.put('i', Js(0.0))
            var.put('l', var.get('arguments').get('length'))
            var.put('items', var.get('Array').create(var.get('l')))
            while (var.get('i')<var.get('l')):
                var.get('items').put(var.get('i'), var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))

            @Js
            def PyJs_anonymous_1779_(observer, this, arguments, var=var):
                var = Scope({'observer':observer, 'this':this, 'arguments':arguments}, var)
                var.registers(['done', 'observer'])
                var.put('done', Js(False))
                @Js
                def PyJs_anonymous_1780_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['j'])
                    if var.get('done').neg():
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get('items').get('length')):
                            try:
                                var.get('observer').callprop('next', var.get('items').get(var.get('j')))
                                if var.get('done'):
                                    return var.get('undefined')
                            finally:
                                    var.put('j',Js(var.get('j').to_number())+Js(1))
                        var.get('observer').callprop('complete')
                PyJs_anonymous_1780_._set_name('anonymous')
                var.get('microtask')(PyJs_anonymous_1780_)
                @Js
                def PyJs_anonymous_1781_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('done', Js(True))
                PyJs_anonymous_1781_._set_name('anonymous')
                return PyJs_anonymous_1781_
            PyJs_anonymous_1779_._set_name('anonymous')
            return (var.get(u"this") if _seq(var.get(u"this",throw=False).typeof(),Js('function')) else var.get('$Observable')).create(PyJs_anonymous_1779_)
        PyJs_of_1778_._set_name('of')
        var.get('redefineAll')(var.get('$Observable'), Js({'from':PyJs_InlineNonPyName_1772_,'of':PyJs_of_1778_}))
        @Js
        def PyJs_anonymous_1782_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_1782_._set_name('anonymous')
        var.get('hide')(var.get('$Observable').get('prototype'), var.get('OBSERVABLE'), PyJs_anonymous_1782_)
        var.get('$export')(var.get('$export').get('G'), Js({'Observable':var.get('$Observable')}))
        var.get('require')(Js('./_set-species'))(Js('Observable'))
    PyJs_anonymous_1755_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1783_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'speciesConstructor', 'global', '$export', 'promiseResolve', 'core'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('speciesConstructor', var.get('require')(Js('./_species-constructor')))
        var.put('promiseResolve', var.get('require')(Js('./_promise-resolve')))
        @Js
        def PyJs__finally_1784_(onFinally, this, arguments, var=var):
            var = Scope({'onFinally':onFinally, 'this':this, 'arguments':arguments, '_finally':PyJs__finally_1784_}, var)
            var.registers(['isFunction', 'C', 'onFinally'])
            var.put('C', var.get('speciesConstructor')(var.get(u"this"), (var.get('core').get('Promise') or var.get('global').get('Promise'))))
            var.put('isFunction', (var.get('onFinally',throw=False).typeof()==Js('function')))
            @Js
            def PyJs_anonymous_1785_(x, this, arguments, var=var):
                var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
                var.registers(['x'])
                @Js
                def PyJs_anonymous_1786_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('x')
                PyJs_anonymous_1786_._set_name('anonymous')
                return var.get('promiseResolve')(var.get('C'), var.get('onFinally')()).callprop('then', PyJs_anonymous_1786_)
            PyJs_anonymous_1785_._set_name('anonymous')
            @Js
            def PyJs_anonymous_1787_(e, this, arguments, var=var):
                var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                var.registers(['e'])
                @Js
                def PyJs_anonymous_1788_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    PyJsTempException = JsToPyException(var.get('e'))
                    raise PyJsTempException
                PyJs_anonymous_1788_._set_name('anonymous')
                return var.get('promiseResolve')(var.get('C'), var.get('onFinally')()).callprop('then', PyJs_anonymous_1788_)
            PyJs_anonymous_1787_._set_name('anonymous')
            return var.get(u"this").callprop('then', (PyJs_anonymous_1785_ if var.get('isFunction') else var.get('onFinally')), (PyJs_anonymous_1787_ if var.get('isFunction') else var.get('onFinally')))
        PyJs__finally_1784_._set_name('_finally')
        var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Promise'), Js({'finally':PyJs__finally_1784_}))
    PyJs_anonymous_1783_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1789_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'newPromiseCapability', 'module', 'perform', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('newPromiseCapability', var.get('require')(Js('./_new-promise-capability')))
        var.put('perform', var.get('require')(Js('./_perform')))
        @Js
        def PyJs__try_1790_(callbackfn, this, arguments, var=var):
            var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, '_try':PyJs__try_1790_}, var)
            var.registers(['callbackfn', 'result', 'promiseCapability'])
            var.put('promiseCapability', var.get('newPromiseCapability').callprop('f', var.get(u"this")))
            var.put('result', var.get('perform')(var.get('callbackfn')))
            (var.get('promiseCapability').get('reject') if var.get('result').get('e') else var.get('promiseCapability').get('resolve'))(var.get('result').get('v'))
            return var.get('promiseCapability').get('promise')
        PyJs__try_1790_._set_name('_try')
        var.get('$export')(var.get('$export').get('S'), Js('Promise'), Js({'try':PyJs__try_1790_}))
    PyJs_anonymous_1789_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1791_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'ordinaryDefineOwnMetadata', 'module', 'toMetaKey', 'anObject', 'metadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toMetaKey', var.get('metadata').get('key'))
        var.put('ordinaryDefineOwnMetadata', var.get('metadata').get('set'))
        @Js
        def PyJs_defineMetadata_1792_(metadataKey, metadataValue, target, targetKey, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'metadataValue':metadataValue, 'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'defineMetadata':PyJs_defineMetadata_1792_}, var)
            var.registers(['targetKey', 'target', 'metadataValue', 'metadataKey'])
            var.get('ordinaryDefineOwnMetadata')(var.get('metadataKey'), var.get('metadataValue'), var.get('anObject')(var.get('target')), var.get('toMetaKey')(var.get('targetKey')))
        PyJs_defineMetadata_1792_._set_name('defineMetadata')
        var.get('metadata').callprop('exp', Js({'defineMetadata':PyJs_defineMetadata_1792_}))
    PyJs_anonymous_1791_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1793_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toMetaKey', 'anObject', 'metadata', 'getOrCreateMetadataMap', 'store'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toMetaKey', var.get('metadata').get('key'))
        var.put('getOrCreateMetadataMap', var.get('metadata').get('map'))
        var.put('store', var.get('metadata').get('store'))
        @Js
        def PyJs_deleteMetadata_1794_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'deleteMetadata':PyJs_deleteMetadata_1794_}, var)
            var.registers(['targetMetadata', 'targetKey', 'metadataKey', 'target', 'metadataMap'])
            var.put('targetKey', (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('anObject')(var.get('target')), var.get('targetKey'), Js(False)))
            if (_seq(var.get('metadataMap'),var.get('undefined')) or var.get('metadataMap').callprop('delete', var.get('metadataKey')).neg()):
                return Js(False)
            if var.get('metadataMap').get('size'):
                return Js(True)
            var.put('targetMetadata', var.get('store').callprop('get', var.get('target')))
            var.get('targetMetadata').callprop('delete', var.get('targetKey'))
            return (var.get('targetMetadata').get('size').neg().neg() or var.get('store').callprop('delete', var.get('target')))
        PyJs_deleteMetadata_1794_._set_name('deleteMetadata')
        var.get('metadata').callprop('exp', Js({'deleteMetadata':PyJs_deleteMetadata_1794_}))
    PyJs_anonymous_1793_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1795_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Set', 'getPrototypeOf', 'ordinaryOwnMetadataKeys', 'module', 'from', 'toMetaKey', 'anObject', 'metadata', 'ordinaryMetadataKeys'])
        var.put('Set', var.get('require')(Js('./es6.set')))
        var.put('from', var.get('require')(Js('./_array-from-iterable')))
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ordinaryOwnMetadataKeys', var.get('metadata').get('keys'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_ordinaryMetadataKeys_1796_(O, P, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryMetadataKeys':PyJs_ordinaryMetadataKeys_1796_}, var)
            var.registers(['P', 'pKeys', 'oKeys', 'parent', 'O'])
            var.put('oKeys', var.get('ordinaryOwnMetadataKeys')(var.get('O'), var.get('P')))
            var.put('parent', var.get('getPrototypeOf')(var.get('O')))
            if _seq(var.get('parent'),var.get(u"null")):
                return var.get('oKeys')
            var.put('pKeys', var.get('ordinaryMetadataKeys')(var.get('parent'), var.get('P')))
            return ((var.get('from')(var.get('Set').create(var.get('oKeys').callprop('concat', var.get('pKeys')))) if var.get('oKeys').get('length') else var.get('pKeys')) if var.get('pKeys').get('length') else var.get('oKeys'))
        PyJs_ordinaryMetadataKeys_1796_._set_name('ordinaryMetadataKeys')
        var.put('ordinaryMetadataKeys', PyJs_ordinaryMetadataKeys_1796_)
        @Js
        def PyJs_getMetadataKeys_1797_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'getMetadataKeys':PyJs_getMetadataKeys_1797_}, var)
            var.registers(['target'])
            return var.get('ordinaryMetadataKeys')(var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(2.0)) else var.get('toMetaKey')(var.get('arguments').get('1'))))
        PyJs_getMetadataKeys_1797_._set_name('getMetadataKeys')
        var.get('metadata').callprop('exp', Js({'getMetadataKeys':PyJs_getMetadataKeys_1797_}))
    PyJs_anonymous_1795_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1798_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'getPrototypeOf', 'module', 'toMetaKey', 'anObject', 'metadata', 'ordinaryGetOwnMetadata', 'ordinaryGetMetadata', 'ordinaryHasOwnMetadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ordinaryHasOwnMetadata', var.get('metadata').get('has'))
        var.put('ordinaryGetOwnMetadata', var.get('metadata').get('get'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_ordinaryGetMetadata_1799_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryGetMetadata':PyJs_ordinaryGetMetadata_1799_}, var)
            var.registers(['P', 'hasOwn', 'parent', 'O', 'MetadataKey'])
            var.put('hasOwn', var.get('ordinaryHasOwnMetadata')(var.get('MetadataKey'), var.get('O'), var.get('P')))
            if var.get('hasOwn'):
                return var.get('ordinaryGetOwnMetadata')(var.get('MetadataKey'), var.get('O'), var.get('P'))
            var.put('parent', var.get('getPrototypeOf')(var.get('O')))
            return (var.get('ordinaryGetMetadata')(var.get('MetadataKey'), var.get('parent'), var.get('P')) if PyJsStrictNeq(var.get('parent'),var.get(u"null")) else var.get('undefined'))
        PyJs_ordinaryGetMetadata_1799_._set_name('ordinaryGetMetadata')
        var.put('ordinaryGetMetadata', PyJs_ordinaryGetMetadata_1799_)
        @Js
        def PyJs_getMetadata_1800_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'getMetadata':PyJs_getMetadata_1800_}, var)
            var.registers(['target', 'metadataKey'])
            return var.get('ordinaryGetMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_getMetadata_1800_._set_name('getMetadata')
        var.get('metadata').callprop('exp', Js({'getMetadata':PyJs_getMetadata_1800_}))
    PyJs_anonymous_1798_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1801_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'ordinaryOwnMetadataKeys', 'toMetaKey', 'anObject', 'metadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('ordinaryOwnMetadataKeys', var.get('metadata').get('keys'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_getOwnMetadataKeys_1802_(target, this, arguments, var=var):
            var = Scope({'target':target, 'this':this, 'arguments':arguments, 'getOwnMetadataKeys':PyJs_getOwnMetadataKeys_1802_}, var)
            var.registers(['target'])
            return var.get('ordinaryOwnMetadataKeys')(var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(2.0)) else var.get('toMetaKey')(var.get('arguments').get('1'))))
        PyJs_getOwnMetadataKeys_1802_._set_name('getOwnMetadataKeys')
        var.get('metadata').callprop('exp', Js({'getOwnMetadataKeys':PyJs_getOwnMetadataKeys_1802_}))
    PyJs_anonymous_1801_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1803_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toMetaKey', 'anObject', 'metadata', 'ordinaryGetOwnMetadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('ordinaryGetOwnMetadata', var.get('metadata').get('get'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_getOwnMetadata_1804_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'getOwnMetadata':PyJs_getOwnMetadata_1804_}, var)
            var.registers(['target', 'metadataKey'])
            return var.get('ordinaryGetOwnMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_getOwnMetadata_1804_._set_name('getOwnMetadata')
        var.get('metadata').callprop('exp', Js({'getOwnMetadata':PyJs_getOwnMetadata_1804_}))
    PyJs_anonymous_1803_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1805_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'getPrototypeOf', 'module', 'toMetaKey', 'anObject', 'metadata', 'ordinaryHasMetadata', 'ordinaryHasOwnMetadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ordinaryHasOwnMetadata', var.get('metadata').get('has'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_ordinaryHasMetadata_1806_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryHasMetadata':PyJs_ordinaryHasMetadata_1806_}, var)
            var.registers(['P', 'hasOwn', 'parent', 'O', 'MetadataKey'])
            var.put('hasOwn', var.get('ordinaryHasOwnMetadata')(var.get('MetadataKey'), var.get('O'), var.get('P')))
            if var.get('hasOwn'):
                return Js(True)
            var.put('parent', var.get('getPrototypeOf')(var.get('O')))
            return (var.get('ordinaryHasMetadata')(var.get('MetadataKey'), var.get('parent'), var.get('P')) if PyJsStrictNeq(var.get('parent'),var.get(u"null")) else Js(False))
        PyJs_ordinaryHasMetadata_1806_._set_name('ordinaryHasMetadata')
        var.put('ordinaryHasMetadata', PyJs_ordinaryHasMetadata_1806_)
        @Js
        def PyJs_hasMetadata_1807_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'hasMetadata':PyJs_hasMetadata_1807_}, var)
            var.registers(['target', 'metadataKey'])
            return var.get('ordinaryHasMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_hasMetadata_1807_._set_name('hasMetadata')
        var.get('metadata').callprop('exp', Js({'hasMetadata':PyJs_hasMetadata_1807_}))
    PyJs_anonymous_1805_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1808_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'toMetaKey', 'anObject', 'metadata', 'ordinaryHasOwnMetadata'])
        var.put('metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('ordinaryHasOwnMetadata', var.get('metadata').get('has'))
        var.put('toMetaKey', var.get('metadata').get('key'))
        @Js
        def PyJs_hasOwnMetadata_1809_(metadataKey, target, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'target':target, 'this':this, 'arguments':arguments, 'hasOwnMetadata':PyJs_hasOwnMetadata_1809_}, var)
            var.registers(['target', 'metadataKey'])
            return var.get('ordinaryHasOwnMetadata')(var.get('metadataKey'), var.get('anObject')(var.get('target')), (var.get('undefined') if (var.get('arguments').get('length')<Js(3.0)) else var.get('toMetaKey')(var.get('arguments').get('2'))))
        PyJs_hasOwnMetadata_1809_._set_name('hasOwnMetadata')
        var.get('metadata').callprop('exp', Js({'hasOwnMetadata':PyJs_hasOwnMetadata_1809_}))
    PyJs_anonymous_1808_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1810_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'ordinaryDefineOwnMetadata', 'module', 'aFunction', 'toMetaKey', 'anObject', '$metadata'])
        var.put('$metadata', var.get('require')(Js('./_metadata')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toMetaKey', var.get('$metadata').get('key'))
        var.put('ordinaryDefineOwnMetadata', var.get('$metadata').get('set'))
        @Js
        def PyJs_metadata_1811_(metadataKey, metadataValue, this, arguments, var=var):
            var = Scope({'metadataKey':metadataKey, 'metadataValue':metadataValue, 'this':this, 'arguments':arguments, 'metadata':PyJs_metadata_1811_}, var)
            var.registers(['metadataValue', 'metadataKey'])
            @Js
            def PyJs_decorator_1812_(target, targetKey, this, arguments, var=var):
                var = Scope({'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'decorator':PyJs_decorator_1812_}, var)
                var.registers(['target', 'targetKey'])
                var.get('ordinaryDefineOwnMetadata')(var.get('metadataKey'), var.get('metadataValue'), (var.get('anObject') if PyJsStrictNeq(var.get('targetKey'),var.get('undefined')) else var.get('aFunction'))(var.get('target')), var.get('toMetaKey')(var.get('targetKey')))
            PyJs_decorator_1812_._set_name('decorator')
            return PyJs_decorator_1812_
        PyJs_metadata_1811_._set_name('metadata')
        var.get('$metadata').callprop('exp', Js({'metadata':PyJs_metadata_1811_}))
    PyJs_anonymous_1810_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1813_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_set-collection-from'))(Js('Set'))
    PyJs_anonymous_1813_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1814_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_set-collection-of'))(Js('Set'))
    PyJs_anonymous_1814_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1815_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')((var.get('$export').get('P')+var.get('$export').get('R')), Js('Set'), Js({'toJSON':var.get('require')(Js('./_collection-to-json'))(Js('Set'))}))
    PyJs_anonymous_1815_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1816_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$at', '$fails', '$export', 'FORCED'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$at', var.get('require')(Js('./_string-at'))(Js(True)))
        var.put('$fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_1817_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return PyJsStrictNeq(Js('𠮷').callprop('at', Js(0.0)),Js('𠮷'))
        PyJs_anonymous_1817_._set_name('anonymous')
        var.put('FORCED', var.get('$fails')(PyJs_anonymous_1817_))
        @Js
        def PyJs_at_1818_(pos, this, arguments, var=var):
            var = Scope({'pos':pos, 'this':this, 'arguments':arguments, 'at':PyJs_at_1818_}, var)
            var.registers(['pos'])
            return var.get('$at')(var.get(u"this"), var.get('pos'))
        PyJs_at_1818_._set_name('at')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('FORCED'))), Js('String'), Js({'at':PyJs_at_1818_}))
    PyJs_anonymous_1816_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1819_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'getFlags', 'toLength', '$RegExpStringIterator', 'defined', 'RegExpProto', '$export', 'isRegExp'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('getFlags', var.get('require')(Js('./_flags')))
        var.put('RegExpProto', var.get('RegExp').get('prototype'))
        @Js
        def PyJs_InlineNonPyName_1820_(regexp, string, this, arguments, var=var):
            var = Scope({'regexp':regexp, 'string':string, 'this':this, 'arguments':arguments, '$RegExpStringIterator':PyJs_InlineNonPyName_1820_}, var)
            var.registers(['regexp', 'string'])
            var.get(u"this").put('_r', var.get('regexp'))
            var.get(u"this").put('_s', var.get('string'))
        PyJs_InlineNonPyName_1820_._set_name('$RegExpStringIterator')
        var.put('$RegExpStringIterator', PyJs_InlineNonPyName_1820_)
        @Js
        def PyJs_next_1821_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'next':PyJs_next_1821_}, var)
            var.registers(['match'])
            var.put('match', var.get(u"this").get('_r').callprop('exec', var.get(u"this").get('_s')))
            return Js({'value':var.get('match'),'done':_seq(var.get('match'),var.get(u"null"))})
        PyJs_next_1821_._set_name('next')
        var.get('require')(Js('./_iter-create'))(var.get('$RegExpStringIterator'), Js('RegExp String'), PyJs_next_1821_)
        @Js
        def PyJs_matchAll_1822_(regexp, this, arguments, var=var):
            var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments, 'matchAll':PyJs_matchAll_1822_}, var)
            var.registers(['rx', 'regexp', 'S', 'flags'])
            var.get('defined')(var.get(u"this"))
            if var.get('isRegExp')(var.get('regexp')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('regexp')+Js(' is not a regexp!'))))
                raise PyJsTempException
            var.put('S', var.get('String')(var.get(u"this")))
            var.put('flags', (var.get('String')(var.get('regexp').get('flags')) if var.get('RegExpProto').contains(Js('flags')) else var.get('getFlags').callprop('call', var.get('regexp'))))
            var.put('rx', var.get('RegExp').create(var.get('regexp').get('source'), (var.get('flags') if (~var.get('flags').callprop('indexOf', Js('g'))) else (Js('g')+var.get('flags')))))
            var.get('rx').put('lastIndex', var.get('toLength')(var.get('regexp').get('lastIndex')))
            return var.get('$RegExpStringIterator').create(var.get('rx'), var.get('S'))
        PyJs_matchAll_1822_._set_name('matchAll')
        var.get('$export')(var.get('$export').get('P'), Js('String'), Js({'matchAll':PyJs_matchAll_1822_}))
    PyJs_anonymous_1819_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1823_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'WEBKIT_BUG', '$pad', 'userAgent', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$pad', var.get('require')(Js('./_string-pad')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('WEBKIT_BUG', JsRegExp('/Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//').callprop('test', var.get('userAgent')))
        @Js
        def PyJs_padEnd_1824_(maxLength, this, arguments, var=var):
            var = Scope({'maxLength':maxLength, 'this':this, 'arguments':arguments, 'padEnd':PyJs_padEnd_1824_}, var)
            var.registers(['maxLength'])
            return var.get('$pad')(var.get(u"this"), var.get('maxLength'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(False))
        PyJs_padEnd_1824_._set_name('padEnd')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('WEBKIT_BUG'))), Js('String'), Js({'padEnd':PyJs_padEnd_1824_}))
    PyJs_anonymous_1823_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1825_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'WEBKIT_BUG', '$pad', 'userAgent', '$export'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$pad', var.get('require')(Js('./_string-pad')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('WEBKIT_BUG', JsRegExp('/Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//').callprop('test', var.get('userAgent')))
        @Js
        def PyJs_padStart_1826_(maxLength, this, arguments, var=var):
            var = Scope({'maxLength':maxLength, 'this':this, 'arguments':arguments, 'padStart':PyJs_padStart_1826_}, var)
            var.registers(['maxLength'])
            return var.get('$pad')(var.get(u"this"), var.get('maxLength'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(True))
        PyJs_padStart_1826_._set_name('padStart')
        var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('WEBKIT_BUG'))), Js('String'), Js({'padStart':PyJs_padStart_1826_}))
    PyJs_anonymous_1825_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1827_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1828_(PyJsArg_247472696d_, this, arguments, var=var):
            var = Scope({'$trim':PyJsArg_247472696d_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$trim'])
            @Js
            def PyJs_trimLeft_1829_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'trimLeft':PyJs_trimLeft_1829_}, var)
                var.registers([])
                return var.get('$trim')(var.get(u"this"), Js(1.0))
            PyJs_trimLeft_1829_._set_name('trimLeft')
            return PyJs_trimLeft_1829_
        PyJs_anonymous_1828_._set_name('anonymous')
        var.get('require')(Js('./_string-trim'))(Js('trimLeft'), PyJs_anonymous_1828_, Js('trimStart'))
    PyJs_anonymous_1827_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1830_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_anonymous_1831_(PyJsArg_247472696d_, this, arguments, var=var):
            var = Scope({'$trim':PyJsArg_247472696d_, 'this':this, 'arguments':arguments}, var)
            var.registers(['$trim'])
            @Js
            def PyJs_trimRight_1832_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'trimRight':PyJs_trimRight_1832_}, var)
                var.registers([])
                return var.get('$trim')(var.get(u"this"), Js(2.0))
            PyJs_trimRight_1832_._set_name('trimRight')
            return PyJs_trimRight_1832_
        PyJs_anonymous_1831_._set_name('anonymous')
        var.get('require')(Js('./_string-trim'))(Js('trimRight'), PyJs_anonymous_1831_, Js('trimEnd'))
    PyJs_anonymous_1830_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1833_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_wks-define'))(Js('asyncIterator'))
    PyJs_anonymous_1833_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1834_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_wks-define'))(Js('observable'))
    PyJs_anonymous_1834_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1835_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['$export', 'require', 'exports', 'module'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.get('$export')(var.get('$export').get('S'), Js('System'), Js({'global':var.get('require')(Js('./_global'))}))
    PyJs_anonymous_1835_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1836_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_set-collection-from'))(Js('WeakMap'))
    PyJs_anonymous_1836_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1837_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_set-collection-of'))(Js('WeakMap'))
    PyJs_anonymous_1837_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1838_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_set-collection-from'))(Js('WeakSet'))
    PyJs_anonymous_1838_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1839_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./_set-collection-of'))(Js('WeakSet'))
    PyJs_anonymous_1839_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1840_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '$iterators', 'DOMIterables', 'ITERATOR', 'wks', 'redefine', 'i', 'NAME', 'hide', 'require', 'proto', 'collections', 'getKeys', 'Collection', 'Iterators', 'explicit', 'ArrayValues', 'TO_STRING_TAG', 'exports', 'global', 'key'])
        var.put('$iterators', var.get('require')(Js('./es6.array.iterator')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('ITERATOR', var.get('wks')(Js('iterator')))
        var.put('TO_STRING_TAG', var.get('wks')(Js('toStringTag')))
        var.put('ArrayValues', var.get('Iterators').get('Array'))
        var.put('DOMIterables', Js({'CSSRuleList':Js(True),'CSSStyleDeclaration':Js(False),'CSSValueList':Js(False),'ClientRectList':Js(False),'DOMRectList':Js(False),'DOMStringList':Js(False),'DOMTokenList':Js(True),'DataTransferItemList':Js(False),'FileList':Js(False),'HTMLAllCollection':Js(False),'HTMLCollection':Js(False),'HTMLFormElement':Js(False),'HTMLSelectElement':Js(False),'MediaList':Js(True),'MimeTypeArray':Js(False),'NamedNodeMap':Js(False),'NodeList':Js(True),'PaintRequestList':Js(False),'Plugin':Js(False),'PluginArray':Js(False),'SVGLengthList':Js(False),'SVGNumberList':Js(False),'SVGPathSegList':Js(False),'SVGPointList':Js(False),'SVGStringList':Js(False),'SVGTransformList':Js(False),'SourceBufferList':Js(False),'StyleSheetList':Js(True),'TextTrackCueList':Js(False),'TextTrackList':Js(False),'TouchList':Js(False)}))
        #for JS loop
        var.put('collections', var.get('getKeys')(var.get('DOMIterables')))
        var.put('i', Js(0.0))
        while (var.get('i')<var.get('collections').get('length')):
            try:
                var.put('NAME', var.get('collections').get(var.get('i')))
                var.put('explicit', var.get('DOMIterables').get(var.get('NAME')))
                var.put('Collection', var.get('global').get(var.get('NAME')))
                var.put('proto', (var.get('Collection') and var.get('Collection').get('prototype')))
                pass
                if var.get('proto'):
                    if var.get('proto').get(var.get('ITERATOR')).neg():
                        var.get('hide')(var.get('proto'), var.get('ITERATOR'), var.get('ArrayValues'))
                    if var.get('proto').get(var.get('TO_STRING_TAG')).neg():
                        var.get('hide')(var.get('proto'), var.get('TO_STRING_TAG'), var.get('NAME'))
                    var.get('Iterators').put(var.get('NAME'), var.get('ArrayValues'))
                    if var.get('explicit'):
                        for PyJsTemp in var.get('$iterators'):
                            var.put('key', PyJsTemp)
                            if var.get('proto').get(var.get('key')).neg():
                                var.get('redefine')(var.get('proto'), var.get('key'), var.get('$iterators').get(var.get('key')), Js(True))
            finally:
                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
    PyJs_anonymous_1840_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1841_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', '$export', '$task'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('$task', var.get('require')(Js('./_task')))
        var.get('$export')((var.get('$export').get('G')+var.get('$export').get('B')), Js({'setImmediate':var.get('$task').get('set'),'clearImmediate':var.get('$task').get('clear')}))
    PyJs_anonymous_1841_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1842_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'wrap', 'userAgent', 'global', '$export', 'MSIE', 'slice'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('userAgent', var.get('require')(Js('./_user-agent')))
        var.put('slice', Js([]).get('slice'))
        var.put('MSIE', JsRegExp('/MSIE .\\./').callprop('test', var.get('userAgent')))
        @Js
        def PyJs_wrap_1843_(set, this, arguments, var=var):
            var = Scope({'set':set, 'this':this, 'arguments':arguments, 'wrap':PyJs_wrap_1843_}, var)
            var.registers(['set'])
            @Js
            def PyJs_anonymous_1844_(fn, time, this, arguments, var=var):
                var = Scope({'fn':fn, 'time':time, 'this':this, 'arguments':arguments}, var)
                var.registers(['fn', 'time', 'args', 'boundArgs'])
                var.put('boundArgs', (var.get('arguments').get('length')>Js(2.0)))
                var.put('args', (var.get('slice').callprop('call', var.get('arguments'), Js(2.0)) if var.get('boundArgs') else Js(False)))
                @Js
                def PyJs_anonymous_1845_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    (var.get('fn') if (var.get('fn',throw=False).typeof()==Js('function')) else var.get('Function')(var.get('fn'))).callprop('apply', var.get(u"this"), var.get('args'))
                PyJs_anonymous_1845_._set_name('anonymous')
                return var.get('set')((PyJs_anonymous_1845_ if var.get('boundArgs') else var.get('fn')), var.get('time'))
            PyJs_anonymous_1844_._set_name('anonymous')
            return PyJs_anonymous_1844_
        PyJs_wrap_1843_._set_name('wrap')
        var.put('wrap', PyJs_wrap_1843_)
        var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('B'))+(var.get('$export').get('F')*var.get('MSIE'))), Js({'setTimeout':var.get('wrap')(var.get('global').get('setTimeout')),'setInterval':var.get('wrap')(var.get('global').get('setInterval'))}))
    PyJs_anonymous_1842_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1846_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('require')(Js('./modules/es6.symbol'))
        var.get('require')(Js('./modules/es6.object.create'))
        var.get('require')(Js('./modules/es6.object.define-property'))
        var.get('require')(Js('./modules/es6.object.define-properties'))
        var.get('require')(Js('./modules/es6.object.get-own-property-descriptor'))
        var.get('require')(Js('./modules/es6.object.get-prototype-of'))
        var.get('require')(Js('./modules/es6.object.keys'))
        var.get('require')(Js('./modules/es6.object.get-own-property-names'))
        var.get('require')(Js('./modules/es6.object.freeze'))
        var.get('require')(Js('./modules/es6.object.seal'))
        var.get('require')(Js('./modules/es6.object.prevent-extensions'))
        var.get('require')(Js('./modules/es6.object.is-frozen'))
        var.get('require')(Js('./modules/es6.object.is-sealed'))
        var.get('require')(Js('./modules/es6.object.is-extensible'))
        var.get('require')(Js('./modules/es6.object.assign'))
        var.get('require')(Js('./modules/es6.object.is'))
        var.get('require')(Js('./modules/es6.object.set-prototype-of'))
        var.get('require')(Js('./modules/es6.object.to-string'))
        var.get('require')(Js('./modules/es6.function.bind'))
        var.get('require')(Js('./modules/es6.function.name'))
        var.get('require')(Js('./modules/es6.function.has-instance'))
        var.get('require')(Js('./modules/es6.parse-int'))
        var.get('require')(Js('./modules/es6.parse-float'))
        var.get('require')(Js('./modules/es6.number.constructor'))
        var.get('require')(Js('./modules/es6.number.to-fixed'))
        var.get('require')(Js('./modules/es6.number.to-precision'))
        var.get('require')(Js('./modules/es6.number.epsilon'))
        var.get('require')(Js('./modules/es6.number.is-finite'))
        var.get('require')(Js('./modules/es6.number.is-integer'))
        var.get('require')(Js('./modules/es6.number.is-nan'))
        var.get('require')(Js('./modules/es6.number.is-safe-integer'))
        var.get('require')(Js('./modules/es6.number.max-safe-integer'))
        var.get('require')(Js('./modules/es6.number.min-safe-integer'))
        var.get('require')(Js('./modules/es6.number.parse-float'))
        var.get('require')(Js('./modules/es6.number.parse-int'))
        var.get('require')(Js('./modules/es6.math.acosh'))
        var.get('require')(Js('./modules/es6.math.asinh'))
        var.get('require')(Js('./modules/es6.math.atanh'))
        var.get('require')(Js('./modules/es6.math.cbrt'))
        var.get('require')(Js('./modules/es6.math.clz32'))
        var.get('require')(Js('./modules/es6.math.cosh'))
        var.get('require')(Js('./modules/es6.math.expm1'))
        var.get('require')(Js('./modules/es6.math.fround'))
        var.get('require')(Js('./modules/es6.math.hypot'))
        var.get('require')(Js('./modules/es6.math.imul'))
        var.get('require')(Js('./modules/es6.math.log10'))
        var.get('require')(Js('./modules/es6.math.log1p'))
        var.get('require')(Js('./modules/es6.math.log2'))
        var.get('require')(Js('./modules/es6.math.sign'))
        var.get('require')(Js('./modules/es6.math.sinh'))
        var.get('require')(Js('./modules/es6.math.tanh'))
        var.get('require')(Js('./modules/es6.math.trunc'))
        var.get('require')(Js('./modules/es6.string.from-code-point'))
        var.get('require')(Js('./modules/es6.string.raw'))
        var.get('require')(Js('./modules/es6.string.trim'))
        var.get('require')(Js('./modules/es6.string.iterator'))
        var.get('require')(Js('./modules/es6.string.code-point-at'))
        var.get('require')(Js('./modules/es6.string.ends-with'))
        var.get('require')(Js('./modules/es6.string.includes'))
        var.get('require')(Js('./modules/es6.string.repeat'))
        var.get('require')(Js('./modules/es6.string.starts-with'))
        var.get('require')(Js('./modules/es6.string.anchor'))
        var.get('require')(Js('./modules/es6.string.big'))
        var.get('require')(Js('./modules/es6.string.blink'))
        var.get('require')(Js('./modules/es6.string.bold'))
        var.get('require')(Js('./modules/es6.string.fixed'))
        var.get('require')(Js('./modules/es6.string.fontcolor'))
        var.get('require')(Js('./modules/es6.string.fontsize'))
        var.get('require')(Js('./modules/es6.string.italics'))
        var.get('require')(Js('./modules/es6.string.link'))
        var.get('require')(Js('./modules/es6.string.small'))
        var.get('require')(Js('./modules/es6.string.strike'))
        var.get('require')(Js('./modules/es6.string.sub'))
        var.get('require')(Js('./modules/es6.string.sup'))
        var.get('require')(Js('./modules/es6.date.now'))
        var.get('require')(Js('./modules/es6.date.to-json'))
        var.get('require')(Js('./modules/es6.date.to-iso-string'))
        var.get('require')(Js('./modules/es6.date.to-string'))
        var.get('require')(Js('./modules/es6.date.to-primitive'))
        var.get('require')(Js('./modules/es6.array.is-array'))
        var.get('require')(Js('./modules/es6.array.from'))
        var.get('require')(Js('./modules/es6.array.of'))
        var.get('require')(Js('./modules/es6.array.join'))
        var.get('require')(Js('./modules/es6.array.slice'))
        var.get('require')(Js('./modules/es6.array.sort'))
        var.get('require')(Js('./modules/es6.array.for-each'))
        var.get('require')(Js('./modules/es6.array.map'))
        var.get('require')(Js('./modules/es6.array.filter'))
        var.get('require')(Js('./modules/es6.array.some'))
        var.get('require')(Js('./modules/es6.array.every'))
        var.get('require')(Js('./modules/es6.array.reduce'))
        var.get('require')(Js('./modules/es6.array.reduce-right'))
        var.get('require')(Js('./modules/es6.array.index-of'))
        var.get('require')(Js('./modules/es6.array.last-index-of'))
        var.get('require')(Js('./modules/es6.array.copy-within'))
        var.get('require')(Js('./modules/es6.array.fill'))
        var.get('require')(Js('./modules/es6.array.find'))
        var.get('require')(Js('./modules/es6.array.find-index'))
        var.get('require')(Js('./modules/es6.array.species'))
        var.get('require')(Js('./modules/es6.array.iterator'))
        var.get('require')(Js('./modules/es6.regexp.constructor'))
        var.get('require')(Js('./modules/es6.regexp.exec'))
        var.get('require')(Js('./modules/es6.regexp.to-string'))
        var.get('require')(Js('./modules/es6.regexp.flags'))
        var.get('require')(Js('./modules/es6.regexp.match'))
        var.get('require')(Js('./modules/es6.regexp.replace'))
        var.get('require')(Js('./modules/es6.regexp.search'))
        var.get('require')(Js('./modules/es6.regexp.split'))
        var.get('require')(Js('./modules/es6.promise'))
        var.get('require')(Js('./modules/es6.map'))
        var.get('require')(Js('./modules/es6.set'))
        var.get('require')(Js('./modules/es6.weak-map'))
        var.get('require')(Js('./modules/es6.weak-set'))
        var.get('require')(Js('./modules/es6.typed.array-buffer'))
        var.get('require')(Js('./modules/es6.typed.data-view'))
        var.get('require')(Js('./modules/es6.typed.int8-array'))
        var.get('require')(Js('./modules/es6.typed.uint8-array'))
        var.get('require')(Js('./modules/es6.typed.uint8-clamped-array'))
        var.get('require')(Js('./modules/es6.typed.int16-array'))
        var.get('require')(Js('./modules/es6.typed.uint16-array'))
        var.get('require')(Js('./modules/es6.typed.int32-array'))
        var.get('require')(Js('./modules/es6.typed.uint32-array'))
        var.get('require')(Js('./modules/es6.typed.float32-array'))
        var.get('require')(Js('./modules/es6.typed.float64-array'))
        var.get('require')(Js('./modules/es6.reflect.apply'))
        var.get('require')(Js('./modules/es6.reflect.construct'))
        var.get('require')(Js('./modules/es6.reflect.define-property'))
        var.get('require')(Js('./modules/es6.reflect.delete-property'))
        var.get('require')(Js('./modules/es6.reflect.enumerate'))
        var.get('require')(Js('./modules/es6.reflect.get'))
        var.get('require')(Js('./modules/es6.reflect.get-own-property-descriptor'))
        var.get('require')(Js('./modules/es6.reflect.get-prototype-of'))
        var.get('require')(Js('./modules/es6.reflect.has'))
        var.get('require')(Js('./modules/es6.reflect.is-extensible'))
        var.get('require')(Js('./modules/es6.reflect.own-keys'))
        var.get('require')(Js('./modules/es6.reflect.prevent-extensions'))
        var.get('require')(Js('./modules/es6.reflect.set'))
        var.get('require')(Js('./modules/es6.reflect.set-prototype-of'))
        var.get('require')(Js('./modules/es7.array.includes'))
        var.get('require')(Js('./modules/es7.array.flat-map'))
        var.get('require')(Js('./modules/es7.array.flatten'))
        var.get('require')(Js('./modules/es7.string.at'))
        var.get('require')(Js('./modules/es7.string.pad-start'))
        var.get('require')(Js('./modules/es7.string.pad-end'))
        var.get('require')(Js('./modules/es7.string.trim-left'))
        var.get('require')(Js('./modules/es7.string.trim-right'))
        var.get('require')(Js('./modules/es7.string.match-all'))
        var.get('require')(Js('./modules/es7.symbol.async-iterator'))
        var.get('require')(Js('./modules/es7.symbol.observable'))
        var.get('require')(Js('./modules/es7.object.get-own-property-descriptors'))
        var.get('require')(Js('./modules/es7.object.values'))
        var.get('require')(Js('./modules/es7.object.entries'))
        var.get('require')(Js('./modules/es7.object.define-getter'))
        var.get('require')(Js('./modules/es7.object.define-setter'))
        var.get('require')(Js('./modules/es7.object.lookup-getter'))
        var.get('require')(Js('./modules/es7.object.lookup-setter'))
        var.get('require')(Js('./modules/es7.map.to-json'))
        var.get('require')(Js('./modules/es7.set.to-json'))
        var.get('require')(Js('./modules/es7.map.of'))
        var.get('require')(Js('./modules/es7.set.of'))
        var.get('require')(Js('./modules/es7.weak-map.of'))
        var.get('require')(Js('./modules/es7.weak-set.of'))
        var.get('require')(Js('./modules/es7.map.from'))
        var.get('require')(Js('./modules/es7.set.from'))
        var.get('require')(Js('./modules/es7.weak-map.from'))
        var.get('require')(Js('./modules/es7.weak-set.from'))
        var.get('require')(Js('./modules/es7.global'))
        var.get('require')(Js('./modules/es7.system.global'))
        var.get('require')(Js('./modules/es7.error.is-error'))
        var.get('require')(Js('./modules/es7.math.clamp'))
        var.get('require')(Js('./modules/es7.math.deg-per-rad'))
        var.get('require')(Js('./modules/es7.math.degrees'))
        var.get('require')(Js('./modules/es7.math.fscale'))
        var.get('require')(Js('./modules/es7.math.iaddh'))
        var.get('require')(Js('./modules/es7.math.isubh'))
        var.get('require')(Js('./modules/es7.math.imulh'))
        var.get('require')(Js('./modules/es7.math.rad-per-deg'))
        var.get('require')(Js('./modules/es7.math.radians'))
        var.get('require')(Js('./modules/es7.math.scale'))
        var.get('require')(Js('./modules/es7.math.umulh'))
        var.get('require')(Js('./modules/es7.math.signbit'))
        var.get('require')(Js('./modules/es7.promise.finally'))
        var.get('require')(Js('./modules/es7.promise.try'))
        var.get('require')(Js('./modules/es7.reflect.define-metadata'))
        var.get('require')(Js('./modules/es7.reflect.delete-metadata'))
        var.get('require')(Js('./modules/es7.reflect.get-metadata'))
        var.get('require')(Js('./modules/es7.reflect.get-metadata-keys'))
        var.get('require')(Js('./modules/es7.reflect.get-own-metadata'))
        var.get('require')(Js('./modules/es7.reflect.get-own-metadata-keys'))
        var.get('require')(Js('./modules/es7.reflect.has-metadata'))
        var.get('require')(Js('./modules/es7.reflect.has-own-metadata'))
        var.get('require')(Js('./modules/es7.reflect.metadata'))
        var.get('require')(Js('./modules/es7.asap'))
        var.get('require')(Js('./modules/es7.observable'))
        var.get('require')(Js('./modules/web.timers'))
        var.get('require')(Js('./modules/web.immediate'))
        var.get('require')(Js('./modules/web.dom.iterable'))
        var.get('module').put('exports', var.get('require')(Js('./modules/_core')))
    PyJs_anonymous_1846_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1847_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1848_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_1849_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['ECDH', 'BN', 'elliptic', 'aliases', 'formatReturnValue'])
                @Js
                def PyJsHoisted_ECDH_(curve, this, arguments, var=var):
                    var = Scope({'curve':curve, 'this':this, 'arguments':arguments}, var)
                    var.registers(['curve'])
                    var.get(u"this").put('curveType', var.get('aliases').get(var.get('curve')))
                    if var.get(u"this").get('curveType').neg():
                        var.get(u"this").put('curveType', Js({'name':var.get('curve')}))
                    var.get(u"this").put('curve', var.get('elliptic').get('ec').create(var.get(u"this").get('curveType').get('name')))
                    var.get(u"this").put('keys', PyJsComma(Js(0.0), Js(None)))
                PyJsHoisted_ECDH_.func_name = 'ECDH'
                var.put('ECDH', PyJsHoisted_ECDH_)
                @Js
                def PyJsHoisted_formatReturnValue_(bn, enc, len, this, arguments, var=var):
                    var = Scope({'bn':bn, 'enc':enc, 'len':len, 'this':this, 'arguments':arguments}, var)
                    var.registers(['len', 'buf', 'bn', 'zeros', 'enc'])
                    if var.get('Array').callprop('isArray', var.get('bn')).neg():
                        var.put('bn', var.get('bn').callprop('toArray'))
                    var.put('buf', var.get('Buffer').create(var.get('bn')))
                    if (var.get('len') and (var.get('buf').get('length')<var.get('len'))):
                        var.put('zeros', var.get('Buffer').create((var.get('len')-var.get('buf').get('length'))))
                        var.get('zeros').callprop('fill', Js(0.0))
                        var.put('buf', var.get('Buffer').callprop('concat', Js([var.get('zeros'), var.get('buf')])))
                    if var.get('enc').neg():
                        return var.get('buf')
                    else:
                        return var.get('buf').callprop('toString', var.get('enc'))
                PyJsHoisted_formatReturnValue_.func_name = 'formatReturnValue'
                var.put('formatReturnValue', PyJsHoisted_formatReturnValue_)
                var.put('elliptic', var.get('require')(Js('elliptic')))
                var.put('BN', var.get('require')(Js('bn.js')))
                @Js
                def PyJs_createECDH_1850_(curve, this, arguments, var=var):
                    var = Scope({'curve':curve, 'this':this, 'arguments':arguments, 'createECDH':PyJs_createECDH_1850_}, var)
                    var.registers(['curve'])
                    return var.get('ECDH').create(var.get('curve'))
                PyJs_createECDH_1850_._set_name('createECDH')
                var.get('module').put('exports', PyJs_createECDH_1850_)
                var.put('aliases', Js({'secp256k1':Js({'name':Js('secp256k1'),'byteLength':Js(32.0)}),'secp224r1':Js({'name':Js('p224'),'byteLength':Js(28.0)}),'prime256v1':Js({'name':Js('p256'),'byteLength':Js(32.0)}),'prime192v1':Js({'name':Js('p192'),'byteLength':Js(24.0)}),'ed25519':Js({'name':Js('ed25519'),'byteLength':Js(32.0)}),'secp384r1':Js({'name':Js('p384'),'byteLength':Js(48.0)}),'secp521r1':Js({'name':Js('p521'),'byteLength':Js(66.0)})}))
                var.get('aliases').put('p224', var.get('aliases').get('secp224r1'))
                var.get('aliases').put('p256', var.get('aliases').put('secp256r1', var.get('aliases').get('prime256v1')))
                var.get('aliases').put('p192', var.get('aliases').put('secp192r1', var.get('aliases').get('prime192v1')))
                var.get('aliases').put('p384', var.get('aliases').get('secp384r1'))
                var.get('aliases').put('p521', var.get('aliases').get('secp521r1'))
                pass
                @Js
                def PyJs_anonymous_1851_(enc, format, this, arguments, var=var):
                    var = Scope({'enc':enc, 'format':format, 'this':this, 'arguments':arguments}, var)
                    var.registers(['format', 'enc'])
                    var.get(u"this").put('keys', var.get(u"this").get('curve').callprop('genKeyPair'))
                    return var.get(u"this").callprop('getPublicKey', var.get('enc'), var.get('format'))
                PyJs_anonymous_1851_._set_name('anonymous')
                var.get('ECDH').get('prototype').put('generateKeys', PyJs_anonymous_1851_)
                @Js
                def PyJs_anonymous_1852_(other, inenc, enc, this, arguments, var=var):
                    var = Scope({'other':other, 'inenc':inenc, 'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['out', 'other', 'otherPub', 'inenc', 'enc'])
                    var.put('inenc', (var.get('inenc') or Js('utf8')))
                    if var.get('Buffer').callprop('isBuffer', var.get('other')).neg():
                        var.put('other', var.get('Buffer').create(var.get('other'), var.get('inenc')))
                    var.put('otherPub', var.get(u"this").get('curve').callprop('keyFromPublic', var.get('other')).callprop('getPublic'))
                    var.put('out', var.get('otherPub').callprop('mul', var.get(u"this").get('keys').callprop('getPrivate')).callprop('getX'))
                    return var.get('formatReturnValue')(var.get('out'), var.get('enc'), var.get(u"this").get('curveType').get('byteLength'))
                PyJs_anonymous_1852_._set_name('anonymous')
                var.get('ECDH').get('prototype').put('computeSecret', PyJs_anonymous_1852_)
                @Js
                def PyJs_anonymous_1853_(enc, format, this, arguments, var=var):
                    var = Scope({'enc':enc, 'format':format, 'this':this, 'arguments':arguments}, var)
                    var.registers(['format', 'key', 'enc'])
                    var.put('key', var.get(u"this").get('keys').callprop('getPublic', _seq(var.get('format'),Js('compressed')), Js(True)))
                    if _seq(var.get('format'),Js('hybrid')):
                        if (var.get('key').get((var.get('key').get('length')-Js(1.0)))%Js(2.0)):
                            var.get('key').put('0', Js(7.0))
                        else:
                            var.get('key').put('0', Js(6.0))
                    return var.get('formatReturnValue')(var.get('key'), var.get('enc'))
                PyJs_anonymous_1853_._set_name('anonymous')
                var.get('ECDH').get('prototype').put('getPublicKey', PyJs_anonymous_1853_)
                @Js
                def PyJs_anonymous_1854_(enc, this, arguments, var=var):
                    var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['enc'])
                    return var.get('formatReturnValue')(var.get(u"this").get('keys').callprop('getPrivate'), var.get('enc'))
                PyJs_anonymous_1854_._set_name('anonymous')
                var.get('ECDH').get('prototype').put('getPrivateKey', PyJs_anonymous_1854_)
                @Js
                def PyJs_anonymous_1855_(pub, enc, this, arguments, var=var):
                    var = Scope({'pub':pub, 'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pub', 'enc'])
                    var.put('enc', (var.get('enc') or Js('utf8')))
                    if var.get('Buffer').callprop('isBuffer', var.get('pub')).neg():
                        var.put('pub', var.get('Buffer').create(var.get('pub'), var.get('enc')))
                    var.get(u"this").get('keys').callprop('_importPublic', var.get('pub'))
                    return var.get(u"this")
                PyJs_anonymous_1855_._set_name('anonymous')
                var.get('ECDH').get('prototype').put('setPublicKey', PyJs_anonymous_1855_)
                @Js
                def PyJs_anonymous_1856_(priv, enc, this, arguments, var=var):
                    var = Scope({'priv':priv, 'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['_priv', 'priv', 'enc'])
                    var.put('enc', (var.get('enc') or Js('utf8')))
                    if var.get('Buffer').callprop('isBuffer', var.get('priv')).neg():
                        var.put('priv', var.get('Buffer').create(var.get('priv'), var.get('enc')))
                    var.put('_priv', var.get('BN').create(var.get('priv')))
                    var.put('_priv', var.get('_priv').callprop('toString', Js(16.0)))
                    var.get(u"this").put('keys', var.get(u"this").get('curve').callprop('genKeyPair'))
                    var.get(u"this").get('keys').callprop('_importPrivate', var.get('_priv'))
                    return var.get(u"this")
                PyJs_anonymous_1856_._set_name('anonymous')
                var.get('ECDH').get('prototype').put('setPrivateKey', PyJs_anonymous_1856_)
                pass
            PyJs_anonymous_1849_._set_name('anonymous')
            PyJs_anonymous_1849_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1848_._set_name('anonymous')
        PyJs_anonymous_1848_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_1847_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1857_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('15').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_1857_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1858_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'sha', 'Base', 'Hash', 'inherits', 'RIPEMD160', 'MD5'])
        @Js
        def PyJsHoisted_Hash_(hash, this, arguments, var=var):
            var = Scope({'hash':hash, 'this':this, 'arguments':arguments}, var)
            var.registers(['hash'])
            var.get('Base').callprop('call', var.get(u"this"), Js('digest'))
            var.get(u"this").put('_hash', var.get('hash'))
        PyJsHoisted_Hash_.func_name = 'Hash'
        var.put('Hash', PyJsHoisted_Hash_)
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('MD5', var.get('require')(Js('md5.js')))
        var.put('RIPEMD160', var.get('require')(Js('ripemd160')))
        var.put('sha', var.get('require')(Js('sha.js')))
        var.put('Base', var.get('require')(Js('cipher-base')))
        pass
        var.get('inherits')(var.get('Hash'), var.get('Base'))
        @Js
        def PyJs_anonymous_1859_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data'])
            var.get(u"this").get('_hash').callprop('update', var.get('data'))
        PyJs_anonymous_1859_._set_name('anonymous')
        var.get('Hash').get('prototype').put('_update', PyJs_anonymous_1859_)
        @Js
        def PyJs_anonymous_1860_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this").get('_hash').callprop('digest')
        PyJs_anonymous_1860_._set_name('anonymous')
        var.get('Hash').get('prototype').put('_final', PyJs_anonymous_1860_)
        @Js
        def PyJs_createHash_1861_(alg, this, arguments, var=var):
            var = Scope({'alg':alg, 'this':this, 'arguments':arguments, 'createHash':PyJs_createHash_1861_}, var)
            var.registers(['alg'])
            var.put('alg', var.get('alg').callprop('toLowerCase'))
            if _seq(var.get('alg'),Js('md5')):
                return var.get('MD5').create()
            if (_seq(var.get('alg'),Js('rmd160')) or _seq(var.get('alg'),Js('ripemd160'))):
                return var.get('RIPEMD160').create()
            return var.get('Hash').create(var.get('sha')(var.get('alg')))
        PyJs_createHash_1861_._set_name('createHash')
        var.get('module').put('exports', PyJs_createHash_1861_)
    PyJs_anonymous_1858_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1862_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'MD5', 'module'])
        var.put('MD5', var.get('require')(Js('md5.js')))
        @Js
        def PyJs_anonymous_1863_(buffer, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer'])
            return var.get('MD5').create().callprop('update', var.get('buffer')).callprop('digest')
        PyJs_anonymous_1863_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_1863_)
    PyJs_anonymous_1862_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1864_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'ZEROS', 'Buffer', 'require', 'module', 'md5', 'sha', 'Legacy', 'Base', 'inherits', 'Hmac', 'RIPEMD160'])
        @Js
        def PyJsHoisted_Hmac_(alg, key, this, arguments, var=var):
            var = Scope({'alg':alg, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['ipad', 'blocksize', 'hash', 'i', 'alg', 'key', 'opad'])
            var.get('Base').callprop('call', var.get(u"this"), Js('digest'))
            if _seq(var.get('key',throw=False).typeof(),Js('string')):
                var.put('key', var.get('Buffer').callprop('from', var.get('key')))
            var.put('blocksize', (Js(128.0) if (_seq(var.get('alg'),Js('sha512')) or _seq(var.get('alg'),Js('sha384'))) else Js(64.0)))
            var.get(u"this").put('_alg', var.get('alg'))
            var.get(u"this").put('_key', var.get('key'))
            if (var.get('key').get('length')>var.get('blocksize')):
                var.put('hash', (var.get('RIPEMD160').create() if _seq(var.get('alg'),Js('rmd160')) else var.get('sha')(var.get('alg'))))
                var.put('key', var.get('hash').callprop('update', var.get('key')).callprop('digest'))
            else:
                if (var.get('key').get('length')<var.get('blocksize')):
                    var.put('key', var.get('Buffer').callprop('concat', Js([var.get('key'), var.get('ZEROS')]), var.get('blocksize')))
            var.put('ipad', var.get(u"this").put('_ipad', var.get('Buffer').callprop('allocUnsafe', var.get('blocksize'))))
            var.put('opad', var.get(u"this").put('_opad', var.get('Buffer').callprop('allocUnsafe', var.get('blocksize'))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('blocksize')):
                try:
                    var.get('ipad').put(var.get('i'), (var.get('key').get(var.get('i'))^Js(54)))
                    var.get('opad').put(var.get('i'), (var.get('key').get(var.get('i'))^Js(92)))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get(u"this").put('_hash', (var.get('RIPEMD160').create() if _seq(var.get('alg'),Js('rmd160')) else var.get('sha')(var.get('alg'))))
            var.get(u"this").get('_hash').callprop('update', var.get('ipad'))
        PyJsHoisted_Hmac_.func_name = 'Hmac'
        var.put('Hmac', PyJsHoisted_Hmac_)
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Legacy', var.get('require')(Js('./legacy')))
        var.put('Base', var.get('require')(Js('cipher-base')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('md5', var.get('require')(Js('create-hash/md5')))
        var.put('RIPEMD160', var.get('require')(Js('ripemd160')))
        var.put('sha', var.get('require')(Js('sha.js')))
        var.put('ZEROS', var.get('Buffer').callprop('alloc', Js(128.0)))
        pass
        var.get('inherits')(var.get('Hmac'), var.get('Base'))
        @Js
        def PyJs_anonymous_1865_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data'])
            var.get(u"this").get('_hash').callprop('update', var.get('data'))
        PyJs_anonymous_1865_._set_name('anonymous')
        var.get('Hmac').get('prototype').put('_update', PyJs_anonymous_1865_)
        @Js
        def PyJs_anonymous_1866_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['h', 'hash'])
            var.put('h', var.get(u"this").get('_hash').callprop('digest'))
            var.put('hash', (var.get('RIPEMD160').create() if _seq(var.get(u"this").get('_alg'),Js('rmd160')) else var.get('sha')(var.get(u"this").get('_alg'))))
            return var.get('hash').callprop('update', var.get(u"this").get('_opad')).callprop('update', var.get('h')).callprop('digest')
        PyJs_anonymous_1866_._set_name('anonymous')
        var.get('Hmac').get('prototype').put('_final', PyJs_anonymous_1866_)
        @Js
        def PyJs_createHmac_1867_(alg, key, this, arguments, var=var):
            var = Scope({'alg':alg, 'key':key, 'this':this, 'arguments':arguments, 'createHmac':PyJs_createHmac_1867_}, var)
            var.registers(['key', 'alg'])
            var.put('alg', var.get('alg').callprop('toLowerCase'))
            if (_seq(var.get('alg'),Js('rmd160')) or _seq(var.get('alg'),Js('ripemd160'))):
                return var.get('Hmac').create(Js('rmd160'), var.get('key'))
            if _seq(var.get('alg'),Js('md5')):
                return var.get('Legacy').create(var.get('md5'), var.get('key'))
            return var.get('Hmac').create(var.get('alg'), var.get('key'))
        PyJs_createHmac_1867_._set_name('createHmac')
        var.get('module').put('exports', PyJs_createHmac_1867_)
    PyJs_anonymous_1864_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1868_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'blocksize', 'ZEROS', 'Buffer', 'require', 'module', 'Base', 'inherits', 'Hmac'])
        @Js
        def PyJsHoisted_Hmac_(alg, key, this, arguments, var=var):
            var = Scope({'alg':alg, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['ipad', 'i', 'alg', 'key', 'opad'])
            var.get('Base').callprop('call', var.get(u"this"), Js('digest'))
            if _seq(var.get('key',throw=False).typeof(),Js('string')):
                var.put('key', var.get('Buffer').callprop('from', var.get('key')))
            var.get(u"this").put('_alg', var.get('alg'))
            var.get(u"this").put('_key', var.get('key'))
            if (var.get('key').get('length')>var.get('blocksize')):
                var.put('key', var.get('alg')(var.get('key')))
            else:
                if (var.get('key').get('length')<var.get('blocksize')):
                    var.put('key', var.get('Buffer').callprop('concat', Js([var.get('key'), var.get('ZEROS')]), var.get('blocksize')))
            var.put('ipad', var.get(u"this").put('_ipad', var.get('Buffer').callprop('allocUnsafe', var.get('blocksize'))))
            var.put('opad', var.get(u"this").put('_opad', var.get('Buffer').callprop('allocUnsafe', var.get('blocksize'))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('blocksize')):
                try:
                    var.get('ipad').put(var.get('i'), (var.get('key').get(var.get('i'))^Js(54)))
                    var.get('opad').put(var.get('i'), (var.get('key').get(var.get('i'))^Js(92)))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get(u"this").put('_hash', Js([var.get('ipad')]))
        PyJsHoisted_Hmac_.func_name = 'Hmac'
        var.put('Hmac', PyJsHoisted_Hmac_)
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('Base', var.get('require')(Js('cipher-base')))
        var.put('ZEROS', var.get('Buffer').callprop('alloc', Js(128.0)))
        var.put('blocksize', Js(64.0))
        pass
        var.get('inherits')(var.get('Hmac'), var.get('Base'))
        @Js
        def PyJs_anonymous_1869_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data'])
            var.get(u"this").get('_hash').callprop('push', var.get('data'))
        PyJs_anonymous_1869_._set_name('anonymous')
        var.get('Hmac').get('prototype').put('_update', PyJs_anonymous_1869_)
        @Js
        def PyJs_anonymous_1870_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['h'])
            var.put('h', var.get(u"this").callprop('_alg', var.get('Buffer').callprop('concat', var.get(u"this").get('_hash'))))
            return var.get(u"this").callprop('_alg', var.get('Buffer').callprop('concat', Js([var.get(u"this").get('_opad'), var.get('h')])))
        PyJs_anonymous_1870_._set_name('anonymous')
        var.get('Hmac').get('prototype').put('_final', PyJs_anonymous_1870_)
        var.get('module').put('exports', var.get('Hmac'))
    PyJs_anonymous_1868_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1871_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'algoKeys', 'aes', 'rf', 'require', 'module', 'dh', 'p', 'sign', 'publicEncrypt', 'hashes', 'algos'])
        Js('use strict')
        var.get('exports').put('randomBytes', var.get('exports').put('rng', var.get('exports').put('pseudoRandomBytes', var.get('exports').put('prng', var.get('require')(Js('randombytes'))))))
        var.get('exports').put('createHash', var.get('exports').put('Hash', var.get('require')(Js('create-hash'))))
        var.get('exports').put('createHmac', var.get('exports').put('Hmac', var.get('require')(Js('create-hmac'))))
        var.put('algos', var.get('require')(Js('browserify-sign/algos')))
        var.put('algoKeys', var.get('Object').callprop('keys', var.get('algos')))
        var.put('hashes', Js([Js('sha1'), Js('sha224'), Js('sha256'), Js('sha384'), Js('sha512'), Js('md5'), Js('rmd160')]).callprop('concat', var.get('algoKeys')))
        @Js
        def PyJs_anonymous_1872_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('hashes')
        PyJs_anonymous_1872_._set_name('anonymous')
        var.get('exports').put('getHashes', PyJs_anonymous_1872_)
        var.put('p', var.get('require')(Js('pbkdf2')))
        var.get('exports').put('pbkdf2', var.get('p').get('pbkdf2'))
        var.get('exports').put('pbkdf2Sync', var.get('p').get('pbkdf2Sync'))
        var.put('aes', var.get('require')(Js('browserify-cipher')))
        var.get('exports').put('Cipher', var.get('aes').get('Cipher'))
        var.get('exports').put('createCipher', var.get('aes').get('createCipher'))
        var.get('exports').put('Cipheriv', var.get('aes').get('Cipheriv'))
        var.get('exports').put('createCipheriv', var.get('aes').get('createCipheriv'))
        var.get('exports').put('Decipher', var.get('aes').get('Decipher'))
        var.get('exports').put('createDecipher', var.get('aes').get('createDecipher'))
        var.get('exports').put('Decipheriv', var.get('aes').get('Decipheriv'))
        var.get('exports').put('createDecipheriv', var.get('aes').get('createDecipheriv'))
        var.get('exports').put('getCiphers', var.get('aes').get('getCiphers'))
        var.get('exports').put('listCiphers', var.get('aes').get('listCiphers'))
        var.put('dh', var.get('require')(Js('diffie-hellman')))
        var.get('exports').put('DiffieHellmanGroup', var.get('dh').get('DiffieHellmanGroup'))
        var.get('exports').put('createDiffieHellmanGroup', var.get('dh').get('createDiffieHellmanGroup'))
        var.get('exports').put('getDiffieHellman', var.get('dh').get('getDiffieHellman'))
        var.get('exports').put('createDiffieHellman', var.get('dh').get('createDiffieHellman'))
        var.get('exports').put('DiffieHellman', var.get('dh').get('DiffieHellman'))
        var.put('sign', var.get('require')(Js('browserify-sign')))
        var.get('exports').put('createSign', var.get('sign').get('createSign'))
        var.get('exports').put('Sign', var.get('sign').get('Sign'))
        var.get('exports').put('createVerify', var.get('sign').get('createVerify'))
        var.get('exports').put('Verify', var.get('sign').get('Verify'))
        var.get('exports').put('createECDH', var.get('require')(Js('create-ecdh')))
        var.put('publicEncrypt', var.get('require')(Js('public-encrypt')))
        var.get('exports').put('publicEncrypt', var.get('publicEncrypt').get('publicEncrypt'))
        var.get('exports').put('privateEncrypt', var.get('publicEncrypt').get('privateEncrypt'))
        var.get('exports').put('publicDecrypt', var.get('publicEncrypt').get('publicDecrypt'))
        var.get('exports').put('privateDecrypt', var.get('publicEncrypt').get('privateDecrypt'))
        var.put('rf', var.get('require')(Js('randomfill')))
        var.get('exports').put('randomFill', var.get('rf').get('randomFill'))
        var.get('exports').put('randomFillSync', var.get('rf').get('randomFillSync'))
        @Js
        def PyJs_anonymous_1873_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js([Js('sorry, createCredentials is not implemented yet'), Js('we accept pull requests'), Js('https://github.com/crypto-browserify/crypto-browserify')]).callprop('join', Js('\n'))))
            raise PyJsTempException
        PyJs_anonymous_1873_._set_name('anonymous')
        var.get('exports').put('createCredentials', PyJs_anonymous_1873_)
        def PyJs_LONG_1874_(var=var):
            return var.get('exports').put('constants', Js({'DH_CHECK_P_NOT_SAFE_PRIME':Js(2.0),'DH_CHECK_P_NOT_PRIME':Js(1.0),'DH_UNABLE_TO_CHECK_GENERATOR':Js(4.0),'DH_NOT_SUITABLE_GENERATOR':Js(8.0),'NPN_ENABLED':Js(1.0),'ALPN_ENABLED':Js(1.0),'RSA_PKCS1_PADDING':Js(1.0),'RSA_SSLV23_PADDING':Js(2.0),'RSA_NO_PADDING':Js(3.0),'RSA_PKCS1_OAEP_PADDING':Js(4.0),'RSA_X931_PADDING':Js(5.0),'RSA_PKCS1_PSS_PADDING':Js(6.0),'POINT_CONVERSION_COMPRESSED':Js(2.0),'POINT_CONVERSION_UNCOMPRESSED':Js(4.0),'POINT_CONVERSION_HYBRID':Js(6.0)}))
        PyJs_LONG_1874_()
    PyJs_anonymous_1871_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1875_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_1876_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_1877_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['INV_SUB_MIX_2', 'C', 'SUB_MIX_3', 'INV_SUB_MIX_0', 'INV_SUB_MIX_3', 'INV_SUB_MIX_1', 'RCON', 'C_lib', 'INV_SBOX', 'AES', 'SUB_MIX_2', 'C_algo', 'SUB_MIX_1', 'SUB_MIX_0', 'SBOX', 'BlockCipher'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('BlockCipher', var.get('C_lib').get('BlockCipher'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('SBOX', Js([]))
                var.put('INV_SBOX', Js([]))
                var.put('SUB_MIX_0', Js([]))
                var.put('SUB_MIX_1', Js([]))
                var.put('SUB_MIX_2', Js([]))
                var.put('SUB_MIX_3', Js([]))
                var.put('INV_SUB_MIX_0', Js([]))
                var.put('INV_SUB_MIX_1', Js([]))
                var.put('INV_SUB_MIX_2', Js([]))
                var.put('INV_SUB_MIX_3', Js([]))
                @Js
                def PyJs_anonymous_1878_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['x2', 'xi', 'i', 'x', 'sx', 'x4', 't', 'd', 'x8'])
                    var.put('d', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(256.0)):
                        try:
                            if (var.get('i')<Js(128.0)):
                                var.get('d').put(var.get('i'), (var.get('i')<<Js(1.0)))
                            else:
                                var.get('d').put(var.get('i'), ((var.get('i')<<Js(1.0))^Js(283)))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('x', Js(0.0))
                    var.put('xi', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(256.0)):
                        try:
                            var.put('sx', ((((var.get('xi')^(var.get('xi')<<Js(1.0)))^(var.get('xi')<<Js(2.0)))^(var.get('xi')<<Js(3.0)))^(var.get('xi')<<Js(4.0))))
                            var.put('sx', ((PyJsBshift(var.get('sx'),Js(8.0))^(var.get('sx')&Js(255)))^Js(99)))
                            var.get('SBOX').put(var.get('x'), var.get('sx'))
                            var.get('INV_SBOX').put(var.get('sx'), var.get('x'))
                            var.put('x2', var.get('d').get(var.get('x')))
                            var.put('x4', var.get('d').get(var.get('x2')))
                            var.put('x8', var.get('d').get(var.get('x4')))
                            var.put('t', ((var.get('d').get(var.get('sx'))*Js(257))^(var.get('sx')*Js(16843008))))
                            var.get('SUB_MIX_0').put(var.get('x'), ((var.get('t')<<Js(24.0))|PyJsBshift(var.get('t'),Js(8.0))))
                            var.get('SUB_MIX_1').put(var.get('x'), ((var.get('t')<<Js(16.0))|PyJsBshift(var.get('t'),Js(16.0))))
                            var.get('SUB_MIX_2').put(var.get('x'), ((var.get('t')<<Js(8.0))|PyJsBshift(var.get('t'),Js(24.0))))
                            var.get('SUB_MIX_3').put(var.get('x'), var.get('t'))
                            var.put('t', ((((var.get('x8')*Js(16843009))^(var.get('x4')*Js(65537)))^(var.get('x2')*Js(257)))^(var.get('x')*Js(16843008))))
                            var.get('INV_SUB_MIX_0').put(var.get('sx'), ((var.get('t')<<Js(24.0))|PyJsBshift(var.get('t'),Js(8.0))))
                            var.get('INV_SUB_MIX_1').put(var.get('sx'), ((var.get('t')<<Js(16.0))|PyJsBshift(var.get('t'),Js(16.0))))
                            var.get('INV_SUB_MIX_2').put(var.get('sx'), ((var.get('t')<<Js(8.0))|PyJsBshift(var.get('t'),Js(24.0))))
                            var.get('INV_SUB_MIX_3').put(var.get('sx'), var.get('t'))
                            if var.get('x').neg():
                                var.put('x', var.put('xi', Js(1.0)))
                            else:
                                var.put('x', (var.get('x2')^var.get('d').get(var.get('d').get(var.get('d').get((var.get('x8')^var.get('x2')))))))
                                var.put('xi', var.get('d').get(var.get('d').get(var.get('xi'))), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs_anonymous_1878_._set_name('anonymous')
                PyJs_anonymous_1878_()
                var.put('RCON', Js([Js(0), Js(1), Js(2), Js(4), Js(8), Js(16), Js(32), Js(64), Js(128), Js(27), Js(54)]))
                @Js
                def PyJs__doReset_1879_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_1879_}, var)
                    var.registers(['ksRows', 'keySize', 'keySchedule', 'invKsRow', 'key', 'ksRow', 'keyWords', 't', 'invKeySchedule', 'nRounds'])
                    pass
                    if (var.get(u"this").get('_nRounds') and _seq(var.get(u"this").get('_keyPriorReset'),var.get(u"this").get('_key'))):
                        return var.get('undefined')
                    var.put('key', var.get(u"this").put('_keyPriorReset', var.get(u"this").get('_key')))
                    var.put('keyWords', var.get('key').get('words'))
                    var.put('keySize', (var.get('key').get('sigBytes')/Js(4.0)))
                    var.put('nRounds', var.get(u"this").put('_nRounds', (var.get('keySize')+Js(6.0))))
                    var.put('ksRows', ((var.get('nRounds')+Js(1.0))*Js(4.0)))
                    var.put('keySchedule', var.get(u"this").put('_keySchedule', Js([])))
                    #for JS loop
                    var.put('ksRow', Js(0.0))
                    while (var.get('ksRow')<var.get('ksRows')):
                        try:
                            if (var.get('ksRow')<var.get('keySize')):
                                var.get('keySchedule').put(var.get('ksRow'), var.get('keyWords').get(var.get('ksRow')))
                            else:
                                var.put('t', var.get('keySchedule').get((var.get('ksRow')-Js(1.0))))
                                if (var.get('ksRow')%var.get('keySize')).neg():
                                    var.put('t', ((var.get('t')<<Js(8.0))|PyJsBshift(var.get('t'),Js(24.0))))
                                    var.put('t', ((((var.get('SBOX').get(PyJsBshift(var.get('t'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('t'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('t'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('t')&Js(255)))))
                                    var.put('t', (var.get('RCON').get(((var.get('ksRow')/var.get('keySize'))|Js(0.0)))<<Js(24.0)), '^')
                                else:
                                    if ((var.get('keySize')>Js(6.0)) and ((var.get('ksRow')%var.get('keySize'))==Js(4.0))):
                                        var.put('t', ((((var.get('SBOX').get(PyJsBshift(var.get('t'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('t'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('t'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('t')&Js(255)))))
                                var.get('keySchedule').put(var.get('ksRow'), (var.get('keySchedule').get((var.get('ksRow')-var.get('keySize')))^var.get('t')))
                        finally:
                                (var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1))
                    var.put('invKeySchedule', var.get(u"this").put('_invKeySchedule', Js([])))
                    #for JS loop
                    var.put('invKsRow', Js(0.0))
                    while (var.get('invKsRow')<var.get('ksRows')):
                        try:
                            var.put('ksRow', (var.get('ksRows')-var.get('invKsRow')))
                            if (var.get('invKsRow')%Js(4.0)):
                                var.put('t', var.get('keySchedule').get(var.get('ksRow')))
                            else:
                                var.put('t', var.get('keySchedule').get((var.get('ksRow')-Js(4.0))))
                            if ((var.get('invKsRow')<Js(4.0)) or (var.get('ksRow')<=Js(4.0))):
                                var.get('invKeySchedule').put(var.get('invKsRow'), var.get('t'))
                            else:
                                def PyJs_LONG_1880_(var=var):
                                    return var.get('invKeySchedule').put(var.get('invKsRow'), (((var.get('INV_SUB_MIX_0').get(var.get('SBOX').get(PyJsBshift(var.get('t'),Js(24.0))))^var.get('INV_SUB_MIX_1').get(var.get('SBOX').get((PyJsBshift(var.get('t'),Js(16.0))&Js(255)))))^var.get('INV_SUB_MIX_2').get(var.get('SBOX').get((PyJsBshift(var.get('t'),Js(8.0))&Js(255)))))^var.get('INV_SUB_MIX_3').get(var.get('SBOX').get((var.get('t')&Js(255))))))
                                PyJs_LONG_1880_()
                        finally:
                                (var.put('invKsRow',Js(var.get('invKsRow').to_number())+Js(1))-Js(1))
                PyJs__doReset_1879_._set_name('_doReset')
                @Js
                def PyJs_encryptBlock_1881_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, 'encryptBlock':PyJs_encryptBlock_1881_}, var)
                    var.registers(['M', 'offset'])
                    var.get(u"this").callprop('_doCryptBlock', var.get('M'), var.get('offset'), var.get(u"this").get('_keySchedule'), var.get('SUB_MIX_0'), var.get('SUB_MIX_1'), var.get('SUB_MIX_2'), var.get('SUB_MIX_3'), var.get('SBOX'))
                PyJs_encryptBlock_1881_._set_name('encryptBlock')
                @Js
                def PyJs_decryptBlock_1882_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, 'decryptBlock':PyJs_decryptBlock_1882_}, var)
                    var.registers(['M', 'offset', 't'])
                    var.put('t', var.get('M').get((var.get('offset')+Js(1.0))))
                    var.get('M').put((var.get('offset')+Js(1.0)), var.get('M').get((var.get('offset')+Js(3.0))))
                    var.get('M').put((var.get('offset')+Js(3.0)), var.get('t'))
                    var.get(u"this").callprop('_doCryptBlock', var.get('M'), var.get('offset'), var.get(u"this").get('_invKeySchedule'), var.get('INV_SUB_MIX_0'), var.get('INV_SUB_MIX_1'), var.get('INV_SUB_MIX_2'), var.get('INV_SUB_MIX_3'), var.get('INV_SBOX'))
                    var.put('t', var.get('M').get((var.get('offset')+Js(1.0))))
                    var.get('M').put((var.get('offset')+Js(1.0)), var.get('M').get((var.get('offset')+Js(3.0))))
                    var.get('M').put((var.get('offset')+Js(3.0)), var.get('t'))
                PyJs_decryptBlock_1882_._set_name('decryptBlock')
                @Js
                def PyJs__doCryptBlock_1883_(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'keySchedule':keySchedule, 'SUB_MIX_0':SUB_MIX_0, 'SUB_MIX_1':SUB_MIX_1, 'SUB_MIX_2':SUB_MIX_2, 'SUB_MIX_3':SUB_MIX_3, 'SBOX':SBOX, 'this':this, 'arguments':arguments, '_doCryptBlock':PyJs__doCryptBlock_1883_}, var)
                    var.registers(['M', 's2', 'keySchedule', 'ksRow', 'SUB_MIX_2', 'SUB_MIX_1', 'round', 't3', 'SBOX', 'SUB_MIX_3', 's0', 's1', 't2', 'SUB_MIX_0', 'nRounds', 's3', 't0', 't1', 'offset'])
                    var.put('nRounds', var.get(u"this").get('_nRounds'))
                    var.put('s0', (var.get('M').get(var.get('offset'))^var.get('keySchedule').get('0')))
                    var.put('s1', (var.get('M').get((var.get('offset')+Js(1.0)))^var.get('keySchedule').get('1')))
                    var.put('s2', (var.get('M').get((var.get('offset')+Js(2.0)))^var.get('keySchedule').get('2')))
                    var.put('s3', (var.get('M').get((var.get('offset')+Js(3.0)))^var.get('keySchedule').get('3')))
                    var.put('ksRow', Js(4.0))
                    #for JS loop
                    var.put('round', Js(1.0))
                    while (var.get('round')<var.get('nRounds')):
                        try:
                            var.put('t0', ((((var.get('SUB_MIX_0').get(PyJsBshift(var.get('s0'),Js(24.0)))^var.get('SUB_MIX_1').get((PyJsBshift(var.get('s1'),Js(16.0))&Js(255))))^var.get('SUB_MIX_2').get((PyJsBshift(var.get('s2'),Js(8.0))&Js(255))))^var.get('SUB_MIX_3').get((var.get('s3')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                            var.put('t1', ((((var.get('SUB_MIX_0').get(PyJsBshift(var.get('s1'),Js(24.0)))^var.get('SUB_MIX_1').get((PyJsBshift(var.get('s2'),Js(16.0))&Js(255))))^var.get('SUB_MIX_2').get((PyJsBshift(var.get('s3'),Js(8.0))&Js(255))))^var.get('SUB_MIX_3').get((var.get('s0')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                            var.put('t2', ((((var.get('SUB_MIX_0').get(PyJsBshift(var.get('s2'),Js(24.0)))^var.get('SUB_MIX_1').get((PyJsBshift(var.get('s3'),Js(16.0))&Js(255))))^var.get('SUB_MIX_2').get((PyJsBshift(var.get('s0'),Js(8.0))&Js(255))))^var.get('SUB_MIX_3').get((var.get('s1')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                            var.put('t3', ((((var.get('SUB_MIX_0').get(PyJsBshift(var.get('s3'),Js(24.0)))^var.get('SUB_MIX_1').get((PyJsBshift(var.get('s0'),Js(16.0))&Js(255))))^var.get('SUB_MIX_2').get((PyJsBshift(var.get('s1'),Js(8.0))&Js(255))))^var.get('SUB_MIX_3').get((var.get('s2')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                            var.put('s0', var.get('t0'))
                            var.put('s1', var.get('t1'))
                            var.put('s2', var.get('t2'))
                            var.put('s3', var.get('t3'))
                        finally:
                                (var.put('round',Js(var.get('round').to_number())+Js(1))-Js(1))
                    var.put('t0', (((((var.get('SBOX').get(PyJsBshift(var.get('s0'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('s1'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('s2'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('s3')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                    var.put('t1', (((((var.get('SBOX').get(PyJsBshift(var.get('s1'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('s2'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('s3'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('s0')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                    var.put('t2', (((((var.get('SBOX').get(PyJsBshift(var.get('s2'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('s3'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('s0'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('s1')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                    var.put('t3', (((((var.get('SBOX').get(PyJsBshift(var.get('s3'),Js(24.0)))<<Js(24.0))|(var.get('SBOX').get((PyJsBshift(var.get('s0'),Js(16.0))&Js(255)))<<Js(16.0)))|(var.get('SBOX').get((PyJsBshift(var.get('s1'),Js(8.0))&Js(255)))<<Js(8.0)))|var.get('SBOX').get((var.get('s2')&Js(255))))^var.get('keySchedule').get((var.put('ksRow',Js(var.get('ksRow').to_number())+Js(1))-Js(1)))))
                    var.get('M').put(var.get('offset'), var.get('t0'))
                    var.get('M').put((var.get('offset')+Js(1.0)), var.get('t1'))
                    var.get('M').put((var.get('offset')+Js(2.0)), var.get('t2'))
                    var.get('M').put((var.get('offset')+Js(3.0)), var.get('t3'))
                PyJs__doCryptBlock_1883_._set_name('_doCryptBlock')
                var.put('AES', var.get('C_algo').put('AES', var.get('BlockCipher').callprop('extend', Js({'_doReset':PyJs__doReset_1879_,'encryptBlock':PyJs_encryptBlock_1881_,'decryptBlock':PyJs_decryptBlock_1882_,'_doCryptBlock':PyJs__doCryptBlock_1883_,'keySize':(Js(256.0)/Js(32.0))}))))
                var.get('C').put('AES', var.get('BlockCipher').callprop('_createHelper', var.get('AES')))
            PyJs_anonymous_1877_._set_name('anonymous')
            PyJs_anonymous_1877_()
            return var.get('CryptoJS').get('AES')
        PyJs_anonymous_1876_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1884_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./enc-base64')), var.get('require')(Js('./md5')), var.get('require')(Js('./evpkdf')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./enc-base64'), Js('./md5'), Js('./evpkdf'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_1884_._set_name('anonymous')
        PyJs_anonymous_1884_(var.get(u"this"), PyJs_anonymous_1876_)
    PyJs_anonymous_1875_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1885_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_1886_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_1887_(undefined, this, arguments, var=var):
                var = Scope({'undefined':undefined, 'this':this, 'arguments':arguments}, var)
                var.registers(['C_format', 'WordArray', 'C_kdf', 'BufferedBlockAlgorithm', 'OpenSSLKdf', 'C_lib', 'C_mode', 'BlockCipherMode', 'Cipher', 'BlockCipher', 'Base', 'Utf8', 'C_algo', 'undefined', 'Pkcs7', 'C_enc', 'C', 'EvpKDF', 'SerializableCipher', 'StreamCipher', 'PasswordBasedCipher', 'OpenSSLFormatter', 'C_pad', 'CipherParams', 'CBC', 'Base64'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('Base', var.get('C_lib').get('Base'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('BufferedBlockAlgorithm', var.get('C_lib').get('BufferedBlockAlgorithm'))
                var.put('C_enc', var.get('C').get('enc'))
                var.put('Utf8', var.get('C_enc').get('Utf8'))
                var.put('Base64', var.get('C_enc').get('Base64'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('EvpKDF', var.get('C_algo').get('EvpKDF'))
                def PyJs_LONG_1898_(var=var):
                    @Js
                    def PyJs_createEncryptor_1888_(key, cfg, this, arguments, var=var):
                        var = Scope({'key':key, 'cfg':cfg, 'this':this, 'arguments':arguments, 'createEncryptor':PyJs_createEncryptor_1888_}, var)
                        var.registers(['cfg', 'key'])
                        return var.get(u"this").callprop('create', var.get(u"this").get('_ENC_XFORM_MODE'), var.get('key'), var.get('cfg'))
                    PyJs_createEncryptor_1888_._set_name('createEncryptor')
                    @Js
                    def PyJs_createDecryptor_1889_(key, cfg, this, arguments, var=var):
                        var = Scope({'key':key, 'cfg':cfg, 'this':this, 'arguments':arguments, 'createDecryptor':PyJs_createDecryptor_1889_}, var)
                        var.registers(['cfg', 'key'])
                        return var.get(u"this").callprop('create', var.get(u"this").get('_DEC_XFORM_MODE'), var.get('key'), var.get('cfg'))
                    PyJs_createDecryptor_1889_._set_name('createDecryptor')
                    @Js
                    def PyJs_init_1890_(xformMode, key, cfg, this, arguments, var=var):
                        var = Scope({'xformMode':xformMode, 'key':key, 'cfg':cfg, 'this':this, 'arguments':arguments, 'init':PyJs_init_1890_}, var)
                        var.registers(['cfg', 'xformMode', 'key'])
                        var.get(u"this").put('cfg', var.get(u"this").get('cfg').callprop('extend', var.get('cfg')))
                        var.get(u"this").put('_xformMode', var.get('xformMode'))
                        var.get(u"this").put('_key', var.get('key'))
                        var.get(u"this").callprop('reset')
                    PyJs_init_1890_._set_name('init')
                    @Js
                    def PyJs_reset_1891_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'reset':PyJs_reset_1891_}, var)
                        var.registers([])
                        var.get('BufferedBlockAlgorithm').get('reset').callprop('call', var.get(u"this"))
                        var.get(u"this").callprop('_doReset')
                    PyJs_reset_1891_._set_name('reset')
                    @Js
                    def PyJs_process_1892_(dataUpdate, this, arguments, var=var):
                        var = Scope({'dataUpdate':dataUpdate, 'this':this, 'arguments':arguments, 'process':PyJs_process_1892_}, var)
                        var.registers(['dataUpdate'])
                        var.get(u"this").callprop('_append', var.get('dataUpdate'))
                        return var.get(u"this").callprop('_process')
                    PyJs_process_1892_._set_name('process')
                    @Js
                    def PyJs_finalize_1893_(dataUpdate, this, arguments, var=var):
                        var = Scope({'dataUpdate':dataUpdate, 'this':this, 'arguments':arguments, 'finalize':PyJs_finalize_1893_}, var)
                        var.registers(['dataUpdate', 'finalProcessedData'])
                        if var.get('dataUpdate'):
                            var.get(u"this").callprop('_append', var.get('dataUpdate'))
                        var.put('finalProcessedData', var.get(u"this").callprop('_doFinalize'))
                        return var.get('finalProcessedData')
                    PyJs_finalize_1893_._set_name('finalize')
                    @Js
                    def PyJs_anonymous_1894_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['selectCipherStrategy'])
                        @Js
                        def PyJsHoisted_selectCipherStrategy_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            if (var.get('key',throw=False).typeof()==Js('string')):
                                return var.get('PasswordBasedCipher')
                            else:
                                return var.get('SerializableCipher')
                        PyJsHoisted_selectCipherStrategy_.func_name = 'selectCipherStrategy'
                        var.put('selectCipherStrategy', PyJsHoisted_selectCipherStrategy_)
                        pass
                        @Js
                        def PyJs_anonymous_1895_(cipher, this, arguments, var=var):
                            var = Scope({'cipher':cipher, 'this':this, 'arguments':arguments}, var)
                            var.registers(['cipher'])
                            @Js
                            def PyJs_encrypt_1896_(message, key, cfg, this, arguments, var=var):
                                var = Scope({'message':message, 'key':key, 'cfg':cfg, 'this':this, 'arguments':arguments, 'encrypt':PyJs_encrypt_1896_}, var)
                                var.registers(['cfg', 'key', 'message'])
                                return var.get('selectCipherStrategy')(var.get('key')).callprop('encrypt', var.get('cipher'), var.get('message'), var.get('key'), var.get('cfg'))
                            PyJs_encrypt_1896_._set_name('encrypt')
                            @Js
                            def PyJs_decrypt_1897_(ciphertext, key, cfg, this, arguments, var=var):
                                var = Scope({'ciphertext':ciphertext, 'key':key, 'cfg':cfg, 'this':this, 'arguments':arguments, 'decrypt':PyJs_decrypt_1897_}, var)
                                var.registers(['cfg', 'ciphertext', 'key'])
                                return var.get('selectCipherStrategy')(var.get('key')).callprop('decrypt', var.get('cipher'), var.get('ciphertext'), var.get('key'), var.get('cfg'))
                            PyJs_decrypt_1897_._set_name('decrypt')
                            return Js({'encrypt':PyJs_encrypt_1896_,'decrypt':PyJs_decrypt_1897_})
                        PyJs_anonymous_1895_._set_name('anonymous')
                        return PyJs_anonymous_1895_
                    PyJs_anonymous_1894_._set_name('anonymous')
                    return var.get('BufferedBlockAlgorithm').callprop('extend', Js({'cfg':var.get('Base').callprop('extend'),'createEncryptor':PyJs_createEncryptor_1888_,'createDecryptor':PyJs_createDecryptor_1889_,'init':PyJs_init_1890_,'reset':PyJs_reset_1891_,'process':PyJs_process_1892_,'finalize':PyJs_finalize_1893_,'keySize':(Js(128.0)/Js(32.0)),'ivSize':(Js(128.0)/Js(32.0)),'_ENC_XFORM_MODE':Js(1.0),'_DEC_XFORM_MODE':Js(2.0),'_createHelper':PyJs_anonymous_1894_()}))
                var.put('Cipher', var.get('C_lib').put('Cipher', PyJs_LONG_1898_()))
                @Js
                def PyJs__doFinalize_1899_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_1899_}, var)
                    var.registers(['finalProcessedBlocks'])
                    var.put('finalProcessedBlocks', var.get(u"this").callprop('_process', Js('flush').neg().neg()))
                    return var.get('finalProcessedBlocks')
                PyJs__doFinalize_1899_._set_name('_doFinalize')
                var.put('StreamCipher', var.get('C_lib').put('StreamCipher', var.get('Cipher').callprop('extend', Js({'_doFinalize':PyJs__doFinalize_1899_,'blockSize':Js(1.0)}))))
                var.put('C_mode', var.get('C').put('mode', Js({})))
                @Js
                def PyJs_createEncryptor_1900_(cipher, iv, this, arguments, var=var):
                    var = Scope({'cipher':cipher, 'iv':iv, 'this':this, 'arguments':arguments, 'createEncryptor':PyJs_createEncryptor_1900_}, var)
                    var.registers(['cipher', 'iv'])
                    return var.get(u"this").get('Encryptor').callprop('create', var.get('cipher'), var.get('iv'))
                PyJs_createEncryptor_1900_._set_name('createEncryptor')
                @Js
                def PyJs_createDecryptor_1901_(cipher, iv, this, arguments, var=var):
                    var = Scope({'cipher':cipher, 'iv':iv, 'this':this, 'arguments':arguments, 'createDecryptor':PyJs_createDecryptor_1901_}, var)
                    var.registers(['cipher', 'iv'])
                    return var.get(u"this").get('Decryptor').callprop('create', var.get('cipher'), var.get('iv'))
                PyJs_createDecryptor_1901_._set_name('createDecryptor')
                @Js
                def PyJs_init_1902_(cipher, iv, this, arguments, var=var):
                    var = Scope({'cipher':cipher, 'iv':iv, 'this':this, 'arguments':arguments, 'init':PyJs_init_1902_}, var)
                    var.registers(['cipher', 'iv'])
                    var.get(u"this").put('_cipher', var.get('cipher'))
                    var.get(u"this").put('_iv', var.get('iv'))
                PyJs_init_1902_._set_name('init')
                var.put('BlockCipherMode', var.get('C_lib').put('BlockCipherMode', var.get('Base').callprop('extend', Js({'createEncryptor':PyJs_createEncryptor_1900_,'createDecryptor':PyJs_createDecryptor_1901_,'init':PyJs_init_1902_}))))
                @Js
                def PyJs_anonymous_1903_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['CBC', 'xorBlock'])
                    @Js
                    def PyJsHoisted_xorBlock_(words, offset, blockSize, this, arguments, var=var):
                        var = Scope({'words':words, 'offset':offset, 'blockSize':blockSize, 'this':this, 'arguments':arguments}, var)
                        var.registers(['words', 'iv', 'blockSize', 'i', 'block', 'offset'])
                        pass
                        var.put('iv', var.get(u"this").get('_iv'))
                        if var.get('iv'):
                            var.put('block', var.get('iv'))
                            var.get(u"this").put('_iv', var.get('undefined'))
                        else:
                            var.put('block', var.get(u"this").get('_prevBlock'))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('blockSize')):
                            try:
                                var.get('words').put((var.get('offset')+var.get('i')), var.get('block').get(var.get('i')), '^')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    PyJsHoisted_xorBlock_.func_name = 'xorBlock'
                    var.put('xorBlock', PyJsHoisted_xorBlock_)
                    var.put('CBC', var.get('BlockCipherMode').callprop('extend'))
                    @Js
                    def PyJs_processBlock_1904_(words, offset, this, arguments, var=var):
                        var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, 'processBlock':PyJs_processBlock_1904_}, var)
                        var.registers(['words', 'cipher', 'offset', 'blockSize'])
                        var.put('cipher', var.get(u"this").get('_cipher'))
                        var.put('blockSize', var.get('cipher').get('blockSize'))
                        var.get('xorBlock').callprop('call', var.get(u"this"), var.get('words'), var.get('offset'), var.get('blockSize'))
                        var.get('cipher').callprop('encryptBlock', var.get('words'), var.get('offset'))
                        var.get(u"this").put('_prevBlock', var.get('words').callprop('slice', var.get('offset'), (var.get('offset')+var.get('blockSize'))))
                    PyJs_processBlock_1904_._set_name('processBlock')
                    var.get('CBC').put('Encryptor', var.get('CBC').callprop('extend', Js({'processBlock':PyJs_processBlock_1904_})))
                    @Js
                    def PyJs_processBlock_1905_(words, offset, this, arguments, var=var):
                        var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, 'processBlock':PyJs_processBlock_1905_}, var)
                        var.registers(['words', 'blockSize', 'thisBlock', 'cipher', 'offset'])
                        var.put('cipher', var.get(u"this").get('_cipher'))
                        var.put('blockSize', var.get('cipher').get('blockSize'))
                        var.put('thisBlock', var.get('words').callprop('slice', var.get('offset'), (var.get('offset')+var.get('blockSize'))))
                        var.get('cipher').callprop('decryptBlock', var.get('words'), var.get('offset'))
                        var.get('xorBlock').callprop('call', var.get(u"this"), var.get('words'), var.get('offset'), var.get('blockSize'))
                        var.get(u"this").put('_prevBlock', var.get('thisBlock'))
                    PyJs_processBlock_1905_._set_name('processBlock')
                    var.get('CBC').put('Decryptor', var.get('CBC').callprop('extend', Js({'processBlock':PyJs_processBlock_1905_})))
                    pass
                    return var.get('CBC')
                PyJs_anonymous_1903_._set_name('anonymous')
                var.put('CBC', var.get('C_mode').put('CBC', PyJs_anonymous_1903_()))
                var.put('C_pad', var.get('C').put('pad', Js({})))
                @Js
                def PyJs_pad_1906_(data, blockSize, this, arguments, var=var):
                    var = Scope({'data':data, 'blockSize':blockSize, 'this':this, 'arguments':arguments, 'pad':PyJs_pad_1906_}, var)
                    var.registers(['blockSizeBytes', 'blockSize', 'i', 'paddingWord', 'nPaddingBytes', 'padding', 'paddingWords', 'data'])
                    var.put('blockSizeBytes', (var.get('blockSize')*Js(4.0)))
                    var.put('nPaddingBytes', (var.get('blockSizeBytes')-(var.get('data').get('sigBytes')%var.get('blockSizeBytes'))))
                    var.put('paddingWord', ((((var.get('nPaddingBytes')<<Js(24.0))|(var.get('nPaddingBytes')<<Js(16.0)))|(var.get('nPaddingBytes')<<Js(8.0)))|var.get('nPaddingBytes')))
                    var.put('paddingWords', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('nPaddingBytes')):
                        try:
                            var.get('paddingWords').callprop('push', var.get('paddingWord'))
                        finally:
                                var.put('i', Js(4.0), '+')
                    var.put('padding', var.get('WordArray').callprop('create', var.get('paddingWords'), var.get('nPaddingBytes')))
                    var.get('data').callprop('concat', var.get('padding'))
                PyJs_pad_1906_._set_name('pad')
                @Js
                def PyJs_unpad_1907_(data, this, arguments, var=var):
                    var = Scope({'data':data, 'this':this, 'arguments':arguments, 'unpad':PyJs_unpad_1907_}, var)
                    var.registers(['nPaddingBytes', 'data'])
                    var.put('nPaddingBytes', (var.get('data').get('words').get(PyJsBshift((var.get('data').get('sigBytes')-Js(1.0)),Js(2.0)))&Js(255)))
                    var.get('data').put('sigBytes', var.get('nPaddingBytes'), '-')
                PyJs_unpad_1907_._set_name('unpad')
                var.put('Pkcs7', var.get('C_pad').put('Pkcs7', Js({'pad':PyJs_pad_1906_,'unpad':PyJs_unpad_1907_})))
                @Js
                def PyJs_reset_1908_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'reset':PyJs_reset_1908_}, var)
                    var.registers(['cfg', 'modeCreator', 'iv', 'mode'])
                    pass
                    var.get('Cipher').get('reset').callprop('call', var.get(u"this"))
                    var.put('cfg', var.get(u"this").get('cfg'))
                    var.put('iv', var.get('cfg').get('iv'))
                    var.put('mode', var.get('cfg').get('mode'))
                    if (var.get(u"this").get('_xformMode')==var.get(u"this").get('_ENC_XFORM_MODE')):
                        var.put('modeCreator', var.get('mode').get('createEncryptor'))
                    else:
                        var.put('modeCreator', var.get('mode').get('createDecryptor'))
                        var.get(u"this").put('_minBufferSize', Js(1.0))
                    if (var.get(u"this").get('_mode') and (var.get(u"this").get('_mode').get('__creator')==var.get('modeCreator'))):
                        var.get(u"this").get('_mode').callprop('init', var.get(u"this"), (var.get('iv') and var.get('iv').get('words')))
                    else:
                        var.get(u"this").put('_mode', var.get('modeCreator').callprop('call', var.get('mode'), var.get(u"this"), (var.get('iv') and var.get('iv').get('words'))))
                        var.get(u"this").get('_mode').put('__creator', var.get('modeCreator'))
                PyJs_reset_1908_._set_name('reset')
                @Js
                def PyJs__doProcessBlock_1909_(words, offset, this, arguments, var=var):
                    var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_1909_}, var)
                    var.registers(['words', 'offset'])
                    var.get(u"this").get('_mode').callprop('processBlock', var.get('words'), var.get('offset'))
                PyJs__doProcessBlock_1909_._set_name('_doProcessBlock')
                @Js
                def PyJs__doFinalize_1910_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_1910_}, var)
                    var.registers(['padding', 'finalProcessedBlocks'])
                    pass
                    var.put('padding', var.get(u"this").get('cfg').get('padding'))
                    if (var.get(u"this").get('_xformMode')==var.get(u"this").get('_ENC_XFORM_MODE')):
                        var.get('padding').callprop('pad', var.get(u"this").get('_data'), var.get(u"this").get('blockSize'))
                        var.put('finalProcessedBlocks', var.get(u"this").callprop('_process', Js('flush').neg().neg()))
                    else:
                        var.put('finalProcessedBlocks', var.get(u"this").callprop('_process', Js('flush').neg().neg()))
                        var.get('padding').callprop('unpad', var.get('finalProcessedBlocks'))
                    return var.get('finalProcessedBlocks')
                PyJs__doFinalize_1910_._set_name('_doFinalize')
                var.put('BlockCipher', var.get('C_lib').put('BlockCipher', var.get('Cipher').callprop('extend', Js({'cfg':var.get('Cipher').get('cfg').callprop('extend', Js({'mode':var.get('CBC'),'padding':var.get('Pkcs7')})),'reset':PyJs_reset_1908_,'_doProcessBlock':PyJs__doProcessBlock_1909_,'_doFinalize':PyJs__doFinalize_1910_,'blockSize':(Js(128.0)/Js(32.0))}))))
                @Js
                def PyJs_init_1911_(cipherParams, this, arguments, var=var):
                    var = Scope({'cipherParams':cipherParams, 'this':this, 'arguments':arguments, 'init':PyJs_init_1911_}, var)
                    var.registers(['cipherParams'])
                    var.get(u"this").callprop('mixIn', var.get('cipherParams'))
                PyJs_init_1911_._set_name('init')
                @Js
                def PyJs_toString_1912_(formatter, this, arguments, var=var):
                    var = Scope({'formatter':formatter, 'this':this, 'arguments':arguments, 'toString':PyJs_toString_1912_}, var)
                    var.registers(['formatter'])
                    return (var.get('formatter') or var.get(u"this").get('formatter')).callprop('stringify', var.get(u"this"))
                PyJs_toString_1912_._set_name('toString')
                var.put('CipherParams', var.get('C_lib').put('CipherParams', var.get('Base').callprop('extend', Js({'init':PyJs_init_1911_,'toString':PyJs_toString_1912_}))))
                var.put('C_format', var.get('C').put('format', Js({})))
                @Js
                def PyJs_stringify_1913_(cipherParams, this, arguments, var=var):
                    var = Scope({'cipherParams':cipherParams, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1913_}, var)
                    var.registers(['salt', 'ciphertext', 'wordArray', 'cipherParams'])
                    pass
                    var.put('ciphertext', var.get('cipherParams').get('ciphertext'))
                    var.put('salt', var.get('cipherParams').get('salt'))
                    if var.get('salt'):
                        var.put('wordArray', var.get('WordArray').callprop('create', Js([Js(1398893684), Js(1701076831)])).callprop('concat', var.get('salt')).callprop('concat', var.get('ciphertext')))
                    else:
                        var.put('wordArray', var.get('ciphertext'))
                    return var.get('wordArray').callprop('toString', var.get('Base64'))
                PyJs_stringify_1913_._set_name('stringify')
                @Js
                def PyJs_parse_1914_(openSSLStr, this, arguments, var=var):
                    var = Scope({'openSSLStr':openSSLStr, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_1914_}, var)
                    var.registers(['salt', 'ciphertext', 'openSSLStr', 'ciphertextWords'])
                    pass
                    var.put('ciphertext', var.get('Base64').callprop('parse', var.get('openSSLStr')))
                    var.put('ciphertextWords', var.get('ciphertext').get('words'))
                    if ((var.get('ciphertextWords').get('0')==Js(1398893684)) and (var.get('ciphertextWords').get('1')==Js(1701076831))):
                        var.put('salt', var.get('WordArray').callprop('create', var.get('ciphertextWords').callprop('slice', Js(2.0), Js(4.0))))
                        var.get('ciphertextWords').callprop('splice', Js(0.0), Js(4.0))
                        var.get('ciphertext').put('sigBytes', Js(16.0), '-')
                    return var.get('CipherParams').callprop('create', Js({'ciphertext':var.get('ciphertext'),'salt':var.get('salt')}))
                PyJs_parse_1914_._set_name('parse')
                var.put('OpenSSLFormatter', var.get('C_format').put('OpenSSL', Js({'stringify':PyJs_stringify_1913_,'parse':PyJs_parse_1914_})))
                @Js
                def PyJs_encrypt_1915_(cipher, message, key, cfg, this, arguments, var=var):
                    var = Scope({'cipher':cipher, 'message':message, 'key':key, 'cfg':cfg, 'this':this, 'arguments':arguments, 'encrypt':PyJs_encrypt_1915_}, var)
                    var.registers(['encryptor', 'cipherCfg', 'cfg', 'ciphertext', 'key', 'message', 'cipher'])
                    var.put('cfg', var.get(u"this").get('cfg').callprop('extend', var.get('cfg')))
                    var.put('encryptor', var.get('cipher').callprop('createEncryptor', var.get('key'), var.get('cfg')))
                    var.put('ciphertext', var.get('encryptor').callprop('finalize', var.get('message')))
                    var.put('cipherCfg', var.get('encryptor').get('cfg'))
                    return var.get('CipherParams').callprop('create', Js({'ciphertext':var.get('ciphertext'),'key':var.get('key'),'iv':var.get('cipherCfg').get('iv'),'algorithm':var.get('cipher'),'mode':var.get('cipherCfg').get('mode'),'padding':var.get('cipherCfg').get('padding'),'blockSize':var.get('cipher').get('blockSize'),'formatter':var.get('cfg').get('format')}))
                PyJs_encrypt_1915_._set_name('encrypt')
                @Js
                def PyJs_decrypt_1916_(cipher, ciphertext, key, cfg, this, arguments, var=var):
                    var = Scope({'cipher':cipher, 'ciphertext':ciphertext, 'key':key, 'cfg':cfg, 'this':this, 'arguments':arguments, 'decrypt':PyJs_decrypt_1916_}, var)
                    var.registers(['cfg', 'ciphertext', 'key', 'cipher', 'plaintext'])
                    var.put('cfg', var.get(u"this").get('cfg').callprop('extend', var.get('cfg')))
                    var.put('ciphertext', var.get(u"this").callprop('_parse', var.get('ciphertext'), var.get('cfg').get('format')))
                    var.put('plaintext', var.get('cipher').callprop('createDecryptor', var.get('key'), var.get('cfg')).callprop('finalize', var.get('ciphertext').get('ciphertext')))
                    return var.get('plaintext')
                PyJs_decrypt_1916_._set_name('decrypt')
                @Js
                def PyJs__parse_1917_(ciphertext, format, this, arguments, var=var):
                    var = Scope({'ciphertext':ciphertext, 'format':format, 'this':this, 'arguments':arguments, '_parse':PyJs__parse_1917_}, var)
                    var.registers(['format', 'ciphertext'])
                    if (var.get('ciphertext',throw=False).typeof()==Js('string')):
                        return var.get('format').callprop('parse', var.get('ciphertext'), var.get(u"this"))
                    else:
                        return var.get('ciphertext')
                PyJs__parse_1917_._set_name('_parse')
                var.put('SerializableCipher', var.get('C_lib').put('SerializableCipher', var.get('Base').callprop('extend', Js({'cfg':var.get('Base').callprop('extend', Js({'format':var.get('OpenSSLFormatter')})),'encrypt':PyJs_encrypt_1915_,'decrypt':PyJs_decrypt_1916_,'_parse':PyJs__parse_1917_}))))
                var.put('C_kdf', var.get('C').put('kdf', Js({})))
                @Js
                def PyJs_execute_1918_(password, keySize, ivSize, salt, this, arguments, var=var):
                    var = Scope({'password':password, 'keySize':keySize, 'ivSize':ivSize, 'salt':salt, 'this':this, 'arguments':arguments, 'execute':PyJs_execute_1918_}, var)
                    var.registers(['iv', 'password', 'keySize', 'ivSize', 'salt', 'key'])
                    if var.get('salt').neg():
                        var.put('salt', var.get('WordArray').callprop('random', (Js(64.0)/Js(8.0))))
                    var.put('key', var.get('EvpKDF').callprop('create', Js({'keySize':(var.get('keySize')+var.get('ivSize'))})).callprop('compute', var.get('password'), var.get('salt')))
                    var.put('iv', var.get('WordArray').callprop('create', var.get('key').get('words').callprop('slice', var.get('keySize')), (var.get('ivSize')*Js(4.0))))
                    var.get('key').put('sigBytes', (var.get('keySize')*Js(4.0)))
                    return var.get('CipherParams').callprop('create', Js({'key':var.get('key'),'iv':var.get('iv'),'salt':var.get('salt')}))
                PyJs_execute_1918_._set_name('execute')
                var.put('OpenSSLKdf', var.get('C_kdf').put('OpenSSL', Js({'execute':PyJs_execute_1918_})))
                @Js
                def PyJs_encrypt_1919_(cipher, message, password, cfg, this, arguments, var=var):
                    var = Scope({'cipher':cipher, 'message':message, 'password':password, 'cfg':cfg, 'this':this, 'arguments':arguments, 'encrypt':PyJs_encrypt_1919_}, var)
                    var.registers(['password', 'cfg', 'ciphertext', 'message', 'cipher', 'derivedParams'])
                    var.put('cfg', var.get(u"this").get('cfg').callprop('extend', var.get('cfg')))
                    var.put('derivedParams', var.get('cfg').get('kdf').callprop('execute', var.get('password'), var.get('cipher').get('keySize'), var.get('cipher').get('ivSize')))
                    var.get('cfg').put('iv', var.get('derivedParams').get('iv'))
                    var.put('ciphertext', var.get('SerializableCipher').get('encrypt').callprop('call', var.get(u"this"), var.get('cipher'), var.get('message'), var.get('derivedParams').get('key'), var.get('cfg')))
                    var.get('ciphertext').callprop('mixIn', var.get('derivedParams'))
                    return var.get('ciphertext')
                PyJs_encrypt_1919_._set_name('encrypt')
                @Js
                def PyJs_decrypt_1920_(cipher, ciphertext, password, cfg, this, arguments, var=var):
                    var = Scope({'cipher':cipher, 'ciphertext':ciphertext, 'password':password, 'cfg':cfg, 'this':this, 'arguments':arguments, 'decrypt':PyJs_decrypt_1920_}, var)
                    var.registers(['password', 'cfg', 'ciphertext', 'cipher', 'derivedParams', 'plaintext'])
                    var.put('cfg', var.get(u"this").get('cfg').callprop('extend', var.get('cfg')))
                    var.put('ciphertext', var.get(u"this").callprop('_parse', var.get('ciphertext'), var.get('cfg').get('format')))
                    var.put('derivedParams', var.get('cfg').get('kdf').callprop('execute', var.get('password'), var.get('cipher').get('keySize'), var.get('cipher').get('ivSize'), var.get('ciphertext').get('salt')))
                    var.get('cfg').put('iv', var.get('derivedParams').get('iv'))
                    var.put('plaintext', var.get('SerializableCipher').get('decrypt').callprop('call', var.get(u"this"), var.get('cipher'), var.get('ciphertext'), var.get('derivedParams').get('key'), var.get('cfg')))
                    return var.get('plaintext')
                PyJs_decrypt_1920_._set_name('decrypt')
                var.put('PasswordBasedCipher', var.get('C_lib').put('PasswordBasedCipher', var.get('SerializableCipher').callprop('extend', Js({'cfg':var.get('SerializableCipher').get('cfg').callprop('extend', Js({'kdf':var.get('OpenSSLKdf')})),'encrypt':PyJs_encrypt_1919_,'decrypt':PyJs_decrypt_1920_}))))
            PyJs_anonymous_1887_._set_name('anonymous')
            (var.get('CryptoJS').get('lib').get('Cipher') or PyJs_anonymous_1887_())
        PyJs_anonymous_1886_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1921_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./evpkdf')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./evpkdf')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_1921_._set_name('anonymous')
        PyJs_anonymous_1921_(var.get(u"this"), PyJs_anonymous_1886_)
    PyJs_anonymous_1885_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1922_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_1923_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_1924_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
                @Js
                def PyJs_anonymous_1925_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['CryptoJS'])
                    @Js
                    def PyJs_anonymous_1926_(Math, undefined, this, arguments, var=var):
                        var = Scope({'Math':Math, 'undefined':undefined, 'this':this, 'arguments':arguments}, var)
                        var.registers(['C_enc', 'cryptoSecureRandomInt', 'WordArray', 'C', 'Latin1', 'Math', 'BufferedBlockAlgorithm', 'Base', 'create', 'C_lib', 'Hex', 'Utf8', 'C_algo', 'undefined', 'crypto', 'Hasher'])
                        pass
                        if (PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) and var.get('window').get('crypto')):
                            var.put('crypto', var.get('window').get('crypto'))
                        if ((var.get('crypto').neg() and PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined'))) and var.get('window').get('msCrypto')):
                            var.put('crypto', var.get('window').get('msCrypto'))
                        if ((var.get('crypto').neg() and PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined'))) and var.get('global').get('crypto')):
                            var.put('crypto', var.get('global').get('crypto'))
                        if (var.get('crypto').neg() and _seq(var.get('require',throw=False).typeof(),Js('function'))):
                            try:
                                var.put('crypto', var.get('require')(Js('crypto')))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_657272_49197827 = var.own.get('err')
                                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                                try:
                                    pass
                                finally:
                                    if PyJsHolder_657272_49197827 is not None:
                                        var.own['err'] = PyJsHolder_657272_49197827
                                    else:
                                        del var.own['err']
                                    del PyJsHolder_657272_49197827
                        @Js
                        def PyJs_cryptoSecureRandomInt_1927_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'cryptoSecureRandomInt':PyJs_cryptoSecureRandomInt_1927_}, var)
                            var.registers([])
                            if var.get('crypto'):
                                if _seq(var.get('crypto').get('getRandomValues').typeof(),Js('function')):
                                    try:
                                        return var.get('crypto').callprop('getRandomValues', var.get('Uint32Array').create(Js(1.0))).get('0')
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_657272_34331804 = var.own.get('err')
                                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                                        try:
                                            pass
                                        finally:
                                            if PyJsHolder_657272_34331804 is not None:
                                                var.own['err'] = PyJsHolder_657272_34331804
                                            else:
                                                del var.own['err']
                                            del PyJsHolder_657272_34331804
                                if _seq(var.get('crypto').get('randomBytes').typeof(),Js('function')):
                                    try:
                                        return var.get('crypto').callprop('randomBytes', Js(4.0)).callprop('readInt32LE')
                                    except PyJsException as PyJsTempException:
                                        PyJsHolder_657272_1126170 = var.own.get('err')
                                        var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                                        try:
                                            pass
                                        finally:
                                            if PyJsHolder_657272_1126170 is not None:
                                                var.own['err'] = PyJsHolder_657272_1126170
                                            else:
                                                del var.own['err']
                                            del PyJsHolder_657272_1126170
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('Native crypto module could not be used to get secure random number.')))
                            raise PyJsTempException
                        PyJs_cryptoSecureRandomInt_1927_._set_name('cryptoSecureRandomInt')
                        var.put('cryptoSecureRandomInt', PyJs_cryptoSecureRandomInt_1927_)
                        @Js
                        def PyJs_anonymous_1928_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['F'])
                            @Js
                            def PyJsHoisted_F_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                pass
                            PyJsHoisted_F_.func_name = 'F'
                            var.put('F', PyJsHoisted_F_)
                            pass
                            @Js
                            def PyJs_anonymous_1929_(obj, this, arguments, var=var):
                                var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                                var.registers(['subtype', 'obj'])
                                pass
                                var.get('F').put('prototype', var.get('obj'))
                                var.put('subtype', var.get('F').create())
                                var.get('F').put('prototype', var.get(u"null"))
                                return var.get('subtype')
                            PyJs_anonymous_1929_._set_name('anonymous')
                            return PyJs_anonymous_1929_
                        PyJs_anonymous_1928_._set_name('anonymous')
                        var.put('create', (var.get('Object').get('create') or PyJs_anonymous_1928_()))
                        var.put('C', Js({}))
                        var.put('C_lib', var.get('C').put('lib', Js({})))
                        @Js
                        def PyJs_anonymous_1930_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            @Js
                            def PyJs_extend_1931_(overrides, this, arguments, var=var):
                                var = Scope({'overrides':overrides, 'this':this, 'arguments':arguments, 'extend':PyJs_extend_1931_}, var)
                                var.registers(['subtype', 'overrides'])
                                var.put('subtype', var.get('create')(var.get(u"this")))
                                if var.get('overrides'):
                                    var.get('subtype').callprop('mixIn', var.get('overrides'))
                                if (var.get('subtype').callprop('hasOwnProperty', Js('init')).neg() or _seq(var.get(u"this").get('init'),var.get('subtype').get('init'))):
                                    @Js
                                    def PyJs_anonymous_1932_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('subtype').get('$super').get('init').callprop('apply', var.get(u"this"), var.get('arguments'))
                                    PyJs_anonymous_1932_._set_name('anonymous')
                                    var.get('subtype').put('init', PyJs_anonymous_1932_)
                                var.get('subtype').get('init').put('prototype', var.get('subtype'))
                                var.get('subtype').put('$super', var.get(u"this"))
                                return var.get('subtype')
                            PyJs_extend_1931_._set_name('extend')
                            @Js
                            def PyJs_create_1933_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments, 'create':PyJs_create_1933_}, var)
                                var.registers(['instance'])
                                var.put('instance', var.get(u"this").callprop('extend'))
                                var.get('instance').get('init').callprop('apply', var.get('instance'), var.get('arguments'))
                                return var.get('instance')
                            PyJs_create_1933_._set_name('create')
                            @Js
                            def PyJs_init_1934_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments, 'init':PyJs_init_1934_}, var)
                                var.registers([])
                                pass
                            PyJs_init_1934_._set_name('init')
                            @Js
                            def PyJs_mixIn_1935_(properties, this, arguments, var=var):
                                var = Scope({'properties':properties, 'this':this, 'arguments':arguments, 'mixIn':PyJs_mixIn_1935_}, var)
                                var.registers(['properties', 'propertyName'])
                                for PyJsTemp in var.get('properties'):
                                    var.put('propertyName', PyJsTemp)
                                    if var.get('properties').callprop('hasOwnProperty', var.get('propertyName')):
                                        var.get(u"this").put(var.get('propertyName'), var.get('properties').get(var.get('propertyName')))
                                if var.get('properties').callprop('hasOwnProperty', Js('toString')):
                                    var.get(u"this").put('toString', var.get('properties').get('toString'))
                            PyJs_mixIn_1935_._set_name('mixIn')
                            @Js
                            def PyJs_clone_1936_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_1936_}, var)
                                var.registers([])
                                return var.get(u"this").get('init').get('prototype').callprop('extend', var.get(u"this"))
                            PyJs_clone_1936_._set_name('clone')
                            return Js({'extend':PyJs_extend_1931_,'create':PyJs_create_1933_,'init':PyJs_init_1934_,'mixIn':PyJs_mixIn_1935_,'clone':PyJs_clone_1936_})
                        PyJs_anonymous_1930_._set_name('anonymous')
                        var.put('Base', var.get('C_lib').put('Base', PyJs_anonymous_1930_()))
                        @Js
                        def PyJs_init_1937_(words, sigBytes, this, arguments, var=var):
                            var = Scope({'words':words, 'sigBytes':sigBytes, 'this':this, 'arguments':arguments, 'init':PyJs_init_1937_}, var)
                            var.registers(['words', 'sigBytes'])
                            var.put('words', var.get(u"this").put('words', (var.get('words') or Js([]))))
                            if (var.get('sigBytes')!=var.get('undefined')):
                                var.get(u"this").put('sigBytes', var.get('sigBytes'))
                            else:
                                var.get(u"this").put('sigBytes', (var.get('words').get('length')*Js(4.0)))
                        PyJs_init_1937_._set_name('init')
                        @Js
                        def PyJs_toString_1938_(encoder, this, arguments, var=var):
                            var = Scope({'encoder':encoder, 'this':this, 'arguments':arguments, 'toString':PyJs_toString_1938_}, var)
                            var.registers(['encoder'])
                            return (var.get('encoder') or var.get('Hex')).callprop('stringify', var.get(u"this"))
                        PyJs_toString_1938_._set_name('toString')
                        @Js
                        def PyJs_concat_1939_(wordArray, this, arguments, var=var):
                            var = Scope({'wordArray':wordArray, 'this':this, 'arguments':arguments, 'concat':PyJs_concat_1939_}, var)
                            var.registers(['wordArray', 'thatWords', 'thatByte', 'i', 'thatSigBytes', 'thisWords', 'thisSigBytes'])
                            var.put('thisWords', var.get(u"this").get('words'))
                            var.put('thatWords', var.get('wordArray').get('words'))
                            var.put('thisSigBytes', var.get(u"this").get('sigBytes'))
                            var.put('thatSigBytes', var.get('wordArray').get('sigBytes'))
                            var.get(u"this").callprop('clamp')
                            if (var.get('thisSigBytes')%Js(4.0)):
                                #for JS loop
                                var.put('i', Js(0.0))
                                while (var.get('i')<var.get('thatSigBytes')):
                                    try:
                                        var.put('thatByte', (PyJsBshift(var.get('thatWords').get(PyJsBshift(var.get('i'),Js(2.0))),(Js(24.0)-((var.get('i')%Js(4.0))*Js(8.0))))&Js(255)))
                                        var.get('thisWords').put(PyJsBshift((var.get('thisSigBytes')+var.get('i')),Js(2.0)), (var.get('thatByte')<<(Js(24.0)-(((var.get('thisSigBytes')+var.get('i'))%Js(4.0))*Js(8.0)))), '|')
                                    finally:
                                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            else:
                                #for JS loop
                                var.put('i', Js(0.0))
                                while (var.get('i')<var.get('thatSigBytes')):
                                    try:
                                        var.get('thisWords').put(PyJsBshift((var.get('thisSigBytes')+var.get('i')),Js(2.0)), var.get('thatWords').get(PyJsBshift(var.get('i'),Js(2.0))))
                                    finally:
                                            var.put('i', Js(4.0), '+')
                            var.get(u"this").put('sigBytes', var.get('thatSigBytes'), '+')
                            return var.get(u"this")
                        PyJs_concat_1939_._set_name('concat')
                        @Js
                        def PyJs_clamp_1940_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'clamp':PyJs_clamp_1940_}, var)
                            var.registers(['words', 'sigBytes'])
                            var.put('words', var.get(u"this").get('words'))
                            var.put('sigBytes', var.get(u"this").get('sigBytes'))
                            var.get('words').put(PyJsBshift(var.get('sigBytes'),Js(2.0)), (Js(4294967295)<<(Js(32.0)-((var.get('sigBytes')%Js(4.0))*Js(8.0)))), '&')
                            var.get('words').put('length', var.get('Math').callprop('ceil', (var.get('sigBytes')/Js(4.0))))
                        PyJs_clamp_1940_._set_name('clamp')
                        @Js
                        def PyJs_clone_1941_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_1941_}, var)
                            var.registers(['clone'])
                            var.put('clone', var.get('Base').get('clone').callprop('call', var.get(u"this")))
                            var.get('clone').put('words', var.get(u"this").get('words').callprop('slice', Js(0.0)))
                            return var.get('clone')
                        PyJs_clone_1941_._set_name('clone')
                        @Js
                        def PyJs_random_1942_(nBytes, this, arguments, var=var):
                            var = Scope({'nBytes':nBytes, 'this':this, 'arguments':arguments, 'random':PyJs_random_1942_}, var)
                            var.registers(['i', 'words', 'nBytes'])
                            var.put('words', Js([]))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<var.get('nBytes')):
                                try:
                                    var.get('words').callprop('push', var.get('cryptoSecureRandomInt')())
                                finally:
                                        var.put('i', Js(4.0), '+')
                            return var.get('WordArray').get('init').create(var.get('words'), var.get('nBytes'))
                        PyJs_random_1942_._set_name('random')
                        var.put('WordArray', var.get('C_lib').put('WordArray', var.get('Base').callprop('extend', Js({'init':PyJs_init_1937_,'toString':PyJs_toString_1938_,'concat':PyJs_concat_1939_,'clamp':PyJs_clamp_1940_,'clone':PyJs_clone_1941_,'random':PyJs_random_1942_}))))
                        var.put('C_enc', var.get('C').put('enc', Js({})))
                        @Js
                        def PyJs_stringify_1943_(wordArray, this, arguments, var=var):
                            var = Scope({'wordArray':wordArray, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1943_}, var)
                            var.registers(['bite', 'words', 'wordArray', 'i', 'sigBytes', 'hexChars'])
                            var.put('words', var.get('wordArray').get('words'))
                            var.put('sigBytes', var.get('wordArray').get('sigBytes'))
                            var.put('hexChars', Js([]))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<var.get('sigBytes')):
                                try:
                                    var.put('bite', (PyJsBshift(var.get('words').get(PyJsBshift(var.get('i'),Js(2.0))),(Js(24.0)-((var.get('i')%Js(4.0))*Js(8.0))))&Js(255)))
                                    var.get('hexChars').callprop('push', PyJsBshift(var.get('bite'),Js(4.0)).callprop('toString', Js(16.0)))
                                    var.get('hexChars').callprop('push', (var.get('bite')&Js(15)).callprop('toString', Js(16.0)))
                                finally:
                                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            return var.get('hexChars').callprop('join', Js(''))
                        PyJs_stringify_1943_._set_name('stringify')
                        @Js
                        def PyJs_parse_1944_(hexStr, this, arguments, var=var):
                            var = Scope({'hexStr':hexStr, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_1944_}, var)
                            var.registers(['i', 'hexStrLength', 'words', 'hexStr'])
                            var.put('hexStrLength', var.get('hexStr').get('length'))
                            var.put('words', Js([]))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<var.get('hexStrLength')):
                                try:
                                    var.get('words').put(PyJsBshift(var.get('i'),Js(3.0)), (var.get('parseInt')(var.get('hexStr').callprop('substr', var.get('i'), Js(2.0)), Js(16.0))<<(Js(24.0)-((var.get('i')%Js(8.0))*Js(4.0)))), '|')
                                finally:
                                        var.put('i', Js(2.0), '+')
                            return var.get('WordArray').get('init').create(var.get('words'), (var.get('hexStrLength')/Js(2.0)))
                        PyJs_parse_1944_._set_name('parse')
                        var.put('Hex', var.get('C_enc').put('Hex', Js({'stringify':PyJs_stringify_1943_,'parse':PyJs_parse_1944_})))
                        @Js
                        def PyJs_stringify_1945_(wordArray, this, arguments, var=var):
                            var = Scope({'wordArray':wordArray, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1945_}, var)
                            var.registers(['bite', 'words', 'wordArray', 'i', 'sigBytes', 'latin1Chars'])
                            var.put('words', var.get('wordArray').get('words'))
                            var.put('sigBytes', var.get('wordArray').get('sigBytes'))
                            var.put('latin1Chars', Js([]))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<var.get('sigBytes')):
                                try:
                                    var.put('bite', (PyJsBshift(var.get('words').get(PyJsBshift(var.get('i'),Js(2.0))),(Js(24.0)-((var.get('i')%Js(4.0))*Js(8.0))))&Js(255)))
                                    var.get('latin1Chars').callprop('push', var.get('String').callprop('fromCharCode', var.get('bite')))
                                finally:
                                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            return var.get('latin1Chars').callprop('join', Js(''))
                        PyJs_stringify_1945_._set_name('stringify')
                        @Js
                        def PyJs_parse_1946_(latin1Str, this, arguments, var=var):
                            var = Scope({'latin1Str':latin1Str, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_1946_}, var)
                            var.registers(['i', 'latin1StrLength', 'words', 'latin1Str'])
                            var.put('latin1StrLength', var.get('latin1Str').get('length'))
                            var.put('words', Js([]))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<var.get('latin1StrLength')):
                                try:
                                    var.get('words').put(PyJsBshift(var.get('i'),Js(2.0)), ((var.get('latin1Str').callprop('charCodeAt', var.get('i'))&Js(255))<<(Js(24.0)-((var.get('i')%Js(4.0))*Js(8.0)))), '|')
                                finally:
                                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            return var.get('WordArray').get('init').create(var.get('words'), var.get('latin1StrLength'))
                        PyJs_parse_1946_._set_name('parse')
                        var.put('Latin1', var.get('C_enc').put('Latin1', Js({'stringify':PyJs_stringify_1945_,'parse':PyJs_parse_1946_})))
                        @Js
                        def PyJs_stringify_1947_(wordArray, this, arguments, var=var):
                            var = Scope({'wordArray':wordArray, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1947_}, var)
                            var.registers(['wordArray'])
                            try:
                                return var.get('decodeURIComponent')(var.get('escape')(var.get('Latin1').callprop('stringify', var.get('wordArray'))))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_29702607 = var.own.get('e')
                                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                try:
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Malformed UTF-8 data')))
                                    raise PyJsTempException
                                finally:
                                    if PyJsHolder_65_29702607 is not None:
                                        var.own['e'] = PyJsHolder_65_29702607
                                    else:
                                        del var.own['e']
                                    del PyJsHolder_65_29702607
                        PyJs_stringify_1947_._set_name('stringify')
                        @Js
                        def PyJs_parse_1948_(utf8Str, this, arguments, var=var):
                            var = Scope({'utf8Str':utf8Str, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_1948_}, var)
                            var.registers(['utf8Str'])
                            return var.get('Latin1').callprop('parse', var.get('unescape')(var.get('encodeURIComponent')(var.get('utf8Str'))))
                        PyJs_parse_1948_._set_name('parse')
                        var.put('Utf8', var.get('C_enc').put('Utf8', Js({'stringify':PyJs_stringify_1947_,'parse':PyJs_parse_1948_})))
                        @Js
                        def PyJs_reset_1949_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'reset':PyJs_reset_1949_}, var)
                            var.registers([])
                            var.get(u"this").put('_data', var.get('WordArray').get('init').create())
                            var.get(u"this").put('_nDataBytes', Js(0.0))
                        PyJs_reset_1949_._set_name('reset')
                        @Js
                        def PyJs__append_1950_(data, this, arguments, var=var):
                            var = Scope({'data':data, 'this':this, 'arguments':arguments, '_append':PyJs__append_1950_}, var)
                            var.registers(['data'])
                            if (var.get('data',throw=False).typeof()==Js('string')):
                                var.put('data', var.get('Utf8').callprop('parse', var.get('data')))
                            var.get(u"this").get('_data').callprop('concat', var.get('data'))
                            var.get(u"this").put('_nDataBytes', var.get('data').get('sigBytes'), '+')
                        PyJs__append_1950_._set_name('_append')
                        @Js
                        def PyJs__process_1951_(doFlush, this, arguments, var=var):
                            var = Scope({'doFlush':doFlush, 'this':this, 'arguments':arguments, '_process':PyJs__process_1951_}, var)
                            var.registers(['nWordsReady', 'doFlush', 'dataSigBytes', 'blockSizeBytes', 'blockSize', 'processedWords', 'dataWords', 'nBytesReady', 'nBlocksReady', 'data', 'offset'])
                            pass
                            var.put('data', var.get(u"this").get('_data'))
                            var.put('dataWords', var.get('data').get('words'))
                            var.put('dataSigBytes', var.get('data').get('sigBytes'))
                            var.put('blockSize', var.get(u"this").get('blockSize'))
                            var.put('blockSizeBytes', (var.get('blockSize')*Js(4.0)))
                            var.put('nBlocksReady', (var.get('dataSigBytes')/var.get('blockSizeBytes')))
                            if var.get('doFlush'):
                                var.put('nBlocksReady', var.get('Math').callprop('ceil', var.get('nBlocksReady')))
                            else:
                                var.put('nBlocksReady', var.get('Math').callprop('max', ((var.get('nBlocksReady')|Js(0.0))-var.get(u"this").get('_minBufferSize')), Js(0.0)))
                            var.put('nWordsReady', (var.get('nBlocksReady')*var.get('blockSize')))
                            var.put('nBytesReady', var.get('Math').callprop('min', (var.get('nWordsReady')*Js(4.0)), var.get('dataSigBytes')))
                            if var.get('nWordsReady'):
                                #for JS loop
                                var.put('offset', Js(0.0))
                                while (var.get('offset')<var.get('nWordsReady')):
                                    try:
                                        var.get(u"this").callprop('_doProcessBlock', var.get('dataWords'), var.get('offset'))
                                    finally:
                                            var.put('offset', var.get('blockSize'), '+')
                                var.put('processedWords', var.get('dataWords').callprop('splice', Js(0.0), var.get('nWordsReady')))
                                var.get('data').put('sigBytes', var.get('nBytesReady'), '-')
                            return var.get('WordArray').get('init').create(var.get('processedWords'), var.get('nBytesReady'))
                        PyJs__process_1951_._set_name('_process')
                        @Js
                        def PyJs_clone_1952_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_1952_}, var)
                            var.registers(['clone'])
                            var.put('clone', var.get('Base').get('clone').callprop('call', var.get(u"this")))
                            var.get('clone').put('_data', var.get(u"this").get('_data').callprop('clone'))
                            return var.get('clone')
                        PyJs_clone_1952_._set_name('clone')
                        var.put('BufferedBlockAlgorithm', var.get('C_lib').put('BufferedBlockAlgorithm', var.get('Base').callprop('extend', Js({'reset':PyJs_reset_1949_,'_append':PyJs__append_1950_,'_process':PyJs__process_1951_,'clone':PyJs_clone_1952_,'_minBufferSize':Js(0.0)}))))
                        @Js
                        def PyJs_init_1953_(cfg, this, arguments, var=var):
                            var = Scope({'cfg':cfg, 'this':this, 'arguments':arguments, 'init':PyJs_init_1953_}, var)
                            var.registers(['cfg'])
                            var.get(u"this").put('cfg', var.get(u"this").get('cfg').callprop('extend', var.get('cfg')))
                            var.get(u"this").callprop('reset')
                        PyJs_init_1953_._set_name('init')
                        @Js
                        def PyJs_reset_1954_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'reset':PyJs_reset_1954_}, var)
                            var.registers([])
                            var.get('BufferedBlockAlgorithm').get('reset').callprop('call', var.get(u"this"))
                            var.get(u"this").callprop('_doReset')
                        PyJs_reset_1954_._set_name('reset')
                        @Js
                        def PyJs_update_1955_(messageUpdate, this, arguments, var=var):
                            var = Scope({'messageUpdate':messageUpdate, 'this':this, 'arguments':arguments, 'update':PyJs_update_1955_}, var)
                            var.registers(['messageUpdate'])
                            var.get(u"this").callprop('_append', var.get('messageUpdate'))
                            var.get(u"this").callprop('_process')
                            return var.get(u"this")
                        PyJs_update_1955_._set_name('update')
                        @Js
                        def PyJs_finalize_1956_(messageUpdate, this, arguments, var=var):
                            var = Scope({'messageUpdate':messageUpdate, 'this':this, 'arguments':arguments, 'finalize':PyJs_finalize_1956_}, var)
                            var.registers(['messageUpdate', 'hash'])
                            if var.get('messageUpdate'):
                                var.get(u"this").callprop('_append', var.get('messageUpdate'))
                            var.put('hash', var.get(u"this").callprop('_doFinalize'))
                            return var.get('hash')
                        PyJs_finalize_1956_._set_name('finalize')
                        @Js
                        def PyJs__createHelper_1957_(hasher, this, arguments, var=var):
                            var = Scope({'hasher':hasher, 'this':this, 'arguments':arguments, '_createHelper':PyJs__createHelper_1957_}, var)
                            var.registers(['hasher'])
                            @Js
                            def PyJs_anonymous_1958_(message, cfg, this, arguments, var=var):
                                var = Scope({'message':message, 'cfg':cfg, 'this':this, 'arguments':arguments}, var)
                                var.registers(['cfg', 'message'])
                                return var.get('hasher').get('init').create(var.get('cfg')).callprop('finalize', var.get('message'))
                            PyJs_anonymous_1958_._set_name('anonymous')
                            return PyJs_anonymous_1958_
                        PyJs__createHelper_1957_._set_name('_createHelper')
                        @Js
                        def PyJs__createHmacHelper_1959_(hasher, this, arguments, var=var):
                            var = Scope({'hasher':hasher, 'this':this, 'arguments':arguments, '_createHmacHelper':PyJs__createHmacHelper_1959_}, var)
                            var.registers(['hasher'])
                            @Js
                            def PyJs_anonymous_1960_(message, key, this, arguments, var=var):
                                var = Scope({'message':message, 'key':key, 'this':this, 'arguments':arguments}, var)
                                var.registers(['key', 'message'])
                                return var.get('C_algo').get('HMAC').get('init').create(var.get('hasher'), var.get('key')).callprop('finalize', var.get('message'))
                            PyJs_anonymous_1960_._set_name('anonymous')
                            return PyJs_anonymous_1960_
                        PyJs__createHmacHelper_1959_._set_name('_createHmacHelper')
                        var.put('Hasher', var.get('C_lib').put('Hasher', var.get('BufferedBlockAlgorithm').callprop('extend', Js({'cfg':var.get('Base').callprop('extend'),'init':PyJs_init_1953_,'reset':PyJs_reset_1954_,'update':PyJs_update_1955_,'finalize':PyJs_finalize_1956_,'blockSize':(Js(512.0)/Js(32.0)),'_createHelper':PyJs__createHelper_1957_,'_createHmacHelper':PyJs__createHmacHelper_1959_}))))
                        var.put('C_algo', var.get('C').put('algo', Js({})))
                        return var.get('C')
                    PyJs_anonymous_1926_._set_name('anonymous')
                    var.put('CryptoJS', (var.get('CryptoJS') or PyJs_anonymous_1926_(var.get('Math'))))
                    return var.get('CryptoJS')
                PyJs_anonymous_1925_._set_name('anonymous')
                @Js
                def PyJs_anonymous_1961_(root, factory, this, arguments, var=var):
                    var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
                    var.registers(['root', 'factory'])
                    if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                        var.get('module').put('exports', var.put('exports', var.get('factory')()))
                    else:
                        if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                            var.get('define')(Js([]), var.get('factory'))
                        else:
                            var.get('root').put('CryptoJS', var.get('factory')())
                PyJs_anonymous_1961_._set_name('anonymous')
                PyJs_anonymous_1961_(var.get(u"this"), PyJs_anonymous_1925_)
            PyJs_anonymous_1924_._set_name('anonymous')
            PyJs_anonymous_1924_.callprop('call', var.get(u"this"))
        PyJs_anonymous_1923_._set_name('anonymous')
        PyJs_anonymous_1923_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_1922_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1962_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_1963_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_1964_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['C_enc', 'WordArray', 'C', 'C_lib', 'parseLoop', 'Base64'])
                @Js
                def PyJsHoisted_parseLoop_(base64Str, base64StrLength, reverseMap, this, arguments, var=var):
                    var = Scope({'base64Str':base64Str, 'base64StrLength':base64StrLength, 'reverseMap':reverseMap, 'this':this, 'arguments':arguments}, var)
                    var.registers(['words', 'reverseMap', 'i', 'bits1', 'bitsCombined', 'base64Str', 'base64StrLength', 'bits2', 'nBytes'])
                    var.put('words', Js([]))
                    var.put('nBytes', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('base64StrLength')):
                        try:
                            if (var.get('i')%Js(4.0)):
                                var.put('bits1', (var.get('reverseMap').get(var.get('base64Str').callprop('charCodeAt', (var.get('i')-Js(1.0))))<<((var.get('i')%Js(4.0))*Js(2.0))))
                                var.put('bits2', PyJsBshift(var.get('reverseMap').get(var.get('base64Str').callprop('charCodeAt', var.get('i'))),(Js(6.0)-((var.get('i')%Js(4.0))*Js(2.0)))))
                                var.put('bitsCombined', (var.get('bits1')|var.get('bits2')))
                                var.get('words').put(PyJsBshift(var.get('nBytes'),Js(2.0)), (var.get('bitsCombined')<<(Js(24.0)-((var.get('nBytes')%Js(4.0))*Js(8.0)))), '|')
                                (var.put('nBytes',Js(var.get('nBytes').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('WordArray').callprop('create', var.get('words'), var.get('nBytes'))
                PyJsHoisted_parseLoop_.func_name = 'parseLoop'
                var.put('parseLoop', PyJsHoisted_parseLoop_)
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('C_enc', var.get('C').get('enc'))
                @Js
                def PyJs_stringify_1965_(wordArray, this, arguments, var=var):
                    var = Scope({'wordArray':wordArray, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1965_}, var)
                    var.registers(['words', 'byte2', 'wordArray', 'j', 'i', 'sigBytes', 'map', 'byte3', 'paddingChar', 'byte1', 'triplet', 'base64Chars'])
                    var.put('words', var.get('wordArray').get('words'))
                    var.put('sigBytes', var.get('wordArray').get('sigBytes'))
                    var.put('map', var.get(u"this").get('_map'))
                    var.get('wordArray').callprop('clamp')
                    var.put('base64Chars', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('sigBytes')):
                        try:
                            var.put('byte1', (PyJsBshift(var.get('words').get(PyJsBshift(var.get('i'),Js(2.0))),(Js(24.0)-((var.get('i')%Js(4.0))*Js(8.0))))&Js(255)))
                            var.put('byte2', (PyJsBshift(var.get('words').get(PyJsBshift((var.get('i')+Js(1.0)),Js(2.0))),(Js(24.0)-(((var.get('i')+Js(1.0))%Js(4.0))*Js(8.0))))&Js(255)))
                            var.put('byte3', (PyJsBshift(var.get('words').get(PyJsBshift((var.get('i')+Js(2.0)),Js(2.0))),(Js(24.0)-(((var.get('i')+Js(2.0))%Js(4.0))*Js(8.0))))&Js(255)))
                            var.put('triplet', (((var.get('byte1')<<Js(16.0))|(var.get('byte2')<<Js(8.0)))|var.get('byte3')))
                            #for JS loop
                            var.put('j', Js(0.0))
                            while ((var.get('j')<Js(4.0)) and ((var.get('i')+(var.get('j')*Js(0.75)))<var.get('sigBytes'))):
                                try:
                                    var.get('base64Chars').callprop('push', var.get('map').callprop('charAt', (PyJsBshift(var.get('triplet'),(Js(6.0)*(Js(3.0)-var.get('j'))))&Js(63))))
                                finally:
                                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        finally:
                                var.put('i', Js(3.0), '+')
                    var.put('paddingChar', var.get('map').callprop('charAt', Js(64.0)))
                    if var.get('paddingChar'):
                        while (var.get('base64Chars').get('length')%Js(4.0)):
                            var.get('base64Chars').callprop('push', var.get('paddingChar'))
                    return var.get('base64Chars').callprop('join', Js(''))
                PyJs_stringify_1965_._set_name('stringify')
                @Js
                def PyJs_parse_1966_(base64Str, this, arguments, var=var):
                    var = Scope({'base64Str':base64Str, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_1966_}, var)
                    var.registers(['j', 'reverseMap', 'paddingChar', 'map', 'base64Str', 'base64StrLength', 'paddingIndex'])
                    var.put('base64StrLength', var.get('base64Str').get('length'))
                    var.put('map', var.get(u"this").get('_map'))
                    var.put('reverseMap', var.get(u"this").get('_reverseMap'))
                    if var.get('reverseMap').neg():
                        var.put('reverseMap', var.get(u"this").put('_reverseMap', Js([])))
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get('map').get('length')):
                            try:
                                var.get('reverseMap').put(var.get('map').callprop('charCodeAt', var.get('j')), var.get('j'))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    var.put('paddingChar', var.get('map').callprop('charAt', Js(64.0)))
                    if var.get('paddingChar'):
                        var.put('paddingIndex', var.get('base64Str').callprop('indexOf', var.get('paddingChar')))
                        if PyJsStrictNeq(var.get('paddingIndex'),(-Js(1.0))):
                            var.put('base64StrLength', var.get('paddingIndex'))
                    return var.get('parseLoop')(var.get('base64Str'), var.get('base64StrLength'), var.get('reverseMap'))
                PyJs_parse_1966_._set_name('parse')
                var.put('Base64', var.get('C_enc').put('Base64', Js({'stringify':PyJs_stringify_1965_,'parse':PyJs_parse_1966_,'_map':Js('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=')})))
                pass
            PyJs_anonymous_1964_._set_name('anonymous')
            PyJs_anonymous_1964_()
            return var.get('CryptoJS').get('enc').get('Base64')
        PyJs_anonymous_1963_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1967_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_1967_._set_name('anonymous')
        PyJs_anonymous_1967_(var.get(u"this"), PyJs_anonymous_1963_)
    PyJs_anonymous_1962_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1968_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_1969_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_1970_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['C_enc', 'WordArray', 'C', 'Utf16BE', 'C_lib', 'swapEndian'])
                @Js
                def PyJsHoisted_swapEndian_(word, this, arguments, var=var):
                    var = Scope({'word':word, 'this':this, 'arguments':arguments}, var)
                    var.registers(['word'])
                    return (((var.get('word')<<Js(8.0))&Js(4278255360))|(PyJsBshift(var.get('word'),Js(8.0))&Js(16711935)))
                PyJsHoisted_swapEndian_.func_name = 'swapEndian'
                var.put('swapEndian', PyJsHoisted_swapEndian_)
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('C_enc', var.get('C').get('enc'))
                @Js
                def PyJs_stringify_1971_(wordArray, this, arguments, var=var):
                    var = Scope({'wordArray':wordArray, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1971_}, var)
                    var.registers(['words', 'wordArray', 'i', 'sigBytes', 'codePoint', 'utf16Chars'])
                    var.put('words', var.get('wordArray').get('words'))
                    var.put('sigBytes', var.get('wordArray').get('sigBytes'))
                    var.put('utf16Chars', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('sigBytes')):
                        try:
                            var.put('codePoint', (PyJsBshift(var.get('words').get(PyJsBshift(var.get('i'),Js(2.0))),(Js(16.0)-((var.get('i')%Js(4.0))*Js(8.0))))&Js(65535)))
                            var.get('utf16Chars').callprop('push', var.get('String').callprop('fromCharCode', var.get('codePoint')))
                        finally:
                                var.put('i', Js(2.0), '+')
                    return var.get('utf16Chars').callprop('join', Js(''))
                PyJs_stringify_1971_._set_name('stringify')
                @Js
                def PyJs_parse_1972_(utf16Str, this, arguments, var=var):
                    var = Scope({'utf16Str':utf16Str, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_1972_}, var)
                    var.registers(['i', 'utf16StrLength', 'words', 'utf16Str'])
                    var.put('utf16StrLength', var.get('utf16Str').get('length'))
                    var.put('words', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('utf16StrLength')):
                        try:
                            var.get('words').put(PyJsBshift(var.get('i'),Js(1.0)), (var.get('utf16Str').callprop('charCodeAt', var.get('i'))<<(Js(16.0)-((var.get('i')%Js(2.0))*Js(16.0)))), '|')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('WordArray').callprop('create', var.get('words'), (var.get('utf16StrLength')*Js(2.0)))
                PyJs_parse_1972_._set_name('parse')
                var.put('Utf16BE', var.get('C_enc').put('Utf16', var.get('C_enc').put('Utf16BE', Js({'stringify':PyJs_stringify_1971_,'parse':PyJs_parse_1972_}))))
                @Js
                def PyJs_stringify_1973_(wordArray, this, arguments, var=var):
                    var = Scope({'wordArray':wordArray, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1973_}, var)
                    var.registers(['words', 'wordArray', 'i', 'sigBytes', 'codePoint', 'utf16Chars'])
                    var.put('words', var.get('wordArray').get('words'))
                    var.put('sigBytes', var.get('wordArray').get('sigBytes'))
                    var.put('utf16Chars', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('sigBytes')):
                        try:
                            var.put('codePoint', var.get('swapEndian')((PyJsBshift(var.get('words').get(PyJsBshift(var.get('i'),Js(2.0))),(Js(16.0)-((var.get('i')%Js(4.0))*Js(8.0))))&Js(65535))))
                            var.get('utf16Chars').callprop('push', var.get('String').callprop('fromCharCode', var.get('codePoint')))
                        finally:
                                var.put('i', Js(2.0), '+')
                    return var.get('utf16Chars').callprop('join', Js(''))
                PyJs_stringify_1973_._set_name('stringify')
                @Js
                def PyJs_parse_1974_(utf16Str, this, arguments, var=var):
                    var = Scope({'utf16Str':utf16Str, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_1974_}, var)
                    var.registers(['i', 'utf16StrLength', 'words', 'utf16Str'])
                    var.put('utf16StrLength', var.get('utf16Str').get('length'))
                    var.put('words', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('utf16StrLength')):
                        try:
                            var.get('words').put(PyJsBshift(var.get('i'),Js(1.0)), var.get('swapEndian')((var.get('utf16Str').callprop('charCodeAt', var.get('i'))<<(Js(16.0)-((var.get('i')%Js(2.0))*Js(16.0))))), '|')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('WordArray').callprop('create', var.get('words'), (var.get('utf16StrLength')*Js(2.0)))
                PyJs_parse_1974_._set_name('parse')
                var.get('C_enc').put('Utf16LE', Js({'stringify':PyJs_stringify_1973_,'parse':PyJs_parse_1974_}))
                pass
            PyJs_anonymous_1970_._set_name('anonymous')
            PyJs_anonymous_1970_()
            return var.get('CryptoJS').get('enc').get('Utf16')
        PyJs_anonymous_1969_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1975_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_1975_._set_name('anonymous')
        PyJs_anonymous_1975_(var.get(u"this"), PyJs_anonymous_1969_)
    PyJs_anonymous_1968_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1976_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_1977_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_1978_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['WordArray', 'C', 'EvpKDF', 'Base', 'C_lib', 'C_algo', 'MD5'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('Base', var.get('C_lib').get('Base'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('MD5', var.get('C_algo').get('MD5'))
                @Js
                def PyJs_init_1979_(cfg, this, arguments, var=var):
                    var = Scope({'cfg':cfg, 'this':this, 'arguments':arguments, 'init':PyJs_init_1979_}, var)
                    var.registers(['cfg'])
                    var.get(u"this").put('cfg', var.get(u"this").get('cfg').callprop('extend', var.get('cfg')))
                PyJs_init_1979_._set_name('init')
                @Js
                def PyJs_compute_1980_(password, salt, this, arguments, var=var):
                    var = Scope({'password':password, 'salt':salt, 'this':this, 'arguments':arguments, 'compute':PyJs_compute_1980_}, var)
                    var.registers(['password', 'i', 'keySize', 'derivedKeyWords', 'cfg', 'derivedKey', 'salt', 'block', 'hasher', 'iterations'])
                    pass
                    var.put('cfg', var.get(u"this").get('cfg'))
                    var.put('hasher', var.get('cfg').get('hasher').callprop('create'))
                    var.put('derivedKey', var.get('WordArray').callprop('create'))
                    var.put('derivedKeyWords', var.get('derivedKey').get('words'))
                    var.put('keySize', var.get('cfg').get('keySize'))
                    var.put('iterations', var.get('cfg').get('iterations'))
                    while (var.get('derivedKeyWords').get('length')<var.get('keySize')):
                        if var.get('block'):
                            var.get('hasher').callprop('update', var.get('block'))
                        var.put('block', var.get('hasher').callprop('update', var.get('password')).callprop('finalize', var.get('salt')))
                        var.get('hasher').callprop('reset')
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<var.get('iterations')):
                            try:
                                var.put('block', var.get('hasher').callprop('finalize', var.get('block')))
                                var.get('hasher').callprop('reset')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.get('derivedKey').callprop('concat', var.get('block'))
                    var.get('derivedKey').put('sigBytes', (var.get('keySize')*Js(4.0)))
                    return var.get('derivedKey')
                PyJs_compute_1980_._set_name('compute')
                var.put('EvpKDF', var.get('C_algo').put('EvpKDF', var.get('Base').callprop('extend', Js({'cfg':var.get('Base').callprop('extend', Js({'keySize':(Js(128.0)/Js(32.0)),'hasher':var.get('MD5'),'iterations':Js(1.0)})),'init':PyJs_init_1979_,'compute':PyJs_compute_1980_}))))
                @Js
                def PyJs_anonymous_1981_(password, salt, cfg, this, arguments, var=var):
                    var = Scope({'password':password, 'salt':salt, 'cfg':cfg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['salt', 'cfg', 'password'])
                    return var.get('EvpKDF').callprop('create', var.get('cfg')).callprop('compute', var.get('password'), var.get('salt'))
                PyJs_anonymous_1981_._set_name('anonymous')
                var.get('C').put('EvpKDF', PyJs_anonymous_1981_)
            PyJs_anonymous_1978_._set_name('anonymous')
            PyJs_anonymous_1978_()
            return var.get('CryptoJS').get('EvpKDF')
        PyJs_anonymous_1977_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1982_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./sha1')), var.get('require')(Js('./hmac')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./sha1'), Js('./hmac')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_1982_._set_name('anonymous')
        PyJs_anonymous_1982_(var.get(u"this"), PyJs_anonymous_1977_)
    PyJs_anonymous_1976_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1983_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_1984_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_1985_(undefined, this, arguments, var=var):
                var = Scope({'undefined':undefined, 'this':this, 'arguments':arguments}, var)
                var.registers(['C_enc', 'C_format', 'C', 'C_lib', 'CipherParams', 'HexFormatter', 'Hex', 'undefined'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('CipherParams', var.get('C_lib').get('CipherParams'))
                var.put('C_enc', var.get('C').get('enc'))
                var.put('Hex', var.get('C_enc').get('Hex'))
                var.put('C_format', var.get('C').get('format'))
                @Js
                def PyJs_stringify_1986_(cipherParams, this, arguments, var=var):
                    var = Scope({'cipherParams':cipherParams, 'this':this, 'arguments':arguments, 'stringify':PyJs_stringify_1986_}, var)
                    var.registers(['cipherParams'])
                    return var.get('cipherParams').get('ciphertext').callprop('toString', var.get('Hex'))
                PyJs_stringify_1986_._set_name('stringify')
                @Js
                def PyJs_parse_1987_(input, this, arguments, var=var):
                    var = Scope({'input':input, 'this':this, 'arguments':arguments, 'parse':PyJs_parse_1987_}, var)
                    var.registers(['ciphertext', 'input'])
                    var.put('ciphertext', var.get('Hex').callprop('parse', var.get('input')))
                    return var.get('CipherParams').callprop('create', Js({'ciphertext':var.get('ciphertext')}))
                PyJs_parse_1987_._set_name('parse')
                var.put('HexFormatter', var.get('C_format').put('Hex', Js({'stringify':PyJs_stringify_1986_,'parse':PyJs_parse_1987_})))
            PyJs_anonymous_1985_._set_name('anonymous')
            PyJs_anonymous_1985_()
            return var.get('CryptoJS').get('format').get('Hex')
        PyJs_anonymous_1984_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1988_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_1988_._set_name('anonymous')
        PyJs_anonymous_1988_(var.get(u"this"), PyJs_anonymous_1984_)
    PyJs_anonymous_1983_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1989_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_1990_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_1991_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['C_enc', 'C', 'Base', 'C_lib', 'Utf8', 'C_algo', 'HMAC'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('Base', var.get('C_lib').get('Base'))
                var.put('C_enc', var.get('C').get('enc'))
                var.put('Utf8', var.get('C_enc').get('Utf8'))
                var.put('C_algo', var.get('C').get('algo'))
                @Js
                def PyJs_init_1992_(hasher, key, this, arguments, var=var):
                    var = Scope({'hasher':hasher, 'key':key, 'this':this, 'arguments':arguments, 'init':PyJs_init_1992_}, var)
                    var.registers(['iKeyWords', 'iKey', 'i', 'oKeyWords', 'key', 'oKey', 'hasherBlockSizeBytes', 'hasher', 'hasherBlockSize'])
                    var.put('hasher', var.get(u"this").put('_hasher', var.get('hasher').get('init').create()))
                    if (var.get('key',throw=False).typeof()==Js('string')):
                        var.put('key', var.get('Utf8').callprop('parse', var.get('key')))
                    var.put('hasherBlockSize', var.get('hasher').get('blockSize'))
                    var.put('hasherBlockSizeBytes', (var.get('hasherBlockSize')*Js(4.0)))
                    if (var.get('key').get('sigBytes')>var.get('hasherBlockSizeBytes')):
                        var.put('key', var.get('hasher').callprop('finalize', var.get('key')))
                    var.get('key').callprop('clamp')
                    var.put('oKey', var.get(u"this").put('_oKey', var.get('key').callprop('clone')))
                    var.put('iKey', var.get(u"this").put('_iKey', var.get('key').callprop('clone')))
                    var.put('oKeyWords', var.get('oKey').get('words'))
                    var.put('iKeyWords', var.get('iKey').get('words'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('hasherBlockSize')):
                        try:
                            var.get('oKeyWords').put(var.get('i'), Js(1549556828), '^')
                            var.get('iKeyWords').put(var.get('i'), Js(909522486), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('oKey').put('sigBytes', var.get('iKey').put('sigBytes', var.get('hasherBlockSizeBytes')))
                    var.get(u"this").callprop('reset')
                PyJs_init_1992_._set_name('init')
                @Js
                def PyJs_reset_1993_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'reset':PyJs_reset_1993_}, var)
                    var.registers(['hasher'])
                    var.put('hasher', var.get(u"this").get('_hasher'))
                    var.get('hasher').callprop('reset')
                    var.get('hasher').callprop('update', var.get(u"this").get('_iKey'))
                PyJs_reset_1993_._set_name('reset')
                @Js
                def PyJs_update_1994_(messageUpdate, this, arguments, var=var):
                    var = Scope({'messageUpdate':messageUpdate, 'this':this, 'arguments':arguments, 'update':PyJs_update_1994_}, var)
                    var.registers(['messageUpdate'])
                    var.get(u"this").get('_hasher').callprop('update', var.get('messageUpdate'))
                    return var.get(u"this")
                PyJs_update_1994_._set_name('update')
                @Js
                def PyJs_finalize_1995_(messageUpdate, this, arguments, var=var):
                    var = Scope({'messageUpdate':messageUpdate, 'this':this, 'arguments':arguments, 'finalize':PyJs_finalize_1995_}, var)
                    var.registers(['innerHash', 'hmac', 'messageUpdate', 'hasher'])
                    var.put('hasher', var.get(u"this").get('_hasher'))
                    var.put('innerHash', var.get('hasher').callprop('finalize', var.get('messageUpdate')))
                    var.get('hasher').callprop('reset')
                    var.put('hmac', var.get('hasher').callprop('finalize', var.get(u"this").get('_oKey').callprop('clone').callprop('concat', var.get('innerHash'))))
                    return var.get('hmac')
                PyJs_finalize_1995_._set_name('finalize')
                var.put('HMAC', var.get('C_algo').put('HMAC', var.get('Base').callprop('extend', Js({'init':PyJs_init_1992_,'reset':PyJs_reset_1993_,'update':PyJs_update_1994_,'finalize':PyJs_finalize_1995_}))))
            PyJs_anonymous_1991_._set_name('anonymous')
            PyJs_anonymous_1991_()
        PyJs_anonymous_1990_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1996_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_1996_._set_name('anonymous')
        PyJs_anonymous_1996_(var.get(u"this"), PyJs_anonymous_1990_)
    PyJs_anonymous_1989_._set_name('anonymous')
    @Js
    def PyJs_anonymous_1997_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_1998_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            return var.get('CryptoJS')
        PyJs_anonymous_1998_._set_name('anonymous')
        @Js
        def PyJs_anonymous_1999_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                def PyJs_LONG_2000_(var=var):
                    return var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./x64-core')), var.get('require')(Js('./lib-typedarrays')), var.get('require')(Js('./enc-utf16')), var.get('require')(Js('./enc-base64')), var.get('require')(Js('./md5')), var.get('require')(Js('./sha1')), var.get('require')(Js('./sha256')), var.get('require')(Js('./sha224')), var.get('require')(Js('./sha512')), var.get('require')(Js('./sha384')), var.get('require')(Js('./sha3')), var.get('require')(Js('./ripemd160')), var.get('require')(Js('./hmac')), var.get('require')(Js('./pbkdf2')), var.get('require')(Js('./evpkdf')), var.get('require')(Js('./cipher-core')), var.get('require')(Js('./mode-cfb')), var.get('require')(Js('./mode-ctr')), var.get('require')(Js('./mode-ctr-gladman')), var.get('require')(Js('./mode-ofb')), var.get('require')(Js('./mode-ecb')), var.get('require')(Js('./pad-ansix923')), var.get('require')(Js('./pad-iso10126')), var.get('require')(Js('./pad-iso97971')), var.get('require')(Js('./pad-zeropadding')), var.get('require')(Js('./pad-nopadding')), var.get('require')(Js('./format-hex')), var.get('require')(Js('./aes')), var.get('require')(Js('./tripledes')), var.get('require')(Js('./rc4')), var.get('require')(Js('./rabbit')), var.get('require')(Js('./rabbit-legacy')))
                var.get('module').put('exports', var.put('exports', PyJs_LONG_2000_()))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    def PyJs_LONG_2001_(var=var):
                        return var.get('define')(Js([Js('./core'), Js('./x64-core'), Js('./lib-typedarrays'), Js('./enc-utf16'), Js('./enc-base64'), Js('./md5'), Js('./sha1'), Js('./sha256'), Js('./sha224'), Js('./sha512'), Js('./sha384'), Js('./sha3'), Js('./ripemd160'), Js('./hmac'), Js('./pbkdf2'), Js('./evpkdf'), Js('./cipher-core'), Js('./mode-cfb'), Js('./mode-ctr'), Js('./mode-ctr-gladman'), Js('./mode-ofb'), Js('./mode-ecb'), Js('./pad-ansix923'), Js('./pad-iso10126'), Js('./pad-iso97971'), Js('./pad-zeropadding'), Js('./pad-nopadding'), Js('./format-hex'), Js('./aes'), Js('./tripledes'), Js('./rc4'), Js('./rabbit'), Js('./rabbit-legacy')]), var.get('factory'))
                    PyJs_LONG_2001_()
                else:
                    var.get('root').put('CryptoJS', var.get('factory')(var.get('root').get('CryptoJS')))
        PyJs_anonymous_1999_._set_name('anonymous')
        PyJs_anonymous_1999_(var.get(u"this"), PyJs_anonymous_1998_)
    PyJs_anonymous_1997_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2002_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2003_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2004_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['WordArray', 'C', 'C_lib', 'superInit', 'subInit'])
                if (var.get('ArrayBuffer',throw=False).typeof()!=Js('function')):
                    return var.get('undefined')
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('superInit', var.get('WordArray').get('init'))
                @Js
                def PyJs_anonymous_2005_(typedArray, this, arguments, var=var):
                    var = Scope({'typedArray':typedArray, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'words', 'typedArrayByteLength', 'typedArray'])
                    if var.get('typedArray').instanceof(var.get('ArrayBuffer')):
                        var.put('typedArray', var.get('Uint8Array').create(var.get('typedArray')))
                    def PyJs_LONG_2006_(var=var):
                        return (((((var.get('typedArray').instanceof(var.get('Int8Array')) or (PyJsStrictNeq(var.get('Uint8ClampedArray',throw=False).typeof(),Js('undefined')) and var.get('typedArray').instanceof(var.get('Uint8ClampedArray')))) or var.get('typedArray').instanceof(var.get('Int16Array'))) or var.get('typedArray').instanceof(var.get('Uint16Array'))) or var.get('typedArray').instanceof(var.get('Int32Array'))) or var.get('typedArray').instanceof(var.get('Uint32Array')))
                    if ((PyJs_LONG_2006_() or var.get('typedArray').instanceof(var.get('Float32Array'))) or var.get('typedArray').instanceof(var.get('Float64Array'))):
                        var.put('typedArray', var.get('Uint8Array').create(var.get('typedArray').get('buffer'), var.get('typedArray').get('byteOffset'), var.get('typedArray').get('byteLength')))
                    if var.get('typedArray').instanceof(var.get('Uint8Array')):
                        var.put('typedArrayByteLength', var.get('typedArray').get('byteLength'))
                        var.put('words', Js([]))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('typedArrayByteLength')):
                            try:
                                var.get('words').put(PyJsBshift(var.get('i'),Js(2.0)), (var.get('typedArray').get(var.get('i'))<<(Js(24.0)-((var.get('i')%Js(4.0))*Js(8.0)))), '|')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.get('superInit').callprop('call', var.get(u"this"), var.get('words'), var.get('typedArrayByteLength'))
                    else:
                        var.get('superInit').callprop('apply', var.get(u"this"), var.get('arguments'))
                PyJs_anonymous_2005_._set_name('anonymous')
                var.put('subInit', var.get('WordArray').put('init', PyJs_anonymous_2005_))
                var.get('subInit').put('prototype', var.get('WordArray'))
            PyJs_anonymous_2004_._set_name('anonymous')
            PyJs_anonymous_2004_()
            return var.get('CryptoJS').get('lib').get('WordArray')
        PyJs_anonymous_2003_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2007_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2007_._set_name('anonymous')
        PyJs_anonymous_2007_(var.get(u"this"), PyJs_anonymous_2003_)
    PyJs_anonymous_2002_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2008_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2009_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2010_(Math, this, arguments, var=var):
                var = Scope({'Math':Math, 'this':this, 'arguments':arguments}, var)
                var.registers(['WordArray', 'C', 'MD5', 'GG', 'Math', 'II', 'FF', 'C_lib', 'HH', 'C_algo', 'T', 'Hasher'])
                @Js
                def PyJsHoisted_FF_(a, b, c, d, x, s, t, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'x':x, 's':s, 't':t, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a', 'c', 'x', 'n', 'b', 't', 'd', 's'])
                    var.put('n', (((var.get('a')+((var.get('b')&var.get('c'))|((~var.get('b'))&var.get('d'))))+var.get('x'))+var.get('t')))
                    return (((var.get('n')<<var.get('s'))|PyJsBshift(var.get('n'),(Js(32.0)-var.get('s'))))+var.get('b'))
                PyJsHoisted_FF_.func_name = 'FF'
                var.put('FF', PyJsHoisted_FF_)
                @Js
                def PyJsHoisted_GG_(a, b, c, d, x, s, t, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'x':x, 's':s, 't':t, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a', 'c', 'x', 'n', 'b', 't', 'd', 's'])
                    var.put('n', (((var.get('a')+((var.get('b')&var.get('d'))|(var.get('c')&(~var.get('d')))))+var.get('x'))+var.get('t')))
                    return (((var.get('n')<<var.get('s'))|PyJsBshift(var.get('n'),(Js(32.0)-var.get('s'))))+var.get('b'))
                PyJsHoisted_GG_.func_name = 'GG'
                var.put('GG', PyJsHoisted_GG_)
                @Js
                def PyJsHoisted_HH_(a, b, c, d, x, s, t, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'x':x, 's':s, 't':t, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a', 'c', 'x', 'n', 'b', 't', 'd', 's'])
                    var.put('n', (((var.get('a')+((var.get('b')^var.get('c'))^var.get('d')))+var.get('x'))+var.get('t')))
                    return (((var.get('n')<<var.get('s'))|PyJsBshift(var.get('n'),(Js(32.0)-var.get('s'))))+var.get('b'))
                PyJsHoisted_HH_.func_name = 'HH'
                var.put('HH', PyJsHoisted_HH_)
                @Js
                def PyJsHoisted_II_(a, b, c, d, x, s, t, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'x':x, 's':s, 't':t, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a', 'c', 'x', 'n', 'b', 't', 'd', 's'])
                    var.put('n', (((var.get('a')+(var.get('c')^(var.get('b')|(~var.get('d')))))+var.get('x'))+var.get('t')))
                    return (((var.get('n')<<var.get('s'))|PyJsBshift(var.get('n'),(Js(32.0)-var.get('s'))))+var.get('b'))
                PyJsHoisted_II_.func_name = 'II'
                var.put('II', PyJsHoisted_II_)
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('Hasher', var.get('C_lib').get('Hasher'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('T', Js([]))
                @Js
                def PyJs_anonymous_2011_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(64.0)):
                        try:
                            var.get('T').put(var.get('i'), ((var.get('Math').callprop('abs', var.get('Math').callprop('sin', (var.get('i')+Js(1.0))))*Js(4294967296))|Js(0.0)))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2011_._set_name('anonymous')
                PyJs_anonymous_2011_()
                @Js
                def PyJs__doReset_2012_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2012_}, var)
                    var.registers([])
                    var.get(u"this").put('_hash', var.get('WordArray').get('init').create(Js([Js(1732584193), Js(4023233417), Js(2562383102), Js(271733878)])))
                PyJs__doReset_2012_._set_name('_doReset')
                @Js
                def PyJs__doProcessBlock_2013_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_2013_}, var)
                    var.registers(['M_offset_9', 'a', 'M_offset_5', 'M_offset_11', 'M', 'b', 'M_offset_12', 'H', 'i', 'M_offset_4', 'M_offset_i', 'M_offset_0', 'c', 'd', 'M_offset_3', 'M_offset_2', 'offset', 'M_offset_6', 'M_offset_14', 'offset_i', 'M_offset_10', 'M_offset_7', 'M_offset_13', 'M_offset_8', 'M_offset_15', 'M_offset_1'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(16.0)):
                        try:
                            var.put('offset_i', (var.get('offset')+var.get('i')))
                            var.put('M_offset_i', var.get('M').get(var.get('offset_i')))
                            var.get('M').put(var.get('offset_i'), ((((var.get('M_offset_i')<<Js(8.0))|PyJsBshift(var.get('M_offset_i'),Js(24.0)))&Js(16711935))|(((var.get('M_offset_i')<<Js(24.0))|PyJsBshift(var.get('M_offset_i'),Js(8.0)))&Js(4278255360))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('H', var.get(u"this").get('_hash').get('words'))
                    var.put('M_offset_0', var.get('M').get((var.get('offset')+Js(0.0))))
                    var.put('M_offset_1', var.get('M').get((var.get('offset')+Js(1.0))))
                    var.put('M_offset_2', var.get('M').get((var.get('offset')+Js(2.0))))
                    var.put('M_offset_3', var.get('M').get((var.get('offset')+Js(3.0))))
                    var.put('M_offset_4', var.get('M').get((var.get('offset')+Js(4.0))))
                    var.put('M_offset_5', var.get('M').get((var.get('offset')+Js(5.0))))
                    var.put('M_offset_6', var.get('M').get((var.get('offset')+Js(6.0))))
                    var.put('M_offset_7', var.get('M').get((var.get('offset')+Js(7.0))))
                    var.put('M_offset_8', var.get('M').get((var.get('offset')+Js(8.0))))
                    var.put('M_offset_9', var.get('M').get((var.get('offset')+Js(9.0))))
                    var.put('M_offset_10', var.get('M').get((var.get('offset')+Js(10.0))))
                    var.put('M_offset_11', var.get('M').get((var.get('offset')+Js(11.0))))
                    var.put('M_offset_12', var.get('M').get((var.get('offset')+Js(12.0))))
                    var.put('M_offset_13', var.get('M').get((var.get('offset')+Js(13.0))))
                    var.put('M_offset_14', var.get('M').get((var.get('offset')+Js(14.0))))
                    var.put('M_offset_15', var.get('M').get((var.get('offset')+Js(15.0))))
                    var.put('a', var.get('H').get('0'))
                    var.put('b', var.get('H').get('1'))
                    var.put('c', var.get('H').get('2'))
                    var.put('d', var.get('H').get('3'))
                    var.put('a', var.get('FF')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_0'), Js(7.0), var.get('T').get('0')))
                    var.put('d', var.get('FF')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_1'), Js(12.0), var.get('T').get('1')))
                    var.put('c', var.get('FF')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_2'), Js(17.0), var.get('T').get('2')))
                    var.put('b', var.get('FF')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_3'), Js(22.0), var.get('T').get('3')))
                    var.put('a', var.get('FF')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_4'), Js(7.0), var.get('T').get('4')))
                    var.put('d', var.get('FF')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_5'), Js(12.0), var.get('T').get('5')))
                    var.put('c', var.get('FF')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_6'), Js(17.0), var.get('T').get('6')))
                    var.put('b', var.get('FF')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_7'), Js(22.0), var.get('T').get('7')))
                    var.put('a', var.get('FF')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_8'), Js(7.0), var.get('T').get('8')))
                    var.put('d', var.get('FF')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_9'), Js(12.0), var.get('T').get('9')))
                    var.put('c', var.get('FF')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_10'), Js(17.0), var.get('T').get('10')))
                    var.put('b', var.get('FF')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_11'), Js(22.0), var.get('T').get('11')))
                    var.put('a', var.get('FF')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_12'), Js(7.0), var.get('T').get('12')))
                    var.put('d', var.get('FF')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_13'), Js(12.0), var.get('T').get('13')))
                    var.put('c', var.get('FF')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_14'), Js(17.0), var.get('T').get('14')))
                    var.put('b', var.get('FF')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_15'), Js(22.0), var.get('T').get('15')))
                    var.put('a', var.get('GG')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_1'), Js(5.0), var.get('T').get('16')))
                    var.put('d', var.get('GG')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_6'), Js(9.0), var.get('T').get('17')))
                    var.put('c', var.get('GG')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_11'), Js(14.0), var.get('T').get('18')))
                    var.put('b', var.get('GG')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_0'), Js(20.0), var.get('T').get('19')))
                    var.put('a', var.get('GG')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_5'), Js(5.0), var.get('T').get('20')))
                    var.put('d', var.get('GG')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_10'), Js(9.0), var.get('T').get('21')))
                    var.put('c', var.get('GG')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_15'), Js(14.0), var.get('T').get('22')))
                    var.put('b', var.get('GG')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_4'), Js(20.0), var.get('T').get('23')))
                    var.put('a', var.get('GG')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_9'), Js(5.0), var.get('T').get('24')))
                    var.put('d', var.get('GG')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_14'), Js(9.0), var.get('T').get('25')))
                    var.put('c', var.get('GG')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_3'), Js(14.0), var.get('T').get('26')))
                    var.put('b', var.get('GG')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_8'), Js(20.0), var.get('T').get('27')))
                    var.put('a', var.get('GG')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_13'), Js(5.0), var.get('T').get('28')))
                    var.put('d', var.get('GG')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_2'), Js(9.0), var.get('T').get('29')))
                    var.put('c', var.get('GG')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_7'), Js(14.0), var.get('T').get('30')))
                    var.put('b', var.get('GG')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_12'), Js(20.0), var.get('T').get('31')))
                    var.put('a', var.get('HH')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_5'), Js(4.0), var.get('T').get('32')))
                    var.put('d', var.get('HH')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_8'), Js(11.0), var.get('T').get('33')))
                    var.put('c', var.get('HH')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_11'), Js(16.0), var.get('T').get('34')))
                    var.put('b', var.get('HH')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_14'), Js(23.0), var.get('T').get('35')))
                    var.put('a', var.get('HH')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_1'), Js(4.0), var.get('T').get('36')))
                    var.put('d', var.get('HH')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_4'), Js(11.0), var.get('T').get('37')))
                    var.put('c', var.get('HH')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_7'), Js(16.0), var.get('T').get('38')))
                    var.put('b', var.get('HH')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_10'), Js(23.0), var.get('T').get('39')))
                    var.put('a', var.get('HH')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_13'), Js(4.0), var.get('T').get('40')))
                    var.put('d', var.get('HH')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_0'), Js(11.0), var.get('T').get('41')))
                    var.put('c', var.get('HH')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_3'), Js(16.0), var.get('T').get('42')))
                    var.put('b', var.get('HH')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_6'), Js(23.0), var.get('T').get('43')))
                    var.put('a', var.get('HH')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_9'), Js(4.0), var.get('T').get('44')))
                    var.put('d', var.get('HH')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_12'), Js(11.0), var.get('T').get('45')))
                    var.put('c', var.get('HH')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_15'), Js(16.0), var.get('T').get('46')))
                    var.put('b', var.get('HH')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_2'), Js(23.0), var.get('T').get('47')))
                    var.put('a', var.get('II')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_0'), Js(6.0), var.get('T').get('48')))
                    var.put('d', var.get('II')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_7'), Js(10.0), var.get('T').get('49')))
                    var.put('c', var.get('II')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_14'), Js(15.0), var.get('T').get('50')))
                    var.put('b', var.get('II')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_5'), Js(21.0), var.get('T').get('51')))
                    var.put('a', var.get('II')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_12'), Js(6.0), var.get('T').get('52')))
                    var.put('d', var.get('II')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_3'), Js(10.0), var.get('T').get('53')))
                    var.put('c', var.get('II')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_10'), Js(15.0), var.get('T').get('54')))
                    var.put('b', var.get('II')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_1'), Js(21.0), var.get('T').get('55')))
                    var.put('a', var.get('II')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_8'), Js(6.0), var.get('T').get('56')))
                    var.put('d', var.get('II')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_15'), Js(10.0), var.get('T').get('57')))
                    var.put('c', var.get('II')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_6'), Js(15.0), var.get('T').get('58')))
                    var.put('b', var.get('II')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_13'), Js(21.0), var.get('T').get('59')))
                    var.put('a', var.get('II')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M_offset_4'), Js(6.0), var.get('T').get('60')))
                    var.put('d', var.get('II')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M_offset_11'), Js(10.0), var.get('T').get('61')))
                    var.put('c', var.get('II')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M_offset_2'), Js(15.0), var.get('T').get('62')))
                    var.put('b', var.get('II')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M_offset_9'), Js(21.0), var.get('T').get('63')))
                    var.get('H').put('0', ((var.get('H').get('0')+var.get('a'))|Js(0.0)))
                    var.get('H').put('1', ((var.get('H').get('1')+var.get('b'))|Js(0.0)))
                    var.get('H').put('2', ((var.get('H').get('2')+var.get('c'))|Js(0.0)))
                    var.get('H').put('3', ((var.get('H').get('3')+var.get('d'))|Js(0.0)))
                PyJs__doProcessBlock_2013_._set_name('_doProcessBlock')
                @Js
                def PyJs__doFinalize_2014_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_2014_}, var)
                    var.registers(['nBitsLeft', 'nBitsTotalH', 'hash', 'i', 'nBitsTotalL', 'dataWords', 'H', 'data', 'H_i', 'nBitsTotal'])
                    var.put('data', var.get(u"this").get('_data'))
                    var.put('dataWords', var.get('data').get('words'))
                    var.put('nBitsTotal', (var.get(u"this").get('_nDataBytes')*Js(8.0)))
                    var.put('nBitsLeft', (var.get('data').get('sigBytes')*Js(8.0)))
                    var.get('dataWords').put(PyJsBshift(var.get('nBitsLeft'),Js(5.0)), (Js(128)<<(Js(24.0)-(var.get('nBitsLeft')%Js(32.0)))), '|')
                    var.put('nBitsTotalH', var.get('Math').callprop('floor', (var.get('nBitsTotal')/Js(4294967296))))
                    var.put('nBitsTotalL', var.get('nBitsTotal'))
                    var.get('dataWords').put(((PyJsBshift((var.get('nBitsLeft')+Js(64.0)),Js(9.0))<<Js(4.0))+Js(15.0)), ((((var.get('nBitsTotalH')<<Js(8.0))|PyJsBshift(var.get('nBitsTotalH'),Js(24.0)))&Js(16711935))|(((var.get('nBitsTotalH')<<Js(24.0))|PyJsBshift(var.get('nBitsTotalH'),Js(8.0)))&Js(4278255360))))
                    var.get('dataWords').put(((PyJsBshift((var.get('nBitsLeft')+Js(64.0)),Js(9.0))<<Js(4.0))+Js(14.0)), ((((var.get('nBitsTotalL')<<Js(8.0))|PyJsBshift(var.get('nBitsTotalL'),Js(24.0)))&Js(16711935))|(((var.get('nBitsTotalL')<<Js(24.0))|PyJsBshift(var.get('nBitsTotalL'),Js(8.0)))&Js(4278255360))))
                    var.get('data').put('sigBytes', ((var.get('dataWords').get('length')+Js(1.0))*Js(4.0)))
                    var.get(u"this").callprop('_process')
                    var.put('hash', var.get(u"this").get('_hash'))
                    var.put('H', var.get('hash').get('words'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(4.0)):
                        try:
                            var.put('H_i', var.get('H').get(var.get('i')))
                            var.get('H').put(var.get('i'), ((((var.get('H_i')<<Js(8.0))|PyJsBshift(var.get('H_i'),Js(24.0)))&Js(16711935))|(((var.get('H_i')<<Js(24.0))|PyJsBshift(var.get('H_i'),Js(8.0)))&Js(4278255360))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('hash')
                PyJs__doFinalize_2014_._set_name('_doFinalize')
                @Js
                def PyJs_clone_2015_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_2015_}, var)
                    var.registers(['clone'])
                    var.put('clone', var.get('Hasher').get('clone').callprop('call', var.get(u"this")))
                    var.get('clone').put('_hash', var.get(u"this").get('_hash').callprop('clone'))
                    return var.get('clone')
                PyJs_clone_2015_._set_name('clone')
                var.put('MD5', var.get('C_algo').put('MD5', var.get('Hasher').callprop('extend', Js({'_doReset':PyJs__doReset_2012_,'_doProcessBlock':PyJs__doProcessBlock_2013_,'_doFinalize':PyJs__doFinalize_2014_,'clone':PyJs_clone_2015_}))))
                pass
                pass
                pass
                pass
                var.get('C').put('MD5', var.get('Hasher').callprop('_createHelper', var.get('MD5')))
                var.get('C').put('HmacMD5', var.get('Hasher').callprop('_createHmacHelper', var.get('MD5')))
            PyJs_anonymous_2010_._set_name('anonymous')
            PyJs_anonymous_2010_(var.get('Math'))
            return var.get('CryptoJS').get('MD5')
        PyJs_anonymous_2009_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2016_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2016_._set_name('anonymous')
        PyJs_anonymous_2016_(var.get(u"this"), PyJs_anonymous_2009_)
    PyJs_anonymous_2008_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2017_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2018_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2019_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['CFB', 'generateKeystreamAndEncrypt'])
                @Js
                def PyJsHoisted_generateKeystreamAndEncrypt_(words, offset, blockSize, cipher, this, arguments, var=var):
                    var = Scope({'words':words, 'offset':offset, 'blockSize':blockSize, 'cipher':cipher, 'this':this, 'arguments':arguments}, var)
                    var.registers(['words', 'iv', 'blockSize', 'i', 'keystream', 'cipher', 'offset'])
                    pass
                    var.put('iv', var.get(u"this").get('_iv'))
                    if var.get('iv'):
                        var.put('keystream', var.get('iv').callprop('slice', Js(0.0)))
                        var.get(u"this").put('_iv', var.get('undefined'))
                    else:
                        var.put('keystream', var.get(u"this").get('_prevBlock'))
                    var.get('cipher').callprop('encryptBlock', var.get('keystream'), Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('blockSize')):
                        try:
                            var.get('words').put((var.get('offset')+var.get('i')), var.get('keystream').get(var.get('i')), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJsHoisted_generateKeystreamAndEncrypt_.func_name = 'generateKeystreamAndEncrypt'
                var.put('generateKeystreamAndEncrypt', PyJsHoisted_generateKeystreamAndEncrypt_)
                var.put('CFB', var.get('CryptoJS').get('lib').get('BlockCipherMode').callprop('extend'))
                @Js
                def PyJs_processBlock_2020_(words, offset, this, arguments, var=var):
                    var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, 'processBlock':PyJs_processBlock_2020_}, var)
                    var.registers(['words', 'cipher', 'offset', 'blockSize'])
                    var.put('cipher', var.get(u"this").get('_cipher'))
                    var.put('blockSize', var.get('cipher').get('blockSize'))
                    var.get('generateKeystreamAndEncrypt').callprop('call', var.get(u"this"), var.get('words'), var.get('offset'), var.get('blockSize'), var.get('cipher'))
                    var.get(u"this").put('_prevBlock', var.get('words').callprop('slice', var.get('offset'), (var.get('offset')+var.get('blockSize'))))
                PyJs_processBlock_2020_._set_name('processBlock')
                var.get('CFB').put('Encryptor', var.get('CFB').callprop('extend', Js({'processBlock':PyJs_processBlock_2020_})))
                @Js
                def PyJs_processBlock_2021_(words, offset, this, arguments, var=var):
                    var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, 'processBlock':PyJs_processBlock_2021_}, var)
                    var.registers(['words', 'blockSize', 'thisBlock', 'cipher', 'offset'])
                    var.put('cipher', var.get(u"this").get('_cipher'))
                    var.put('blockSize', var.get('cipher').get('blockSize'))
                    var.put('thisBlock', var.get('words').callprop('slice', var.get('offset'), (var.get('offset')+var.get('blockSize'))))
                    var.get('generateKeystreamAndEncrypt').callprop('call', var.get(u"this"), var.get('words'), var.get('offset'), var.get('blockSize'), var.get('cipher'))
                    var.get(u"this").put('_prevBlock', var.get('thisBlock'))
                PyJs_processBlock_2021_._set_name('processBlock')
                var.get('CFB').put('Decryptor', var.get('CFB').callprop('extend', Js({'processBlock':PyJs_processBlock_2021_})))
                pass
                return var.get('CFB')
            PyJs_anonymous_2019_._set_name('anonymous')
            var.get('CryptoJS').get('mode').put('CFB', PyJs_anonymous_2019_())
            return var.get('CryptoJS').get('mode').get('CFB')
        PyJs_anonymous_2018_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2022_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2022_._set_name('anonymous')
        PyJs_anonymous_2022_(var.get(u"this"), PyJs_anonymous_2018_)
    PyJs_anonymous_2017_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2023_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2024_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2025_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['incWord', 'Encryptor', 'incCounter', 'CTRGladman'])
                @Js
                def PyJsHoisted_incWord_(word, this, arguments, var=var):
                    var = Scope({'word':word, 'this':this, 'arguments':arguments}, var)
                    var.registers(['b1', 'word', 'b2', 'b3'])
                    if _seq(((var.get('word')>>Js(24.0))&Js(255)),Js(255)):
                        var.put('b1', ((var.get('word')>>Js(16.0))&Js(255)))
                        var.put('b2', ((var.get('word')>>Js(8.0))&Js(255)))
                        var.put('b3', (var.get('word')&Js(255)))
                        if _seq(var.get('b1'),Js(255)):
                            var.put('b1', Js(0.0))
                            if _seq(var.get('b2'),Js(255)):
                                var.put('b2', Js(0.0))
                                if _seq(var.get('b3'),Js(255)):
                                    var.put('b3', Js(0.0))
                                else:
                                    var.put('b3',Js(var.get('b3').to_number())+Js(1))
                            else:
                                var.put('b2',Js(var.get('b2').to_number())+Js(1))
                        else:
                            var.put('b1',Js(var.get('b1').to_number())+Js(1))
                        var.put('word', Js(0.0))
                        var.put('word', (var.get('b1')<<Js(16.0)), '+')
                        var.put('word', (var.get('b2')<<Js(8.0)), '+')
                        var.put('word', var.get('b3'), '+')
                    else:
                        var.put('word', (Js(1)<<Js(24.0)), '+')
                    return var.get('word')
                PyJsHoisted_incWord_.func_name = 'incWord'
                var.put('incWord', PyJsHoisted_incWord_)
                @Js
                def PyJsHoisted_incCounter_(counter, this, arguments, var=var):
                    var = Scope({'counter':counter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['counter'])
                    if _seq(var.get('counter').put('0', var.get('incWord')(var.get('counter').get('0'))),Js(0.0)):
                        var.get('counter').put('1', var.get('incWord')(var.get('counter').get('1')))
                    return var.get('counter')
                PyJsHoisted_incCounter_.func_name = 'incCounter'
                var.put('incCounter', PyJsHoisted_incCounter_)
                var.put('CTRGladman', var.get('CryptoJS').get('lib').get('BlockCipherMode').callprop('extend'))
                pass
                pass
                @Js
                def PyJs_processBlock_2026_(words, offset, this, arguments, var=var):
                    var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, 'processBlock':PyJs_processBlock_2026_}, var)
                    var.registers(['words', 'counter', 'iv', 'blockSize', 'i', 'keystream', 'cipher', 'offset'])
                    var.put('cipher', var.get(u"this").get('_cipher'))
                    var.put('blockSize', var.get('cipher').get('blockSize'))
                    var.put('iv', var.get(u"this").get('_iv'))
                    var.put('counter', var.get(u"this").get('_counter'))
                    if var.get('iv'):
                        var.put('counter', var.get(u"this").put('_counter', var.get('iv').callprop('slice', Js(0.0))))
                        var.get(u"this").put('_iv', var.get('undefined'))
                    var.get('incCounter')(var.get('counter'))
                    var.put('keystream', var.get('counter').callprop('slice', Js(0.0)))
                    var.get('cipher').callprop('encryptBlock', var.get('keystream'), Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('blockSize')):
                        try:
                            var.get('words').put((var.get('offset')+var.get('i')), var.get('keystream').get(var.get('i')), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs_processBlock_2026_._set_name('processBlock')
                var.put('Encryptor', var.get('CTRGladman').put('Encryptor', var.get('CTRGladman').callprop('extend', Js({'processBlock':PyJs_processBlock_2026_}))))
                var.get('CTRGladman').put('Decryptor', var.get('Encryptor'))
                return var.get('CTRGladman')
            PyJs_anonymous_2025_._set_name('anonymous')
            var.get('CryptoJS').get('mode').put('CTRGladman', PyJs_anonymous_2025_())
            return var.get('CryptoJS').get('mode').get('CTRGladman')
        PyJs_anonymous_2024_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2027_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2027_._set_name('anonymous')
        PyJs_anonymous_2027_(var.get(u"this"), PyJs_anonymous_2024_)
    PyJs_anonymous_2023_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2028_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2029_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2030_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['CTR', 'Encryptor'])
                var.put('CTR', var.get('CryptoJS').get('lib').get('BlockCipherMode').callprop('extend'))
                @Js
                def PyJs_processBlock_2031_(words, offset, this, arguments, var=var):
                    var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, 'processBlock':PyJs_processBlock_2031_}, var)
                    var.registers(['words', 'counter', 'iv', 'blockSize', 'i', 'keystream', 'cipher', 'offset'])
                    var.put('cipher', var.get(u"this").get('_cipher'))
                    var.put('blockSize', var.get('cipher').get('blockSize'))
                    var.put('iv', var.get(u"this").get('_iv'))
                    var.put('counter', var.get(u"this").get('_counter'))
                    if var.get('iv'):
                        var.put('counter', var.get(u"this").put('_counter', var.get('iv').callprop('slice', Js(0.0))))
                        var.get(u"this").put('_iv', var.get('undefined'))
                    var.put('keystream', var.get('counter').callprop('slice', Js(0.0)))
                    var.get('cipher').callprop('encryptBlock', var.get('keystream'), Js(0.0))
                    var.get('counter').put((var.get('blockSize')-Js(1.0)), ((var.get('counter').get((var.get('blockSize')-Js(1.0)))+Js(1.0))|Js(0.0)))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('blockSize')):
                        try:
                            var.get('words').put((var.get('offset')+var.get('i')), var.get('keystream').get(var.get('i')), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs_processBlock_2031_._set_name('processBlock')
                var.put('Encryptor', var.get('CTR').put('Encryptor', var.get('CTR').callprop('extend', Js({'processBlock':PyJs_processBlock_2031_}))))
                var.get('CTR').put('Decryptor', var.get('Encryptor'))
                return var.get('CTR')
            PyJs_anonymous_2030_._set_name('anonymous')
            var.get('CryptoJS').get('mode').put('CTR', PyJs_anonymous_2030_())
            return var.get('CryptoJS').get('mode').get('CTR')
        PyJs_anonymous_2029_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2032_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2032_._set_name('anonymous')
        PyJs_anonymous_2032_(var.get(u"this"), PyJs_anonymous_2029_)
    PyJs_anonymous_2028_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2033_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2034_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2035_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['ECB'])
                var.put('ECB', var.get('CryptoJS').get('lib').get('BlockCipherMode').callprop('extend'))
                @Js
                def PyJs_processBlock_2036_(words, offset, this, arguments, var=var):
                    var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, 'processBlock':PyJs_processBlock_2036_}, var)
                    var.registers(['words', 'offset'])
                    var.get(u"this").get('_cipher').callprop('encryptBlock', var.get('words'), var.get('offset'))
                PyJs_processBlock_2036_._set_name('processBlock')
                var.get('ECB').put('Encryptor', var.get('ECB').callprop('extend', Js({'processBlock':PyJs_processBlock_2036_})))
                @Js
                def PyJs_processBlock_2037_(words, offset, this, arguments, var=var):
                    var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, 'processBlock':PyJs_processBlock_2037_}, var)
                    var.registers(['words', 'offset'])
                    var.get(u"this").get('_cipher').callprop('decryptBlock', var.get('words'), var.get('offset'))
                PyJs_processBlock_2037_._set_name('processBlock')
                var.get('ECB').put('Decryptor', var.get('ECB').callprop('extend', Js({'processBlock':PyJs_processBlock_2037_})))
                return var.get('ECB')
            PyJs_anonymous_2035_._set_name('anonymous')
            var.get('CryptoJS').get('mode').put('ECB', PyJs_anonymous_2035_())
            return var.get('CryptoJS').get('mode').get('ECB')
        PyJs_anonymous_2034_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2038_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2038_._set_name('anonymous')
        PyJs_anonymous_2038_(var.get(u"this"), PyJs_anonymous_2034_)
    PyJs_anonymous_2033_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2039_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2040_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2041_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Encryptor', 'OFB'])
                var.put('OFB', var.get('CryptoJS').get('lib').get('BlockCipherMode').callprop('extend'))
                @Js
                def PyJs_processBlock_2042_(words, offset, this, arguments, var=var):
                    var = Scope({'words':words, 'offset':offset, 'this':this, 'arguments':arguments, 'processBlock':PyJs_processBlock_2042_}, var)
                    var.registers(['words', 'iv', 'blockSize', 'i', 'keystream', 'cipher', 'offset'])
                    var.put('cipher', var.get(u"this").get('_cipher'))
                    var.put('blockSize', var.get('cipher').get('blockSize'))
                    var.put('iv', var.get(u"this").get('_iv'))
                    var.put('keystream', var.get(u"this").get('_keystream'))
                    if var.get('iv'):
                        var.put('keystream', var.get(u"this").put('_keystream', var.get('iv').callprop('slice', Js(0.0))))
                        var.get(u"this").put('_iv', var.get('undefined'))
                    var.get('cipher').callprop('encryptBlock', var.get('keystream'), Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('blockSize')):
                        try:
                            var.get('words').put((var.get('offset')+var.get('i')), var.get('keystream').get(var.get('i')), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs_processBlock_2042_._set_name('processBlock')
                var.put('Encryptor', var.get('OFB').put('Encryptor', var.get('OFB').callprop('extend', Js({'processBlock':PyJs_processBlock_2042_}))))
                var.get('OFB').put('Decryptor', var.get('Encryptor'))
                return var.get('OFB')
            PyJs_anonymous_2041_._set_name('anonymous')
            var.get('CryptoJS').get('mode').put('OFB', PyJs_anonymous_2041_())
            return var.get('CryptoJS').get('mode').get('OFB')
        PyJs_anonymous_2040_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2043_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2043_._set_name('anonymous')
        PyJs_anonymous_2043_(var.get(u"this"), PyJs_anonymous_2040_)
    PyJs_anonymous_2039_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2044_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2045_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_pad_2046_(data, blockSize, this, arguments, var=var):
                var = Scope({'data':data, 'blockSize':blockSize, 'this':this, 'arguments':arguments, 'pad':PyJs_pad_2046_}, var)
                var.registers(['dataSigBytes', 'lastBytePos', 'blockSizeBytes', 'blockSize', 'nPaddingBytes', 'data'])
                var.put('dataSigBytes', var.get('data').get('sigBytes'))
                var.put('blockSizeBytes', (var.get('blockSize')*Js(4.0)))
                var.put('nPaddingBytes', (var.get('blockSizeBytes')-(var.get('dataSigBytes')%var.get('blockSizeBytes'))))
                var.put('lastBytePos', ((var.get('dataSigBytes')+var.get('nPaddingBytes'))-Js(1.0)))
                var.get('data').callprop('clamp')
                var.get('data').get('words').put(PyJsBshift(var.get('lastBytePos'),Js(2.0)), (var.get('nPaddingBytes')<<(Js(24.0)-((var.get('lastBytePos')%Js(4.0))*Js(8.0)))), '|')
                var.get('data').put('sigBytes', var.get('nPaddingBytes'), '+')
            PyJs_pad_2046_._set_name('pad')
            @Js
            def PyJs_unpad_2047_(data, this, arguments, var=var):
                var = Scope({'data':data, 'this':this, 'arguments':arguments, 'unpad':PyJs_unpad_2047_}, var)
                var.registers(['nPaddingBytes', 'data'])
                var.put('nPaddingBytes', (var.get('data').get('words').get(PyJsBshift((var.get('data').get('sigBytes')-Js(1.0)),Js(2.0)))&Js(255)))
                var.get('data').put('sigBytes', var.get('nPaddingBytes'), '-')
            PyJs_unpad_2047_._set_name('unpad')
            var.get('CryptoJS').get('pad').put('AnsiX923', Js({'pad':PyJs_pad_2046_,'unpad':PyJs_unpad_2047_}))
            return var.get('CryptoJS').get('pad').get('Ansix923')
        PyJs_anonymous_2045_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2048_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2048_._set_name('anonymous')
        PyJs_anonymous_2048_(var.get(u"this"), PyJs_anonymous_2045_)
    PyJs_anonymous_2044_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2049_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2050_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_pad_2051_(data, blockSize, this, arguments, var=var):
                var = Scope({'data':data, 'blockSize':blockSize, 'this':this, 'arguments':arguments, 'pad':PyJs_pad_2051_}, var)
                var.registers(['nPaddingBytes', 'data', 'blockSizeBytes', 'blockSize'])
                var.put('blockSizeBytes', (var.get('blockSize')*Js(4.0)))
                var.put('nPaddingBytes', (var.get('blockSizeBytes')-(var.get('data').get('sigBytes')%var.get('blockSizeBytes'))))
                var.get('data').callprop('concat', var.get('CryptoJS').get('lib').get('WordArray').callprop('random', (var.get('nPaddingBytes')-Js(1.0)))).callprop('concat', var.get('CryptoJS').get('lib').get('WordArray').callprop('create', Js([(var.get('nPaddingBytes')<<Js(24.0))]), Js(1.0)))
            PyJs_pad_2051_._set_name('pad')
            @Js
            def PyJs_unpad_2052_(data, this, arguments, var=var):
                var = Scope({'data':data, 'this':this, 'arguments':arguments, 'unpad':PyJs_unpad_2052_}, var)
                var.registers(['nPaddingBytes', 'data'])
                var.put('nPaddingBytes', (var.get('data').get('words').get(PyJsBshift((var.get('data').get('sigBytes')-Js(1.0)),Js(2.0)))&Js(255)))
                var.get('data').put('sigBytes', var.get('nPaddingBytes'), '-')
            PyJs_unpad_2052_._set_name('unpad')
            var.get('CryptoJS').get('pad').put('Iso10126', Js({'pad':PyJs_pad_2051_,'unpad':PyJs_unpad_2052_}))
            return var.get('CryptoJS').get('pad').get('Iso10126')
        PyJs_anonymous_2050_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2053_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2053_._set_name('anonymous')
        PyJs_anonymous_2053_(var.get(u"this"), PyJs_anonymous_2050_)
    PyJs_anonymous_2049_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2054_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2055_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_pad_2056_(data, blockSize, this, arguments, var=var):
                var = Scope({'data':data, 'blockSize':blockSize, 'this':this, 'arguments':arguments, 'pad':PyJs_pad_2056_}, var)
                var.registers(['data', 'blockSize'])
                var.get('data').callprop('concat', var.get('CryptoJS').get('lib').get('WordArray').callprop('create', Js([Js(2147483648)]), Js(1.0)))
                var.get('CryptoJS').get('pad').get('ZeroPadding').callprop('pad', var.get('data'), var.get('blockSize'))
            PyJs_pad_2056_._set_name('pad')
            @Js
            def PyJs_unpad_2057_(data, this, arguments, var=var):
                var = Scope({'data':data, 'this':this, 'arguments':arguments, 'unpad':PyJs_unpad_2057_}, var)
                var.registers(['data'])
                var.get('CryptoJS').get('pad').get('ZeroPadding').callprop('unpad', var.get('data'))
                (var.get('data').put('sigBytes',Js(var.get('data').get('sigBytes').to_number())-Js(1))+Js(1))
            PyJs_unpad_2057_._set_name('unpad')
            var.get('CryptoJS').get('pad').put('Iso97971', Js({'pad':PyJs_pad_2056_,'unpad':PyJs_unpad_2057_}))
            return var.get('CryptoJS').get('pad').get('Iso97971')
        PyJs_anonymous_2055_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2058_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2058_._set_name('anonymous')
        PyJs_anonymous_2058_(var.get(u"this"), PyJs_anonymous_2055_)
    PyJs_anonymous_2054_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2059_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2060_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_pad_2061_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'pad':PyJs_pad_2061_}, var)
                var.registers([])
                pass
            PyJs_pad_2061_._set_name('pad')
            @Js
            def PyJs_unpad_2062_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'unpad':PyJs_unpad_2062_}, var)
                var.registers([])
                pass
            PyJs_unpad_2062_._set_name('unpad')
            var.get('CryptoJS').get('pad').put('NoPadding', Js({'pad':PyJs_pad_2061_,'unpad':PyJs_unpad_2062_}))
            return var.get('CryptoJS').get('pad').get('NoPadding')
        PyJs_anonymous_2060_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2063_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2063_._set_name('anonymous')
        PyJs_anonymous_2063_(var.get(u"this"), PyJs_anonymous_2060_)
    PyJs_anonymous_2059_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2064_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2065_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_pad_2066_(data, blockSize, this, arguments, var=var):
                var = Scope({'data':data, 'blockSize':blockSize, 'this':this, 'arguments':arguments, 'pad':PyJs_pad_2066_}, var)
                var.registers(['data', 'blockSizeBytes', 'blockSize'])
                var.put('blockSizeBytes', (var.get('blockSize')*Js(4.0)))
                var.get('data').callprop('clamp')
                var.get('data').put('sigBytes', (var.get('blockSizeBytes')-((var.get('data').get('sigBytes')%var.get('blockSizeBytes')) or var.get('blockSizeBytes'))), '+')
            PyJs_pad_2066_._set_name('pad')
            @Js
            def PyJs_unpad_2067_(data, this, arguments, var=var):
                var = Scope({'data':data, 'this':this, 'arguments':arguments, 'unpad':PyJs_unpad_2067_}, var)
                var.registers(['dataWords', 'i', 'data'])
                var.put('dataWords', var.get('data').get('words'))
                var.put('i', (var.get('data').get('sigBytes')-Js(1.0)))
                #for JS loop
                var.put('i', (var.get('data').get('sigBytes')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        if (PyJsBshift(var.get('dataWords').get(PyJsBshift(var.get('i'),Js(2.0))),(Js(24.0)-((var.get('i')%Js(4.0))*Js(8.0))))&Js(255)):
                            var.get('data').put('sigBytes', (var.get('i')+Js(1.0)))
                            break
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            PyJs_unpad_2067_._set_name('unpad')
            var.get('CryptoJS').get('pad').put('ZeroPadding', Js({'pad':PyJs_pad_2066_,'unpad':PyJs_unpad_2067_}))
            return var.get('CryptoJS').get('pad').get('ZeroPadding')
        PyJs_anonymous_2065_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2068_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2068_._set_name('anonymous')
        PyJs_anonymous_2068_(var.get(u"this"), PyJs_anonymous_2065_)
    PyJs_anonymous_2064_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2069_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2070_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2071_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['WordArray', 'C', 'Base', 'C_lib', 'SHA1', 'C_algo', 'PBKDF2', 'HMAC'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('Base', var.get('C_lib').get('Base'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('SHA1', var.get('C_algo').get('SHA1'))
                var.put('HMAC', var.get('C_algo').get('HMAC'))
                @Js
                def PyJs_init_2072_(cfg, this, arguments, var=var):
                    var = Scope({'cfg':cfg, 'this':this, 'arguments':arguments, 'init':PyJs_init_2072_}, var)
                    var.registers(['cfg'])
                    var.get(u"this").put('cfg', var.get(u"this").get('cfg').callprop('extend', var.get('cfg')))
                PyJs_init_2072_._set_name('init')
                @Js
                def PyJs_compute_2073_(password, salt, this, arguments, var=var):
                    var = Scope({'password':password, 'salt':salt, 'this':this, 'arguments':arguments, 'compute':PyJs_compute_2073_}, var)
                    var.registers(['blockWordsLength', 'hmac', 'blockIndexWords', 'j', 'i', 'password', 'keySize', 'intermediate', 'derivedKeyWords', 'cfg', 'derivedKey', 'block', 'intermediateWords', 'salt', 'blockWords', 'blockIndex', 'iterations'])
                    var.put('cfg', var.get(u"this").get('cfg'))
                    var.put('hmac', var.get('HMAC').callprop('create', var.get('cfg').get('hasher'), var.get('password')))
                    var.put('derivedKey', var.get('WordArray').callprop('create'))
                    var.put('blockIndex', var.get('WordArray').callprop('create', Js([Js(1)])))
                    var.put('derivedKeyWords', var.get('derivedKey').get('words'))
                    var.put('blockIndexWords', var.get('blockIndex').get('words'))
                    var.put('keySize', var.get('cfg').get('keySize'))
                    var.put('iterations', var.get('cfg').get('iterations'))
                    while (var.get('derivedKeyWords').get('length')<var.get('keySize')):
                        var.put('block', var.get('hmac').callprop('update', var.get('salt')).callprop('finalize', var.get('blockIndex')))
                        var.get('hmac').callprop('reset')
                        var.put('blockWords', var.get('block').get('words'))
                        var.put('blockWordsLength', var.get('blockWords').get('length'))
                        var.put('intermediate', var.get('block'))
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<var.get('iterations')):
                            try:
                                var.put('intermediate', var.get('hmac').callprop('finalize', var.get('intermediate')))
                                var.get('hmac').callprop('reset')
                                var.put('intermediateWords', var.get('intermediate').get('words'))
                                #for JS loop
                                var.put('j', Js(0.0))
                                while (var.get('j')<var.get('blockWordsLength')):
                                    try:
                                        var.get('blockWords').put(var.get('j'), var.get('intermediateWords').get(var.get('j')), '^')
                                    finally:
                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                        var.get('derivedKey').callprop('concat', var.get('block'))
                        (var.get('blockIndexWords').put('0',Js(var.get('blockIndexWords').get('0').to_number())+Js(1))-Js(1))
                    var.get('derivedKey').put('sigBytes', (var.get('keySize')*Js(4.0)))
                    return var.get('derivedKey')
                PyJs_compute_2073_._set_name('compute')
                var.put('PBKDF2', var.get('C_algo').put('PBKDF2', var.get('Base').callprop('extend', Js({'cfg':var.get('Base').callprop('extend', Js({'keySize':(Js(128.0)/Js(32.0)),'hasher':var.get('SHA1'),'iterations':Js(1.0)})),'init':PyJs_init_2072_,'compute':PyJs_compute_2073_}))))
                @Js
                def PyJs_anonymous_2074_(password, salt, cfg, this, arguments, var=var):
                    var = Scope({'password':password, 'salt':salt, 'cfg':cfg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['salt', 'cfg', 'password'])
                    return var.get('PBKDF2').callprop('create', var.get('cfg')).callprop('compute', var.get('password'), var.get('salt'))
                PyJs_anonymous_2074_._set_name('anonymous')
                var.get('C').put('PBKDF2', PyJs_anonymous_2074_)
            PyJs_anonymous_2071_._set_name('anonymous')
            PyJs_anonymous_2071_()
            return var.get('CryptoJS').get('PBKDF2')
        PyJs_anonymous_2070_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2075_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./sha1')), var.get('require')(Js('./hmac')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./sha1'), Js('./hmac')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2075_._set_name('anonymous')
        PyJs_anonymous_2075_(var.get(u"this"), PyJs_anonymous_2070_)
    PyJs_anonymous_2069_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2076_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2077_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2078_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['S', 'C', 'G', 'RabbitLegacy', 'C_lib', 'C_', 'C_algo', 'StreamCipher', 'nextState'])
                @Js
                def PyJsHoisted_nextState_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['C', 'gx', 'i', 'gl', 'ga', 'X', 'gb', 'gh'])
                    var.put('X', var.get(u"this").get('_X'))
                    var.put('C', var.get(u"this").get('_C'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(8.0)):
                        try:
                            var.get('C_').put(var.get('i'), var.get('C').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('C').put('0', (((var.get('C').get('0')+Js(1295307597))+var.get(u"this").get('_b'))|Js(0.0)))
                    var.get('C').put('1', (((var.get('C').get('1')+Js(3545052371))+(Js(1.0) if (PyJsBshift(var.get('C').get('0'),Js(0.0))<PyJsBshift(var.get('C_').get('0'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('2', (((var.get('C').get('2')+Js(886263092))+(Js(1.0) if (PyJsBshift(var.get('C').get('1'),Js(0.0))<PyJsBshift(var.get('C_').get('1'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('3', (((var.get('C').get('3')+Js(1295307597))+(Js(1.0) if (PyJsBshift(var.get('C').get('2'),Js(0.0))<PyJsBshift(var.get('C_').get('2'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('4', (((var.get('C').get('4')+Js(3545052371))+(Js(1.0) if (PyJsBshift(var.get('C').get('3'),Js(0.0))<PyJsBshift(var.get('C_').get('3'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('5', (((var.get('C').get('5')+Js(886263092))+(Js(1.0) if (PyJsBshift(var.get('C').get('4'),Js(0.0))<PyJsBshift(var.get('C_').get('4'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('6', (((var.get('C').get('6')+Js(1295307597))+(Js(1.0) if (PyJsBshift(var.get('C').get('5'),Js(0.0))<PyJsBshift(var.get('C_').get('5'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('7', (((var.get('C').get('7')+Js(3545052371))+(Js(1.0) if (PyJsBshift(var.get('C').get('6'),Js(0.0))<PyJsBshift(var.get('C_').get('6'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get(u"this").put('_b', (Js(1.0) if (PyJsBshift(var.get('C').get('7'),Js(0.0))<PyJsBshift(var.get('C_').get('7'),Js(0.0))) else Js(0.0)))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(8.0)):
                        try:
                            var.put('gx', (var.get('X').get(var.get('i'))+var.get('C').get(var.get('i'))))
                            var.put('ga', (var.get('gx')&Js(65535)))
                            var.put('gb', PyJsBshift(var.get('gx'),Js(16.0)))
                            var.put('gh', (PyJsBshift((PyJsBshift((var.get('ga')*var.get('ga')),Js(17.0))+(var.get('ga')*var.get('gb'))),Js(15.0))+(var.get('gb')*var.get('gb'))))
                            var.put('gl', ((((var.get('gx')&Js(4294901760))*var.get('gx'))|Js(0.0))+(((var.get('gx')&Js(65535))*var.get('gx'))|Js(0.0))))
                            var.get('G').put(var.get('i'), (var.get('gh')^var.get('gl')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('X').put('0', (((var.get('G').get('0')+((var.get('G').get('7')<<Js(16.0))|PyJsBshift(var.get('G').get('7'),Js(16.0))))+((var.get('G').get('6')<<Js(16.0))|PyJsBshift(var.get('G').get('6'),Js(16.0))))|Js(0.0)))
                    var.get('X').put('1', (((var.get('G').get('1')+((var.get('G').get('0')<<Js(8.0))|PyJsBshift(var.get('G').get('0'),Js(24.0))))+var.get('G').get('7'))|Js(0.0)))
                    var.get('X').put('2', (((var.get('G').get('2')+((var.get('G').get('1')<<Js(16.0))|PyJsBshift(var.get('G').get('1'),Js(16.0))))+((var.get('G').get('0')<<Js(16.0))|PyJsBshift(var.get('G').get('0'),Js(16.0))))|Js(0.0)))
                    var.get('X').put('3', (((var.get('G').get('3')+((var.get('G').get('2')<<Js(8.0))|PyJsBshift(var.get('G').get('2'),Js(24.0))))+var.get('G').get('1'))|Js(0.0)))
                    var.get('X').put('4', (((var.get('G').get('4')+((var.get('G').get('3')<<Js(16.0))|PyJsBshift(var.get('G').get('3'),Js(16.0))))+((var.get('G').get('2')<<Js(16.0))|PyJsBshift(var.get('G').get('2'),Js(16.0))))|Js(0.0)))
                    var.get('X').put('5', (((var.get('G').get('5')+((var.get('G').get('4')<<Js(8.0))|PyJsBshift(var.get('G').get('4'),Js(24.0))))+var.get('G').get('3'))|Js(0.0)))
                    var.get('X').put('6', (((var.get('G').get('6')+((var.get('G').get('5')<<Js(16.0))|PyJsBshift(var.get('G').get('5'),Js(16.0))))+((var.get('G').get('4')<<Js(16.0))|PyJsBshift(var.get('G').get('4'),Js(16.0))))|Js(0.0)))
                    var.get('X').put('7', (((var.get('G').get('7')+((var.get('G').get('6')<<Js(8.0))|PyJsBshift(var.get('G').get('6'),Js(24.0))))+var.get('G').get('5'))|Js(0.0)))
                PyJsHoisted_nextState_.func_name = 'nextState'
                var.put('nextState', PyJsHoisted_nextState_)
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('StreamCipher', var.get('C_lib').get('StreamCipher'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('S', Js([]))
                var.put('C_', Js([]))
                var.put('G', Js([]))
                @Js
                def PyJs__doReset_2079_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2079_}, var)
                    var.registers(['i1', 'C', 'i3', 'iv', 'K', 'i', 'IV', 'IV_0', 'i0', 'X', 'i2', 'IV_1'])
                    var.put('K', var.get(u"this").get('_key').get('words'))
                    var.put('iv', var.get(u"this").get('cfg').get('iv'))
                    def PyJs_LONG_2080_(var=var):
                        return var.get(u"this").put('_X', Js([var.get('K').get('0'), ((var.get('K').get('3')<<Js(16.0))|PyJsBshift(var.get('K').get('2'),Js(16.0))), var.get('K').get('1'), ((var.get('K').get('0')<<Js(16.0))|PyJsBshift(var.get('K').get('3'),Js(16.0))), var.get('K').get('2'), ((var.get('K').get('1')<<Js(16.0))|PyJsBshift(var.get('K').get('0'),Js(16.0))), var.get('K').get('3'), ((var.get('K').get('2')<<Js(16.0))|PyJsBshift(var.get('K').get('1'),Js(16.0)))]))
                    var.put('X', PyJs_LONG_2080_())
                    def PyJs_LONG_2081_(var=var):
                        return var.get(u"this").put('_C', Js([((var.get('K').get('2')<<Js(16.0))|PyJsBshift(var.get('K').get('2'),Js(16.0))), ((var.get('K').get('0')&Js(4294901760))|(var.get('K').get('1')&Js(65535))), ((var.get('K').get('3')<<Js(16.0))|PyJsBshift(var.get('K').get('3'),Js(16.0))), ((var.get('K').get('1')&Js(4294901760))|(var.get('K').get('2')&Js(65535))), ((var.get('K').get('0')<<Js(16.0))|PyJsBshift(var.get('K').get('0'),Js(16.0))), ((var.get('K').get('2')&Js(4294901760))|(var.get('K').get('3')&Js(65535))), ((var.get('K').get('1')<<Js(16.0))|PyJsBshift(var.get('K').get('1'),Js(16.0))), ((var.get('K').get('3')&Js(4294901760))|(var.get('K').get('0')&Js(65535)))]))
                    var.put('C', PyJs_LONG_2081_())
                    var.get(u"this").put('_b', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(4.0)):
                        try:
                            var.get('nextState').callprop('call', var.get(u"this"))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(8.0)):
                        try:
                            var.get('C').put(var.get('i'), var.get('X').get(((var.get('i')+Js(4.0))&Js(7.0))), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    if var.get('iv'):
                        var.put('IV', var.get('iv').get('words'))
                        var.put('IV_0', var.get('IV').get('0'))
                        var.put('IV_1', var.get('IV').get('1'))
                        var.put('i0', ((((var.get('IV_0')<<Js(8.0))|PyJsBshift(var.get('IV_0'),Js(24.0)))&Js(16711935))|(((var.get('IV_0')<<Js(24.0))|PyJsBshift(var.get('IV_0'),Js(8.0)))&Js(4278255360))))
                        var.put('i2', ((((var.get('IV_1')<<Js(8.0))|PyJsBshift(var.get('IV_1'),Js(24.0)))&Js(16711935))|(((var.get('IV_1')<<Js(24.0))|PyJsBshift(var.get('IV_1'),Js(8.0)))&Js(4278255360))))
                        var.put('i1', (PyJsBshift(var.get('i0'),Js(16.0))|(var.get('i2')&Js(4294901760))))
                        var.put('i3', ((var.get('i2')<<Js(16.0))|(var.get('i0')&Js(65535))))
                        var.get('C').put('0', var.get('i0'), '^')
                        var.get('C').put('1', var.get('i1'), '^')
                        var.get('C').put('2', var.get('i2'), '^')
                        var.get('C').put('3', var.get('i3'), '^')
                        var.get('C').put('4', var.get('i0'), '^')
                        var.get('C').put('5', var.get('i1'), '^')
                        var.get('C').put('6', var.get('i2'), '^')
                        var.get('C').put('7', var.get('i3'), '^')
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<Js(4.0)):
                            try:
                                var.get('nextState').callprop('call', var.get(u"this"))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs__doReset_2079_._set_name('_doReset')
                @Js
                def PyJs__doProcessBlock_2082_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_2082_}, var)
                    var.registers(['X', 'i', 'M', 'offset'])
                    var.put('X', var.get(u"this").get('_X'))
                    var.get('nextState').callprop('call', var.get(u"this"))
                    var.get('S').put('0', ((var.get('X').get('0')^PyJsBshift(var.get('X').get('5'),Js(16.0)))^(var.get('X').get('3')<<Js(16.0))))
                    var.get('S').put('1', ((var.get('X').get('2')^PyJsBshift(var.get('X').get('7'),Js(16.0)))^(var.get('X').get('5')<<Js(16.0))))
                    var.get('S').put('2', ((var.get('X').get('4')^PyJsBshift(var.get('X').get('1'),Js(16.0)))^(var.get('X').get('7')<<Js(16.0))))
                    var.get('S').put('3', ((var.get('X').get('6')^PyJsBshift(var.get('X').get('3'),Js(16.0)))^(var.get('X').get('1')<<Js(16.0))))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(4.0)):
                        try:
                            var.get('S').put(var.get('i'), ((((var.get('S').get(var.get('i'))<<Js(8.0))|PyJsBshift(var.get('S').get(var.get('i')),Js(24.0)))&Js(16711935))|(((var.get('S').get(var.get('i'))<<Js(24.0))|PyJsBshift(var.get('S').get(var.get('i')),Js(8.0)))&Js(4278255360))))
                            var.get('M').put((var.get('offset')+var.get('i')), var.get('S').get(var.get('i')), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs__doProcessBlock_2082_._set_name('_doProcessBlock')
                var.put('RabbitLegacy', var.get('C_algo').put('RabbitLegacy', var.get('StreamCipher').callprop('extend', Js({'_doReset':PyJs__doReset_2079_,'_doProcessBlock':PyJs__doProcessBlock_2082_,'blockSize':(Js(128.0)/Js(32.0)),'ivSize':(Js(64.0)/Js(32.0))}))))
                pass
                var.get('C').put('RabbitLegacy', var.get('StreamCipher').callprop('_createHelper', var.get('RabbitLegacy')))
            PyJs_anonymous_2078_._set_name('anonymous')
            PyJs_anonymous_2078_()
            return var.get('CryptoJS').get('RabbitLegacy')
        PyJs_anonymous_2077_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2083_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./enc-base64')), var.get('require')(Js('./md5')), var.get('require')(Js('./evpkdf')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./enc-base64'), Js('./md5'), Js('./evpkdf'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2083_._set_name('anonymous')
        PyJs_anonymous_2083_(var.get(u"this"), PyJs_anonymous_2077_)
    PyJs_anonymous_2076_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2084_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2085_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2086_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['S', 'C', 'G', 'Rabbit', 'C_lib', 'C_', 'C_algo', 'StreamCipher', 'nextState'])
                @Js
                def PyJsHoisted_nextState_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['C', 'gx', 'i', 'gl', 'ga', 'X', 'gb', 'gh'])
                    var.put('X', var.get(u"this").get('_X'))
                    var.put('C', var.get(u"this").get('_C'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(8.0)):
                        try:
                            var.get('C_').put(var.get('i'), var.get('C').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('C').put('0', (((var.get('C').get('0')+Js(1295307597))+var.get(u"this").get('_b'))|Js(0.0)))
                    var.get('C').put('1', (((var.get('C').get('1')+Js(3545052371))+(Js(1.0) if (PyJsBshift(var.get('C').get('0'),Js(0.0))<PyJsBshift(var.get('C_').get('0'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('2', (((var.get('C').get('2')+Js(886263092))+(Js(1.0) if (PyJsBshift(var.get('C').get('1'),Js(0.0))<PyJsBshift(var.get('C_').get('1'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('3', (((var.get('C').get('3')+Js(1295307597))+(Js(1.0) if (PyJsBshift(var.get('C').get('2'),Js(0.0))<PyJsBshift(var.get('C_').get('2'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('4', (((var.get('C').get('4')+Js(3545052371))+(Js(1.0) if (PyJsBshift(var.get('C').get('3'),Js(0.0))<PyJsBshift(var.get('C_').get('3'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('5', (((var.get('C').get('5')+Js(886263092))+(Js(1.0) if (PyJsBshift(var.get('C').get('4'),Js(0.0))<PyJsBshift(var.get('C_').get('4'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('6', (((var.get('C').get('6')+Js(1295307597))+(Js(1.0) if (PyJsBshift(var.get('C').get('5'),Js(0.0))<PyJsBshift(var.get('C_').get('5'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get('C').put('7', (((var.get('C').get('7')+Js(3545052371))+(Js(1.0) if (PyJsBshift(var.get('C').get('6'),Js(0.0))<PyJsBshift(var.get('C_').get('6'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                    var.get(u"this").put('_b', (Js(1.0) if (PyJsBshift(var.get('C').get('7'),Js(0.0))<PyJsBshift(var.get('C_').get('7'),Js(0.0))) else Js(0.0)))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(8.0)):
                        try:
                            var.put('gx', (var.get('X').get(var.get('i'))+var.get('C').get(var.get('i'))))
                            var.put('ga', (var.get('gx')&Js(65535)))
                            var.put('gb', PyJsBshift(var.get('gx'),Js(16.0)))
                            var.put('gh', (PyJsBshift((PyJsBshift((var.get('ga')*var.get('ga')),Js(17.0))+(var.get('ga')*var.get('gb'))),Js(15.0))+(var.get('gb')*var.get('gb'))))
                            var.put('gl', ((((var.get('gx')&Js(4294901760))*var.get('gx'))|Js(0.0))+(((var.get('gx')&Js(65535))*var.get('gx'))|Js(0.0))))
                            var.get('G').put(var.get('i'), (var.get('gh')^var.get('gl')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('X').put('0', (((var.get('G').get('0')+((var.get('G').get('7')<<Js(16.0))|PyJsBshift(var.get('G').get('7'),Js(16.0))))+((var.get('G').get('6')<<Js(16.0))|PyJsBshift(var.get('G').get('6'),Js(16.0))))|Js(0.0)))
                    var.get('X').put('1', (((var.get('G').get('1')+((var.get('G').get('0')<<Js(8.0))|PyJsBshift(var.get('G').get('0'),Js(24.0))))+var.get('G').get('7'))|Js(0.0)))
                    var.get('X').put('2', (((var.get('G').get('2')+((var.get('G').get('1')<<Js(16.0))|PyJsBshift(var.get('G').get('1'),Js(16.0))))+((var.get('G').get('0')<<Js(16.0))|PyJsBshift(var.get('G').get('0'),Js(16.0))))|Js(0.0)))
                    var.get('X').put('3', (((var.get('G').get('3')+((var.get('G').get('2')<<Js(8.0))|PyJsBshift(var.get('G').get('2'),Js(24.0))))+var.get('G').get('1'))|Js(0.0)))
                    var.get('X').put('4', (((var.get('G').get('4')+((var.get('G').get('3')<<Js(16.0))|PyJsBshift(var.get('G').get('3'),Js(16.0))))+((var.get('G').get('2')<<Js(16.0))|PyJsBshift(var.get('G').get('2'),Js(16.0))))|Js(0.0)))
                    var.get('X').put('5', (((var.get('G').get('5')+((var.get('G').get('4')<<Js(8.0))|PyJsBshift(var.get('G').get('4'),Js(24.0))))+var.get('G').get('3'))|Js(0.0)))
                    var.get('X').put('6', (((var.get('G').get('6')+((var.get('G').get('5')<<Js(16.0))|PyJsBshift(var.get('G').get('5'),Js(16.0))))+((var.get('G').get('4')<<Js(16.0))|PyJsBshift(var.get('G').get('4'),Js(16.0))))|Js(0.0)))
                    var.get('X').put('7', (((var.get('G').get('7')+((var.get('G').get('6')<<Js(8.0))|PyJsBshift(var.get('G').get('6'),Js(24.0))))+var.get('G').get('5'))|Js(0.0)))
                PyJsHoisted_nextState_.func_name = 'nextState'
                var.put('nextState', PyJsHoisted_nextState_)
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('StreamCipher', var.get('C_lib').get('StreamCipher'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('S', Js([]))
                var.put('C_', Js([]))
                var.put('G', Js([]))
                @Js
                def PyJs__doReset_2087_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2087_}, var)
                    var.registers(['i1', 'C', 'i3', 'iv', 'K', 'i', 'IV', 'IV_0', 'i0', 'X', 'i2', 'IV_1'])
                    var.put('K', var.get(u"this").get('_key').get('words'))
                    var.put('iv', var.get(u"this").get('cfg').get('iv'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(4.0)):
                        try:
                            var.get('K').put(var.get('i'), ((((var.get('K').get(var.get('i'))<<Js(8.0))|PyJsBshift(var.get('K').get(var.get('i')),Js(24.0)))&Js(16711935))|(((var.get('K').get(var.get('i'))<<Js(24.0))|PyJsBshift(var.get('K').get(var.get('i')),Js(8.0)))&Js(4278255360))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    def PyJs_LONG_2088_(var=var):
                        return var.get(u"this").put('_X', Js([var.get('K').get('0'), ((var.get('K').get('3')<<Js(16.0))|PyJsBshift(var.get('K').get('2'),Js(16.0))), var.get('K').get('1'), ((var.get('K').get('0')<<Js(16.0))|PyJsBshift(var.get('K').get('3'),Js(16.0))), var.get('K').get('2'), ((var.get('K').get('1')<<Js(16.0))|PyJsBshift(var.get('K').get('0'),Js(16.0))), var.get('K').get('3'), ((var.get('K').get('2')<<Js(16.0))|PyJsBshift(var.get('K').get('1'),Js(16.0)))]))
                    var.put('X', PyJs_LONG_2088_())
                    def PyJs_LONG_2089_(var=var):
                        return var.get(u"this").put('_C', Js([((var.get('K').get('2')<<Js(16.0))|PyJsBshift(var.get('K').get('2'),Js(16.0))), ((var.get('K').get('0')&Js(4294901760))|(var.get('K').get('1')&Js(65535))), ((var.get('K').get('3')<<Js(16.0))|PyJsBshift(var.get('K').get('3'),Js(16.0))), ((var.get('K').get('1')&Js(4294901760))|(var.get('K').get('2')&Js(65535))), ((var.get('K').get('0')<<Js(16.0))|PyJsBshift(var.get('K').get('0'),Js(16.0))), ((var.get('K').get('2')&Js(4294901760))|(var.get('K').get('3')&Js(65535))), ((var.get('K').get('1')<<Js(16.0))|PyJsBshift(var.get('K').get('1'),Js(16.0))), ((var.get('K').get('3')&Js(4294901760))|(var.get('K').get('0')&Js(65535)))]))
                    var.put('C', PyJs_LONG_2089_())
                    var.get(u"this").put('_b', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(4.0)):
                        try:
                            var.get('nextState').callprop('call', var.get(u"this"))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(8.0)):
                        try:
                            var.get('C').put(var.get('i'), var.get('X').get(((var.get('i')+Js(4.0))&Js(7.0))), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    if var.get('iv'):
                        var.put('IV', var.get('iv').get('words'))
                        var.put('IV_0', var.get('IV').get('0'))
                        var.put('IV_1', var.get('IV').get('1'))
                        var.put('i0', ((((var.get('IV_0')<<Js(8.0))|PyJsBshift(var.get('IV_0'),Js(24.0)))&Js(16711935))|(((var.get('IV_0')<<Js(24.0))|PyJsBshift(var.get('IV_0'),Js(8.0)))&Js(4278255360))))
                        var.put('i2', ((((var.get('IV_1')<<Js(8.0))|PyJsBshift(var.get('IV_1'),Js(24.0)))&Js(16711935))|(((var.get('IV_1')<<Js(24.0))|PyJsBshift(var.get('IV_1'),Js(8.0)))&Js(4278255360))))
                        var.put('i1', (PyJsBshift(var.get('i0'),Js(16.0))|(var.get('i2')&Js(4294901760))))
                        var.put('i3', ((var.get('i2')<<Js(16.0))|(var.get('i0')&Js(65535))))
                        var.get('C').put('0', var.get('i0'), '^')
                        var.get('C').put('1', var.get('i1'), '^')
                        var.get('C').put('2', var.get('i2'), '^')
                        var.get('C').put('3', var.get('i3'), '^')
                        var.get('C').put('4', var.get('i0'), '^')
                        var.get('C').put('5', var.get('i1'), '^')
                        var.get('C').put('6', var.get('i2'), '^')
                        var.get('C').put('7', var.get('i3'), '^')
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<Js(4.0)):
                            try:
                                var.get('nextState').callprop('call', var.get(u"this"))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs__doReset_2087_._set_name('_doReset')
                @Js
                def PyJs__doProcessBlock_2090_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_2090_}, var)
                    var.registers(['X', 'i', 'M', 'offset'])
                    var.put('X', var.get(u"this").get('_X'))
                    var.get('nextState').callprop('call', var.get(u"this"))
                    var.get('S').put('0', ((var.get('X').get('0')^PyJsBshift(var.get('X').get('5'),Js(16.0)))^(var.get('X').get('3')<<Js(16.0))))
                    var.get('S').put('1', ((var.get('X').get('2')^PyJsBshift(var.get('X').get('7'),Js(16.0)))^(var.get('X').get('5')<<Js(16.0))))
                    var.get('S').put('2', ((var.get('X').get('4')^PyJsBshift(var.get('X').get('1'),Js(16.0)))^(var.get('X').get('7')<<Js(16.0))))
                    var.get('S').put('3', ((var.get('X').get('6')^PyJsBshift(var.get('X').get('3'),Js(16.0)))^(var.get('X').get('1')<<Js(16.0))))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(4.0)):
                        try:
                            var.get('S').put(var.get('i'), ((((var.get('S').get(var.get('i'))<<Js(8.0))|PyJsBshift(var.get('S').get(var.get('i')),Js(24.0)))&Js(16711935))|(((var.get('S').get(var.get('i'))<<Js(24.0))|PyJsBshift(var.get('S').get(var.get('i')),Js(8.0)))&Js(4278255360))))
                            var.get('M').put((var.get('offset')+var.get('i')), var.get('S').get(var.get('i')), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs__doProcessBlock_2090_._set_name('_doProcessBlock')
                var.put('Rabbit', var.get('C_algo').put('Rabbit', var.get('StreamCipher').callprop('extend', Js({'_doReset':PyJs__doReset_2087_,'_doProcessBlock':PyJs__doProcessBlock_2090_,'blockSize':(Js(128.0)/Js(32.0)),'ivSize':(Js(64.0)/Js(32.0))}))))
                pass
                var.get('C').put('Rabbit', var.get('StreamCipher').callprop('_createHelper', var.get('Rabbit')))
            PyJs_anonymous_2086_._set_name('anonymous')
            PyJs_anonymous_2086_()
            return var.get('CryptoJS').get('Rabbit')
        PyJs_anonymous_2085_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2091_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./enc-base64')), var.get('require')(Js('./md5')), var.get('require')(Js('./evpkdf')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./enc-base64'), Js('./md5'), Js('./evpkdf'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2091_._set_name('anonymous')
        PyJs_anonymous_2091_(var.get(u"this"), PyJs_anonymous_2085_)
    PyJs_anonymous_2084_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2092_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2093_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2094_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['C', 'RC4', 'C_lib', 'RC4Drop', 'C_algo', 'StreamCipher', 'generateKeystreamWord'])
                @Js
                def PyJsHoisted_generateKeystreamWord_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['keystreamWord', 'S', 'j', 'i', 'n', 't'])
                    var.put('S', var.get(u"this").get('_S'))
                    var.put('i', var.get(u"this").get('_i'))
                    var.put('j', var.get(u"this").get('_j'))
                    var.put('keystreamWord', Js(0.0))
                    #for JS loop
                    var.put('n', Js(0.0))
                    while (var.get('n')<Js(4.0)):
                        try:
                            var.put('i', ((var.get('i')+Js(1.0))%Js(256.0)))
                            var.put('j', ((var.get('j')+var.get('S').get(var.get('i')))%Js(256.0)))
                            var.put('t', var.get('S').get(var.get('i')))
                            var.get('S').put(var.get('i'), var.get('S').get(var.get('j')))
                            var.get('S').put(var.get('j'), var.get('t'))
                            var.put('keystreamWord', (var.get('S').get(((var.get('S').get(var.get('i'))+var.get('S').get(var.get('j')))%Js(256.0)))<<(Js(24.0)-(var.get('n')*Js(8.0)))), '|')
                        finally:
                                (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                    var.get(u"this").put('_i', var.get('i'))
                    var.get(u"this").put('_j', var.get('j'))
                    return var.get('keystreamWord')
                PyJsHoisted_generateKeystreamWord_.func_name = 'generateKeystreamWord'
                var.put('generateKeystreamWord', PyJsHoisted_generateKeystreamWord_)
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('StreamCipher', var.get('C_lib').get('StreamCipher'))
                var.put('C_algo', var.get('C').get('algo'))
                @Js
                def PyJs__doReset_2095_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2095_}, var)
                    var.registers(['S', 'j', 'i', 't', 'keyByteIndex', 'key', 'keyByte', 'keyWords', 'keySigBytes'])
                    var.put('key', var.get(u"this").get('_key'))
                    var.put('keyWords', var.get('key').get('words'))
                    var.put('keySigBytes', var.get('key').get('sigBytes'))
                    var.put('S', var.get(u"this").put('_S', Js([])))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(256.0)):
                        try:
                            var.get('S').put(var.get('i'), var.get('i'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    #for JS loop
                    var.put('i', Js(0.0))
                    var.put('j', Js(0.0))
                    while (var.get('i')<Js(256.0)):
                        try:
                            var.put('keyByteIndex', (var.get('i')%var.get('keySigBytes')))
                            var.put('keyByte', (PyJsBshift(var.get('keyWords').get(PyJsBshift(var.get('keyByteIndex'),Js(2.0))),(Js(24.0)-((var.get('keyByteIndex')%Js(4.0))*Js(8.0))))&Js(255)))
                            var.put('j', (((var.get('j')+var.get('S').get(var.get('i')))+var.get('keyByte'))%Js(256.0)))
                            var.put('t', var.get('S').get(var.get('i')))
                            var.get('S').put(var.get('i'), var.get('S').get(var.get('j')))
                            var.get('S').put(var.get('j'), var.get('t'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get(u"this").put('_i', var.get(u"this").put('_j', Js(0.0)))
                PyJs__doReset_2095_._set_name('_doReset')
                @Js
                def PyJs__doProcessBlock_2096_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_2096_}, var)
                    var.registers(['M', 'offset'])
                    var.get('M').put(var.get('offset'), var.get('generateKeystreamWord').callprop('call', var.get(u"this")), '^')
                PyJs__doProcessBlock_2096_._set_name('_doProcessBlock')
                var.put('RC4', var.get('C_algo').put('RC4', var.get('StreamCipher').callprop('extend', Js({'_doReset':PyJs__doReset_2095_,'_doProcessBlock':PyJs__doProcessBlock_2096_,'keySize':(Js(256.0)/Js(32.0)),'ivSize':Js(0.0)}))))
                pass
                var.get('C').put('RC4', var.get('StreamCipher').callprop('_createHelper', var.get('RC4')))
                @Js
                def PyJs__doReset_2097_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2097_}, var)
                    var.registers(['i'])
                    var.get('RC4').get('_doReset').callprop('call', var.get(u"this"))
                    #for JS loop
                    var.put('i', var.get(u"this").get('cfg').get('drop'))
                    while (var.get('i')>Js(0.0)):
                        try:
                            var.get('generateKeystreamWord').callprop('call', var.get(u"this"))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                PyJs__doReset_2097_._set_name('_doReset')
                var.put('RC4Drop', var.get('C_algo').put('RC4Drop', var.get('RC4').callprop('extend', Js({'cfg':var.get('RC4').get('cfg').callprop('extend', Js({'drop':Js(192.0)})),'_doReset':PyJs__doReset_2097_}))))
                var.get('C').put('RC4Drop', var.get('StreamCipher').callprop('_createHelper', var.get('RC4Drop')))
            PyJs_anonymous_2094_._set_name('anonymous')
            PyJs_anonymous_2094_()
            return var.get('CryptoJS').get('RC4')
        PyJs_anonymous_2093_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2098_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./enc-base64')), var.get('require')(Js('./md5')), var.get('require')(Js('./evpkdf')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./enc-base64'), Js('./md5'), Js('./evpkdf'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2098_._set_name('anonymous')
        PyJs_anonymous_2098_(var.get(u"this"), PyJs_anonymous_2093_)
    PyJs_anonymous_2092_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2099_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2100_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2101_(Math, this, arguments, var=var):
                var = Scope({'Math':Math, 'this':this, 'arguments':arguments}, var)
                var.registers(['WordArray', 'f4', 'C_lib', 'f2', '_zl', 'rotl', 'f5', 'C_algo', '_sl', 'C', 'f3', 'f1', '_sr', 'Math', '_hr', '_zr', 'RIPEMD160', 'Hasher', '_hl'])
                @Js
                def PyJsHoisted_f1_(x, y, z, this, arguments, var=var):
                    var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
                    var.registers(['x', 'z', 'y'])
                    return ((var.get('x')^var.get('y'))^var.get('z'))
                PyJsHoisted_f1_.func_name = 'f1'
                var.put('f1', PyJsHoisted_f1_)
                @Js
                def PyJsHoisted_f2_(x, y, z, this, arguments, var=var):
                    var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
                    var.registers(['x', 'z', 'y'])
                    return ((var.get('x')&var.get('y'))|((~var.get('x'))&var.get('z')))
                PyJsHoisted_f2_.func_name = 'f2'
                var.put('f2', PyJsHoisted_f2_)
                @Js
                def PyJsHoisted_f3_(x, y, z, this, arguments, var=var):
                    var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
                    var.registers(['x', 'z', 'y'])
                    return ((var.get('x')|(~var.get('y')))^var.get('z'))
                PyJsHoisted_f3_.func_name = 'f3'
                var.put('f3', PyJsHoisted_f3_)
                @Js
                def PyJsHoisted_f4_(x, y, z, this, arguments, var=var):
                    var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
                    var.registers(['x', 'z', 'y'])
                    return ((var.get('x')&var.get('z'))|(var.get('y')&(~var.get('z'))))
                PyJsHoisted_f4_.func_name = 'f4'
                var.put('f4', PyJsHoisted_f4_)
                @Js
                def PyJsHoisted_f5_(x, y, z, this, arguments, var=var):
                    var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
                    var.registers(['x', 'z', 'y'])
                    return (var.get('x')^(var.get('y')|(~var.get('z'))))
                PyJsHoisted_f5_.func_name = 'f5'
                var.put('f5', PyJsHoisted_f5_)
                @Js
                def PyJsHoisted_rotl_(x, n, this, arguments, var=var):
                    var = Scope({'x':x, 'n':n, 'this':this, 'arguments':arguments}, var)
                    var.registers(['x', 'n'])
                    return ((var.get('x')<<var.get('n'))|PyJsBshift(var.get('x'),(Js(32.0)-var.get('n'))))
                PyJsHoisted_rotl_.func_name = 'rotl'
                var.put('rotl', PyJsHoisted_rotl_)
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('Hasher', var.get('C_lib').get('Hasher'))
                var.put('C_algo', var.get('C').get('algo'))
                def PyJs_LONG_2102_(var=var):
                    return var.get('WordArray').callprop('create', Js([Js(0.0), Js(1.0), Js(2.0), Js(3.0), Js(4.0), Js(5.0), Js(6.0), Js(7.0), Js(8.0), Js(9.0), Js(10.0), Js(11.0), Js(12.0), Js(13.0), Js(14.0), Js(15.0), Js(7.0), Js(4.0), Js(13.0), Js(1.0), Js(10.0), Js(6.0), Js(15.0), Js(3.0), Js(12.0), Js(0.0), Js(9.0), Js(5.0), Js(2.0), Js(14.0), Js(11.0), Js(8.0), Js(3.0), Js(10.0), Js(14.0), Js(4.0), Js(9.0), Js(15.0), Js(8.0), Js(1.0), Js(2.0), Js(7.0), Js(0.0), Js(6.0), Js(13.0), Js(11.0), Js(5.0), Js(12.0), Js(1.0), Js(9.0), Js(11.0), Js(10.0), Js(0.0), Js(8.0), Js(12.0), Js(4.0), Js(13.0), Js(3.0), Js(7.0), Js(15.0), Js(14.0), Js(5.0), Js(6.0), Js(2.0), Js(4.0), Js(0.0), Js(5.0), Js(9.0), Js(7.0), Js(12.0), Js(2.0), Js(10.0), Js(14.0), Js(1.0), Js(3.0), Js(8.0), Js(11.0), Js(6.0), Js(15.0), Js(13.0)]))
                var.put('_zl', PyJs_LONG_2102_())
                def PyJs_LONG_2103_(var=var):
                    return var.get('WordArray').callprop('create', Js([Js(5.0), Js(14.0), Js(7.0), Js(0.0), Js(9.0), Js(2.0), Js(11.0), Js(4.0), Js(13.0), Js(6.0), Js(15.0), Js(8.0), Js(1.0), Js(10.0), Js(3.0), Js(12.0), Js(6.0), Js(11.0), Js(3.0), Js(7.0), Js(0.0), Js(13.0), Js(5.0), Js(10.0), Js(14.0), Js(15.0), Js(8.0), Js(12.0), Js(4.0), Js(9.0), Js(1.0), Js(2.0), Js(15.0), Js(5.0), Js(1.0), Js(3.0), Js(7.0), Js(14.0), Js(6.0), Js(9.0), Js(11.0), Js(8.0), Js(12.0), Js(2.0), Js(10.0), Js(0.0), Js(4.0), Js(13.0), Js(8.0), Js(6.0), Js(4.0), Js(1.0), Js(3.0), Js(11.0), Js(15.0), Js(0.0), Js(5.0), Js(12.0), Js(2.0), Js(13.0), Js(9.0), Js(7.0), Js(10.0), Js(14.0), Js(12.0), Js(15.0), Js(10.0), Js(4.0), Js(1.0), Js(5.0), Js(8.0), Js(7.0), Js(6.0), Js(2.0), Js(13.0), Js(14.0), Js(0.0), Js(3.0), Js(9.0), Js(11.0)]))
                var.put('_zr', PyJs_LONG_2103_())
                def PyJs_LONG_2104_(var=var):
                    return var.get('WordArray').callprop('create', Js([Js(11.0), Js(14.0), Js(15.0), Js(12.0), Js(5.0), Js(8.0), Js(7.0), Js(9.0), Js(11.0), Js(13.0), Js(14.0), Js(15.0), Js(6.0), Js(7.0), Js(9.0), Js(8.0), Js(7.0), Js(6.0), Js(8.0), Js(13.0), Js(11.0), Js(9.0), Js(7.0), Js(15.0), Js(7.0), Js(12.0), Js(15.0), Js(9.0), Js(11.0), Js(7.0), Js(13.0), Js(12.0), Js(11.0), Js(13.0), Js(6.0), Js(7.0), Js(14.0), Js(9.0), Js(13.0), Js(15.0), Js(14.0), Js(8.0), Js(13.0), Js(6.0), Js(5.0), Js(12.0), Js(7.0), Js(5.0), Js(11.0), Js(12.0), Js(14.0), Js(15.0), Js(14.0), Js(15.0), Js(9.0), Js(8.0), Js(9.0), Js(14.0), Js(5.0), Js(6.0), Js(8.0), Js(6.0), Js(5.0), Js(12.0), Js(9.0), Js(15.0), Js(5.0), Js(11.0), Js(6.0), Js(8.0), Js(13.0), Js(12.0), Js(5.0), Js(12.0), Js(13.0), Js(14.0), Js(11.0), Js(8.0), Js(5.0), Js(6.0)]))
                var.put('_sl', PyJs_LONG_2104_())
                def PyJs_LONG_2105_(var=var):
                    return var.get('WordArray').callprop('create', Js([Js(8.0), Js(9.0), Js(9.0), Js(11.0), Js(13.0), Js(15.0), Js(15.0), Js(5.0), Js(7.0), Js(7.0), Js(8.0), Js(11.0), Js(14.0), Js(14.0), Js(12.0), Js(6.0), Js(9.0), Js(13.0), Js(15.0), Js(7.0), Js(12.0), Js(8.0), Js(9.0), Js(11.0), Js(7.0), Js(7.0), Js(12.0), Js(7.0), Js(6.0), Js(15.0), Js(13.0), Js(11.0), Js(9.0), Js(7.0), Js(15.0), Js(11.0), Js(8.0), Js(6.0), Js(6.0), Js(14.0), Js(12.0), Js(13.0), Js(5.0), Js(14.0), Js(13.0), Js(13.0), Js(7.0), Js(5.0), Js(15.0), Js(5.0), Js(8.0), Js(11.0), Js(14.0), Js(14.0), Js(6.0), Js(14.0), Js(6.0), Js(9.0), Js(12.0), Js(9.0), Js(12.0), Js(5.0), Js(15.0), Js(8.0), Js(8.0), Js(5.0), Js(12.0), Js(9.0), Js(12.0), Js(5.0), Js(14.0), Js(6.0), Js(8.0), Js(13.0), Js(6.0), Js(5.0), Js(15.0), Js(13.0), Js(11.0), Js(11.0)]))
                var.put('_sr', PyJs_LONG_2105_())
                var.put('_hl', var.get('WordArray').callprop('create', Js([Js(0), Js(1518500249), Js(1859775393), Js(2400959708), Js(2840853838)])))
                var.put('_hr', var.get('WordArray').callprop('create', Js([Js(1352829926), Js(1548603684), Js(1836072691), Js(2053994217), Js(0)])))
                @Js
                def PyJs__doReset_2106_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2106_}, var)
                    var.registers([])
                    var.get(u"this").put('_hash', var.get('WordArray').callprop('create', Js([Js(1732584193), Js(4023233417), Js(2562383102), Js(271733878), Js(3285377520)])))
                PyJs__doReset_2106_._set_name('_doReset')
                @Js
                def PyJs__doProcessBlock_2107_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_2107_}, var)
                    var.registers(['sr', 'zl', 'bl', 'M', 'zr', 'H', 'er', 'i', 'hl', 'M_offset_i', 'cr', 'el', 'sl', 'ar', 'dr', 'hr', 't', 'offset_i', 'br', 'al', 'dl', 'cl', 'offset'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(16.0)):
                        try:
                            var.put('offset_i', (var.get('offset')+var.get('i')))
                            var.put('M_offset_i', var.get('M').get(var.get('offset_i')))
                            var.get('M').put(var.get('offset_i'), ((((var.get('M_offset_i')<<Js(8.0))|PyJsBshift(var.get('M_offset_i'),Js(24.0)))&Js(16711935))|(((var.get('M_offset_i')<<Js(24.0))|PyJsBshift(var.get('M_offset_i'),Js(8.0)))&Js(4278255360))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('H', var.get(u"this").get('_hash').get('words'))
                    var.put('hl', var.get('_hl').get('words'))
                    var.put('hr', var.get('_hr').get('words'))
                    var.put('zl', var.get('_zl').get('words'))
                    var.put('zr', var.get('_zr').get('words'))
                    var.put('sl', var.get('_sl').get('words'))
                    var.put('sr', var.get('_sr').get('words'))
                    pass
                    pass
                    var.put('ar', var.put('al', var.get('H').get('0')))
                    var.put('br', var.put('bl', var.get('H').get('1')))
                    var.put('cr', var.put('cl', var.get('H').get('2')))
                    var.put('dr', var.put('dl', var.get('H').get('3')))
                    var.put('er', var.put('el', var.get('H').get('4')))
                    pass
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(80.0)):
                        try:
                            var.put('t', ((var.get('al')+var.get('M').get((var.get('offset')+var.get('zl').get(var.get('i')))))|Js(0.0)))
                            if (var.get('i')<Js(16.0)):
                                var.put('t', (var.get('f1')(var.get('bl'), var.get('cl'), var.get('dl'))+var.get('hl').get('0')), '+')
                            else:
                                if (var.get('i')<Js(32.0)):
                                    var.put('t', (var.get('f2')(var.get('bl'), var.get('cl'), var.get('dl'))+var.get('hl').get('1')), '+')
                                else:
                                    if (var.get('i')<Js(48.0)):
                                        var.put('t', (var.get('f3')(var.get('bl'), var.get('cl'), var.get('dl'))+var.get('hl').get('2')), '+')
                                    else:
                                        if (var.get('i')<Js(64.0)):
                                            var.put('t', (var.get('f4')(var.get('bl'), var.get('cl'), var.get('dl'))+var.get('hl').get('3')), '+')
                                        else:
                                            var.put('t', (var.get('f5')(var.get('bl'), var.get('cl'), var.get('dl'))+var.get('hl').get('4')), '+')
                            var.put('t', (var.get('t')|Js(0.0)))
                            var.put('t', var.get('rotl')(var.get('t'), var.get('sl').get(var.get('i'))))
                            var.put('t', ((var.get('t')+var.get('el'))|Js(0.0)))
                            var.put('al', var.get('el'))
                            var.put('el', var.get('dl'))
                            var.put('dl', var.get('rotl')(var.get('cl'), Js(10.0)))
                            var.put('cl', var.get('bl'))
                            var.put('bl', var.get('t'))
                            var.put('t', ((var.get('ar')+var.get('M').get((var.get('offset')+var.get('zr').get(var.get('i')))))|Js(0.0)))
                            if (var.get('i')<Js(16.0)):
                                var.put('t', (var.get('f5')(var.get('br'), var.get('cr'), var.get('dr'))+var.get('hr').get('0')), '+')
                            else:
                                if (var.get('i')<Js(32.0)):
                                    var.put('t', (var.get('f4')(var.get('br'), var.get('cr'), var.get('dr'))+var.get('hr').get('1')), '+')
                                else:
                                    if (var.get('i')<Js(48.0)):
                                        var.put('t', (var.get('f3')(var.get('br'), var.get('cr'), var.get('dr'))+var.get('hr').get('2')), '+')
                                    else:
                                        if (var.get('i')<Js(64.0)):
                                            var.put('t', (var.get('f2')(var.get('br'), var.get('cr'), var.get('dr'))+var.get('hr').get('3')), '+')
                                        else:
                                            var.put('t', (var.get('f1')(var.get('br'), var.get('cr'), var.get('dr'))+var.get('hr').get('4')), '+')
                            var.put('t', (var.get('t')|Js(0.0)))
                            var.put('t', var.get('rotl')(var.get('t'), var.get('sr').get(var.get('i'))))
                            var.put('t', ((var.get('t')+var.get('er'))|Js(0.0)))
                            var.put('ar', var.get('er'))
                            var.put('er', var.get('dr'))
                            var.put('dr', var.get('rotl')(var.get('cr'), Js(10.0)))
                            var.put('cr', var.get('br'))
                            var.put('br', var.get('t'))
                        finally:
                                var.put('i', Js(1.0), '+')
                    var.put('t', (((var.get('H').get('1')+var.get('cl'))+var.get('dr'))|Js(0.0)))
                    var.get('H').put('1', (((var.get('H').get('2')+var.get('dl'))+var.get('er'))|Js(0.0)))
                    var.get('H').put('2', (((var.get('H').get('3')+var.get('el'))+var.get('ar'))|Js(0.0)))
                    var.get('H').put('3', (((var.get('H').get('4')+var.get('al'))+var.get('br'))|Js(0.0)))
                    var.get('H').put('4', (((var.get('H').get('0')+var.get('bl'))+var.get('cr'))|Js(0.0)))
                    var.get('H').put('0', var.get('t'))
                PyJs__doProcessBlock_2107_._set_name('_doProcessBlock')
                @Js
                def PyJs__doFinalize_2108_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_2108_}, var)
                    var.registers(['hash', 'nBitsLeft', 'i', 'dataWords', 'H', 'data', 'H_i', 'nBitsTotal'])
                    var.put('data', var.get(u"this").get('_data'))
                    var.put('dataWords', var.get('data').get('words'))
                    var.put('nBitsTotal', (var.get(u"this").get('_nDataBytes')*Js(8.0)))
                    var.put('nBitsLeft', (var.get('data').get('sigBytes')*Js(8.0)))
                    var.get('dataWords').put(PyJsBshift(var.get('nBitsLeft'),Js(5.0)), (Js(128)<<(Js(24.0)-(var.get('nBitsLeft')%Js(32.0)))), '|')
                    var.get('dataWords').put(((PyJsBshift((var.get('nBitsLeft')+Js(64.0)),Js(9.0))<<Js(4.0))+Js(14.0)), ((((var.get('nBitsTotal')<<Js(8.0))|PyJsBshift(var.get('nBitsTotal'),Js(24.0)))&Js(16711935))|(((var.get('nBitsTotal')<<Js(24.0))|PyJsBshift(var.get('nBitsTotal'),Js(8.0)))&Js(4278255360))))
                    var.get('data').put('sigBytes', ((var.get('dataWords').get('length')+Js(1.0))*Js(4.0)))
                    var.get(u"this").callprop('_process')
                    var.put('hash', var.get(u"this").get('_hash'))
                    var.put('H', var.get('hash').get('words'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(5.0)):
                        try:
                            var.put('H_i', var.get('H').get(var.get('i')))
                            var.get('H').put(var.get('i'), ((((var.get('H_i')<<Js(8.0))|PyJsBshift(var.get('H_i'),Js(24.0)))&Js(16711935))|(((var.get('H_i')<<Js(24.0))|PyJsBshift(var.get('H_i'),Js(8.0)))&Js(4278255360))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('hash')
                PyJs__doFinalize_2108_._set_name('_doFinalize')
                @Js
                def PyJs_clone_2109_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_2109_}, var)
                    var.registers(['clone'])
                    var.put('clone', var.get('Hasher').get('clone').callprop('call', var.get(u"this")))
                    var.get('clone').put('_hash', var.get(u"this").get('_hash').callprop('clone'))
                    return var.get('clone')
                PyJs_clone_2109_._set_name('clone')
                var.put('RIPEMD160', var.get('C_algo').put('RIPEMD160', var.get('Hasher').callprop('extend', Js({'_doReset':PyJs__doReset_2106_,'_doProcessBlock':PyJs__doProcessBlock_2107_,'_doFinalize':PyJs__doFinalize_2108_,'clone':PyJs_clone_2109_}))))
                pass
                pass
                pass
                pass
                pass
                pass
                var.get('C').put('RIPEMD160', var.get('Hasher').callprop('_createHelper', var.get('RIPEMD160')))
                var.get('C').put('HmacRIPEMD160', var.get('Hasher').callprop('_createHmacHelper', var.get('RIPEMD160')))
            PyJs_anonymous_2101_._set_name('anonymous')
            PyJs_anonymous_2101_(var.get('Math'))
            return var.get('CryptoJS').get('RIPEMD160')
        PyJs_anonymous_2100_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2110_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2110_._set_name('anonymous')
        PyJs_anonymous_2110_(var.get(u"this"), PyJs_anonymous_2100_)
    PyJs_anonymous_2099_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2111_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2112_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2113_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['WordArray', 'C', 'C_lib', 'W', 'SHA1', 'C_algo', 'Hasher'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('Hasher', var.get('C_lib').get('Hasher'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('W', Js([]))
                @Js
                def PyJs__doReset_2114_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2114_}, var)
                    var.registers([])
                    var.get(u"this").put('_hash', var.get('WordArray').get('init').create(Js([Js(1732584193), Js(4023233417), Js(2562383102), Js(271733878), Js(3285377520)])))
                PyJs__doReset_2114_._set_name('_doReset')
                @Js
                def PyJs__doProcessBlock_2115_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_2115_}, var)
                    var.registers(['a', 'i', 'c', 'e', 't', 'M', 'n', 'b', 'H', 'd', 'offset'])
                    var.put('H', var.get(u"this").get('_hash').get('words'))
                    var.put('a', var.get('H').get('0'))
                    var.put('b', var.get('H').get('1'))
                    var.put('c', var.get('H').get('2'))
                    var.put('d', var.get('H').get('3'))
                    var.put('e', var.get('H').get('4'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(80.0)):
                        try:
                            if (var.get('i')<Js(16.0)):
                                var.get('W').put(var.get('i'), (var.get('M').get((var.get('offset')+var.get('i')))|Js(0.0)))
                            else:
                                var.put('n', (((var.get('W').get((var.get('i')-Js(3.0)))^var.get('W').get((var.get('i')-Js(8.0))))^var.get('W').get((var.get('i')-Js(14.0))))^var.get('W').get((var.get('i')-Js(16.0)))))
                                var.get('W').put(var.get('i'), ((var.get('n')<<Js(1.0))|PyJsBshift(var.get('n'),Js(31.0))))
                            var.put('t', ((((var.get('a')<<Js(5.0))|PyJsBshift(var.get('a'),Js(27.0)))+var.get('e'))+var.get('W').get(var.get('i'))))
                            if (var.get('i')<Js(20.0)):
                                var.put('t', (((var.get('b')&var.get('c'))|((~var.get('b'))&var.get('d')))+Js(1518500249)), '+')
                            else:
                                if (var.get('i')<Js(40.0)):
                                    var.put('t', (((var.get('b')^var.get('c'))^var.get('d'))+Js(1859775393)), '+')
                                else:
                                    if (var.get('i')<Js(60.0)):
                                        var.put('t', ((((var.get('b')&var.get('c'))|(var.get('b')&var.get('d')))|(var.get('c')&var.get('d')))-Js(1894007588)), '+')
                                    else:
                                        var.put('t', (((var.get('b')^var.get('c'))^var.get('d'))-Js(899497514)), '+')
                            var.put('e', var.get('d'))
                            var.put('d', var.get('c'))
                            var.put('c', ((var.get('b')<<Js(30.0))|PyJsBshift(var.get('b'),Js(2.0))))
                            var.put('b', var.get('a'))
                            var.put('a', var.get('t'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('H').put('0', ((var.get('H').get('0')+var.get('a'))|Js(0.0)))
                    var.get('H').put('1', ((var.get('H').get('1')+var.get('b'))|Js(0.0)))
                    var.get('H').put('2', ((var.get('H').get('2')+var.get('c'))|Js(0.0)))
                    var.get('H').put('3', ((var.get('H').get('3')+var.get('d'))|Js(0.0)))
                    var.get('H').put('4', ((var.get('H').get('4')+var.get('e'))|Js(0.0)))
                PyJs__doProcessBlock_2115_._set_name('_doProcessBlock')
                @Js
                def PyJs__doFinalize_2116_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_2116_}, var)
                    var.registers(['dataWords', 'data', 'nBitsTotal', 'nBitsLeft'])
                    var.put('data', var.get(u"this").get('_data'))
                    var.put('dataWords', var.get('data').get('words'))
                    var.put('nBitsTotal', (var.get(u"this").get('_nDataBytes')*Js(8.0)))
                    var.put('nBitsLeft', (var.get('data').get('sigBytes')*Js(8.0)))
                    var.get('dataWords').put(PyJsBshift(var.get('nBitsLeft'),Js(5.0)), (Js(128)<<(Js(24.0)-(var.get('nBitsLeft')%Js(32.0)))), '|')
                    var.get('dataWords').put(((PyJsBshift((var.get('nBitsLeft')+Js(64.0)),Js(9.0))<<Js(4.0))+Js(14.0)), var.get('Math').callprop('floor', (var.get('nBitsTotal')/Js(4294967296))))
                    var.get('dataWords').put(((PyJsBshift((var.get('nBitsLeft')+Js(64.0)),Js(9.0))<<Js(4.0))+Js(15.0)), var.get('nBitsTotal'))
                    var.get('data').put('sigBytes', (var.get('dataWords').get('length')*Js(4.0)))
                    var.get(u"this").callprop('_process')
                    return var.get(u"this").get('_hash')
                PyJs__doFinalize_2116_._set_name('_doFinalize')
                @Js
                def PyJs_clone_2117_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_2117_}, var)
                    var.registers(['clone'])
                    var.put('clone', var.get('Hasher').get('clone').callprop('call', var.get(u"this")))
                    var.get('clone').put('_hash', var.get(u"this").get('_hash').callprop('clone'))
                    return var.get('clone')
                PyJs_clone_2117_._set_name('clone')
                var.put('SHA1', var.get('C_algo').put('SHA1', var.get('Hasher').callprop('extend', Js({'_doReset':PyJs__doReset_2114_,'_doProcessBlock':PyJs__doProcessBlock_2115_,'_doFinalize':PyJs__doFinalize_2116_,'clone':PyJs_clone_2117_}))))
                var.get('C').put('SHA1', var.get('Hasher').callprop('_createHelper', var.get('SHA1')))
                var.get('C').put('HmacSHA1', var.get('Hasher').callprop('_createHmacHelper', var.get('SHA1')))
            PyJs_anonymous_2113_._set_name('anonymous')
            PyJs_anonymous_2113_()
            return var.get('CryptoJS').get('SHA1')
        PyJs_anonymous_2112_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2118_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2118_._set_name('anonymous')
        PyJs_anonymous_2118_(var.get(u"this"), PyJs_anonymous_2112_)
    PyJs_anonymous_2111_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2119_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2120_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2121_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['WordArray', 'C', 'C_lib', 'SHA256', 'C_algo', 'SHA224'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('SHA256', var.get('C_algo').get('SHA256'))
                @Js
                def PyJs__doReset_2122_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2122_}, var)
                    var.registers([])
                    var.get(u"this").put('_hash', var.get('WordArray').get('init').create(Js([Js(3238371032), Js(914150663), Js(812702999), Js(4144912697), Js(4290775857), Js(1750603025), Js(1694076839), Js(3204075428)])))
                PyJs__doReset_2122_._set_name('_doReset')
                @Js
                def PyJs__doFinalize_2123_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_2123_}, var)
                    var.registers(['hash'])
                    var.put('hash', var.get('SHA256').get('_doFinalize').callprop('call', var.get(u"this")))
                    var.get('hash').put('sigBytes', Js(4.0), '-')
                    return var.get('hash')
                PyJs__doFinalize_2123_._set_name('_doFinalize')
                var.put('SHA224', var.get('C_algo').put('SHA224', var.get('SHA256').callprop('extend', Js({'_doReset':PyJs__doReset_2122_,'_doFinalize':PyJs__doFinalize_2123_}))))
                var.get('C').put('SHA224', var.get('SHA256').callprop('_createHelper', var.get('SHA224')))
                var.get('C').put('HmacSHA224', var.get('SHA256').callprop('_createHmacHelper', var.get('SHA224')))
            PyJs_anonymous_2121_._set_name('anonymous')
            PyJs_anonymous_2121_()
            return var.get('CryptoJS').get('SHA224')
        PyJs_anonymous_2120_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2124_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./sha256')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./sha256')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2124_._set_name('anonymous')
        PyJs_anonymous_2124_(var.get(u"this"), PyJs_anonymous_2120_)
    PyJs_anonymous_2119_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2125_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2126_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2127_(Math, this, arguments, var=var):
                var = Scope({'Math':Math, 'this':this, 'arguments':arguments}, var)
                var.registers(['WordArray', 'C', 'H', 'K', 'Math', 'C_lib', 'W', 'SHA256', 'C_algo', 'Hasher'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('Hasher', var.get('C_lib').get('Hasher'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('H', Js([]))
                var.put('K', Js([]))
                @Js
                def PyJs_anonymous_2128_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['getFractionalBits', 'n', 'nPrime', 'isPrime'])
                    @Js
                    def PyJsHoisted_isPrime_(n, this, arguments, var=var):
                        var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['sqrtN', 'n', 'factor'])
                        var.put('sqrtN', var.get('Math').callprop('sqrt', var.get('n')))
                        #for JS loop
                        var.put('factor', Js(2.0))
                        while (var.get('factor')<=var.get('sqrtN')):
                            try:
                                if (var.get('n')%var.get('factor')).neg():
                                    return Js(False)
                            finally:
                                    (var.put('factor',Js(var.get('factor').to_number())+Js(1))-Js(1))
                        return Js(True)
                    PyJsHoisted_isPrime_.func_name = 'isPrime'
                    var.put('isPrime', PyJsHoisted_isPrime_)
                    @Js
                    def PyJsHoisted_getFractionalBits_(n, this, arguments, var=var):
                        var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n'])
                        return (((var.get('n')-(var.get('n')|Js(0.0)))*Js(4294967296))|Js(0.0))
                    PyJsHoisted_getFractionalBits_.func_name = 'getFractionalBits'
                    var.put('getFractionalBits', PyJsHoisted_getFractionalBits_)
                    pass
                    pass
                    var.put('n', Js(2.0))
                    var.put('nPrime', Js(0.0))
                    while (var.get('nPrime')<Js(64.0)):
                        if var.get('isPrime')(var.get('n')):
                            if (var.get('nPrime')<Js(8.0)):
                                var.get('H').put(var.get('nPrime'), var.get('getFractionalBits')(var.get('Math').callprop('pow', var.get('n'), (Js(1.0)/Js(2.0)))))
                            var.get('K').put(var.get('nPrime'), var.get('getFractionalBits')(var.get('Math').callprop('pow', var.get('n'), (Js(1.0)/Js(3.0)))))
                            (var.put('nPrime',Js(var.get('nPrime').to_number())+Js(1))-Js(1))
                        (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2128_._set_name('anonymous')
                PyJs_anonymous_2128_()
                var.put('W', Js([]))
                @Js
                def PyJs__doReset_2129_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2129_}, var)
                    var.registers([])
                    var.get(u"this").put('_hash', var.get('WordArray').get('init').create(var.get('H').callprop('slice', Js(0.0))))
                PyJs__doReset_2129_._set_name('_doReset')
                @Js
                def PyJs__doProcessBlock_2130_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_2130_}, var)
                    var.registers(['a', 'sigma0', 'M', 'h', 'gamma1x', 'b', 'gamma0', 'gamma0x', 'H', 'maj', 'i', 'c', 'ch', 'g', 'd', 'f', 'e', 't2', 'gamma1', 'sigma1', 't1', 'offset'])
                    var.put('H', var.get(u"this").get('_hash').get('words'))
                    var.put('a', var.get('H').get('0'))
                    var.put('b', var.get('H').get('1'))
                    var.put('c', var.get('H').get('2'))
                    var.put('d', var.get('H').get('3'))
                    var.put('e', var.get('H').get('4'))
                    var.put('f', var.get('H').get('5'))
                    var.put('g', var.get('H').get('6'))
                    var.put('h', var.get('H').get('7'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(64.0)):
                        try:
                            if (var.get('i')<Js(16.0)):
                                var.get('W').put(var.get('i'), (var.get('M').get((var.get('offset')+var.get('i')))|Js(0.0)))
                            else:
                                var.put('gamma0x', var.get('W').get((var.get('i')-Js(15.0))))
                                var.put('gamma0', ((((var.get('gamma0x')<<Js(25.0))|PyJsBshift(var.get('gamma0x'),Js(7.0)))^((var.get('gamma0x')<<Js(14.0))|PyJsBshift(var.get('gamma0x'),Js(18.0))))^PyJsBshift(var.get('gamma0x'),Js(3.0))))
                                var.put('gamma1x', var.get('W').get((var.get('i')-Js(2.0))))
                                var.put('gamma1', ((((var.get('gamma1x')<<Js(15.0))|PyJsBshift(var.get('gamma1x'),Js(17.0)))^((var.get('gamma1x')<<Js(13.0))|PyJsBshift(var.get('gamma1x'),Js(19.0))))^PyJsBshift(var.get('gamma1x'),Js(10.0))))
                                var.get('W').put(var.get('i'), (((var.get('gamma0')+var.get('W').get((var.get('i')-Js(7.0))))+var.get('gamma1'))+var.get('W').get((var.get('i')-Js(16.0)))))
                            var.put('ch', ((var.get('e')&var.get('f'))^((~var.get('e'))&var.get('g'))))
                            var.put('maj', (((var.get('a')&var.get('b'))^(var.get('a')&var.get('c')))^(var.get('b')&var.get('c'))))
                            var.put('sigma0', ((((var.get('a')<<Js(30.0))|PyJsBshift(var.get('a'),Js(2.0)))^((var.get('a')<<Js(19.0))|PyJsBshift(var.get('a'),Js(13.0))))^((var.get('a')<<Js(10.0))|PyJsBshift(var.get('a'),Js(22.0)))))
                            var.put('sigma1', ((((var.get('e')<<Js(26.0))|PyJsBshift(var.get('e'),Js(6.0)))^((var.get('e')<<Js(21.0))|PyJsBshift(var.get('e'),Js(11.0))))^((var.get('e')<<Js(7.0))|PyJsBshift(var.get('e'),Js(25.0)))))
                            var.put('t1', ((((var.get('h')+var.get('sigma1'))+var.get('ch'))+var.get('K').get(var.get('i')))+var.get('W').get(var.get('i'))))
                            var.put('t2', (var.get('sigma0')+var.get('maj')))
                            var.put('h', var.get('g'))
                            var.put('g', var.get('f'))
                            var.put('f', var.get('e'))
                            var.put('e', ((var.get('d')+var.get('t1'))|Js(0.0)))
                            var.put('d', var.get('c'))
                            var.put('c', var.get('b'))
                            var.put('b', var.get('a'))
                            var.put('a', ((var.get('t1')+var.get('t2'))|Js(0.0)))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get('H').put('0', ((var.get('H').get('0')+var.get('a'))|Js(0.0)))
                    var.get('H').put('1', ((var.get('H').get('1')+var.get('b'))|Js(0.0)))
                    var.get('H').put('2', ((var.get('H').get('2')+var.get('c'))|Js(0.0)))
                    var.get('H').put('3', ((var.get('H').get('3')+var.get('d'))|Js(0.0)))
                    var.get('H').put('4', ((var.get('H').get('4')+var.get('e'))|Js(0.0)))
                    var.get('H').put('5', ((var.get('H').get('5')+var.get('f'))|Js(0.0)))
                    var.get('H').put('6', ((var.get('H').get('6')+var.get('g'))|Js(0.0)))
                    var.get('H').put('7', ((var.get('H').get('7')+var.get('h'))|Js(0.0)))
                PyJs__doProcessBlock_2130_._set_name('_doProcessBlock')
                @Js
                def PyJs__doFinalize_2131_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_2131_}, var)
                    var.registers(['dataWords', 'data', 'nBitsTotal', 'nBitsLeft'])
                    var.put('data', var.get(u"this").get('_data'))
                    var.put('dataWords', var.get('data').get('words'))
                    var.put('nBitsTotal', (var.get(u"this").get('_nDataBytes')*Js(8.0)))
                    var.put('nBitsLeft', (var.get('data').get('sigBytes')*Js(8.0)))
                    var.get('dataWords').put(PyJsBshift(var.get('nBitsLeft'),Js(5.0)), (Js(128)<<(Js(24.0)-(var.get('nBitsLeft')%Js(32.0)))), '|')
                    var.get('dataWords').put(((PyJsBshift((var.get('nBitsLeft')+Js(64.0)),Js(9.0))<<Js(4.0))+Js(14.0)), var.get('Math').callprop('floor', (var.get('nBitsTotal')/Js(4294967296))))
                    var.get('dataWords').put(((PyJsBshift((var.get('nBitsLeft')+Js(64.0)),Js(9.0))<<Js(4.0))+Js(15.0)), var.get('nBitsTotal'))
                    var.get('data').put('sigBytes', (var.get('dataWords').get('length')*Js(4.0)))
                    var.get(u"this").callprop('_process')
                    return var.get(u"this").get('_hash')
                PyJs__doFinalize_2131_._set_name('_doFinalize')
                @Js
                def PyJs_clone_2132_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_2132_}, var)
                    var.registers(['clone'])
                    var.put('clone', var.get('Hasher').get('clone').callprop('call', var.get(u"this")))
                    var.get('clone').put('_hash', var.get(u"this").get('_hash').callprop('clone'))
                    return var.get('clone')
                PyJs_clone_2132_._set_name('clone')
                var.put('SHA256', var.get('C_algo').put('SHA256', var.get('Hasher').callprop('extend', Js({'_doReset':PyJs__doReset_2129_,'_doProcessBlock':PyJs__doProcessBlock_2130_,'_doFinalize':PyJs__doFinalize_2131_,'clone':PyJs_clone_2132_}))))
                var.get('C').put('SHA256', var.get('Hasher').callprop('_createHelper', var.get('SHA256')))
                var.get('C').put('HmacSHA256', var.get('Hasher').callprop('_createHmacHelper', var.get('SHA256')))
            PyJs_anonymous_2127_._set_name('anonymous')
            PyJs_anonymous_2127_(var.get('Math'))
            return var.get('CryptoJS').get('SHA256')
        PyJs_anonymous_2126_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2133_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2133_._set_name('anonymous')
        PyJs_anonymous_2133_(var.get(u"this"), PyJs_anonymous_2126_)
    PyJs_anonymous_2125_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2134_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2135_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2136_(Math, this, arguments, var=var):
                var = Scope({'Math':Math, 'this':this, 'arguments':arguments}, var)
                var.registers(['C_x64', 'WordArray', 'RHO_OFFSETS', 'C', 'X64Word', 'Math', 'PI_INDEXES', 'ROUND_CONSTANTS', 'C_lib', 'SHA3', 'C_algo', 'T', 'Hasher'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('Hasher', var.get('C_lib').get('Hasher'))
                var.put('C_x64', var.get('C').get('x64'))
                var.put('X64Word', var.get('C_x64').get('Word'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('RHO_OFFSETS', Js([]))
                var.put('PI_INDEXES', Js([]))
                var.put('ROUND_CONSTANTS', Js([]))
                @Js
                def PyJs_anonymous_2137_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['roundConstantMsw', 'newX', 'j', 'i', 'x', 'y', 'roundConstantLsw', 'bitPosition', 'newY', 't', 'LFSR'])
                    var.put('x', Js(1.0))
                    var.put('y', Js(0.0))
                    #for JS loop
                    var.put('t', Js(0.0))
                    while (var.get('t')<Js(24.0)):
                        try:
                            var.get('RHO_OFFSETS').put((var.get('x')+(Js(5.0)*var.get('y'))), ((((var.get('t')+Js(1.0))*(var.get('t')+Js(2.0)))/Js(2.0))%Js(64.0)))
                            var.put('newX', (var.get('y')%Js(5.0)))
                            var.put('newY', (((Js(2.0)*var.get('x'))+(Js(3.0)*var.get('y')))%Js(5.0)))
                            var.put('x', var.get('newX'))
                            var.put('y', var.get('newY'))
                        finally:
                                (var.put('t',Js(var.get('t').to_number())+Js(1))-Js(1))
                    #for JS loop
                    var.put('x', Js(0.0))
                    while (var.get('x')<Js(5.0)):
                        try:
                            #for JS loop
                            var.put('y', Js(0.0))
                            while (var.get('y')<Js(5.0)):
                                try:
                                    var.get('PI_INDEXES').put((var.get('x')+(Js(5.0)*var.get('y'))), (var.get('y')+((((Js(2.0)*var.get('x'))+(Js(3.0)*var.get('y')))%Js(5.0))*Js(5.0))))
                                finally:
                                        (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                    var.put('LFSR', Js(1))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(24.0)):
                        try:
                            var.put('roundConstantMsw', Js(0.0))
                            var.put('roundConstantLsw', Js(0.0))
                            #for JS loop
                            var.put('j', Js(0.0))
                            while (var.get('j')<Js(7.0)):
                                try:
                                    if (var.get('LFSR')&Js(1)):
                                        var.put('bitPosition', ((Js(1.0)<<var.get('j'))-Js(1.0)))
                                        if (var.get('bitPosition')<Js(32.0)):
                                            var.put('roundConstantLsw', (Js(1.0)<<var.get('bitPosition')), '^')
                                        else:
                                            var.put('roundConstantMsw', (Js(1.0)<<(var.get('bitPosition')-Js(32.0))), '^')
                                    if (var.get('LFSR')&Js(128)):
                                        var.put('LFSR', ((var.get('LFSR')<<Js(1.0))^Js(113)))
                                    else:
                                        var.put('LFSR', Js(1.0), '<<')
                                finally:
                                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                            var.get('ROUND_CONSTANTS').put(var.get('i'), var.get('X64Word').callprop('create', var.get('roundConstantMsw'), var.get('roundConstantLsw')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2137_._set_name('anonymous')
                PyJs_anonymous_2137_()
                var.put('T', Js([]))
                @Js
                def PyJs_anonymous_2138_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(25.0)):
                        try:
                            var.get('T').put(var.get('i'), var.get('X64Word').callprop('create'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2138_._set_name('anonymous')
                PyJs_anonymous_2138_()
                @Js
                def PyJs__doReset_2139_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2139_}, var)
                    var.registers(['i', 'state'])
                    var.put('state', var.get(u"this").put('_state', Js([])))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(25.0)):
                        try:
                            var.get('state').put(var.get('i'), var.get('X64Word').get('init').create())
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.get(u"this").put('blockSize', ((Js(1600.0)-(Js(2.0)*var.get(u"this").get('cfg').get('outputLength')))/Js(32.0)))
                PyJs__doReset_2139_._set_name('_doReset')
                @Js
                def PyJs__doProcessBlock_2140_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_2140_}, var)
                    var.registers(['laneMsw', 'M', 'Tx2Lane', 'state', 'laneLsw', 'tMsw', 'M2i1', 'round', 'i', 'x', 'y', 'Tx1Msw', 'roundConstant', 'M2i', 'state0', 'Tx1Lane', 'Tx1', 'T0', 'Tx4', 'TLane', 'TPiLane', 'Tx1Lsw', 'laneIndex', 'nBlockSizeLanes', 'lane', 'tLsw', 'Tx', 'rhoOffset', 'offset'])
                    var.put('state', var.get(u"this").get('_state'))
                    var.put('nBlockSizeLanes', (var.get(u"this").get('blockSize')/Js(2.0)))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('nBlockSizeLanes')):
                        try:
                            var.put('M2i', var.get('M').get((var.get('offset')+(Js(2.0)*var.get('i')))))
                            var.put('M2i1', var.get('M').get(((var.get('offset')+(Js(2.0)*var.get('i')))+Js(1.0))))
                            var.put('M2i', ((((var.get('M2i')<<Js(8.0))|PyJsBshift(var.get('M2i'),Js(24.0)))&Js(16711935))|(((var.get('M2i')<<Js(24.0))|PyJsBshift(var.get('M2i'),Js(8.0)))&Js(4278255360))))
                            var.put('M2i1', ((((var.get('M2i1')<<Js(8.0))|PyJsBshift(var.get('M2i1'),Js(24.0)))&Js(16711935))|(((var.get('M2i1')<<Js(24.0))|PyJsBshift(var.get('M2i1'),Js(8.0)))&Js(4278255360))))
                            var.put('lane', var.get('state').get(var.get('i')))
                            var.get('lane').put('high', var.get('M2i1'), '^')
                            var.get('lane').put('low', var.get('M2i'), '^')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    #for JS loop
                    var.put('round', Js(0.0))
                    while (var.get('round')<Js(24.0)):
                        try:
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<Js(5.0)):
                                try:
                                    var.put('tMsw', Js(0.0))
                                    var.put('tLsw', Js(0.0))
                                    #for JS loop
                                    var.put('y', Js(0.0))
                                    while (var.get('y')<Js(5.0)):
                                        try:
                                            var.put('lane', var.get('state').get((var.get('x')+(Js(5.0)*var.get('y')))))
                                            var.put('tMsw', var.get('lane').get('high'), '^')
                                            var.put('tLsw', var.get('lane').get('low'), '^')
                                        finally:
                                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                    var.put('Tx', var.get('T').get(var.get('x')))
                                    var.get('Tx').put('high', var.get('tMsw'))
                                    var.get('Tx').put('low', var.get('tLsw'))
                                finally:
                                        (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<Js(5.0)):
                                try:
                                    var.put('Tx4', var.get('T').get(((var.get('x')+Js(4.0))%Js(5.0))))
                                    var.put('Tx1', var.get('T').get(((var.get('x')+Js(1.0))%Js(5.0))))
                                    var.put('Tx1Msw', var.get('Tx1').get('high'))
                                    var.put('Tx1Lsw', var.get('Tx1').get('low'))
                                    var.put('tMsw', (var.get('Tx4').get('high')^((var.get('Tx1Msw')<<Js(1.0))|PyJsBshift(var.get('Tx1Lsw'),Js(31.0)))))
                                    var.put('tLsw', (var.get('Tx4').get('low')^((var.get('Tx1Lsw')<<Js(1.0))|PyJsBshift(var.get('Tx1Msw'),Js(31.0)))))
                                    #for JS loop
                                    var.put('y', Js(0.0))
                                    while (var.get('y')<Js(5.0)):
                                        try:
                                            var.put('lane', var.get('state').get((var.get('x')+(Js(5.0)*var.get('y')))))
                                            var.get('lane').put('high', var.get('tMsw'), '^')
                                            var.get('lane').put('low', var.get('tLsw'), '^')
                                        finally:
                                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                finally:
                                        (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                            #for JS loop
                            var.put('laneIndex', Js(1.0))
                            while (var.get('laneIndex')<Js(25.0)):
                                try:
                                    pass
                                    pass
                                    var.put('lane', var.get('state').get(var.get('laneIndex')))
                                    var.put('laneMsw', var.get('lane').get('high'))
                                    var.put('laneLsw', var.get('lane').get('low'))
                                    var.put('rhoOffset', var.get('RHO_OFFSETS').get(var.get('laneIndex')))
                                    if (var.get('rhoOffset')<Js(32.0)):
                                        var.put('tMsw', ((var.get('laneMsw')<<var.get('rhoOffset'))|PyJsBshift(var.get('laneLsw'),(Js(32.0)-var.get('rhoOffset')))))
                                        var.put('tLsw', ((var.get('laneLsw')<<var.get('rhoOffset'))|PyJsBshift(var.get('laneMsw'),(Js(32.0)-var.get('rhoOffset')))))
                                    else:
                                        var.put('tMsw', ((var.get('laneLsw')<<(var.get('rhoOffset')-Js(32.0)))|PyJsBshift(var.get('laneMsw'),(Js(64.0)-var.get('rhoOffset')))))
                                        var.put('tLsw', ((var.get('laneMsw')<<(var.get('rhoOffset')-Js(32.0)))|PyJsBshift(var.get('laneLsw'),(Js(64.0)-var.get('rhoOffset')))))
                                    var.put('TPiLane', var.get('T').get(var.get('PI_INDEXES').get(var.get('laneIndex'))))
                                    var.get('TPiLane').put('high', var.get('tMsw'))
                                    var.get('TPiLane').put('low', var.get('tLsw'))
                                finally:
                                        (var.put('laneIndex',Js(var.get('laneIndex').to_number())+Js(1))-Js(1))
                            var.put('T0', var.get('T').get('0'))
                            var.put('state0', var.get('state').get('0'))
                            var.get('T0').put('high', var.get('state0').get('high'))
                            var.get('T0').put('low', var.get('state0').get('low'))
                            #for JS loop
                            var.put('x', Js(0.0))
                            while (var.get('x')<Js(5.0)):
                                try:
                                    #for JS loop
                                    var.put('y', Js(0.0))
                                    while (var.get('y')<Js(5.0)):
                                        try:
                                            var.put('laneIndex', (var.get('x')+(Js(5.0)*var.get('y'))))
                                            var.put('lane', var.get('state').get(var.get('laneIndex')))
                                            var.put('TLane', var.get('T').get(var.get('laneIndex')))
                                            var.put('Tx1Lane', var.get('T').get((((var.get('x')+Js(1.0))%Js(5.0))+(Js(5.0)*var.get('y')))))
                                            var.put('Tx2Lane', var.get('T').get((((var.get('x')+Js(2.0))%Js(5.0))+(Js(5.0)*var.get('y')))))
                                            var.get('lane').put('high', (var.get('TLane').get('high')^((~var.get('Tx1Lane').get('high'))&var.get('Tx2Lane').get('high'))))
                                            var.get('lane').put('low', (var.get('TLane').get('low')^((~var.get('Tx1Lane').get('low'))&var.get('Tx2Lane').get('low'))))
                                        finally:
                                                (var.put('y',Js(var.get('y').to_number())+Js(1))-Js(1))
                                finally:
                                        (var.put('x',Js(var.get('x').to_number())+Js(1))-Js(1))
                            var.put('lane', var.get('state').get('0'))
                            var.put('roundConstant', var.get('ROUND_CONSTANTS').get(var.get('round')))
                            var.get('lane').put('high', var.get('roundConstant').get('high'), '^')
                            var.get('lane').put('low', var.get('roundConstant').get('low'), '^')
                        finally:
                                (var.put('round',Js(var.get('round').to_number())+Js(1))-Js(1))
                PyJs__doProcessBlock_2140_._set_name('_doProcessBlock')
                @Js
                def PyJs__doFinalize_2141_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_2141_}, var)
                    var.registers(['laneMsw', 'blockSizeBits', 'nBitsLeft', 'i', 'outputLengthBytes', 'outputLengthLanes', 'dataWords', 'state', 'hashWords', 'lane', 'laneLsw', 'data', 'nBitsTotal'])
                    var.put('data', var.get(u"this").get('_data'))
                    var.put('dataWords', var.get('data').get('words'))
                    var.put('nBitsTotal', (var.get(u"this").get('_nDataBytes')*Js(8.0)))
                    var.put('nBitsLeft', (var.get('data').get('sigBytes')*Js(8.0)))
                    var.put('blockSizeBits', (var.get(u"this").get('blockSize')*Js(32.0)))
                    var.get('dataWords').put(PyJsBshift(var.get('nBitsLeft'),Js(5.0)), (Js(1)<<(Js(24.0)-(var.get('nBitsLeft')%Js(32.0)))), '|')
                    var.get('dataWords').put((PyJsBshift((var.get('Math').callprop('ceil', ((var.get('nBitsLeft')+Js(1.0))/var.get('blockSizeBits')))*var.get('blockSizeBits')),Js(5.0))-Js(1.0)), Js(128), '|')
                    var.get('data').put('sigBytes', (var.get('dataWords').get('length')*Js(4.0)))
                    var.get(u"this").callprop('_process')
                    var.put('state', var.get(u"this").get('_state'))
                    var.put('outputLengthBytes', (var.get(u"this").get('cfg').get('outputLength')/Js(8.0)))
                    var.put('outputLengthLanes', (var.get('outputLengthBytes')/Js(8.0)))
                    var.put('hashWords', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('outputLengthLanes')):
                        try:
                            var.put('lane', var.get('state').get(var.get('i')))
                            var.put('laneMsw', var.get('lane').get('high'))
                            var.put('laneLsw', var.get('lane').get('low'))
                            var.put('laneMsw', ((((var.get('laneMsw')<<Js(8.0))|PyJsBshift(var.get('laneMsw'),Js(24.0)))&Js(16711935))|(((var.get('laneMsw')<<Js(24.0))|PyJsBshift(var.get('laneMsw'),Js(8.0)))&Js(4278255360))))
                            var.put('laneLsw', ((((var.get('laneLsw')<<Js(8.0))|PyJsBshift(var.get('laneLsw'),Js(24.0)))&Js(16711935))|(((var.get('laneLsw')<<Js(24.0))|PyJsBshift(var.get('laneLsw'),Js(8.0)))&Js(4278255360))))
                            var.get('hashWords').callprop('push', var.get('laneLsw'))
                            var.get('hashWords').callprop('push', var.get('laneMsw'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('WordArray').get('init').create(var.get('hashWords'), var.get('outputLengthBytes'))
                PyJs__doFinalize_2141_._set_name('_doFinalize')
                @Js
                def PyJs_clone_2142_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_2142_}, var)
                    var.registers(['i', 'state', 'clone'])
                    var.put('clone', var.get('Hasher').get('clone').callprop('call', var.get(u"this")))
                    var.put('state', var.get('clone').put('_state', var.get(u"this").get('_state').callprop('slice', Js(0.0))))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(25.0)):
                        try:
                            var.get('state').put(var.get('i'), var.get('state').get(var.get('i')).callprop('clone'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('clone')
                PyJs_clone_2142_._set_name('clone')
                var.put('SHA3', var.get('C_algo').put('SHA3', var.get('Hasher').callprop('extend', Js({'cfg':var.get('Hasher').get('cfg').callprop('extend', Js({'outputLength':Js(512.0)})),'_doReset':PyJs__doReset_2139_,'_doProcessBlock':PyJs__doProcessBlock_2140_,'_doFinalize':PyJs__doFinalize_2141_,'clone':PyJs_clone_2142_}))))
                var.get('C').put('SHA3', var.get('Hasher').callprop('_createHelper', var.get('SHA3')))
                var.get('C').put('HmacSHA3', var.get('Hasher').callprop('_createHmacHelper', var.get('SHA3')))
            PyJs_anonymous_2136_._set_name('anonymous')
            PyJs_anonymous_2136_(var.get('Math'))
            return var.get('CryptoJS').get('SHA3')
        PyJs_anonymous_2135_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2143_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./x64-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./x64-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2143_._set_name('anonymous')
        PyJs_anonymous_2143_(var.get(u"this"), PyJs_anonymous_2135_)
    PyJs_anonymous_2134_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2144_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2145_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2146_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['SHA384', 'C_x64', 'SHA512', 'C', 'X64Word', 'X64WordArray', 'C_algo'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_x64', var.get('C').get('x64'))
                var.put('X64Word', var.get('C_x64').get('Word'))
                var.put('X64WordArray', var.get('C_x64').get('WordArray'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('SHA512', var.get('C_algo').get('SHA512'))
                @Js
                def PyJs__doReset_2147_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2147_}, var)
                    var.registers([])
                    def PyJs_LONG_2148_(var=var):
                        return var.get('X64WordArray').get('init').create(Js([var.get('X64Word').get('init').create(Js(3418070365), Js(3238371032)), var.get('X64Word').get('init').create(Js(1654270250), Js(914150663)), var.get('X64Word').get('init').create(Js(2438529370), Js(812702999)), var.get('X64Word').get('init').create(Js(355462360), Js(4144912697)), var.get('X64Word').get('init').create(Js(1731405415), Js(4290775857)), var.get('X64Word').get('init').create(Js(2394180231), Js(1750603025)), var.get('X64Word').get('init').create(Js(3675008525), Js(1694076839)), var.get('X64Word').get('init').create(Js(1203062813), Js(3204075428))]))
                    var.get(u"this").put('_hash', PyJs_LONG_2148_())
                PyJs__doReset_2147_._set_name('_doReset')
                @Js
                def PyJs__doFinalize_2149_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_2149_}, var)
                    var.registers(['hash'])
                    var.put('hash', var.get('SHA512').get('_doFinalize').callprop('call', var.get(u"this")))
                    var.get('hash').put('sigBytes', Js(16.0), '-')
                    return var.get('hash')
                PyJs__doFinalize_2149_._set_name('_doFinalize')
                var.put('SHA384', var.get('C_algo').put('SHA384', var.get('SHA512').callprop('extend', Js({'_doReset':PyJs__doReset_2147_,'_doFinalize':PyJs__doFinalize_2149_}))))
                var.get('C').put('SHA384', var.get('SHA512').callprop('_createHelper', var.get('SHA384')))
                var.get('C').put('HmacSHA384', var.get('SHA512').callprop('_createHmacHelper', var.get('SHA384')))
            PyJs_anonymous_2146_._set_name('anonymous')
            PyJs_anonymous_2146_()
            return var.get('CryptoJS').get('SHA384')
        PyJs_anonymous_2145_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2150_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./x64-core')), var.get('require')(Js('./sha512')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./x64-core'), Js('./sha512')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2150_._set_name('anonymous')
        PyJs_anonymous_2150_(var.get(u"this"), PyJs_anonymous_2145_)
    PyJs_anonymous_2144_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2151_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2152_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2153_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['C_x64', 'X64Word_create', 'SHA512', 'X64Word', 'C', 'K', 'C_lib', 'W', 'X64WordArray', 'C_algo', 'Hasher'])
                @Js
                def PyJsHoisted_X64Word_create_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('X64Word').get('create').callprop('apply', var.get('X64Word'), var.get('arguments'))
                PyJsHoisted_X64Word_create_.func_name = 'X64Word_create'
                var.put('X64Word_create', PyJsHoisted_X64Word_create_)
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('Hasher', var.get('C_lib').get('Hasher'))
                var.put('C_x64', var.get('C').get('x64'))
                var.put('X64Word', var.get('C_x64').get('Word'))
                var.put('X64WordArray', var.get('C_x64').get('WordArray'))
                var.put('C_algo', var.get('C').get('algo'))
                pass
                var.put('K', Js([var.get('X64Word_create')(Js(1116352408), Js(3609767458)), var.get('X64Word_create')(Js(1899447441), Js(602891725)), var.get('X64Word_create')(Js(3049323471), Js(3964484399)), var.get('X64Word_create')(Js(3921009573), Js(2173295548)), var.get('X64Word_create')(Js(961987163), Js(4081628472)), var.get('X64Word_create')(Js(1508970993), Js(3053834265)), var.get('X64Word_create')(Js(2453635748), Js(2937671579)), var.get('X64Word_create')(Js(2870763221), Js(3664609560)), var.get('X64Word_create')(Js(3624381080), Js(2734883394)), var.get('X64Word_create')(Js(310598401), Js(1164996542)), var.get('X64Word_create')(Js(607225278), Js(1323610764)), var.get('X64Word_create')(Js(1426881987), Js(3590304994)), var.get('X64Word_create')(Js(1925078388), Js(4068182383)), var.get('X64Word_create')(Js(2162078206), Js(991336113)), var.get('X64Word_create')(Js(2614888103), Js(633803317)), var.get('X64Word_create')(Js(3248222580), Js(3479774868)), var.get('X64Word_create')(Js(3835390401), Js(2666613458)), var.get('X64Word_create')(Js(4022224774), Js(944711139)), var.get('X64Word_create')(Js(264347078), Js(2341262773)), var.get('X64Word_create')(Js(604807628), Js(2007800933)), var.get('X64Word_create')(Js(770255983), Js(1495990901)), var.get('X64Word_create')(Js(1249150122), Js(1856431235)), var.get('X64Word_create')(Js(1555081692), Js(3175218132)), var.get('X64Word_create')(Js(1996064986), Js(2198950837)), var.get('X64Word_create')(Js(2554220882), Js(3999719339)), var.get('X64Word_create')(Js(2821834349), Js(766784016)), var.get('X64Word_create')(Js(2952996808), Js(2566594879)), var.get('X64Word_create')(Js(3210313671), Js(3203337956)), var.get('X64Word_create')(Js(3336571891), Js(1034457026)), var.get('X64Word_create')(Js(3584528711), Js(2466948901)), var.get('X64Word_create')(Js(113926993), Js(3758326383)), var.get('X64Word_create')(Js(338241895), Js(168717936)), var.get('X64Word_create')(Js(666307205), Js(1188179964)), var.get('X64Word_create')(Js(773529912), Js(1546045734)), var.get('X64Word_create')(Js(1294757372), Js(1522805485)), var.get('X64Word_create')(Js(1396182291), Js(2643833823)), var.get('X64Word_create')(Js(1695183700), Js(2343527390)), var.get('X64Word_create')(Js(1986661051), Js(1014477480)), var.get('X64Word_create')(Js(2177026350), Js(1206759142)), var.get('X64Word_create')(Js(2456956037), Js(344077627)), var.get('X64Word_create')(Js(2730485921), Js(1290863460)), var.get('X64Word_create')(Js(2820302411), Js(3158454273)), var.get('X64Word_create')(Js(3259730800), Js(3505952657)), var.get('X64Word_create')(Js(3345764771), Js(106217008)), var.get('X64Word_create')(Js(3516065817), Js(3606008344)), var.get('X64Word_create')(Js(3600352804), Js(1432725776)), var.get('X64Word_create')(Js(4094571909), Js(1467031594)), var.get('X64Word_create')(Js(275423344), Js(851169720)), var.get('X64Word_create')(Js(430227734), Js(3100823752)), var.get('X64Word_create')(Js(506948616), Js(1363258195)), var.get('X64Word_create')(Js(659060556), Js(3750685593)), var.get('X64Word_create')(Js(883997877), Js(3785050280)), var.get('X64Word_create')(Js(958139571), Js(3318307427)), var.get('X64Word_create')(Js(1322822218), Js(3812723403)), var.get('X64Word_create')(Js(1537002063), Js(2003034995)), var.get('X64Word_create')(Js(1747873779), Js(3602036899)), var.get('X64Word_create')(Js(1955562222), Js(1575990012)), var.get('X64Word_create')(Js(2024104815), Js(1125592928)), var.get('X64Word_create')(Js(2227730452), Js(2716904306)), var.get('X64Word_create')(Js(2361852424), Js(442776044)), var.get('X64Word_create')(Js(2428436474), Js(593698344)), var.get('X64Word_create')(Js(2756734187), Js(3733110249)), var.get('X64Word_create')(Js(3204031479), Js(2999351573)), var.get('X64Word_create')(Js(3329325298), Js(3815920427)), var.get('X64Word_create')(Js(3391569614), Js(3928383900)), var.get('X64Word_create')(Js(3515267271), Js(566280711)), var.get('X64Word_create')(Js(3940187606), Js(3454069534)), var.get('X64Word_create')(Js(4118630271), Js(4000239992)), var.get('X64Word_create')(Js(116418474), Js(1914138554)), var.get('X64Word_create')(Js(174292421), Js(2731055270)), var.get('X64Word_create')(Js(289380356), Js(3203993006)), var.get('X64Word_create')(Js(460393269), Js(320620315)), var.get('X64Word_create')(Js(685471733), Js(587496836)), var.get('X64Word_create')(Js(852142971), Js(1086792851)), var.get('X64Word_create')(Js(1017036298), Js(365543100)), var.get('X64Word_create')(Js(1126000580), Js(2618297676)), var.get('X64Word_create')(Js(1288033470), Js(3409855158)), var.get('X64Word_create')(Js(1501505948), Js(4234509866)), var.get('X64Word_create')(Js(1607167915), Js(987167468)), var.get('X64Word_create')(Js(1816402316), Js(1246189591))]))
                var.put('W', Js([]))
                @Js
                def PyJs_anonymous_2154_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(80.0)):
                        try:
                            var.get('W').put(var.get('i'), var.get('X64Word_create')())
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs_anonymous_2154_._set_name('anonymous')
                PyJs_anonymous_2154_()
                @Js
                def PyJs__doReset_2155_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2155_}, var)
                    var.registers([])
                    def PyJs_LONG_2156_(var=var):
                        return var.get('X64WordArray').get('init').create(Js([var.get('X64Word').get('init').create(Js(1779033703), Js(4089235720)), var.get('X64Word').get('init').create(Js(3144134277), Js(2227873595)), var.get('X64Word').get('init').create(Js(1013904242), Js(4271175723)), var.get('X64Word').get('init').create(Js(2773480762), Js(1595750129)), var.get('X64Word').get('init').create(Js(1359893119), Js(2917565137)), var.get('X64Word').get('init').create(Js(2600822924), Js(725511199)), var.get('X64Word').get('init').create(Js(528734635), Js(4215389547)), var.get('X64Word').get('init').create(Js(1541459225), Js(327033209))]))
                    var.get(u"this").put('_hash', PyJs_LONG_2156_())
                PyJs__doReset_2155_._set_name('_doReset')
                @Js
                def PyJs__doProcessBlock_2157_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, '_doProcessBlock':PyJs__doProcessBlock_2157_}, var)
                    var.registers(['bl', 'H1l', 'Wi16h', 'H', 'H3', 'Wih', 'H0l', 'H0', 'i', 'H2l', 't2h', 'fh', 'H7', 't2l', 'Kil', 'H2', 'eh', 'bh', 'gh', 'H2h', 'majh', 'sigma0l', 'gamma0l', 'gamma1l', 'gamma1xl', 'chh', 'sigma0h', 'Wi7l', 'Wi16', 'Kih', 'H6', 'H5h', 't1h', 'el', 'gamma1h', 'dh', 'gl', 'gamma0xh', 'Wi16l', 'al', 'gamma0h', 'majl', 'H6l', 'sigma1h', 'ah', 'H0h', 'H4', 'H7l', 'H3h', 'gamma0x', 'Wi', 'H7h', 'hl', 'hh', 'H5', 'H4l', 'gamma0xl', 'H1', 'sigma1l', 'H1h', 't1l', 'gamma1xh', 'offset', 'H3l', 'M', 'gamma1x', 'chl', 'Wil', 'ch', 'H4h', 'H6h', 'Wi7', 'Ki', 'Wi7h', 'H5l', 'dl', 'fl', 'cl'])
                    var.put('H', var.get(u"this").get('_hash').get('words'))
                    var.put('H0', var.get('H').get('0'))
                    var.put('H1', var.get('H').get('1'))
                    var.put('H2', var.get('H').get('2'))
                    var.put('H3', var.get('H').get('3'))
                    var.put('H4', var.get('H').get('4'))
                    var.put('H5', var.get('H').get('5'))
                    var.put('H6', var.get('H').get('6'))
                    var.put('H7', var.get('H').get('7'))
                    var.put('H0h', var.get('H0').get('high'))
                    var.put('H0l', var.get('H0').get('low'))
                    var.put('H1h', var.get('H1').get('high'))
                    var.put('H1l', var.get('H1').get('low'))
                    var.put('H2h', var.get('H2').get('high'))
                    var.put('H2l', var.get('H2').get('low'))
                    var.put('H3h', var.get('H3').get('high'))
                    var.put('H3l', var.get('H3').get('low'))
                    var.put('H4h', var.get('H4').get('high'))
                    var.put('H4l', var.get('H4').get('low'))
                    var.put('H5h', var.get('H5').get('high'))
                    var.put('H5l', var.get('H5').get('low'))
                    var.put('H6h', var.get('H6').get('high'))
                    var.put('H6l', var.get('H6').get('low'))
                    var.put('H7h', var.get('H7').get('high'))
                    var.put('H7l', var.get('H7').get('low'))
                    var.put('ah', var.get('H0h'))
                    var.put('al', var.get('H0l'))
                    var.put('bh', var.get('H1h'))
                    var.put('bl', var.get('H1l'))
                    var.put('ch', var.get('H2h'))
                    var.put('cl', var.get('H2l'))
                    var.put('dh', var.get('H3h'))
                    var.put('dl', var.get('H3l'))
                    var.put('eh', var.get('H4h'))
                    var.put('el', var.get('H4l'))
                    var.put('fh', var.get('H5h'))
                    var.put('fl', var.get('H5l'))
                    var.put('gh', var.get('H6h'))
                    var.put('gl', var.get('H6l'))
                    var.put('hh', var.get('H7h'))
                    var.put('hl', var.get('H7l'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(80.0)):
                        try:
                            pass
                            pass
                            var.put('Wi', var.get('W').get(var.get('i')))
                            if (var.get('i')<Js(16.0)):
                                var.put('Wih', var.get('Wi').put('high', (var.get('M').get((var.get('offset')+(var.get('i')*Js(2.0))))|Js(0.0))))
                                var.put('Wil', var.get('Wi').put('low', (var.get('M').get(((var.get('offset')+(var.get('i')*Js(2.0)))+Js(1.0)))|Js(0.0))))
                            else:
                                var.put('gamma0x', var.get('W').get((var.get('i')-Js(15.0))))
                                var.put('gamma0xh', var.get('gamma0x').get('high'))
                                var.put('gamma0xl', var.get('gamma0x').get('low'))
                                var.put('gamma0h', (((PyJsBshift(var.get('gamma0xh'),Js(1.0))|(var.get('gamma0xl')<<Js(31.0)))^(PyJsBshift(var.get('gamma0xh'),Js(8.0))|(var.get('gamma0xl')<<Js(24.0))))^PyJsBshift(var.get('gamma0xh'),Js(7.0))))
                                var.put('gamma0l', (((PyJsBshift(var.get('gamma0xl'),Js(1.0))|(var.get('gamma0xh')<<Js(31.0)))^(PyJsBshift(var.get('gamma0xl'),Js(8.0))|(var.get('gamma0xh')<<Js(24.0))))^(PyJsBshift(var.get('gamma0xl'),Js(7.0))|(var.get('gamma0xh')<<Js(25.0)))))
                                var.put('gamma1x', var.get('W').get((var.get('i')-Js(2.0))))
                                var.put('gamma1xh', var.get('gamma1x').get('high'))
                                var.put('gamma1xl', var.get('gamma1x').get('low'))
                                var.put('gamma1h', (((PyJsBshift(var.get('gamma1xh'),Js(19.0))|(var.get('gamma1xl')<<Js(13.0)))^((var.get('gamma1xh')<<Js(3.0))|PyJsBshift(var.get('gamma1xl'),Js(29.0))))^PyJsBshift(var.get('gamma1xh'),Js(6.0))))
                                var.put('gamma1l', (((PyJsBshift(var.get('gamma1xl'),Js(19.0))|(var.get('gamma1xh')<<Js(13.0)))^((var.get('gamma1xl')<<Js(3.0))|PyJsBshift(var.get('gamma1xh'),Js(29.0))))^(PyJsBshift(var.get('gamma1xl'),Js(6.0))|(var.get('gamma1xh')<<Js(26.0)))))
                                var.put('Wi7', var.get('W').get((var.get('i')-Js(7.0))))
                                var.put('Wi7h', var.get('Wi7').get('high'))
                                var.put('Wi7l', var.get('Wi7').get('low'))
                                var.put('Wi16', var.get('W').get((var.get('i')-Js(16.0))))
                                var.put('Wi16h', var.get('Wi16').get('high'))
                                var.put('Wi16l', var.get('Wi16').get('low'))
                                var.put('Wil', (var.get('gamma0l')+var.get('Wi7l')))
                                var.put('Wih', ((var.get('gamma0h')+var.get('Wi7h'))+(Js(1.0) if (PyJsBshift(var.get('Wil'),Js(0.0))<PyJsBshift(var.get('gamma0l'),Js(0.0))) else Js(0.0))))
                                var.put('Wil', (var.get('Wil')+var.get('gamma1l')))
                                var.put('Wih', ((var.get('Wih')+var.get('gamma1h'))+(Js(1.0) if (PyJsBshift(var.get('Wil'),Js(0.0))<PyJsBshift(var.get('gamma1l'),Js(0.0))) else Js(0.0))))
                                var.put('Wil', (var.get('Wil')+var.get('Wi16l')))
                                var.put('Wih', ((var.get('Wih')+var.get('Wi16h'))+(Js(1.0) if (PyJsBshift(var.get('Wil'),Js(0.0))<PyJsBshift(var.get('Wi16l'),Js(0.0))) else Js(0.0))))
                                var.get('Wi').put('high', var.get('Wih'))
                                var.get('Wi').put('low', var.get('Wil'))
                            var.put('chh', ((var.get('eh')&var.get('fh'))^((~var.get('eh'))&var.get('gh'))))
                            var.put('chl', ((var.get('el')&var.get('fl'))^((~var.get('el'))&var.get('gl'))))
                            var.put('majh', (((var.get('ah')&var.get('bh'))^(var.get('ah')&var.get('ch')))^(var.get('bh')&var.get('ch'))))
                            var.put('majl', (((var.get('al')&var.get('bl'))^(var.get('al')&var.get('cl')))^(var.get('bl')&var.get('cl'))))
                            var.put('sigma0h', (((PyJsBshift(var.get('ah'),Js(28.0))|(var.get('al')<<Js(4.0)))^((var.get('ah')<<Js(30.0))|PyJsBshift(var.get('al'),Js(2.0))))^((var.get('ah')<<Js(25.0))|PyJsBshift(var.get('al'),Js(7.0)))))
                            var.put('sigma0l', (((PyJsBshift(var.get('al'),Js(28.0))|(var.get('ah')<<Js(4.0)))^((var.get('al')<<Js(30.0))|PyJsBshift(var.get('ah'),Js(2.0))))^((var.get('al')<<Js(25.0))|PyJsBshift(var.get('ah'),Js(7.0)))))
                            var.put('sigma1h', (((PyJsBshift(var.get('eh'),Js(14.0))|(var.get('el')<<Js(18.0)))^(PyJsBshift(var.get('eh'),Js(18.0))|(var.get('el')<<Js(14.0))))^((var.get('eh')<<Js(23.0))|PyJsBshift(var.get('el'),Js(9.0)))))
                            var.put('sigma1l', (((PyJsBshift(var.get('el'),Js(14.0))|(var.get('eh')<<Js(18.0)))^(PyJsBshift(var.get('el'),Js(18.0))|(var.get('eh')<<Js(14.0))))^((var.get('el')<<Js(23.0))|PyJsBshift(var.get('eh'),Js(9.0)))))
                            var.put('Ki', var.get('K').get(var.get('i')))
                            var.put('Kih', var.get('Ki').get('high'))
                            var.put('Kil', var.get('Ki').get('low'))
                            var.put('t1l', (var.get('hl')+var.get('sigma1l')))
                            var.put('t1h', ((var.get('hh')+var.get('sigma1h'))+(Js(1.0) if (PyJsBshift(var.get('t1l'),Js(0.0))<PyJsBshift(var.get('hl'),Js(0.0))) else Js(0.0))))
                            var.put('t1l', (var.get('t1l')+var.get('chl')))
                            var.put('t1h', ((var.get('t1h')+var.get('chh'))+(Js(1.0) if (PyJsBshift(var.get('t1l'),Js(0.0))<PyJsBshift(var.get('chl'),Js(0.0))) else Js(0.0))))
                            var.put('t1l', (var.get('t1l')+var.get('Kil')))
                            var.put('t1h', ((var.get('t1h')+var.get('Kih'))+(Js(1.0) if (PyJsBshift(var.get('t1l'),Js(0.0))<PyJsBshift(var.get('Kil'),Js(0.0))) else Js(0.0))))
                            var.put('t1l', (var.get('t1l')+var.get('Wil')))
                            var.put('t1h', ((var.get('t1h')+var.get('Wih'))+(Js(1.0) if (PyJsBshift(var.get('t1l'),Js(0.0))<PyJsBshift(var.get('Wil'),Js(0.0))) else Js(0.0))))
                            var.put('t2l', (var.get('sigma0l')+var.get('majl')))
                            var.put('t2h', ((var.get('sigma0h')+var.get('majh'))+(Js(1.0) if (PyJsBshift(var.get('t2l'),Js(0.0))<PyJsBshift(var.get('sigma0l'),Js(0.0))) else Js(0.0))))
                            var.put('hh', var.get('gh'))
                            var.put('hl', var.get('gl'))
                            var.put('gh', var.get('fh'))
                            var.put('gl', var.get('fl'))
                            var.put('fh', var.get('eh'))
                            var.put('fl', var.get('el'))
                            var.put('el', ((var.get('dl')+var.get('t1l'))|Js(0.0)))
                            var.put('eh', (((var.get('dh')+var.get('t1h'))+(Js(1.0) if (PyJsBshift(var.get('el'),Js(0.0))<PyJsBshift(var.get('dl'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                            var.put('dh', var.get('ch'))
                            var.put('dl', var.get('cl'))
                            var.put('ch', var.get('bh'))
                            var.put('cl', var.get('bl'))
                            var.put('bh', var.get('ah'))
                            var.put('bl', var.get('al'))
                            var.put('al', ((var.get('t1l')+var.get('t2l'))|Js(0.0)))
                            var.put('ah', (((var.get('t1h')+var.get('t2h'))+(Js(1.0) if (PyJsBshift(var.get('al'),Js(0.0))<PyJsBshift(var.get('t1l'),Js(0.0))) else Js(0.0)))|Js(0.0)))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('H0l', var.get('H0').put('low', (var.get('H0l')+var.get('al'))))
                    var.get('H0').put('high', ((var.get('H0h')+var.get('ah'))+(Js(1.0) if (PyJsBshift(var.get('H0l'),Js(0.0))<PyJsBshift(var.get('al'),Js(0.0))) else Js(0.0))))
                    var.put('H1l', var.get('H1').put('low', (var.get('H1l')+var.get('bl'))))
                    var.get('H1').put('high', ((var.get('H1h')+var.get('bh'))+(Js(1.0) if (PyJsBshift(var.get('H1l'),Js(0.0))<PyJsBshift(var.get('bl'),Js(0.0))) else Js(0.0))))
                    var.put('H2l', var.get('H2').put('low', (var.get('H2l')+var.get('cl'))))
                    var.get('H2').put('high', ((var.get('H2h')+var.get('ch'))+(Js(1.0) if (PyJsBshift(var.get('H2l'),Js(0.0))<PyJsBshift(var.get('cl'),Js(0.0))) else Js(0.0))))
                    var.put('H3l', var.get('H3').put('low', (var.get('H3l')+var.get('dl'))))
                    var.get('H3').put('high', ((var.get('H3h')+var.get('dh'))+(Js(1.0) if (PyJsBshift(var.get('H3l'),Js(0.0))<PyJsBshift(var.get('dl'),Js(0.0))) else Js(0.0))))
                    var.put('H4l', var.get('H4').put('low', (var.get('H4l')+var.get('el'))))
                    var.get('H4').put('high', ((var.get('H4h')+var.get('eh'))+(Js(1.0) if (PyJsBshift(var.get('H4l'),Js(0.0))<PyJsBshift(var.get('el'),Js(0.0))) else Js(0.0))))
                    var.put('H5l', var.get('H5').put('low', (var.get('H5l')+var.get('fl'))))
                    var.get('H5').put('high', ((var.get('H5h')+var.get('fh'))+(Js(1.0) if (PyJsBshift(var.get('H5l'),Js(0.0))<PyJsBshift(var.get('fl'),Js(0.0))) else Js(0.0))))
                    var.put('H6l', var.get('H6').put('low', (var.get('H6l')+var.get('gl'))))
                    var.get('H6').put('high', ((var.get('H6h')+var.get('gh'))+(Js(1.0) if (PyJsBshift(var.get('H6l'),Js(0.0))<PyJsBshift(var.get('gl'),Js(0.0))) else Js(0.0))))
                    var.put('H7l', var.get('H7').put('low', (var.get('H7l')+var.get('hl'))))
                    var.get('H7').put('high', ((var.get('H7h')+var.get('hh'))+(Js(1.0) if (PyJsBshift(var.get('H7l'),Js(0.0))<PyJsBshift(var.get('hl'),Js(0.0))) else Js(0.0))))
                PyJs__doProcessBlock_2157_._set_name('_doProcessBlock')
                @Js
                def PyJs__doFinalize_2158_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doFinalize':PyJs__doFinalize_2158_}, var)
                    var.registers(['hash', 'nBitsLeft', 'dataWords', 'data', 'nBitsTotal'])
                    var.put('data', var.get(u"this").get('_data'))
                    var.put('dataWords', var.get('data').get('words'))
                    var.put('nBitsTotal', (var.get(u"this").get('_nDataBytes')*Js(8.0)))
                    var.put('nBitsLeft', (var.get('data').get('sigBytes')*Js(8.0)))
                    var.get('dataWords').put(PyJsBshift(var.get('nBitsLeft'),Js(5.0)), (Js(128)<<(Js(24.0)-(var.get('nBitsLeft')%Js(32.0)))), '|')
                    var.get('dataWords').put(((PyJsBshift((var.get('nBitsLeft')+Js(128.0)),Js(10.0))<<Js(5.0))+Js(30.0)), var.get('Math').callprop('floor', (var.get('nBitsTotal')/Js(4294967296))))
                    var.get('dataWords').put(((PyJsBshift((var.get('nBitsLeft')+Js(128.0)),Js(10.0))<<Js(5.0))+Js(31.0)), var.get('nBitsTotal'))
                    var.get('data').put('sigBytes', (var.get('dataWords').get('length')*Js(4.0)))
                    var.get(u"this").callprop('_process')
                    var.put('hash', var.get(u"this").get('_hash').callprop('toX32'))
                    return var.get('hash')
                PyJs__doFinalize_2158_._set_name('_doFinalize')
                @Js
                def PyJs_clone_2159_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_2159_}, var)
                    var.registers(['clone'])
                    var.put('clone', var.get('Hasher').get('clone').callprop('call', var.get(u"this")))
                    var.get('clone').put('_hash', var.get(u"this").get('_hash').callprop('clone'))
                    return var.get('clone')
                PyJs_clone_2159_._set_name('clone')
                var.put('SHA512', var.get('C_algo').put('SHA512', var.get('Hasher').callprop('extend', Js({'_doReset':PyJs__doReset_2155_,'_doProcessBlock':PyJs__doProcessBlock_2157_,'_doFinalize':PyJs__doFinalize_2158_,'clone':PyJs_clone_2159_,'blockSize':(Js(1024.0)/Js(32.0))}))))
                var.get('C').put('SHA512', var.get('Hasher').callprop('_createHelper', var.get('SHA512')))
                var.get('C').put('HmacSHA512', var.get('Hasher').callprop('_createHmacHelper', var.get('SHA512')))
            PyJs_anonymous_2153_._set_name('anonymous')
            PyJs_anonymous_2153_()
            return var.get('CryptoJS').get('SHA512')
        PyJs_anonymous_2152_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2160_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./x64-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./x64-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2160_._set_name('anonymous')
        PyJs_anonymous_2160_(var.get(u"this"), PyJs_anonymous_2152_)
    PyJs_anonymous_2151_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2161_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2162_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2163_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['WordArray', 'PC2', 'C', 'SBOX_P', 'SBOX_MASK', 'BIT_SHIFTS', 'C_lib', 'exchangeRL', 'PC1', 'TripleDES', 'DES', 'C_algo', 'exchangeLR', 'BlockCipher'])
                @Js
                def PyJsHoisted_exchangeLR_(offset, mask, this, arguments, var=var):
                    var = Scope({'offset':offset, 'mask':mask, 'this':this, 'arguments':arguments}, var)
                    var.registers(['mask', 'offset', 't'])
                    var.put('t', ((PyJsBshift(var.get(u"this").get('_lBlock'),var.get('offset'))^var.get(u"this").get('_rBlock'))&var.get('mask')))
                    var.get(u"this").put('_rBlock', var.get('t'), '^')
                    var.get(u"this").put('_lBlock', (var.get('t')<<var.get('offset')), '^')
                PyJsHoisted_exchangeLR_.func_name = 'exchangeLR'
                var.put('exchangeLR', PyJsHoisted_exchangeLR_)
                @Js
                def PyJsHoisted_exchangeRL_(offset, mask, this, arguments, var=var):
                    var = Scope({'offset':offset, 'mask':mask, 'this':this, 'arguments':arguments}, var)
                    var.registers(['mask', 'offset', 't'])
                    var.put('t', ((PyJsBshift(var.get(u"this").get('_rBlock'),var.get('offset'))^var.get(u"this").get('_lBlock'))&var.get('mask')))
                    var.get(u"this").put('_lBlock', var.get('t'), '^')
                    var.get(u"this").put('_rBlock', (var.get('t')<<var.get('offset')), '^')
                PyJsHoisted_exchangeRL_.func_name = 'exchangeRL'
                var.put('exchangeRL', PyJsHoisted_exchangeRL_)
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('WordArray', var.get('C_lib').get('WordArray'))
                var.put('BlockCipher', var.get('C_lib').get('BlockCipher'))
                var.put('C_algo', var.get('C').get('algo'))
                var.put('PC1', Js([Js(57.0), Js(49.0), Js(41.0), Js(33.0), Js(25.0), Js(17.0), Js(9.0), Js(1.0), Js(58.0), Js(50.0), Js(42.0), Js(34.0), Js(26.0), Js(18.0), Js(10.0), Js(2.0), Js(59.0), Js(51.0), Js(43.0), Js(35.0), Js(27.0), Js(19.0), Js(11.0), Js(3.0), Js(60.0), Js(52.0), Js(44.0), Js(36.0), Js(63.0), Js(55.0), Js(47.0), Js(39.0), Js(31.0), Js(23.0), Js(15.0), Js(7.0), Js(62.0), Js(54.0), Js(46.0), Js(38.0), Js(30.0), Js(22.0), Js(14.0), Js(6.0), Js(61.0), Js(53.0), Js(45.0), Js(37.0), Js(29.0), Js(21.0), Js(13.0), Js(5.0), Js(28.0), Js(20.0), Js(12.0), Js(4.0)]))
                var.put('PC2', Js([Js(14.0), Js(17.0), Js(11.0), Js(24.0), Js(1.0), Js(5.0), Js(3.0), Js(28.0), Js(15.0), Js(6.0), Js(21.0), Js(10.0), Js(23.0), Js(19.0), Js(12.0), Js(4.0), Js(26.0), Js(8.0), Js(16.0), Js(7.0), Js(27.0), Js(20.0), Js(13.0), Js(2.0), Js(41.0), Js(52.0), Js(31.0), Js(37.0), Js(47.0), Js(55.0), Js(30.0), Js(40.0), Js(51.0), Js(45.0), Js(33.0), Js(48.0), Js(44.0), Js(49.0), Js(39.0), Js(56.0), Js(34.0), Js(53.0), Js(46.0), Js(42.0), Js(50.0), Js(36.0), Js(29.0), Js(32.0)]))
                var.put('BIT_SHIFTS', Js([Js(1.0), Js(2.0), Js(4.0), Js(6.0), Js(8.0), Js(10.0), Js(12.0), Js(14.0), Js(15.0), Js(17.0), Js(19.0), Js(21.0), Js(23.0), Js(25.0), Js(27.0), Js(28.0)]))
                var.put('SBOX_P', Js([Js({'0':Js(8421888),'268435456':Js(32768),'536870912':Js(8421378),'805306368':Js(2),'1073741824':Js(512),'1342177280':Js(8421890),'1610612736':Js(8389122),'1879048192':Js(8388608),'2147483648':Js(514),'2415919104':Js(8389120),'2684354560':Js(33280),'2952790016':Js(8421376),'3221225472':Js(32770),'3489660928':Js(8388610),'3758096384':Js(0),'4026531840':Js(33282),'134217728':Js(0),'402653184':Js(8421890),'671088640':Js(33282),'939524096':Js(32768),'1207959552':Js(8421888),'1476395008':Js(512),'1744830464':Js(8421378),'2013265920':Js(2),'2281701376':Js(8389120),'2550136832':Js(33280),'2818572288':Js(8421376),'3087007744':Js(8389122),'3355443200':Js(8388610),'3623878656':Js(32770),'3892314112':Js(514),'4160749568':Js(8388608),'1':Js(32768),'268435457':Js(2),'536870913':Js(8421888),'805306369':Js(8388608),'1073741825':Js(8421378),'1342177281':Js(33280),'1610612737':Js(512),'1879048193':Js(8389122),'2147483649':Js(8421890),'2415919105':Js(8421376),'2684354561':Js(8388610),'2952790017':Js(33282),'3221225473':Js(514),'3489660929':Js(8389120),'3758096385':Js(32770),'4026531841':Js(0),'134217729':Js(8421890),'402653185':Js(8421376),'671088641':Js(8388608),'939524097':Js(512),'1207959553':Js(32768),'1476395009':Js(8388610),'1744830465':Js(2),'2013265921':Js(33282),'2281701377':Js(32770),'2550136833':Js(8389122),'2818572289':Js(514),'3087007745':Js(8421888),'3355443201':Js(8389120),'3623878657':Js(0),'3892314113':Js(33280),'4160749569':Js(8421378)}), Js({'0':Js(1074282512),'16777216':Js(16384),'33554432':Js(524288),'50331648':Js(1074266128),'67108864':Js(1073741840),'83886080':Js(1074282496),'100663296':Js(1073758208),'117440512':Js(16),'134217728':Js(540672),'150994944':Js(1073758224),'167772160':Js(1073741824),'184549376':Js(540688),'201326592':Js(524304),'218103808':Js(0),'234881024':Js(16400),'251658240':Js(1074266112),'8388608':Js(1073758208),'25165824':Js(540688),'41943040':Js(16),'58720256':Js(1073758224),'75497472':Js(1074282512),'92274688':Js(1073741824),'109051904':Js(524288),'125829120':Js(1074266128),'142606336':Js(524304),'159383552':Js(0),'176160768':Js(16384),'192937984':Js(1074266112),'209715200':Js(1073741840),'226492416':Js(540672),'243269632':Js(1074282496),'260046848':Js(16400),'268435456':Js(0),'285212672':Js(1074266128),'301989888':Js(1073758224),'318767104':Js(1074282496),'335544320':Js(1074266112),'352321536':Js(16),'369098752':Js(540688),'385875968':Js(16384),'402653184':Js(16400),'419430400':Js(524288),'436207616':Js(524304),'452984832':Js(1073741840),'469762048':Js(540672),'486539264':Js(1073758208),'503316480':Js(1073741824),'520093696':Js(1074282512),'276824064':Js(540688),'293601280':Js(524288),'310378496':Js(1074266112),'327155712':Js(16384),'343932928':Js(1073758208),'360710144':Js(1074282512),'377487360':Js(16),'394264576':Js(1073741824),'411041792':Js(1074282496),'427819008':Js(1073741840),'444596224':Js(1073758224),'461373440':Js(524304),'478150656':Js(0),'494927872':Js(16400),'511705088':Js(1074266128),'528482304':Js(540672)}), Js({'0':Js(260),'1048576':Js(0),'2097152':Js(67109120),'3145728':Js(65796),'4194304':Js(65540),'5242880':Js(67108868),'6291456':Js(67174660),'7340032':Js(67174400),'8388608':Js(67108864),'9437184':Js(67174656),'10485760':Js(65792),'11534336':Js(67174404),'12582912':Js(67109124),'13631488':Js(65536),'14680064':Js(4),'15728640':Js(256),'524288':Js(67174656),'1572864':Js(67174404),'2621440':Js(0),'3670016':Js(67109120),'4718592':Js(67108868),'5767168':Js(65536),'6815744':Js(65540),'7864320':Js(260),'8912896':Js(4),'9961472':Js(256),'11010048':Js(67174400),'12058624':Js(65796),'13107200':Js(65792),'14155776':Js(67109124),'15204352':Js(67174660),'16252928':Js(67108864),'16777216':Js(67174656),'17825792':Js(65540),'18874368':Js(65536),'19922944':Js(67109120),'20971520':Js(256),'22020096':Js(67174660),'23068672':Js(67108868),'24117248':Js(0),'25165824':Js(67109124),'26214400':Js(67108864),'27262976':Js(4),'28311552':Js(65792),'29360128':Js(67174400),'30408704':Js(260),'31457280':Js(65796),'32505856':Js(67174404),'17301504':Js(67108864),'18350080':Js(260),'19398656':Js(67174656),'20447232':Js(0),'21495808':Js(65540),'22544384':Js(67109120),'23592960':Js(256),'24641536':Js(67174404),'25690112':Js(65536),'26738688':Js(67174660),'27787264':Js(65796),'28835840':Js(67108868),'29884416':Js(67109124),'30932992':Js(67174400),'31981568':Js(4),'33030144':Js(65792)}), Js({'0':Js(2151682048),'65536':Js(2147487808),'131072':Js(4198464),'196608':Js(2151677952),'262144':Js(0),'327680':Js(4198400),'393216':Js(2147483712),'458752':Js(4194368),'524288':Js(2147483648),'589824':Js(4194304),'655360':Js(64),'720896':Js(2147487744),'786432':Js(2151678016),'851968':Js(4160),'917504':Js(4096),'983040':Js(2151682112),'32768':Js(2147487808),'98304':Js(64),'163840':Js(2151678016),'229376':Js(2147487744),'294912':Js(4198400),'360448':Js(2151682112),'425984':Js(0),'491520':Js(2151677952),'557056':Js(4096),'622592':Js(2151682048),'688128':Js(4194304),'753664':Js(4160),'819200':Js(2147483648),'884736':Js(4194368),'950272':Js(4198464),'1015808':Js(2147483712),'1048576':Js(4194368),'1114112':Js(4198400),'1179648':Js(2147483712),'1245184':Js(0),'1310720':Js(4160),'1376256':Js(2151678016),'1441792':Js(2151682048),'1507328':Js(2147487808),'1572864':Js(2151682112),'1638400':Js(2147483648),'1703936':Js(2151677952),'1769472':Js(4198464),'1835008':Js(2147487744),'1900544':Js(4194304),'1966080':Js(64),'2031616':Js(4096),'1081344':Js(2151677952),'1146880':Js(2151682112),'1212416':Js(0),'1277952':Js(4198400),'1343488':Js(4194368),'1409024':Js(2147483648),'1474560':Js(2147487808),'1540096':Js(64),'1605632':Js(2147483712),'1671168':Js(4096),'1736704':Js(2147487744),'1802240':Js(2151678016),'1867776':Js(4160),'1933312':Js(2151682048),'1998848':Js(4194304),'2064384':Js(4198464)}), Js({'0':Js(128),'4096':Js(17039360),'8192':Js(262144),'12288':Js(536870912),'16384':Js(537133184),'20480':Js(16777344),'24576':Js(553648256),'28672':Js(262272),'32768':Js(16777216),'36864':Js(537133056),'40960':Js(536871040),'45056':Js(553910400),'49152':Js(553910272),'53248':Js(0),'57344':Js(17039488),'61440':Js(553648128),'2048':Js(17039488),'6144':Js(553648256),'10240':Js(128),'14336':Js(17039360),'18432':Js(262144),'22528':Js(537133184),'26624':Js(553910272),'30720':Js(536870912),'34816':Js(537133056),'38912':Js(0),'43008':Js(553910400),'47104':Js(16777344),'51200':Js(536871040),'55296':Js(553648128),'59392':Js(16777216),'63488':Js(262272),'65536':Js(262144),'69632':Js(128),'73728':Js(536870912),'77824':Js(553648256),'81920':Js(16777344),'86016':Js(553910272),'90112':Js(537133184),'94208':Js(16777216),'98304':Js(553910400),'102400':Js(553648128),'106496':Js(17039360),'110592':Js(537133056),'114688':Js(262272),'118784':Js(536871040),'122880':Js(0),'126976':Js(17039488),'67584':Js(553648256),'71680':Js(16777216),'75776':Js(17039360),'79872':Js(537133184),'83968':Js(536870912),'88064':Js(17039488),'92160':Js(128),'96256':Js(553910272),'100352':Js(262272),'104448':Js(553910400),'108544':Js(0),'112640':Js(553648128),'116736':Js(16777344),'120832':Js(262144),'124928':Js(537133056),'129024':Js(536871040)}), Js({'0':Js(268435464),'256':Js(8192),'512':Js(270532608),'768':Js(270540808),'1024':Js(268443648),'1280':Js(2097152),'1536':Js(2097160),'1792':Js(268435456),'2048':Js(0),'2304':Js(268443656),'2560':Js(2105344),'2816':Js(8),'3072':Js(270532616),'3328':Js(2105352),'3584':Js(8200),'3840':Js(270540800),'128':Js(270532608),'384':Js(270540808),'640':Js(8),'896':Js(2097152),'1152':Js(2105352),'1408':Js(268435464),'1664':Js(268443648),'1920':Js(8200),'2176':Js(2097160),'2432':Js(8192),'2688':Js(268443656),'2944':Js(270532616),'3200':Js(0),'3456':Js(270540800),'3712':Js(2105344),'3968':Js(268435456),'4096':Js(268443648),'4352':Js(270532616),'4608':Js(270540808),'4864':Js(8200),'5120':Js(2097152),'5376':Js(268435456),'5632':Js(268435464),'5888':Js(2105344),'6144':Js(2105352),'6400':Js(0),'6656':Js(8),'6912':Js(270532608),'7168':Js(8192),'7424':Js(268443656),'7680':Js(270540800),'7936':Js(2097160),'4224':Js(8),'4480':Js(2105344),'4736':Js(2097152),'4992':Js(268435464),'5248':Js(268443648),'5504':Js(8200),'5760':Js(270540808),'6016':Js(270532608),'6272':Js(270540800),'6528':Js(270532616),'6784':Js(8192),'7040':Js(2105352),'7296':Js(2097160),'7552':Js(0),'7808':Js(268435456),'8064':Js(268443656)}), Js({'0':Js(1048576),'16':Js(33555457),'32':Js(1024),'48':Js(1049601),'64':Js(34604033),'80':Js(0),'96':Js(1),'112':Js(34603009),'128':Js(33555456),'144':Js(1048577),'160':Js(33554433),'176':Js(34604032),'192':Js(34603008),'208':Js(1025),'224':Js(1049600),'240':Js(33554432),'8':Js(34603009),'24':Js(0),'40':Js(33555457),'56':Js(34604032),'72':Js(1048576),'88':Js(33554433),'104':Js(33554432),'120':Js(1025),'136':Js(1049601),'152':Js(33555456),'168':Js(34603008),'184':Js(1048577),'200':Js(1024),'216':Js(34604033),'232':Js(1),'248':Js(1049600),'256':Js(33554432),'272':Js(1048576),'288':Js(33555457),'304':Js(34603009),'320':Js(1048577),'336':Js(33555456),'352':Js(34604032),'368':Js(1049601),'384':Js(1025),'400':Js(34604033),'416':Js(1049600),'432':Js(1),'448':Js(0),'464':Js(34603008),'480':Js(33554433),'496':Js(1024),'264':Js(1049600),'280':Js(33555457),'296':Js(34603009),'312':Js(1),'328':Js(33554432),'344':Js(1048576),'360':Js(1025),'376':Js(34604032),'392':Js(33554433),'408':Js(34603008),'424':Js(0),'440':Js(34604033),'456':Js(1049601),'472':Js(1024),'488':Js(33555456),'504':Js(1048577)}), Js({'0':Js(134219808),'1':Js(131072),'2':Js(134217728),'3':Js(32),'4':Js(131104),'5':Js(134350880),'6':Js(134350848),'7':Js(2048),'8':Js(134348800),'9':Js(134219776),'10':Js(133120),'11':Js(134348832),'12':Js(2080),'13':Js(0),'14':Js(134217760),'15':Js(133152),'2147483648':Js(2048),'2147483649':Js(134350880),'2147483650':Js(134219808),'2147483651':Js(134217728),'2147483652':Js(134348800),'2147483653':Js(133120),'2147483654':Js(133152),'2147483655':Js(32),'2147483656':Js(134217760),'2147483657':Js(2080),'2147483658':Js(131104),'2147483659':Js(134350848),'2147483660':Js(0),'2147483661':Js(134348832),'2147483662':Js(134219776),'2147483663':Js(131072),'16':Js(133152),'17':Js(134350848),'18':Js(32),'19':Js(2048),'20':Js(134219776),'21':Js(134217760),'22':Js(134348832),'23':Js(131072),'24':Js(0),'25':Js(131104),'26':Js(134348800),'27':Js(134219808),'28':Js(134350880),'29':Js(133120),'30':Js(2080),'31':Js(134217728),'2147483664':Js(131072),'2147483665':Js(2048),'2147483666':Js(134348832),'2147483667':Js(133152),'2147483668':Js(32),'2147483669':Js(134348800),'2147483670':Js(134217728),'2147483671':Js(134219808),'2147483672':Js(134350880),'2147483673':Js(134217760),'2147483674':Js(134219776),'2147483675':Js(0),'2147483676':Js(133120),'2147483677':Js(2080),'2147483678':Js(131104),'2147483679':Js(134350848)})]))
                var.put('SBOX_MASK', Js([Js(4160749569), Js(528482304), Js(33030144), Js(2064384), Js(129024), Js(8064), Js(504), Js(2147483679)]))
                @Js
                def PyJs__doReset_2164_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2164_}, var)
                    var.registers(['keyBits', 'invSubKeys', 'subKey', 'i', 'keyBitPos', 'nSubKey', 'key', 'keyWords', 'subKeys', 'bitShift'])
                    var.put('key', var.get(u"this").get('_key'))
                    var.put('keyWords', var.get('key').get('words'))
                    var.put('keyBits', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(56.0)):
                        try:
                            var.put('keyBitPos', (var.get('PC1').get(var.get('i'))-Js(1.0)))
                            var.get('keyBits').put(var.get('i'), (PyJsBshift(var.get('keyWords').get(PyJsBshift(var.get('keyBitPos'),Js(5.0))),(Js(31.0)-(var.get('keyBitPos')%Js(32.0))))&Js(1.0)))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('subKeys', var.get(u"this").put('_subKeys', Js([])))
                    #for JS loop
                    var.put('nSubKey', Js(0.0))
                    while (var.get('nSubKey')<Js(16.0)):
                        try:
                            var.put('subKey', var.get('subKeys').put(var.get('nSubKey'), Js([])))
                            var.put('bitShift', var.get('BIT_SHIFTS').get(var.get('nSubKey')))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<Js(24.0)):
                                try:
                                    var.get('subKey').put(((var.get('i')/Js(6.0))|Js(0.0)), (var.get('keyBits').get((((var.get('PC2').get(var.get('i'))-Js(1.0))+var.get('bitShift'))%Js(28.0)))<<(Js(31.0)-(var.get('i')%Js(6.0)))), '|')
                                    var.get('subKey').put((Js(4.0)+((var.get('i')/Js(6.0))|Js(0.0))), (var.get('keyBits').get((Js(28.0)+(((var.get('PC2').get((var.get('i')+Js(24.0)))-Js(1.0))+var.get('bitShift'))%Js(28.0))))<<(Js(31.0)-(var.get('i')%Js(6.0)))), '|')
                                finally:
                                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            var.get('subKey').put('0', ((var.get('subKey').get('0')<<Js(1.0))|PyJsBshift(var.get('subKey').get('0'),Js(31.0))))
                            #for JS loop
                            var.put('i', Js(1.0))
                            while (var.get('i')<Js(7.0)):
                                try:
                                    var.get('subKey').put(var.get('i'), PyJsBshift(var.get('subKey').get(var.get('i')),(((var.get('i')-Js(1.0))*Js(4.0))+Js(3.0))))
                                finally:
                                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            var.get('subKey').put('7', ((var.get('subKey').get('7')<<Js(5.0))|PyJsBshift(var.get('subKey').get('7'),Js(27.0))))
                        finally:
                                (var.put('nSubKey',Js(var.get('nSubKey').to_number())+Js(1))-Js(1))
                    var.put('invSubKeys', var.get(u"this").put('_invSubKeys', Js([])))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<Js(16.0)):
                        try:
                            var.get('invSubKeys').put(var.get('i'), var.get('subKeys').get((Js(15.0)-var.get('i'))))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                PyJs__doReset_2164_._set_name('_doReset')
                @Js
                def PyJs_encryptBlock_2165_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, 'encryptBlock':PyJs_encryptBlock_2165_}, var)
                    var.registers(['M', 'offset'])
                    var.get(u"this").callprop('_doCryptBlock', var.get('M'), var.get('offset'), var.get(u"this").get('_subKeys'))
                PyJs_encryptBlock_2165_._set_name('encryptBlock')
                @Js
                def PyJs_decryptBlock_2166_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, 'decryptBlock':PyJs_decryptBlock_2166_}, var)
                    var.registers(['M', 'offset'])
                    var.get(u"this").callprop('_doCryptBlock', var.get('M'), var.get('offset'), var.get(u"this").get('_invSubKeys'))
                PyJs_decryptBlock_2166_._set_name('decryptBlock')
                @Js
                def PyJs__doCryptBlock_2167_(M, offset, subKeys, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'subKeys':subKeys, 'this':this, 'arguments':arguments, '_doCryptBlock':PyJs__doCryptBlock_2167_}, var)
                    var.registers(['subKey', 'f', 'lBlock', 'round', 'i', 'M', 'rBlock', 'subKeys', 't', 'offset'])
                    var.get(u"this").put('_lBlock', var.get('M').get(var.get('offset')))
                    var.get(u"this").put('_rBlock', var.get('M').get((var.get('offset')+Js(1.0))))
                    var.get('exchangeLR').callprop('call', var.get(u"this"), Js(4.0), Js(252645135))
                    var.get('exchangeLR').callprop('call', var.get(u"this"), Js(16.0), Js(65535))
                    var.get('exchangeRL').callprop('call', var.get(u"this"), Js(2.0), Js(858993459))
                    var.get('exchangeRL').callprop('call', var.get(u"this"), Js(8.0), Js(16711935))
                    var.get('exchangeLR').callprop('call', var.get(u"this"), Js(1.0), Js(1431655765))
                    #for JS loop
                    var.put('round', Js(0.0))
                    while (var.get('round')<Js(16.0)):
                        try:
                            var.put('subKey', var.get('subKeys').get(var.get('round')))
                            var.put('lBlock', var.get(u"this").get('_lBlock'))
                            var.put('rBlock', var.get(u"this").get('_rBlock'))
                            var.put('f', Js(0.0))
                            #for JS loop
                            var.put('i', Js(0.0))
                            while (var.get('i')<Js(8.0)):
                                try:
                                    var.put('f', var.get('SBOX_P').get(var.get('i')).get(PyJsBshift(((var.get('rBlock')^var.get('subKey').get(var.get('i')))&var.get('SBOX_MASK').get(var.get('i'))),Js(0.0))), '|')
                                finally:
                                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                            var.get(u"this").put('_lBlock', var.get('rBlock'))
                            var.get(u"this").put('_rBlock', (var.get('lBlock')^var.get('f')))
                        finally:
                                (var.put('round',Js(var.get('round').to_number())+Js(1))-Js(1))
                    var.put('t', var.get(u"this").get('_lBlock'))
                    var.get(u"this").put('_lBlock', var.get(u"this").get('_rBlock'))
                    var.get(u"this").put('_rBlock', var.get('t'))
                    var.get('exchangeLR').callprop('call', var.get(u"this"), Js(1.0), Js(1431655765))
                    var.get('exchangeRL').callprop('call', var.get(u"this"), Js(8.0), Js(16711935))
                    var.get('exchangeRL').callprop('call', var.get(u"this"), Js(2.0), Js(858993459))
                    var.get('exchangeLR').callprop('call', var.get(u"this"), Js(16.0), Js(65535))
                    var.get('exchangeLR').callprop('call', var.get(u"this"), Js(4.0), Js(252645135))
                    var.get('M').put(var.get('offset'), var.get(u"this").get('_lBlock'))
                    var.get('M').put((var.get('offset')+Js(1.0)), var.get(u"this").get('_rBlock'))
                PyJs__doCryptBlock_2167_._set_name('_doCryptBlock')
                var.put('DES', var.get('C_algo').put('DES', var.get('BlockCipher').callprop('extend', Js({'_doReset':PyJs__doReset_2164_,'encryptBlock':PyJs_encryptBlock_2165_,'decryptBlock':PyJs_decryptBlock_2166_,'_doCryptBlock':PyJs__doCryptBlock_2167_,'keySize':(Js(64.0)/Js(32.0)),'ivSize':(Js(64.0)/Js(32.0)),'blockSize':(Js(64.0)/Js(32.0))}))))
                pass
                pass
                var.get('C').put('DES', var.get('BlockCipher').callprop('_createHelper', var.get('DES')))
                @Js
                def PyJs__doReset_2168_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, '_doReset':PyJs__doReset_2168_}, var)
                    var.registers(['key3', 'key', 'keyWords', 'key1', 'key2'])
                    var.put('key', var.get(u"this").get('_key'))
                    var.put('keyWords', var.get('key').get('words'))
                    if ((PyJsStrictNeq(var.get('keyWords').get('length'),Js(2.0)) and PyJsStrictNeq(var.get('keyWords').get('length'),Js(4.0))) and (var.get('keyWords').get('length')<Js(6.0))):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.')))
                        raise PyJsTempException
                    var.put('key1', var.get('keyWords').callprop('slice', Js(0.0), Js(2.0)))
                    var.put('key2', (var.get('keyWords').callprop('slice', Js(0.0), Js(2.0)) if (var.get('keyWords').get('length')<Js(4.0)) else var.get('keyWords').callprop('slice', Js(2.0), Js(4.0))))
                    var.put('key3', (var.get('keyWords').callprop('slice', Js(0.0), Js(2.0)) if (var.get('keyWords').get('length')<Js(6.0)) else var.get('keyWords').callprop('slice', Js(4.0), Js(6.0))))
                    var.get(u"this").put('_des1', var.get('DES').callprop('createEncryptor', var.get('WordArray').callprop('create', var.get('key1'))))
                    var.get(u"this").put('_des2', var.get('DES').callprop('createEncryptor', var.get('WordArray').callprop('create', var.get('key2'))))
                    var.get(u"this").put('_des3', var.get('DES').callprop('createEncryptor', var.get('WordArray').callprop('create', var.get('key3'))))
                PyJs__doReset_2168_._set_name('_doReset')
                @Js
                def PyJs_encryptBlock_2169_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, 'encryptBlock':PyJs_encryptBlock_2169_}, var)
                    var.registers(['M', 'offset'])
                    var.get(u"this").get('_des1').callprop('encryptBlock', var.get('M'), var.get('offset'))
                    var.get(u"this").get('_des2').callprop('decryptBlock', var.get('M'), var.get('offset'))
                    var.get(u"this").get('_des3').callprop('encryptBlock', var.get('M'), var.get('offset'))
                PyJs_encryptBlock_2169_._set_name('encryptBlock')
                @Js
                def PyJs_decryptBlock_2170_(M, offset, this, arguments, var=var):
                    var = Scope({'M':M, 'offset':offset, 'this':this, 'arguments':arguments, 'decryptBlock':PyJs_decryptBlock_2170_}, var)
                    var.registers(['M', 'offset'])
                    var.get(u"this").get('_des3').callprop('decryptBlock', var.get('M'), var.get('offset'))
                    var.get(u"this").get('_des2').callprop('encryptBlock', var.get('M'), var.get('offset'))
                    var.get(u"this").get('_des1').callprop('decryptBlock', var.get('M'), var.get('offset'))
                PyJs_decryptBlock_2170_._set_name('decryptBlock')
                var.put('TripleDES', var.get('C_algo').put('TripleDES', var.get('BlockCipher').callprop('extend', Js({'_doReset':PyJs__doReset_2168_,'encryptBlock':PyJs_encryptBlock_2169_,'decryptBlock':PyJs_decryptBlock_2170_,'keySize':(Js(192.0)/Js(32.0)),'ivSize':(Js(64.0)/Js(32.0)),'blockSize':(Js(64.0)/Js(32.0))}))))
                var.get('C').put('TripleDES', var.get('BlockCipher').callprop('_createHelper', var.get('TripleDES')))
            PyJs_anonymous_2163_._set_name('anonymous')
            PyJs_anonymous_2163_()
            return var.get('CryptoJS').get('TripleDES')
        PyJs_anonymous_2162_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2171_(root, factory, undef, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'undef':undef, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory', 'undef'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')), var.get('require')(Js('./enc-base64')), var.get('require')(Js('./md5')), var.get('require')(Js('./evpkdf')), var.get('require')(Js('./cipher-core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core'), Js('./enc-base64'), Js('./md5'), Js('./evpkdf'), Js('./cipher-core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2171_._set_name('anonymous')
        PyJs_anonymous_2171_(var.get(u"this"), PyJs_anonymous_2162_)
    PyJs_anonymous_2161_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2172_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        pass
        @Js
        def PyJs_anonymous_2173_(CryptoJS, this, arguments, var=var):
            var = Scope({'CryptoJS':CryptoJS, 'this':this, 'arguments':arguments}, var)
            var.registers(['CryptoJS'])
            @Js
            def PyJs_anonymous_2174_(undefined, this, arguments, var=var):
                var = Scope({'undefined':undefined, 'this':this, 'arguments':arguments}, var)
                var.registers(['C_x64', 'C', 'X64Word', 'Base', 'C_lib', 'X64WordArray', 'undefined', 'X32WordArray'])
                var.put('C', var.get('CryptoJS'))
                var.put('C_lib', var.get('C').get('lib'))
                var.put('Base', var.get('C_lib').get('Base'))
                var.put('X32WordArray', var.get('C_lib').get('WordArray'))
                var.put('C_x64', var.get('C').put('x64', Js({})))
                @Js
                def PyJs_init_2175_(high, low, this, arguments, var=var):
                    var = Scope({'high':high, 'low':low, 'this':this, 'arguments':arguments, 'init':PyJs_init_2175_}, var)
                    var.registers(['high', 'low'])
                    var.get(u"this").put('high', var.get('high'))
                    var.get(u"this").put('low', var.get('low'))
                PyJs_init_2175_._set_name('init')
                var.put('X64Word', var.get('C_x64').put('Word', var.get('Base').callprop('extend', Js({'init':PyJs_init_2175_}))))
                @Js
                def PyJs_init_2176_(words, sigBytes, this, arguments, var=var):
                    var = Scope({'words':words, 'sigBytes':sigBytes, 'this':this, 'arguments':arguments, 'init':PyJs_init_2176_}, var)
                    var.registers(['words', 'sigBytes'])
                    var.put('words', var.get(u"this").put('words', (var.get('words') or Js([]))))
                    if (var.get('sigBytes')!=var.get('undefined')):
                        var.get(u"this").put('sigBytes', var.get('sigBytes'))
                    else:
                        var.get(u"this").put('sigBytes', (var.get('words').get('length')*Js(8.0)))
                PyJs_init_2176_._set_name('init')
                @Js
                def PyJs_toX32_2177_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'toX32':PyJs_toX32_2177_}, var)
                    var.registers(['x64Word', 'x64WordsLength', 'i', 'x32Words', 'x64Words'])
                    var.put('x64Words', var.get(u"this").get('words'))
                    var.put('x64WordsLength', var.get('x64Words').get('length'))
                    var.put('x32Words', Js([]))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('x64WordsLength')):
                        try:
                            var.put('x64Word', var.get('x64Words').get(var.get('i')))
                            var.get('x32Words').callprop('push', var.get('x64Word').get('high'))
                            var.get('x32Words').callprop('push', var.get('x64Word').get('low'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('X32WordArray').callprop('create', var.get('x32Words'), var.get(u"this").get('sigBytes'))
                PyJs_toX32_2177_._set_name('toX32')
                @Js
                def PyJs_clone_2178_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'clone':PyJs_clone_2178_}, var)
                    var.registers(['wordsLength', 'i', 'words', 'clone'])
                    var.put('clone', var.get('Base').get('clone').callprop('call', var.get(u"this")))
                    var.put('words', var.get('clone').put('words', var.get(u"this").get('words').callprop('slice', Js(0.0))))
                    var.put('wordsLength', var.get('words').get('length'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('wordsLength')):
                        try:
                            var.get('words').put(var.get('i'), var.get('words').get(var.get('i')).callprop('clone'))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    return var.get('clone')
                PyJs_clone_2178_._set_name('clone')
                var.put('X64WordArray', var.get('C_x64').put('WordArray', var.get('Base').callprop('extend', Js({'init':PyJs_init_2176_,'toX32':PyJs_toX32_2177_,'clone':PyJs_clone_2178_}))))
            PyJs_anonymous_2174_._set_name('anonymous')
            PyJs_anonymous_2174_()
            return var.get('CryptoJS')
        PyJs_anonymous_2173_._set_name('anonymous')
        @Js
        def PyJs_anonymous_2179_(root, factory, this, arguments, var=var):
            var = Scope({'root':root, 'factory':factory, 'this':this, 'arguments':arguments}, var)
            var.registers(['root', 'factory'])
            if _seq((Js('undefined') if _seq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports'))),Js('object')):
                var.get('module').put('exports', var.put('exports', var.get('factory')(var.get('require')(Js('./core')))))
            else:
                if (_seq(var.get('define',throw=False).typeof(),Js('function')) and var.get('define').get('amd')):
                    var.get('define')(Js([Js('./core')]), var.get('factory'))
                else:
                    var.get('factory')(var.get('root').get('CryptoJS'))
        PyJs_anonymous_2179_._set_name('anonymous')
        PyJs_anonymous_2179_(var.get(u"this"), PyJs_anonymous_2173_)
    PyJs_anonymous_2172_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2180_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        var.get('exports').put('utils', var.get('require')(Js('./des/utils')))
        var.get('exports').put('Cipher', var.get('require')(Js('./des/cipher')))
        var.get('exports').put('DES', var.get('require')(Js('./des/des')))
        var.get('exports').put('CBC', var.get('require')(Js('./des/cbc')))
        var.get('exports').put('EDE', var.get('require')(Js('./des/ede')))
    PyJs_anonymous_2180_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2181_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'proto', 'instantiate', 'CBCState', 'inherits', 'assert'])
        @Js
        def PyJsHoisted_CBCState_(iv, this, arguments, var=var):
            var = Scope({'iv':iv, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'iv'])
            var.get('assert').callprop('equal', var.get('iv').get('length'), Js(8.0), Js('Invalid IV length'))
            var.get(u"this").put('iv', var.get('Array').create(Js(8.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get(u"this").get('iv').get('length')):
                try:
                    var.get(u"this").get('iv').put(var.get('i'), var.get('iv').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJsHoisted_CBCState_.func_name = 'CBCState'
        var.put('CBCState', PyJsHoisted_CBCState_)
        @Js
        def PyJsHoisted_instantiate_(Base, this, arguments, var=var):
            var = Scope({'Base':Base, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'Base', 'CBC', 'key', 'keys'])
            @Js
            def PyJsHoisted_CBC_(options, this, arguments, var=var):
                var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
                var.registers(['options'])
                var.get('Base').callprop('call', var.get(u"this"), var.get('options'))
                var.get(u"this").callprop('_cbcInit')
            PyJsHoisted_CBC_.func_name = 'CBC'
            var.put('CBC', PyJsHoisted_CBC_)
            pass
            var.get('inherits')(var.get('CBC'), var.get('Base'))
            var.put('keys', var.get('Object').callprop('keys', var.get('proto')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('keys').get('length')):
                try:
                    var.put('key', var.get('keys').get(var.get('i')))
                    var.get('CBC').get('prototype').put(var.get('key'), var.get('proto').get(var.get('key')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            @Js
            def PyJs_create_2182_(options, this, arguments, var=var):
                var = Scope({'options':options, 'this':this, 'arguments':arguments, 'create':PyJs_create_2182_}, var)
                var.registers(['options'])
                return var.get('CBC').create(var.get('options'))
            PyJs_create_2182_._set_name('create')
            var.get('CBC').put('create', PyJs_create_2182_)
            return var.get('CBC')
        PyJsHoisted_instantiate_.func_name = 'instantiate'
        var.put('instantiate', PyJsHoisted_instantiate_)
        Js('use strict')
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('proto', Js({}))
        pass
        pass
        var.get('exports').put('instantiate', var.get('instantiate'))
        @Js
        def PyJs__cbcInit_2183_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_cbcInit':PyJs__cbcInit_2183_}, var)
            var.registers(['state'])
            var.put('state', var.get('CBCState').create(var.get(u"this").get('options').get('iv')))
            var.get(u"this").put('_cbcState', var.get('state'))
        PyJs__cbcInit_2183_._set_name('_cbcInit')
        var.get('proto').put('_cbcInit', PyJs__cbcInit_2183_)
        @Js
        def PyJs__update_2184_(inp, inOff, out, outOff, this, arguments, var=var):
            var = Scope({'inp':inp, 'inOff':inOff, 'out':out, 'outOff':outOff, 'this':this, 'arguments':arguments, '_update':PyJs__update_2184_}, var)
            var.registers(['inp', 'iv', 'i', 'out', 'superProto', 'outOff', 'inOff', 'state'])
            var.put('state', var.get(u"this").get('_cbcState'))
            var.put('superProto', var.get(u"this").get('constructor').get('super_').get('prototype'))
            var.put('iv', var.get('state').get('iv'))
            if _seq(var.get(u"this").get('type'),Js('encrypt')):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('blockSize')):
                    try:
                        var.get('iv').put(var.get('i'), var.get('inp').get((var.get('inOff')+var.get('i'))), '^')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('superProto').get('_update').callprop('call', var.get(u"this"), var.get('iv'), Js(0.0), var.get('out'), var.get('outOff'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('blockSize')):
                    try:
                        var.get('iv').put(var.get('i'), var.get('out').get((var.get('outOff')+var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            else:
                var.get('superProto').get('_update').callprop('call', var.get(u"this"), var.get('inp'), var.get('inOff'), var.get('out'), var.get('outOff'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('blockSize')):
                    try:
                        var.get('out').put((var.get('outOff')+var.get('i')), var.get('iv').get(var.get('i')), '^')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('blockSize')):
                    try:
                        var.get('iv').put(var.get('i'), var.get('inp').get((var.get('inOff')+var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs__update_2184_._set_name('_update')
        var.get('proto').put('_update', PyJs__update_2184_)
    PyJs_anonymous_2181_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2185_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'assert', 'Cipher'])
        @Js
        def PyJsHoisted_Cipher_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            var.get(u"this").put('options', var.get('options'))
            var.get(u"this").put('type', var.get(u"this").get('options').get('type'))
            var.get(u"this").put('blockSize', Js(8.0))
            var.get(u"this").callprop('_init')
            var.get(u"this").put('buffer', var.get('Array').create(var.get(u"this").get('blockSize')))
            var.get(u"this").put('bufferOff', Js(0.0))
        PyJsHoisted_Cipher_.func_name = 'Cipher'
        var.put('Cipher', PyJsHoisted_Cipher_)
        Js('use strict')
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        pass
        var.get('module').put('exports', var.get('Cipher'))
        @Js
        def PyJs__init_2186_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_init':PyJs__init_2186_}, var)
            var.registers([])
            pass
        PyJs__init_2186_._set_name('_init')
        var.get('Cipher').get('prototype').put('_init', PyJs__init_2186_)
        @Js
        def PyJs_update_2187_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments, 'update':PyJs_update_2187_}, var)
            var.registers(['data'])
            if _seq(var.get('data').get('length'),Js(0.0)):
                return Js([])
            if _seq(var.get(u"this").get('type'),Js('decrypt')):
                return var.get(u"this").callprop('_updateDecrypt', var.get('data'))
            else:
                return var.get(u"this").callprop('_updateEncrypt', var.get('data'))
        PyJs_update_2187_._set_name('update')
        var.get('Cipher').get('prototype').put('update', PyJs_update_2187_)
        @Js
        def PyJs__buffer_2188_(data, off, this, arguments, var=var):
            var = Scope({'data':data, 'off':off, 'this':this, 'arguments':arguments, '_buffer':PyJs__buffer_2188_}, var)
            var.registers(['i', 'off', 'data', 'min'])
            var.put('min', var.get('Math').callprop('min', (var.get(u"this").get('buffer').get('length')-var.get(u"this").get('bufferOff')), (var.get('data').get('length')-var.get('off'))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('min')):
                try:
                    var.get(u"this").get('buffer').put((var.get(u"this").get('bufferOff')+var.get('i')), var.get('data').get((var.get('off')+var.get('i'))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get(u"this").put('bufferOff', var.get('min'), '+')
            return var.get('min')
        PyJs__buffer_2188_._set_name('_buffer')
        var.get('Cipher').get('prototype').put('_buffer', PyJs__buffer_2188_)
        @Js
        def PyJs__flushBuffer_2189_(out, off, this, arguments, var=var):
            var = Scope({'out':out, 'off':off, 'this':this, 'arguments':arguments, '_flushBuffer':PyJs__flushBuffer_2189_}, var)
            var.registers(['off', 'out'])
            var.get(u"this").callprop('_update', var.get(u"this").get('buffer'), Js(0.0), var.get('out'), var.get('off'))
            var.get(u"this").put('bufferOff', Js(0.0))
            return var.get(u"this").get('blockSize')
        PyJs__flushBuffer_2189_._set_name('_flushBuffer')
        var.get('Cipher').get('prototype').put('_flushBuffer', PyJs__flushBuffer_2189_)
        @Js
        def PyJs__updateEncrypt_2190_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments, '_updateEncrypt':PyJs__updateEncrypt_2190_}, var)
            var.registers(['inputOff', 'count', 'max', 'out', 'outputOff', 'data'])
            var.put('inputOff', Js(0.0))
            var.put('outputOff', Js(0.0))
            var.put('count', (((var.get(u"this").get('bufferOff')+var.get('data').get('length'))/var.get(u"this").get('blockSize'))|Js(0.0)))
            var.put('out', var.get('Array').create((var.get('count')*var.get(u"this").get('blockSize'))))
            if PyJsStrictNeq(var.get(u"this").get('bufferOff'),Js(0.0)):
                var.put('inputOff', var.get(u"this").callprop('_buffer', var.get('data'), var.get('inputOff')), '+')
                if _seq(var.get(u"this").get('bufferOff'),var.get(u"this").get('buffer').get('length')):
                    var.put('outputOff', var.get(u"this").callprop('_flushBuffer', var.get('out'), var.get('outputOff')), '+')
            var.put('max', (var.get('data').get('length')-((var.get('data').get('length')-var.get('inputOff'))%var.get(u"this").get('blockSize'))))
            #for JS loop

            while (var.get('inputOff')<var.get('max')):
                try:
                    var.get(u"this").callprop('_update', var.get('data'), var.get('inputOff'), var.get('out'), var.get('outputOff'))
                    var.put('outputOff', var.get(u"this").get('blockSize'), '+')
                finally:
                        var.put('inputOff', var.get(u"this").get('blockSize'), '+')
            #for JS loop

            while (var.get('inputOff')<var.get('data').get('length')):
                try:
                    var.get(u"this").get('buffer').put(var.get(u"this").get('bufferOff'), var.get('data').get(var.get('inputOff')))
                finally:
                        PyJsComma((var.put('inputOff',Js(var.get('inputOff').to_number())+Js(1))-Js(1)),(var.get(u"this").put('bufferOff',Js(var.get(u"this").get('bufferOff').to_number())+Js(1))-Js(1)))
            return var.get('out')
        PyJs__updateEncrypt_2190_._set_name('_updateEncrypt')
        var.get('Cipher').get('prototype').put('_updateEncrypt', PyJs__updateEncrypt_2190_)
        @Js
        def PyJs__updateDecrypt_2191_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments, '_updateDecrypt':PyJs__updateDecrypt_2191_}, var)
            var.registers(['inputOff', 'count', 'out', 'outputOff', 'data'])
            var.put('inputOff', Js(0.0))
            var.put('outputOff', Js(0.0))
            var.put('count', (var.get('Math').callprop('ceil', ((var.get(u"this").get('bufferOff')+var.get('data').get('length'))/var.get(u"this").get('blockSize')))-Js(1.0)))
            var.put('out', var.get('Array').create((var.get('count')*var.get(u"this").get('blockSize'))))
            #for JS loop

            while (var.get('count')>Js(0.0)):
                try:
                    var.put('inputOff', var.get(u"this").callprop('_buffer', var.get('data'), var.get('inputOff')), '+')
                    var.put('outputOff', var.get(u"this").callprop('_flushBuffer', var.get('out'), var.get('outputOff')), '+')
                finally:
                        (var.put('count',Js(var.get('count').to_number())-Js(1))+Js(1))
            var.put('inputOff', var.get(u"this").callprop('_buffer', var.get('data'), var.get('inputOff')), '+')
            return var.get('out')
        PyJs__updateDecrypt_2191_._set_name('_updateDecrypt')
        var.get('Cipher').get('prototype').put('_updateDecrypt', PyJs__updateDecrypt_2191_)
        @Js
        def PyJs_final_2192_(buffer, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments, 'final':PyJs_final_2192_}, var)
            var.registers(['first', 'last', 'buffer'])
            pass
            if var.get('buffer'):
                var.put('first', var.get(u"this").callprop('update', var.get('buffer')))
            pass
            if _seq(var.get(u"this").get('type'),Js('encrypt')):
                var.put('last', var.get(u"this").callprop('_finalEncrypt'))
            else:
                var.put('last', var.get(u"this").callprop('_finalDecrypt'))
            if var.get('first'):
                return var.get('first').callprop('concat', var.get('last'))
            else:
                return var.get('last')
        PyJs_final_2192_._set_name('final')
        var.get('Cipher').get('prototype').put('final', PyJs_final_2192_)
        @Js
        def PyJs__pad_2193_(buffer, off, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'off':off, 'this':this, 'arguments':arguments, '_pad':PyJs__pad_2193_}, var)
            var.registers(['off', 'buffer'])
            if _seq(var.get('off'),Js(0.0)):
                return Js(False)
            while (var.get('off')<var.get('buffer').get('length')):
                var.get('buffer').put((var.put('off',Js(var.get('off').to_number())+Js(1))-Js(1)), Js(0.0))
            return Js(True)
        PyJs__pad_2193_._set_name('_pad')
        var.get('Cipher').get('prototype').put('_pad', PyJs__pad_2193_)
        @Js
        def PyJs__finalEncrypt_2194_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_finalEncrypt':PyJs__finalEncrypt_2194_}, var)
            var.registers(['out'])
            if var.get(u"this").callprop('_pad', var.get(u"this").get('buffer'), var.get(u"this").get('bufferOff')).neg():
                return Js([])
            var.put('out', var.get('Array').create(var.get(u"this").get('blockSize')))
            var.get(u"this").callprop('_update', var.get(u"this").get('buffer'), Js(0.0), var.get('out'), Js(0.0))
            return var.get('out')
        PyJs__finalEncrypt_2194_._set_name('_finalEncrypt')
        var.get('Cipher').get('prototype').put('_finalEncrypt', PyJs__finalEncrypt_2194_)
        @Js
        def PyJs__unpad_2195_(buffer, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments, '_unpad':PyJs__unpad_2195_}, var)
            var.registers(['buffer'])
            return var.get('buffer')
        PyJs__unpad_2195_._set_name('_unpad')
        var.get('Cipher').get('prototype').put('_unpad', PyJs__unpad_2195_)
        @Js
        def PyJs__finalDecrypt_2196_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_finalDecrypt':PyJs__finalDecrypt_2196_}, var)
            var.registers(['out'])
            var.get('assert').callprop('equal', var.get(u"this").get('bufferOff'), var.get(u"this").get('blockSize'), Js('Not enough data to decrypt'))
            var.put('out', var.get('Array').create(var.get(u"this").get('blockSize')))
            var.get(u"this").callprop('_flushBuffer', var.get('out'), Js(0.0))
            return var.get(u"this").callprop('_unpad', var.get('out'))
        PyJs__finalDecrypt_2196_._set_name('_finalDecrypt')
        var.get('Cipher').get('prototype').put('_finalDecrypt', PyJs__finalDecrypt_2196_)
    PyJs_anonymous_2185_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2197_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'shiftTable', 'DES', 'utils', 'assert', 'Cipher', 'inherits', 'DESState'])
        @Js
        def PyJsHoisted_DESState_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('tmp', var.get('Array').create(Js(2.0)))
            var.get(u"this").put('keys', var.get(u"null"))
        PyJsHoisted_DESState_.func_name = 'DESState'
        var.put('DESState', PyJsHoisted_DESState_)
        @Js
        def PyJsHoisted_DES_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'state'])
            var.get('Cipher').callprop('call', var.get(u"this"), var.get('options'))
            var.put('state', var.get('DESState').create())
            var.get(u"this").put('_desState', var.get('state'))
            var.get(u"this").callprop('deriveKeys', var.get('state'), var.get('options').get('key'))
        PyJsHoisted_DES_.func_name = 'DES'
        var.put('DES', PyJsHoisted_DES_)
        Js('use strict')
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('utils', var.get('require')(Js('./utils')))
        var.put('Cipher', var.get('require')(Js('./cipher')))
        pass
        pass
        var.get('inherits')(var.get('DES'), var.get('Cipher'))
        var.get('module').put('exports', var.get('DES'))
        @Js
        def PyJs_create_2198_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments, 'create':PyJs_create_2198_}, var)
            var.registers(['options'])
            return var.get('DES').create(var.get('options'))
        PyJs_create_2198_._set_name('create')
        var.get('DES').put('create', PyJs_create_2198_)
        var.put('shiftTable', Js([Js(1.0), Js(1.0), Js(2.0), Js(2.0), Js(2.0), Js(2.0), Js(2.0), Js(2.0), Js(1.0), Js(2.0), Js(2.0), Js(2.0), Js(2.0), Js(2.0), Js(2.0), Js(1.0)]))
        @Js
        def PyJs_deriveKeys_2199_(state, key, this, arguments, var=var):
            var = Scope({'state':state, 'key':key, 'this':this, 'arguments':arguments, 'deriveKeys':PyJs_deriveKeys_2199_}, var)
            var.registers(['kL', 'i', 'kR', 'state', 'key', 'shift'])
            var.get('state').put('keys', var.get('Array').create((Js(16.0)*Js(2.0))))
            var.get('assert').callprop('equal', var.get('key').get('length'), var.get(u"this").get('blockSize'), Js('Invalid key length'))
            var.put('kL', var.get('utils').callprop('readUInt32BE', var.get('key'), Js(0.0)))
            var.put('kR', var.get('utils').callprop('readUInt32BE', var.get('key'), Js(4.0)))
            var.get('utils').callprop('pc1', var.get('kL'), var.get('kR'), var.get('state').get('tmp'), Js(0.0))
            var.put('kL', var.get('state').get('tmp').get('0'))
            var.put('kR', var.get('state').get('tmp').get('1'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('state').get('keys').get('length')):
                try:
                    var.put('shift', var.get('shiftTable').get(PyJsBshift(var.get('i'),Js(1.0))))
                    var.put('kL', var.get('utils').callprop('r28shl', var.get('kL'), var.get('shift')))
                    var.put('kR', var.get('utils').callprop('r28shl', var.get('kR'), var.get('shift')))
                    var.get('utils').callprop('pc2', var.get('kL'), var.get('kR'), var.get('state').get('keys'), var.get('i'))
                finally:
                        var.put('i', Js(2.0), '+')
        PyJs_deriveKeys_2199_._set_name('deriveKeys')
        var.get('DES').get('prototype').put('deriveKeys', PyJs_deriveKeys_2199_)
        @Js
        def PyJs__update_2200_(inp, inOff, out, outOff, this, arguments, var=var):
            var = Scope({'inp':inp, 'inOff':inOff, 'out':out, 'outOff':outOff, 'this':this, 'arguments':arguments, '_update':PyJs__update_2200_}, var)
            var.registers(['inp', 'r', 'out', 'l', 'outOff', 'inOff', 'state'])
            var.put('state', var.get(u"this").get('_desState'))
            var.put('l', var.get('utils').callprop('readUInt32BE', var.get('inp'), var.get('inOff')))
            var.put('r', var.get('utils').callprop('readUInt32BE', var.get('inp'), (var.get('inOff')+Js(4.0))))
            var.get('utils').callprop('ip', var.get('l'), var.get('r'), var.get('state').get('tmp'), Js(0.0))
            var.put('l', var.get('state').get('tmp').get('0'))
            var.put('r', var.get('state').get('tmp').get('1'))
            if _seq(var.get(u"this").get('type'),Js('encrypt')):
                var.get(u"this").callprop('_encrypt', var.get('state'), var.get('l'), var.get('r'), var.get('state').get('tmp'), Js(0.0))
            else:
                var.get(u"this").callprop('_decrypt', var.get('state'), var.get('l'), var.get('r'), var.get('state').get('tmp'), Js(0.0))
            var.put('l', var.get('state').get('tmp').get('0'))
            var.put('r', var.get('state').get('tmp').get('1'))
            var.get('utils').callprop('writeUInt32BE', var.get('out'), var.get('l'), var.get('outOff'))
            var.get('utils').callprop('writeUInt32BE', var.get('out'), var.get('r'), (var.get('outOff')+Js(4.0)))
        PyJs__update_2200_._set_name('_update')
        var.get('DES').get('prototype').put('_update', PyJs__update_2200_)
        @Js
        def PyJs__pad_2201_(buffer, off, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'off':off, 'this':this, 'arguments':arguments, '_pad':PyJs__pad_2201_}, var)
            var.registers(['i', 'off', 'value', 'buffer'])
            var.put('value', (var.get('buffer').get('length')-var.get('off')))
            #for JS loop
            var.put('i', var.get('off'))
            while (var.get('i')<var.get('buffer').get('length')):
                try:
                    var.get('buffer').put(var.get('i'), var.get('value'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return Js(True)
        PyJs__pad_2201_._set_name('_pad')
        var.get('DES').get('prototype').put('_pad', PyJs__pad_2201_)
        @Js
        def PyJs__unpad_2202_(buffer, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments, '_unpad':PyJs__unpad_2202_}, var)
            var.registers(['i', 'buffer', 'pad'])
            var.put('pad', var.get('buffer').get((var.get('buffer').get('length')-Js(1.0))))
            #for JS loop
            var.put('i', (var.get('buffer').get('length')-var.get('pad')))
            while (var.get('i')<var.get('buffer').get('length')):
                try:
                    var.get('assert').callprop('equal', var.get('buffer').get(var.get('i')), var.get('pad'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('buffer').callprop('slice', Js(0.0), (var.get('buffer').get('length')-var.get('pad')))
        PyJs__unpad_2202_._set_name('_unpad')
        var.get('DES').get('prototype').put('_unpad', PyJs__unpad_2202_)
        @Js
        def PyJs__encrypt_2203_(state, lStart, rStart, out, off, this, arguments, var=var):
            var = Scope({'state':state, 'lStart':lStart, 'rStart':rStart, 'out':out, 'off':off, 'this':this, 'arguments':arguments, '_encrypt':PyJs__encrypt_2203_}, var)
            var.registers(['rStart', 'r', 'keyL', 'keyR', 'f', 'i', 'off', 'out', 'l', 'state', 'lStart', 't', 's'])
            var.put('l', var.get('lStart'))
            var.put('r', var.get('rStart'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('state').get('keys').get('length')):
                try:
                    var.put('keyL', var.get('state').get('keys').get(var.get('i')))
                    var.put('keyR', var.get('state').get('keys').get((var.get('i')+Js(1.0))))
                    var.get('utils').callprop('expand', var.get('r'), var.get('state').get('tmp'), Js(0.0))
                    var.put('keyL', var.get('state').get('tmp').get('0'), '^')
                    var.put('keyR', var.get('state').get('tmp').get('1'), '^')
                    var.put('s', var.get('utils').callprop('substitute', var.get('keyL'), var.get('keyR')))
                    var.put('f', var.get('utils').callprop('permute', var.get('s')))
                    var.put('t', var.get('r'))
                    var.put('r', PyJsBshift((var.get('l')^var.get('f')),Js(0.0)))
                    var.put('l', var.get('t'))
                finally:
                        var.put('i', Js(2.0), '+')
            var.get('utils').callprop('rip', var.get('r'), var.get('l'), var.get('out'), var.get('off'))
        PyJs__encrypt_2203_._set_name('_encrypt')
        var.get('DES').get('prototype').put('_encrypt', PyJs__encrypt_2203_)
        @Js
        def PyJs__decrypt_2204_(state, lStart, rStart, out, off, this, arguments, var=var):
            var = Scope({'state':state, 'lStart':lStart, 'rStart':rStart, 'out':out, 'off':off, 'this':this, 'arguments':arguments, '_decrypt':PyJs__decrypt_2204_}, var)
            var.registers(['rStart', 'r', 'keyL', 'keyR', 'f', 'i', 'off', 'out', 'l', 'state', 'lStart', 't', 's'])
            var.put('l', var.get('rStart'))
            var.put('r', var.get('lStart'))
            #for JS loop
            var.put('i', (var.get('state').get('keys').get('length')-Js(2.0)))
            while (var.get('i')>=Js(0.0)):
                try:
                    var.put('keyL', var.get('state').get('keys').get(var.get('i')))
                    var.put('keyR', var.get('state').get('keys').get((var.get('i')+Js(1.0))))
                    var.get('utils').callprop('expand', var.get('l'), var.get('state').get('tmp'), Js(0.0))
                    var.put('keyL', var.get('state').get('tmp').get('0'), '^')
                    var.put('keyR', var.get('state').get('tmp').get('1'), '^')
                    var.put('s', var.get('utils').callprop('substitute', var.get('keyL'), var.get('keyR')))
                    var.put('f', var.get('utils').callprop('permute', var.get('s')))
                    var.put('t', var.get('l'))
                    var.put('l', PyJsBshift((var.get('r')^var.get('f')),Js(0.0)))
                    var.put('r', var.get('t'))
                finally:
                        var.put('i', Js(2.0), '-')
            var.get('utils').callprop('rip', var.get('l'), var.get('r'), var.get('out'), var.get('off'))
        PyJs__decrypt_2204_._set_name('_decrypt')
        var.get('DES').get('prototype').put('_decrypt', PyJs__decrypt_2204_)
    PyJs_anonymous_2197_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2205_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'DES', 'inherits', 'assert', 'EDE', 'Cipher', 'EDEState'])
        @Js
        def PyJsHoisted_EDEState_(type, key, this, arguments, var=var):
            var = Scope({'type':type, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'k1', 'k2', 'k3', 'type'])
            var.get('assert').callprop('equal', var.get('key').get('length'), Js(24.0), Js('Invalid key length'))
            var.put('k1', var.get('key').callprop('slice', Js(0.0), Js(8.0)))
            var.put('k2', var.get('key').callprop('slice', Js(8.0), Js(16.0)))
            var.put('k3', var.get('key').callprop('slice', Js(16.0), Js(24.0)))
            if _seq(var.get('type'),Js('encrypt')):
                var.get(u"this").put('ciphers', Js([var.get('DES').callprop('create', Js({'type':Js('encrypt'),'key':var.get('k1')})), var.get('DES').callprop('create', Js({'type':Js('decrypt'),'key':var.get('k2')})), var.get('DES').callprop('create', Js({'type':Js('encrypt'),'key':var.get('k3')}))]))
            else:
                var.get(u"this").put('ciphers', Js([var.get('DES').callprop('create', Js({'type':Js('decrypt'),'key':var.get('k3')})), var.get('DES').callprop('create', Js({'type':Js('encrypt'),'key':var.get('k2')})), var.get('DES').callprop('create', Js({'type':Js('decrypt'),'key':var.get('k1')}))]))
        PyJsHoisted_EDEState_.func_name = 'EDEState'
        var.put('EDEState', PyJsHoisted_EDEState_)
        @Js
        def PyJsHoisted_EDE_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'state'])
            var.get('Cipher').callprop('call', var.get(u"this"), var.get('options'))
            var.put('state', var.get('EDEState').create(var.get(u"this").get('type'), var.get(u"this").get('options').get('key')))
            var.get(u"this").put('_edeState', var.get('state'))
        PyJsHoisted_EDE_.func_name = 'EDE'
        var.put('EDE', PyJsHoisted_EDE_)
        Js('use strict')
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Cipher', var.get('require')(Js('./cipher')))
        var.put('DES', var.get('require')(Js('./des')))
        pass
        pass
        var.get('inherits')(var.get('EDE'), var.get('Cipher'))
        var.get('module').put('exports', var.get('EDE'))
        @Js
        def PyJs_create_2206_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments, 'create':PyJs_create_2206_}, var)
            var.registers(['options'])
            return var.get('EDE').create(var.get('options'))
        PyJs_create_2206_._set_name('create')
        var.get('EDE').put('create', PyJs_create_2206_)
        @Js
        def PyJs__update_2207_(inp, inOff, out, outOff, this, arguments, var=var):
            var = Scope({'inp':inp, 'inOff':inOff, 'out':out, 'outOff':outOff, 'this':this, 'arguments':arguments, '_update':PyJs__update_2207_}, var)
            var.registers(['inp', 'out', 'outOff', 'inOff', 'state'])
            var.put('state', var.get(u"this").get('_edeState'))
            var.get('state').get('ciphers').get('0').callprop('_update', var.get('inp'), var.get('inOff'), var.get('out'), var.get('outOff'))
            var.get('state').get('ciphers').get('1').callprop('_update', var.get('out'), var.get('outOff'), var.get('out'), var.get('outOff'))
            var.get('state').get('ciphers').get('2').callprop('_update', var.get('out'), var.get('outOff'), var.get('out'), var.get('outOff'))
        PyJs__update_2207_._set_name('_update')
        var.get('EDE').get('prototype').put('_update', PyJs__update_2207_)
        var.get('EDE').get('prototype').put('_pad', var.get('DES').get('prototype').get('_pad'))
        var.get('EDE').get('prototype').put('_unpad', var.get('DES').get('prototype').get('_unpad'))
    PyJs_anonymous_2205_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2208_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'pc2table', 'sTable', 'require', 'module', 'permuteTable'])
        Js('use strict')
        @Js
        def PyJs_readUInt32BE_2209_(bytes, off, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'off':off, 'this':this, 'arguments':arguments, 'readUInt32BE':PyJs_readUInt32BE_2209_}, var)
            var.registers(['off', 'bytes', 'res'])
            var.put('res', ((((var.get('bytes').get((Js(0.0)+var.get('off')))<<Js(24.0))|(var.get('bytes').get((Js(1.0)+var.get('off')))<<Js(16.0)))|(var.get('bytes').get((Js(2.0)+var.get('off')))<<Js(8.0)))|var.get('bytes').get((Js(3.0)+var.get('off')))))
            return PyJsBshift(var.get('res'),Js(0.0))
        PyJs_readUInt32BE_2209_._set_name('readUInt32BE')
        var.get('exports').put('readUInt32BE', PyJs_readUInt32BE_2209_)
        @Js
        def PyJs_writeUInt32BE_2210_(bytes, value, off, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'value':value, 'off':off, 'this':this, 'arguments':arguments, 'writeUInt32BE':PyJs_writeUInt32BE_2210_}, var)
            var.registers(['off', 'value', 'bytes'])
            var.get('bytes').put((Js(0.0)+var.get('off')), PyJsBshift(var.get('value'),Js(24.0)))
            var.get('bytes').put((Js(1.0)+var.get('off')), (PyJsBshift(var.get('value'),Js(16.0))&Js(255)))
            var.get('bytes').put((Js(2.0)+var.get('off')), (PyJsBshift(var.get('value'),Js(8.0))&Js(255)))
            var.get('bytes').put((Js(3.0)+var.get('off')), (var.get('value')&Js(255)))
        PyJs_writeUInt32BE_2210_._set_name('writeUInt32BE')
        var.get('exports').put('writeUInt32BE', PyJs_writeUInt32BE_2210_)
        @Js
        def PyJs_ip_2211_(inL, inR, out, off, this, arguments, var=var):
            var = Scope({'inL':inL, 'inR':inR, 'out':out, 'off':off, 'this':this, 'arguments':arguments, 'ip':PyJs_ip_2211_}, var)
            var.registers(['j', 'i', 'outR', 'out', 'off', 'outL', 'inL', 'inR'])
            var.put('outL', Js(0.0))
            var.put('outR', Js(0.0))
            #for JS loop
            var.put('i', Js(6.0))
            while (var.get('i')>=Js(0.0)):
                try:
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<=Js(24.0)):
                        try:
                            var.put('outL', Js(1.0), '<<')
                            var.put('outL', (PyJsBshift(var.get('inR'),(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '+')
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<=Js(24.0)):
                        try:
                            var.put('outL', Js(1.0), '<<')
                            var.put('outL', (PyJsBshift(var.get('inL'),(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '+')
                finally:
                        var.put('i', Js(2.0), '-')
            #for JS loop
            var.put('i', Js(6.0))
            while (var.get('i')>=Js(0.0)):
                try:
                    #for JS loop
                    var.put('j', Js(1.0))
                    while (var.get('j')<=Js(25.0)):
                        try:
                            var.put('outR', Js(1.0), '<<')
                            var.put('outR', (PyJsBshift(var.get('inR'),(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '+')
                    #for JS loop
                    var.put('j', Js(1.0))
                    while (var.get('j')<=Js(25.0)):
                        try:
                            var.put('outR', Js(1.0), '<<')
                            var.put('outR', (PyJsBshift(var.get('inL'),(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '+')
                finally:
                        var.put('i', Js(2.0), '-')
            var.get('out').put((var.get('off')+Js(0.0)), PyJsBshift(var.get('outL'),Js(0.0)))
            var.get('out').put((var.get('off')+Js(1.0)), PyJsBshift(var.get('outR'),Js(0.0)))
        PyJs_ip_2211_._set_name('ip')
        var.get('exports').put('ip', PyJs_ip_2211_)
        @Js
        def PyJs_rip_2212_(inL, inR, out, off, this, arguments, var=var):
            var = Scope({'inL':inL, 'inR':inR, 'out':out, 'off':off, 'this':this, 'arguments':arguments, 'rip':PyJs_rip_2212_}, var)
            var.registers(['j', 'i', 'outR', 'out', 'off', 'outL', 'inL', 'inR'])
            var.put('outL', Js(0.0))
            var.put('outR', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(4.0)):
                try:
                    #for JS loop
                    var.put('j', Js(24.0))
                    while (var.get('j')>=Js(0.0)):
                        try:
                            var.put('outL', Js(1.0), '<<')
                            var.put('outL', (PyJsBshift(var.get('inR'),(var.get('j')+var.get('i')))&Js(1.0)), '|')
                            var.put('outL', Js(1.0), '<<')
                            var.put('outL', (PyJsBshift(var.get('inL'),(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '-')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('i', Js(4.0))
            while (var.get('i')<Js(8.0)):
                try:
                    #for JS loop
                    var.put('j', Js(24.0))
                    while (var.get('j')>=Js(0.0)):
                        try:
                            var.put('outR', Js(1.0), '<<')
                            var.put('outR', (PyJsBshift(var.get('inR'),(var.get('j')+var.get('i')))&Js(1.0)), '|')
                            var.put('outR', Js(1.0), '<<')
                            var.put('outR', (PyJsBshift(var.get('inL'),(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '-')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get('out').put((var.get('off')+Js(0.0)), PyJsBshift(var.get('outL'),Js(0.0)))
            var.get('out').put((var.get('off')+Js(1.0)), PyJsBshift(var.get('outR'),Js(0.0)))
        PyJs_rip_2212_._set_name('rip')
        var.get('exports').put('rip', PyJs_rip_2212_)
        @Js
        def PyJs_pc1_2213_(inL, inR, out, off, this, arguments, var=var):
            var = Scope({'inL':inL, 'inR':inR, 'out':out, 'off':off, 'this':this, 'arguments':arguments, 'pc1':PyJs_pc1_2213_}, var)
            var.registers(['j', 'i', 'outR', 'out', 'off', 'outL', 'inL', 'inR'])
            var.put('outL', Js(0.0))
            var.put('outR', Js(0.0))
            #for JS loop
            var.put('i', Js(7.0))
            while (var.get('i')>=Js(5.0)):
                try:
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<=Js(24.0)):
                        try:
                            var.put('outL', Js(1.0), '<<')
                            var.put('outL', ((var.get('inR')>>(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '+')
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<=Js(24.0)):
                        try:
                            var.put('outL', Js(1.0), '<<')
                            var.put('outL', ((var.get('inL')>>(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<=Js(24.0)):
                try:
                    var.put('outL', Js(1.0), '<<')
                    var.put('outL', ((var.get('inR')>>(var.get('j')+var.get('i')))&Js(1.0)), '|')
                finally:
                        var.put('j', Js(8.0), '+')
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<=Js(3.0)):
                try:
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<=Js(24.0)):
                        try:
                            var.put('outR', Js(1.0), '<<')
                            var.put('outR', ((var.get('inR')>>(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '+')
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<=Js(24.0)):
                        try:
                            var.put('outR', Js(1.0), '<<')
                            var.put('outR', ((var.get('inL')>>(var.get('j')+var.get('i')))&Js(1.0)), '|')
                        finally:
                                var.put('j', Js(8.0), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<=Js(24.0)):
                try:
                    var.put('outR', Js(1.0), '<<')
                    var.put('outR', ((var.get('inL')>>(var.get('j')+var.get('i')))&Js(1.0)), '|')
                finally:
                        var.put('j', Js(8.0), '+')
            var.get('out').put((var.get('off')+Js(0.0)), PyJsBshift(var.get('outL'),Js(0.0)))
            var.get('out').put((var.get('off')+Js(1.0)), PyJsBshift(var.get('outR'),Js(0.0)))
        PyJs_pc1_2213_._set_name('pc1')
        var.get('exports').put('pc1', PyJs_pc1_2213_)
        @Js
        def PyJs_r28shl_2214_(num, shift, this, arguments, var=var):
            var = Scope({'num':num, 'shift':shift, 'this':this, 'arguments':arguments, 'r28shl':PyJs_r28shl_2214_}, var)
            var.registers(['num', 'shift'])
            return (((var.get('num')<<var.get('shift'))&Js(268435455))|PyJsBshift(var.get('num'),(Js(28.0)-var.get('shift'))))
        PyJs_r28shl_2214_._set_name('r28shl')
        var.get('exports').put('r28shl', PyJs_r28shl_2214_)
        var.put('pc2table', Js([Js(14.0), Js(11.0), Js(17.0), Js(4.0), Js(27.0), Js(23.0), Js(25.0), Js(0.0), Js(13.0), Js(22.0), Js(7.0), Js(18.0), Js(5.0), Js(9.0), Js(16.0), Js(24.0), Js(2.0), Js(20.0), Js(12.0), Js(21.0), Js(1.0), Js(8.0), Js(15.0), Js(26.0), Js(15.0), Js(4.0), Js(25.0), Js(19.0), Js(9.0), Js(1.0), Js(26.0), Js(16.0), Js(5.0), Js(11.0), Js(23.0), Js(8.0), Js(12.0), Js(7.0), Js(17.0), Js(0.0), Js(22.0), Js(3.0), Js(10.0), Js(14.0), Js(6.0), Js(20.0), Js(27.0), Js(24.0)]))
        @Js
        def PyJs_pc2_2215_(inL, inR, out, off, this, arguments, var=var):
            var = Scope({'inL':inL, 'inR':inR, 'out':out, 'off':off, 'this':this, 'arguments':arguments, 'pc2':PyJs_pc2_2215_}, var)
            var.registers(['len', 'outR', 'i', 'out', 'off', 'outL', 'inL', 'inR'])
            var.put('outL', Js(0.0))
            var.put('outR', Js(0.0))
            var.put('len', PyJsBshift(var.get('pc2table').get('length'),Js(1.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.put('outL', Js(1.0), '<<')
                    var.put('outL', (PyJsBshift(var.get('inL'),var.get('pc2table').get(var.get('i')))&Js(1)), '|')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('i', var.get('len'))
            while (var.get('i')<var.get('pc2table').get('length')):
                try:
                    var.put('outR', Js(1.0), '<<')
                    var.put('outR', (PyJsBshift(var.get('inR'),var.get('pc2table').get(var.get('i')))&Js(1)), '|')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get('out').put((var.get('off')+Js(0.0)), PyJsBshift(var.get('outL'),Js(0.0)))
            var.get('out').put((var.get('off')+Js(1.0)), PyJsBshift(var.get('outR'),Js(0.0)))
        PyJs_pc2_2215_._set_name('pc2')
        var.get('exports').put('pc2', PyJs_pc2_2215_)
        @Js
        def PyJs_expand_2216_(r, out, off, this, arguments, var=var):
            var = Scope({'r':r, 'out':out, 'off':off, 'this':this, 'arguments':arguments, 'expand':PyJs_expand_2216_}, var)
            var.registers(['r', 'i', 'outR', 'out', 'off', 'outL'])
            var.put('outL', Js(0.0))
            var.put('outR', Js(0.0))
            var.put('outL', (((var.get('r')&Js(1.0))<<Js(5.0))|PyJsBshift(var.get('r'),Js(27.0))))
            #for JS loop
            var.put('i', Js(23.0))
            while (var.get('i')>=Js(15.0)):
                try:
                    var.put('outL', Js(6.0), '<<')
                    var.put('outL', (PyJsBshift(var.get('r'),var.get('i'))&Js(63)), '|')
                finally:
                        var.put('i', Js(4.0), '-')
            #for JS loop
            var.put('i', Js(11.0))
            while (var.get('i')>=Js(3.0)):
                try:
                    var.put('outR', (PyJsBshift(var.get('r'),var.get('i'))&Js(63)), '|')
                    var.put('outR', Js(6.0), '<<')
                finally:
                        var.put('i', Js(4.0), '-')
            var.put('outR', (((var.get('r')&Js(31))<<Js(1.0))|PyJsBshift(var.get('r'),Js(31.0))), '|')
            var.get('out').put((var.get('off')+Js(0.0)), PyJsBshift(var.get('outL'),Js(0.0)))
            var.get('out').put((var.get('off')+Js(1.0)), PyJsBshift(var.get('outR'),Js(0.0)))
        PyJs_expand_2216_._set_name('expand')
        var.get('exports').put('expand', PyJs_expand_2216_)
        var.put('sTable', Js([Js(14.0), Js(0.0), Js(4.0), Js(15.0), Js(13.0), Js(7.0), Js(1.0), Js(4.0), Js(2.0), Js(14.0), Js(15.0), Js(2.0), Js(11.0), Js(13.0), Js(8.0), Js(1.0), Js(3.0), Js(10.0), Js(10.0), Js(6.0), Js(6.0), Js(12.0), Js(12.0), Js(11.0), Js(5.0), Js(9.0), Js(9.0), Js(5.0), Js(0.0), Js(3.0), Js(7.0), Js(8.0), Js(4.0), Js(15.0), Js(1.0), Js(12.0), Js(14.0), Js(8.0), Js(8.0), Js(2.0), Js(13.0), Js(4.0), Js(6.0), Js(9.0), Js(2.0), Js(1.0), Js(11.0), Js(7.0), Js(15.0), Js(5.0), Js(12.0), Js(11.0), Js(9.0), Js(3.0), Js(7.0), Js(14.0), Js(3.0), Js(10.0), Js(10.0), Js(0.0), Js(5.0), Js(6.0), Js(0.0), Js(13.0), Js(15.0), Js(3.0), Js(1.0), Js(13.0), Js(8.0), Js(4.0), Js(14.0), Js(7.0), Js(6.0), Js(15.0), Js(11.0), Js(2.0), Js(3.0), Js(8.0), Js(4.0), Js(14.0), Js(9.0), Js(12.0), Js(7.0), Js(0.0), Js(2.0), Js(1.0), Js(13.0), Js(10.0), Js(12.0), Js(6.0), Js(0.0), Js(9.0), Js(5.0), Js(11.0), Js(10.0), Js(5.0), Js(0.0), Js(13.0), Js(14.0), Js(8.0), Js(7.0), Js(10.0), Js(11.0), Js(1.0), Js(10.0), Js(3.0), Js(4.0), Js(15.0), Js(13.0), Js(4.0), Js(1.0), Js(2.0), Js(5.0), Js(11.0), Js(8.0), Js(6.0), Js(12.0), Js(7.0), Js(6.0), Js(12.0), Js(9.0), Js(0.0), Js(3.0), Js(5.0), Js(2.0), Js(14.0), Js(15.0), Js(9.0), Js(10.0), Js(13.0), Js(0.0), Js(7.0), Js(9.0), Js(0.0), Js(14.0), Js(9.0), Js(6.0), Js(3.0), Js(3.0), Js(4.0), Js(15.0), Js(6.0), Js(5.0), Js(10.0), Js(1.0), Js(2.0), Js(13.0), Js(8.0), Js(12.0), Js(5.0), Js(7.0), Js(14.0), Js(11.0), Js(12.0), Js(4.0), Js(11.0), Js(2.0), Js(15.0), Js(8.0), Js(1.0), Js(13.0), Js(1.0), Js(6.0), Js(10.0), Js(4.0), Js(13.0), Js(9.0), Js(0.0), Js(8.0), Js(6.0), Js(15.0), Js(9.0), Js(3.0), Js(8.0), Js(0.0), Js(7.0), Js(11.0), Js(4.0), Js(1.0), Js(15.0), Js(2.0), Js(14.0), Js(12.0), Js(3.0), Js(5.0), Js(11.0), Js(10.0), Js(5.0), Js(14.0), Js(2.0), Js(7.0), Js(12.0), Js(7.0), Js(13.0), Js(13.0), Js(8.0), Js(14.0), Js(11.0), Js(3.0), Js(5.0), Js(0.0), Js(6.0), Js(6.0), Js(15.0), Js(9.0), Js(0.0), Js(10.0), Js(3.0), Js(1.0), Js(4.0), Js(2.0), Js(7.0), Js(8.0), Js(2.0), Js(5.0), Js(12.0), Js(11.0), Js(1.0), Js(12.0), Js(10.0), Js(4.0), Js(14.0), Js(15.0), Js(9.0), Js(10.0), Js(3.0), Js(6.0), Js(15.0), Js(9.0), Js(0.0), Js(0.0), Js(6.0), Js(12.0), Js(10.0), Js(11.0), Js(1.0), Js(7.0), Js(13.0), Js(13.0), Js(8.0), Js(15.0), Js(9.0), Js(1.0), Js(4.0), Js(3.0), Js(5.0), Js(14.0), Js(11.0), Js(5.0), Js(12.0), Js(2.0), Js(7.0), Js(8.0), Js(2.0), Js(4.0), Js(14.0), Js(2.0), Js(14.0), Js(12.0), Js(11.0), Js(4.0), Js(2.0), Js(1.0), Js(12.0), Js(7.0), Js(4.0), Js(10.0), Js(7.0), Js(11.0), Js(13.0), Js(6.0), Js(1.0), Js(8.0), Js(5.0), Js(5.0), Js(0.0), Js(3.0), Js(15.0), Js(15.0), Js(10.0), Js(13.0), Js(3.0), Js(0.0), Js(9.0), Js(14.0), Js(8.0), Js(9.0), Js(6.0), Js(4.0), Js(11.0), Js(2.0), Js(8.0), Js(1.0), Js(12.0), Js(11.0), Js(7.0), Js(10.0), Js(1.0), Js(13.0), Js(14.0), Js(7.0), Js(2.0), Js(8.0), Js(13.0), Js(15.0), Js(6.0), Js(9.0), Js(15.0), Js(12.0), Js(0.0), Js(5.0), Js(9.0), Js(6.0), Js(10.0), Js(3.0), Js(4.0), Js(0.0), Js(5.0), Js(14.0), Js(3.0), Js(12.0), Js(10.0), Js(1.0), Js(15.0), Js(10.0), Js(4.0), Js(15.0), Js(2.0), Js(9.0), Js(7.0), Js(2.0), Js(12.0), Js(6.0), Js(9.0), Js(8.0), Js(5.0), Js(0.0), Js(6.0), Js(13.0), Js(1.0), Js(3.0), Js(13.0), Js(4.0), Js(14.0), Js(14.0), Js(0.0), Js(7.0), Js(11.0), Js(5.0), Js(3.0), Js(11.0), Js(8.0), Js(9.0), Js(4.0), Js(14.0), Js(3.0), Js(15.0), Js(2.0), Js(5.0), Js(12.0), Js(2.0), Js(9.0), Js(8.0), Js(5.0), Js(12.0), Js(15.0), Js(3.0), Js(10.0), Js(7.0), Js(11.0), Js(0.0), Js(14.0), Js(4.0), Js(1.0), Js(10.0), Js(7.0), Js(1.0), Js(6.0), Js(13.0), Js(0.0), Js(11.0), Js(8.0), Js(6.0), Js(13.0), Js(4.0), Js(13.0), Js(11.0), Js(0.0), Js(2.0), Js(11.0), Js(14.0), Js(7.0), Js(15.0), Js(4.0), Js(0.0), Js(9.0), Js(8.0), Js(1.0), Js(13.0), Js(10.0), Js(3.0), Js(14.0), Js(12.0), Js(3.0), Js(9.0), Js(5.0), Js(7.0), Js(12.0), Js(5.0), Js(2.0), Js(10.0), Js(15.0), Js(6.0), Js(8.0), Js(1.0), Js(6.0), Js(1.0), Js(6.0), Js(4.0), Js(11.0), Js(11.0), Js(13.0), Js(13.0), Js(8.0), Js(12.0), Js(1.0), Js(3.0), Js(4.0), Js(7.0), Js(10.0), Js(14.0), Js(7.0), Js(10.0), Js(9.0), Js(15.0), Js(5.0), Js(6.0), Js(0.0), Js(8.0), Js(15.0), Js(0.0), Js(14.0), Js(5.0), Js(2.0), Js(9.0), Js(3.0), Js(2.0), Js(12.0), Js(13.0), Js(1.0), Js(2.0), Js(15.0), Js(8.0), Js(13.0), Js(4.0), Js(8.0), Js(6.0), Js(10.0), Js(15.0), Js(3.0), Js(11.0), Js(7.0), Js(1.0), Js(4.0), Js(10.0), Js(12.0), Js(9.0), Js(5.0), Js(3.0), Js(6.0), Js(14.0), Js(11.0), Js(5.0), Js(0.0), Js(0.0), Js(14.0), Js(12.0), Js(9.0), Js(7.0), Js(2.0), Js(7.0), Js(2.0), Js(11.0), Js(1.0), Js(4.0), Js(14.0), Js(1.0), Js(7.0), Js(9.0), Js(4.0), Js(12.0), Js(10.0), Js(14.0), Js(8.0), Js(2.0), Js(13.0), Js(0.0), Js(15.0), Js(6.0), Js(12.0), Js(10.0), Js(9.0), Js(13.0), Js(0.0), Js(15.0), Js(3.0), Js(3.0), Js(5.0), Js(5.0), Js(6.0), Js(8.0), Js(11.0)]))
        @Js
        def PyJs_substitute_2217_(inL, inR, this, arguments, var=var):
            var = Scope({'inL':inL, 'inR':inR, 'this':this, 'arguments':arguments, 'substitute':PyJs_substitute_2217_}, var)
            var.registers(['i', 'out', 'b', 'inL', 'sb', 'inR'])
            var.put('out', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(4.0)):
                try:
                    var.put('b', (PyJsBshift(var.get('inL'),(Js(18.0)-(var.get('i')*Js(6.0))))&Js(63)))
                    var.put('sb', var.get('sTable').get(((var.get('i')*Js(64))+var.get('b'))))
                    var.put('out', Js(4.0), '<<')
                    var.put('out', var.get('sb'), '|')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(4.0)):
                try:
                    var.put('b', (PyJsBshift(var.get('inR'),(Js(18.0)-(var.get('i')*Js(6.0))))&Js(63)))
                    var.put('sb', var.get('sTable').get((((Js(4.0)*Js(64))+(var.get('i')*Js(64)))+var.get('b'))))
                    var.put('out', Js(4.0), '<<')
                    var.put('out', var.get('sb'), '|')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return PyJsBshift(var.get('out'),Js(0.0))
        PyJs_substitute_2217_._set_name('substitute')
        var.get('exports').put('substitute', PyJs_substitute_2217_)
        var.put('permuteTable', Js([Js(16.0), Js(25.0), Js(12.0), Js(11.0), Js(3.0), Js(20.0), Js(4.0), Js(15.0), Js(31.0), Js(17.0), Js(9.0), Js(6.0), Js(27.0), Js(14.0), Js(1.0), Js(22.0), Js(30.0), Js(24.0), Js(8.0), Js(18.0), Js(0.0), Js(5.0), Js(29.0), Js(23.0), Js(13.0), Js(19.0), Js(2.0), Js(26.0), Js(10.0), Js(21.0), Js(28.0), Js(7.0)]))
        @Js
        def PyJs_permute_2218_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, 'permute':PyJs_permute_2218_}, var)
            var.registers(['i', 'out', 'num'])
            var.put('out', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('permuteTable').get('length')):
                try:
                    var.put('out', Js(1.0), '<<')
                    var.put('out', (PyJsBshift(var.get('num'),var.get('permuteTable').get(var.get('i')))&Js(1)), '|')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return PyJsBshift(var.get('out'),Js(0.0))
        PyJs_permute_2218_._set_name('permute')
        var.get('exports').put('permute', PyJs_permute_2218_)
        @Js
        def PyJs_padSplit_2219_(num, size, group, this, arguments, var=var):
            var = Scope({'num':num, 'size':size, 'group':group, 'this':this, 'arguments':arguments, 'padSplit':PyJs_padSplit_2219_}, var)
            var.registers(['str', 'i', 'num', 'out', 'group', 'size'])
            var.put('str', var.get('num').callprop('toString', Js(2.0)))
            while (var.get('str').get('length')<var.get('size')):
                var.put('str', (Js('0')+var.get('str')))
            var.put('out', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('size')):
                try:
                    var.get('out').callprop('push', var.get('str').callprop('slice', var.get('i'), (var.get('i')+var.get('group'))))
                finally:
                        var.put('i', var.get('group'), '+')
            return var.get('out').callprop('join', Js(' '))
        PyJs_padSplit_2219_._set_name('padSplit')
        var.get('exports').put('padSplit', PyJs_padSplit_2219_)
    PyJs_anonymous_2208_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2220_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_2221_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2222_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['primes', 'DH', 'ENCODINGS', 'generatePrime', 'getDiffieHellman', 'createDiffieHellman'])
                @Js
                def PyJsHoisted_getDiffieHellman_(mod, this, arguments, var=var):
                    var = Scope({'mod':mod, 'this':this, 'arguments':arguments}, var)
                    var.registers(['prime', 'mod', 'gen'])
                    var.put('prime', var.get('Buffer').create(var.get('primes').get(var.get('mod')).get('prime'), Js('hex')))
                    var.put('gen', var.get('Buffer').create(var.get('primes').get(var.get('mod')).get('gen'), Js('hex')))
                    return var.get('DH').create(var.get('prime'), var.get('gen'))
                PyJsHoisted_getDiffieHellman_.func_name = 'getDiffieHellman'
                var.put('getDiffieHellman', PyJsHoisted_getDiffieHellman_)
                @Js
                def PyJsHoisted_createDiffieHellman_(prime, enc, generator, genc, this, arguments, var=var):
                    var = Scope({'prime':prime, 'enc':enc, 'generator':generator, 'genc':genc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['genc', 'prime', 'generator', 'enc'])
                    if (var.get('Buffer').callprop('isBuffer', var.get('enc')) or _seq(var.get('ENCODINGS').get(var.get('enc')),var.get('undefined'))):
                        return var.get('createDiffieHellman')(var.get('prime'), Js('binary'), var.get('enc'), var.get('generator'))
                    var.put('enc', (var.get('enc') or Js('binary')))
                    var.put('genc', (var.get('genc') or Js('binary')))
                    var.put('generator', (var.get('generator') or var.get('Buffer').create(Js([Js(2.0)]))))
                    if var.get('Buffer').callprop('isBuffer', var.get('generator')).neg():
                        var.put('generator', var.get('Buffer').create(var.get('generator'), var.get('genc')))
                    if _seq(var.get('prime',throw=False).typeof(),Js('number')):
                        return var.get('DH').create(var.get('generatePrime')(var.get('prime'), var.get('generator')), var.get('generator'), Js(True))
                    if var.get('Buffer').callprop('isBuffer', var.get('prime')).neg():
                        var.put('prime', var.get('Buffer').create(var.get('prime'), var.get('enc')))
                    return var.get('DH').create(var.get('prime'), var.get('generator'), Js(True))
                PyJsHoisted_createDiffieHellman_.func_name = 'createDiffieHellman'
                var.put('createDiffieHellman', PyJsHoisted_createDiffieHellman_)
                var.put('generatePrime', var.get('require')(Js('./lib/generatePrime')))
                var.put('primes', var.get('require')(Js('./lib/primes.json')))
                var.put('DH', var.get('require')(Js('./lib/dh')))
                pass
                var.put('ENCODINGS', Js({'binary':Js(True),'hex':Js(True),'base64':Js(True)}))
                pass
                var.get('exports').put('DiffieHellmanGroup', var.get('exports').put('createDiffieHellmanGroup', var.get('exports').put('getDiffieHellman', var.get('getDiffieHellman'))))
                var.get('exports').put('createDiffieHellman', var.get('exports').put('DiffieHellman', var.get('createDiffieHellman')))
            PyJs_anonymous_2222_._set_name('anonymous')
            PyJs_anonymous_2222_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2221_._set_name('anonymous')
        PyJs_anonymous_2221_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2220_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2223_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_2224_(Buffer, this, arguments, var=var):
            var = Scope({'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['Buffer'])
            @Js
            def PyJs_anonymous_2225_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['ELEVEN', 'TEN', 'BN', 'millerRabin', 'primes', 'randomBytes', 'setPrivateKey', 'primeCache', 'formatReturnValue', 'DH', 'checkPrime', 'THREE', 'MillerRabin', 'SEVEN', 'TWENTYFOUR', 'setPublicKey'])
                @Js
                def PyJsHoisted_setPublicKey_(pub, enc, this, arguments, var=var):
                    var = Scope({'pub':pub, 'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['pub', 'enc'])
                    var.put('enc', (var.get('enc') or Js('utf8')))
                    if var.get('Buffer').callprop('isBuffer', var.get('pub')).neg():
                        var.put('pub', var.get('Buffer').create(var.get('pub'), var.get('enc')))
                    var.get(u"this").put('_pub', var.get('BN').create(var.get('pub')))
                    return var.get(u"this")
                PyJsHoisted_setPublicKey_.func_name = 'setPublicKey'
                var.put('setPublicKey', PyJsHoisted_setPublicKey_)
                @Js
                def PyJsHoisted_setPrivateKey_(priv, enc, this, arguments, var=var):
                    var = Scope({'priv':priv, 'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['priv', 'enc'])
                    var.put('enc', (var.get('enc') or Js('utf8')))
                    if var.get('Buffer').callprop('isBuffer', var.get('priv')).neg():
                        var.put('priv', var.get('Buffer').create(var.get('priv'), var.get('enc')))
                    var.get(u"this").put('_priv', var.get('BN').create(var.get('priv')))
                    return var.get(u"this")
                PyJsHoisted_setPrivateKey_.func_name = 'setPrivateKey'
                var.put('setPrivateKey', PyJsHoisted_setPrivateKey_)
                @Js
                def PyJsHoisted_checkPrime_(prime, generator, this, arguments, var=var):
                    var = Scope({'prime':prime, 'generator':generator, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gen', 'rem', 'prime', 'hex', 'error', 'generator'])
                    var.put('gen', var.get('generator').callprop('toString', Js('hex')))
                    var.put('hex', Js([var.get('gen'), var.get('prime').callprop('toString', Js(16.0))]).callprop('join', Js('_')))
                    if var.get('primeCache').contains(var.get('hex')):
                        return var.get('primeCache').get(var.get('hex'))
                    var.put('error', Js(0.0))
                    if (((var.get('prime').callprop('isEven') or var.get('primes').get('simpleSieve').neg()) or var.get('primes').callprop('fermatTest', var.get('prime')).neg()) or var.get('millerRabin').callprop('test', var.get('prime')).neg()):
                        var.put('error', Js(1.0), '+')
                        if (_seq(var.get('gen'),Js('02')) or _seq(var.get('gen'),Js('05'))):
                            var.put('error', Js(8.0), '+')
                        else:
                            var.put('error', Js(4.0), '+')
                        var.get('primeCache').put(var.get('hex'), var.get('error'))
                        return var.get('error')
                    if var.get('millerRabin').callprop('test', var.get('prime').callprop('shrn', Js(1.0))).neg():
                        var.put('error', Js(2.0), '+')
                    pass
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('gen'))
                        if SWITCHED or _seq(CONDITION, Js('02')):
                            SWITCHED = True
                            if var.get('prime').callprop('mod', var.get('TWENTYFOUR')).callprop('cmp', var.get('ELEVEN')):
                                var.put('error', Js(8.0), '+')
                            break
                        if SWITCHED or _seq(CONDITION, Js('05')):
                            SWITCHED = True
                            var.put('rem', var.get('prime').callprop('mod', var.get('TEN')))
                            if (var.get('rem').callprop('cmp', var.get('THREE')) and var.get('rem').callprop('cmp', var.get('SEVEN'))):
                                var.put('error', Js(8.0), '+')
                            break
                        if True:
                            SWITCHED = True
                            var.put('error', Js(4.0), '+')
                        SWITCHED = True
                        break
                    var.get('primeCache').put(var.get('hex'), var.get('error'))
                    return var.get('error')
                PyJsHoisted_checkPrime_.func_name = 'checkPrime'
                var.put('checkPrime', PyJsHoisted_checkPrime_)
                @Js
                def PyJsHoisted_DH_(prime, generator, malleable, this, arguments, var=var):
                    var = Scope({'prime':prime, 'generator':generator, 'malleable':malleable, 'this':this, 'arguments':arguments}, var)
                    var.registers(['malleable', 'prime', 'generator'])
                    var.get(u"this").callprop('setGenerator', var.get('generator'))
                    var.get(u"this").put('__prime', var.get('BN').create(var.get('prime')))
                    var.get(u"this").put('_prime', var.get('BN').callprop('mont', var.get(u"this").get('__prime')))
                    var.get(u"this").put('_primeLen', var.get('prime').get('length'))
                    var.get(u"this").put('_pub', var.get('undefined'))
                    var.get(u"this").put('_priv', var.get('undefined'))
                    var.get(u"this").put('_primeCode', var.get('undefined'))
                    if var.get('malleable'):
                        var.get(u"this").put('setPublicKey', var.get('setPublicKey'))
                        var.get(u"this").put('setPrivateKey', var.get('setPrivateKey'))
                    else:
                        var.get(u"this").put('_primeCode', Js(8.0))
                PyJsHoisted_DH_.func_name = 'DH'
                var.put('DH', PyJsHoisted_DH_)
                @Js
                def PyJsHoisted_formatReturnValue_(bn, enc, this, arguments, var=var):
                    var = Scope({'bn':bn, 'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'bn', 'enc'])
                    var.put('buf', var.get('Buffer').create(var.get('bn').callprop('toArray')))
                    if var.get('enc').neg():
                        return var.get('buf')
                    else:
                        return var.get('buf').callprop('toString', var.get('enc'))
                PyJsHoisted_formatReturnValue_.func_name = 'formatReturnValue'
                var.put('formatReturnValue', PyJsHoisted_formatReturnValue_)
                var.put('BN', var.get('require')(Js('bn.js')))
                var.put('MillerRabin', var.get('require')(Js('miller-rabin')))
                var.put('millerRabin', var.get('MillerRabin').create())
                var.put('TWENTYFOUR', var.get('BN').create(Js(24.0)))
                var.put('ELEVEN', var.get('BN').create(Js(11.0)))
                var.put('TEN', var.get('BN').create(Js(10.0)))
                var.put('THREE', var.get('BN').create(Js(3.0)))
                var.put('SEVEN', var.get('BN').create(Js(7.0)))
                var.put('primes', var.get('require')(Js('./generatePrime')))
                var.put('randomBytes', var.get('require')(Js('randombytes')))
                var.get('module').put('exports', var.get('DH'))
                pass
                pass
                var.put('primeCache', Js({}))
                pass
                pass
                @Js
                def PyJs_get_2226_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2226_}, var)
                    var.registers([])
                    if PyJsStrictNeq(var.get(u"this").get('_primeCode').typeof(),Js('number')):
                        var.get(u"this").put('_primeCode', var.get('checkPrime')(var.get(u"this").get('__prime'), var.get(u"this").get('__gen')))
                    return var.get(u"this").get('_primeCode')
                PyJs_get_2226_._set_name('get')
                var.get('Object').callprop('defineProperty', var.get('DH').get('prototype'), Js('verifyError'), Js({'enumerable':Js(True),'get':PyJs_get_2226_}))
                @Js
                def PyJs_anonymous_2227_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u"this").get('_priv').neg():
                        var.get(u"this").put('_priv', var.get('BN').create(var.get('randomBytes')(var.get(u"this").get('_primeLen'))))
                    var.get(u"this").put('_pub', var.get(u"this").get('_gen').callprop('toRed', var.get(u"this").get('_prime')).callprop('redPow', var.get(u"this").get('_priv')).callprop('fromRed'))
                    return var.get(u"this").callprop('getPublicKey')
                PyJs_anonymous_2227_._set_name('anonymous')
                var.get('DH').get('prototype').put('generateKeys', PyJs_anonymous_2227_)
                @Js
                def PyJs_anonymous_2228_(other, this, arguments, var=var):
                    var = Scope({'other':other, 'this':this, 'arguments':arguments}, var)
                    var.registers(['out', 'other', 'secret', 'prime', 'front'])
                    var.put('other', var.get('BN').create(var.get('other')))
                    var.put('other', var.get('other').callprop('toRed', var.get(u"this").get('_prime')))
                    var.put('secret', var.get('other').callprop('redPow', var.get(u"this").get('_priv')).callprop('fromRed'))
                    var.put('out', var.get('Buffer').create(var.get('secret').callprop('toArray')))
                    var.put('prime', var.get(u"this").callprop('getPrime'))
                    if (var.get('out').get('length')<var.get('prime').get('length')):
                        var.put('front', var.get('Buffer').create((var.get('prime').get('length')-var.get('out').get('length'))))
                        var.get('front').callprop('fill', Js(0.0))
                        var.put('out', var.get('Buffer').callprop('concat', Js([var.get('front'), var.get('out')])))
                    return var.get('out')
                PyJs_anonymous_2228_._set_name('anonymous')
                var.get('DH').get('prototype').put('computeSecret', PyJs_anonymous_2228_)
                @Js
                def PyJs_getPublicKey_2229_(enc, this, arguments, var=var):
                    var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'getPublicKey':PyJs_getPublicKey_2229_}, var)
                    var.registers(['enc'])
                    return var.get('formatReturnValue')(var.get(u"this").get('_pub'), var.get('enc'))
                PyJs_getPublicKey_2229_._set_name('getPublicKey')
                var.get('DH').get('prototype').put('getPublicKey', PyJs_getPublicKey_2229_)
                @Js
                def PyJs_getPrivateKey_2230_(enc, this, arguments, var=var):
                    var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'getPrivateKey':PyJs_getPrivateKey_2230_}, var)
                    var.registers(['enc'])
                    return var.get('formatReturnValue')(var.get(u"this").get('_priv'), var.get('enc'))
                PyJs_getPrivateKey_2230_._set_name('getPrivateKey')
                var.get('DH').get('prototype').put('getPrivateKey', PyJs_getPrivateKey_2230_)
                @Js
                def PyJs_anonymous_2231_(enc, this, arguments, var=var):
                    var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['enc'])
                    return var.get('formatReturnValue')(var.get(u"this").get('__prime'), var.get('enc'))
                PyJs_anonymous_2231_._set_name('anonymous')
                var.get('DH').get('prototype').put('getPrime', PyJs_anonymous_2231_)
                @Js
                def PyJs_anonymous_2232_(enc, this, arguments, var=var):
                    var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['enc'])
                    return var.get('formatReturnValue')(var.get(u"this").get('_gen'), var.get('enc'))
                PyJs_anonymous_2232_._set_name('anonymous')
                var.get('DH').get('prototype').put('getGenerator', PyJs_anonymous_2232_)
                @Js
                def PyJs_anonymous_2233_(gen, enc, this, arguments, var=var):
                    var = Scope({'gen':gen, 'enc':enc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['gen', 'enc'])
                    var.put('enc', (var.get('enc') or Js('utf8')))
                    if var.get('Buffer').callprop('isBuffer', var.get('gen')).neg():
                        var.put('gen', var.get('Buffer').create(var.get('gen'), var.get('enc')))
                    var.get(u"this").put('__gen', var.get('gen'))
                    var.get(u"this").put('_gen', var.get('BN').create(var.get('gen')))
                    return var.get(u"this")
                PyJs_anonymous_2233_._set_name('anonymous')
                var.get('DH').get('prototype').put('setGenerator', PyJs_anonymous_2233_)
                pass
            PyJs_anonymous_2225_._set_name('anonymous')
            PyJs_anonymous_2225_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2224_._set_name('anonymous')
        PyJs_anonymous_2224_.callprop('call', var.get(u"this"), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_2223_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2234_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'randomBytes', 'SIXTEEN', 'TEN', '_getPrimes', 'BN', 'millerRabin', 'fermatTest', 'TWO', 'simpleSieve', 'ONE', 'findPrime', 'FOUR', 'TWENTYFOUR', 'ELEVEN', 'require', 'THREE', 'MillerRabin', 'SEVEN', 'TWELVE', 'exports', 'EIGHT', 'primes', 'FIVE'])
        @Js
        def PyJsHoisted__getPrimes_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['sqrt', 'j', 'i', 'k', 'limit', 'res'])
            if PyJsStrictNeq(var.get('primes'),var.get(u"null")):
                return var.get('primes')
            var.put('limit', Js(1048576))
            var.put('res', Js([]))
            var.get('res').put('0', Js(2.0))
            #for JS loop
            var.put('i', Js(1.0))
            var.put('k', Js(3.0))
            while (var.get('k')<var.get('limit')):
                try:
                    var.put('sqrt', var.get('Math').callprop('ceil', var.get('Math').callprop('sqrt', var.get('k'))))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while ((var.get('j')<var.get('i')) and (var.get('res').get(var.get('j'))<=var.get('sqrt'))):
                        try:
                            if _seq((var.get('k')%var.get('res').get(var.get('j'))),Js(0.0)):
                                break
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    if (PyJsStrictNeq(var.get('i'),var.get('j')) and (var.get('res').get(var.get('j'))<=var.get('sqrt'))):
                        continue
                    var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), var.get('k'))
                finally:
                        var.put('k', Js(2.0), '+')
            var.put('primes', var.get('res'))
            return var.get('res')
        PyJsHoisted__getPrimes_.func_name = '_getPrimes'
        var.put('_getPrimes', PyJsHoisted__getPrimes_)
        @Js
        def PyJsHoisted_simpleSieve_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments}, var)
            var.registers(['primes', 'i', 'p'])
            var.put('primes', var.get('_getPrimes')())
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('primes').get('length')):
                try:
                    if _seq(var.get('p').callprop('modn', var.get('primes').get(var.get('i'))),Js(0.0)):
                        if _seq(var.get('p').callprop('cmpn', var.get('primes').get(var.get('i'))),Js(0.0)):
                            return Js(True)
                        else:
                            return Js(False)
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return Js(True)
        PyJsHoisted_simpleSieve_.func_name = 'simpleSieve'
        var.put('simpleSieve', PyJsHoisted_simpleSieve_)
        @Js
        def PyJsHoisted_fermatTest_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments}, var)
            var.registers(['red', 'p'])
            var.put('red', var.get('BN').callprop('mont', var.get('p')))
            return _seq(var.get('TWO').callprop('toRed', var.get('red')).callprop('redPow', var.get('p').callprop('subn', Js(1.0))).callprop('fromRed').callprop('cmpn', Js(1.0)),Js(0.0))
        PyJsHoisted_fermatTest_.func_name = 'fermatTest'
        var.put('fermatTest', PyJsHoisted_fermatTest_)
        @Js
        def PyJsHoisted_findPrime_(bits, gen, this, arguments, var=var):
            var = Scope({'bits':bits, 'gen':gen, 'this':this, 'arguments':arguments}, var)
            var.registers(['num', 'gen', 'n2', 'bits'])
            if (var.get('bits')<Js(16.0)):
                if (_seq(var.get('gen'),Js(2.0)) or _seq(var.get('gen'),Js(5.0))):
                    return var.get('BN').create(Js([Js(140), Js(123)]))
                else:
                    return var.get('BN').create(Js([Js(140), Js(39)]))
            var.put('gen', var.get('BN').create(var.get('gen')))
            pass
            while Js(True):
                var.put('num', var.get('BN').create(var.get('randomBytes')(var.get('Math').callprop('ceil', (var.get('bits')/Js(8.0))))))
                while (var.get('num').callprop('bitLength')>var.get('bits')):
                    var.get('num').callprop('ishrn', Js(1.0))
                if var.get('num').callprop('isEven'):
                    var.get('num').callprop('iadd', var.get('ONE'))
                if var.get('num').callprop('testn', Js(1.0)).neg():
                    var.get('num').callprop('iadd', var.get('TWO'))
                if var.get('gen').callprop('cmp', var.get('TWO')).neg():
                    while var.get('num').callprop('mod', var.get('TWENTYFOUR')).callprop('cmp', var.get('ELEVEN')):
                        var.get('num').callprop('iadd', var.get('FOUR'))
                else:
                    if var.get('gen').callprop('cmp', var.get('FIVE')).neg():
                        while var.get('num').callprop('mod', var.get('TEN')).callprop('cmp', var.get('THREE')):
                            var.get('num').callprop('iadd', var.get('FOUR'))
                var.put('n2', var.get('num').callprop('shrn', Js(1.0)))
                if (((((var.get('simpleSieve')(var.get('n2')) and var.get('simpleSieve')(var.get('num'))) and var.get('fermatTest')(var.get('n2'))) and var.get('fermatTest')(var.get('num'))) and var.get('millerRabin').callprop('test', var.get('n2'))) and var.get('millerRabin').callprop('test', var.get('num'))):
                    return var.get('num')
        PyJsHoisted_findPrime_.func_name = 'findPrime'
        var.put('findPrime', PyJsHoisted_findPrime_)
        var.put('randomBytes', var.get('require')(Js('randombytes')))
        var.get('module').put('exports', var.get('findPrime'))
        var.get('findPrime').put('simpleSieve', var.get('simpleSieve'))
        var.get('findPrime').put('fermatTest', var.get('fermatTest'))
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('TWENTYFOUR', var.get('BN').create(Js(24.0)))
        var.put('MillerRabin', var.get('require')(Js('miller-rabin')))
        var.put('millerRabin', var.get('MillerRabin').create())
        var.put('ONE', var.get('BN').create(Js(1.0)))
        var.put('TWO', var.get('BN').create(Js(2.0)))
        var.put('FIVE', var.get('BN').create(Js(5.0)))
        var.put('SIXTEEN', var.get('BN').create(Js(16.0)))
        var.put('EIGHT', var.get('BN').create(Js(8.0)))
        var.put('TEN', var.get('BN').create(Js(10.0)))
        var.put('THREE', var.get('BN').create(Js(3.0)))
        var.put('SEVEN', var.get('BN').create(Js(7.0)))
        var.put('ELEVEN', var.get('BN').create(Js(11.0)))
        var.put('FOUR', var.get('BN').create(Js(4.0)))
        var.put('TWELVE', var.get('BN').create(Js(12.0)))
        var.put('primes', var.get(u"null"))
        pass
        pass
        pass
        pass
    PyJs_anonymous_2234_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2235_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        def PyJs_LONG_2236_(var=var):
            return var.get('module').put('exports', Js({'modp1':Js({'gen':Js('02'),'prime':Js('ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff')}),'modp2':Js({'gen':Js('02'),'prime':Js('ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff')}),'modp5':Js({'gen':Js('02'),'prime':Js('ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff')}),'modp14':Js({'gen':Js('02'),'prime':Js('ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff')}),'modp15':Js({'gen':Js('02'),'prime':Js('ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff')}),'modp16':Js({'gen':Js('02'),'prime':Js('ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff')}),'modp17':Js({'gen':Js('02'),'prime':Js('ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff')}),'modp18':Js({'gen':Js('02'),'prime':Js('ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff')})}))
        PyJs_LONG_2236_()
    PyJs_anonymous_2235_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2237_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('15').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2237_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2238_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'elliptic', 'module'])
        Js('use strict')
        var.put('elliptic', var.get('exports'))
        var.get('elliptic').put('version', var.get('require')(Js('../package.json')).get('version'))
        var.get('elliptic').put('utils', var.get('require')(Js('./elliptic/utils')))
        var.get('elliptic').put('rand', var.get('require')(Js('brorand')))
        var.get('elliptic').put('curve', var.get('require')(Js('./elliptic/curve')))
        var.get('elliptic').put('curves', var.get('require')(Js('./elliptic/curves')))
        var.get('elliptic').put('ec', var.get('require')(Js('./elliptic/ec')))
        var.get('elliptic').put('eddsa', var.get('require')(Js('./elliptic/eddsa')))
    PyJs_anonymous_2238_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2239_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'BN', 'BaseCurve', 'assert', 'BasePoint', 'utils', 'getNAF', 'getJSF'])
        @Js
        def PyJsHoisted_BaseCurve_(type, conf, this, arguments, var=var):
            var = Scope({'type':type, 'conf':conf, 'this':this, 'arguments':arguments}, var)
            var.registers(['conf', 'adjustCount', 'type'])
            var.get(u"this").put('type', var.get('type'))
            var.get(u"this").put('p', var.get('BN').create(var.get('conf').get('p'), Js(16.0)))
            var.get(u"this").put('red', (var.get('BN').callprop('red', var.get('conf').get('prime')) if var.get('conf').get('prime') else var.get('BN').callprop('mont', var.get(u"this").get('p'))))
            var.get(u"this").put('zero', var.get('BN').create(Js(0.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('one', var.get('BN').create(Js(1.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('two', var.get('BN').create(Js(2.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('n', (var.get('conf').get('n') and var.get('BN').create(var.get('conf').get('n'), Js(16.0))))
            var.get(u"this").put('g', (var.get('conf').get('g') and var.get(u"this").callprop('pointFromJSON', var.get('conf').get('g'), var.get('conf').get('gRed'))))
            var.get(u"this").put('_wnafT1', var.get('Array').create(Js(4.0)))
            var.get(u"this").put('_wnafT2', var.get('Array').create(Js(4.0)))
            var.get(u"this").put('_wnafT3', var.get('Array').create(Js(4.0)))
            var.get(u"this").put('_wnafT4', var.get('Array').create(Js(4.0)))
            var.get(u"this").put('_bitLength', (var.get(u"this").get('n').callprop('bitLength') if var.get(u"this").get('n') else Js(0.0)))
            var.put('adjustCount', (var.get(u"this").get('n') and var.get(u"this").get('p').callprop('div', var.get(u"this").get('n'))))
            if (var.get('adjustCount').neg() or (var.get('adjustCount').callprop('cmpn', Js(100.0))>Js(0.0))):
                var.get(u"this").put('redN', var.get(u"null"))
            else:
                var.get(u"this").put('_maxwellTrick', Js(True))
                var.get(u"this").put('redN', var.get(u"this").get('n').callprop('toRed', var.get(u"this").get('red')))
        PyJsHoisted_BaseCurve_.func_name = 'BaseCurve'
        var.put('BaseCurve', PyJsHoisted_BaseCurve_)
        @Js
        def PyJsHoisted_BasePoint_(curve, type, this, arguments, var=var):
            var = Scope({'curve':curve, 'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['curve', 'type'])
            var.get(u"this").put('curve', var.get('curve'))
            var.get(u"this").put('type', var.get('type'))
            var.get(u"this").put('precomputed', var.get(u"null"))
        PyJsHoisted_BasePoint_.func_name = 'BasePoint'
        var.put('BasePoint', PyJsHoisted_BasePoint_)
        Js('use strict')
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('getNAF', var.get('utils').get('getNAF'))
        var.put('getJSF', var.get('utils').get('getJSF'))
        var.put('assert', var.get('utils').get('assert'))
        pass
        var.get('module').put('exports', var.get('BaseCurve'))
        @Js
        def PyJs_point_2240_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'point':PyJs_point_2240_}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Not implemented')))
            raise PyJsTempException
        PyJs_point_2240_._set_name('point')
        var.get('BaseCurve').get('prototype').put('point', PyJs_point_2240_)
        @Js
        def PyJs_validate_2241_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'validate':PyJs_validate_2241_}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Not implemented')))
            raise PyJsTempException
        PyJs_validate_2241_._set_name('validate')
        var.get('BaseCurve').get('prototype').put('validate', PyJs_validate_2241_)
        @Js
        def PyJs__fixedNafMul_2242_(p, k, this, arguments, var=var):
            var = Scope({'p':p, 'k':k, 'this':this, 'arguments':arguments, '_fixedNafMul':PyJs__fixedNafMul_2242_}, var)
            var.registers(['a', 'doubles', 'j', 'repr', 'i', 'k', 'nafW', 'b', 'p', 'naf', 'I'])
            var.get('assert')(var.get('p').get('precomputed'))
            var.put('doubles', var.get('p').callprop('_getDoubles'))
            var.put('naf', var.get('getNAF')(var.get('k'), Js(1.0), var.get(u"this").get('_bitLength')))
            var.put('I', ((Js(1.0)<<(var.get('doubles').get('step')+Js(1.0)))-(Js(2.0) if _seq((var.get('doubles').get('step')%Js(2.0)),Js(0.0)) else Js(1.0))))
            var.put('I', Js(3.0), '/')
            var.put('repr', Js([]))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<var.get('naf').get('length')):
                try:
                    var.put('nafW', Js(0.0))
                    #for JS loop
                    var.put('k', ((var.get('j')+var.get('doubles').get('step'))-Js(1.0)))
                    while (var.get('k')>=var.get('j')):
                        try:
                            var.put('nafW', ((var.get('nafW')<<Js(1.0))+var.get('naf').get(var.get('k'))))
                        finally:
                                (var.put('k',Js(var.get('k').to_number())-Js(1))+Js(1))
                    var.get('repr').callprop('push', var.get('nafW'))
                finally:
                        var.put('j', var.get('doubles').get('step'), '+')
            var.put('a', var.get(u"this").callprop('jpoint', var.get(u"null"), var.get(u"null"), var.get(u"null")))
            var.put('b', var.get(u"this").callprop('jpoint', var.get(u"null"), var.get(u"null"), var.get(u"null")))
            #for JS loop
            var.put('i', var.get('I'))
            while (var.get('i')>Js(0.0)):
                try:
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('repr').get('length')):
                        try:
                            var.put('nafW', var.get('repr').get(var.get('j')))
                            if _seq(var.get('nafW'),var.get('i')):
                                var.put('b', var.get('b').callprop('mixedAdd', var.get('doubles').get('points').get(var.get('j'))))
                            else:
                                if _seq(var.get('nafW'),(-var.get('i'))):
                                    var.put('b', var.get('b').callprop('mixedAdd', var.get('doubles').get('points').get(var.get('j')).callprop('neg')))
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    var.put('a', var.get('a').callprop('add', var.get('b')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            return var.get('a').callprop('toP')
        PyJs__fixedNafMul_2242_._set_name('_fixedNafMul')
        var.get('BaseCurve').get('prototype').put('_fixedNafMul', PyJs__fixedNafMul_2242_)
        @Js
        def PyJs__wnafMul_2243_(p, k, this, arguments, var=var):
            var = Scope({'p':p, 'k':k, 'this':this, 'arguments':arguments, '_wnafMul':PyJs__wnafMul_2243_}, var)
            var.registers(['w', 'z', 'i', 'acc', 'k', 'p', 'nafPoints', 'naf', 'wnd'])
            var.put('w', Js(4.0))
            var.put('nafPoints', var.get('p').callprop('_getNAFPoints', var.get('w')))
            var.put('w', var.get('nafPoints').get('wnd'))
            var.put('wnd', var.get('nafPoints').get('points'))
            var.put('naf', var.get('getNAF')(var.get('k'), var.get('w'), var.get(u"this").get('_bitLength')))
            var.put('acc', var.get(u"this").callprop('jpoint', var.get(u"null"), var.get(u"null"), var.get(u"null")))
            #for JS loop
            var.put('i', (var.get('naf').get('length')-Js(1.0)))
            while (var.get('i')>=Js(0.0)):
                try:
                    #for JS loop
                    var.put('k', Js(0.0))
                    while ((var.get('i')>=Js(0.0)) and _seq(var.get('naf').get(var.get('i')),Js(0.0))):
                        try:
                            (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    if (var.get('i')>=Js(0.0)):
                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                    var.put('acc', var.get('acc').callprop('dblp', var.get('k')))
                    if (var.get('i')<Js(0.0)):
                        break
                    var.put('z', var.get('naf').get(var.get('i')))
                    var.get('assert')(PyJsStrictNeq(var.get('z'),Js(0.0)))
                    if _seq(var.get('p').get('type'),Js('affine')):
                        if (var.get('z')>Js(0.0)):
                            var.put('acc', var.get('acc').callprop('mixedAdd', var.get('wnd').get(((var.get('z')-Js(1.0))>>Js(1.0)))))
                        else:
                            var.put('acc', var.get('acc').callprop('mixedAdd', var.get('wnd').get((((-var.get('z'))-Js(1.0))>>Js(1.0))).callprop('neg')))
                    else:
                        if (var.get('z')>Js(0.0)):
                            var.put('acc', var.get('acc').callprop('add', var.get('wnd').get(((var.get('z')-Js(1.0))>>Js(1.0)))))
                        else:
                            var.put('acc', var.get('acc').callprop('add', var.get('wnd').get((((-var.get('z'))-Js(1.0))>>Js(1.0))).callprop('neg')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            return (var.get('acc').callprop('toP') if _seq(var.get('p').get('type'),Js('affine')) else var.get('acc'))
        PyJs__wnafMul_2243_._set_name('_wnafMul')
        var.get('BaseCurve').get('prototype').put('_wnafMul', PyJs__wnafMul_2243_)
        @Js
        def PyJs__wnafMulAdd_2244_(defW, points, coeffs, len, jacobianResult, this, arguments, var=var):
            var = Scope({'defW':defW, 'points':points, 'coeffs':coeffs, 'len':len, 'jacobianResult':jacobianResult, 'this':this, 'arguments':arguments, '_wnafMulAdd':PyJs__wnafMulAdd_2244_}, var)
            var.registers(['coeffs', 'a', 'jacobianResult', 'zero', 'j', 'tmp', 'acc', 'b', 'comb', 'wnd', 'jsf', 'defW', 'i', 'len', 'max', 'nafPoints', 'ja', 'wndWidth', 'k', 'p', 'points', 'z', 'index', 'naf', 'jb'])
            var.put('wndWidth', var.get(u"this").get('_wnafT1'))
            var.put('wnd', var.get(u"this").get('_wnafT2'))
            var.put('naf', var.get(u"this").get('_wnafT3'))
            var.put('max', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.put('p', var.get('points').get(var.get('i')))
                    var.put('nafPoints', var.get('p').callprop('_getNAFPoints', var.get('defW')))
                    var.get('wndWidth').put(var.get('i'), var.get('nafPoints').get('wnd'))
                    var.get('wnd').put(var.get('i'), var.get('nafPoints').get('points'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('i', (var.get('len')-Js(1.0)))
            while (var.get('i')>=Js(1.0)):
                try:
                    var.put('a', (var.get('i')-Js(1.0)))
                    var.put('b', var.get('i'))
                    if (PyJsStrictNeq(var.get('wndWidth').get(var.get('a')),Js(1.0)) or PyJsStrictNeq(var.get('wndWidth').get(var.get('b')),Js(1.0))):
                        var.get('naf').put(var.get('a'), var.get('getNAF')(var.get('coeffs').get(var.get('a')), var.get('wndWidth').get(var.get('a')), var.get(u"this").get('_bitLength')))
                        var.get('naf').put(var.get('b'), var.get('getNAF')(var.get('coeffs').get(var.get('b')), var.get('wndWidth').get(var.get('b')), var.get(u"this").get('_bitLength')))
                        var.put('max', var.get('Math').callprop('max', var.get('naf').get(var.get('a')).get('length'), var.get('max')))
                        var.put('max', var.get('Math').callprop('max', var.get('naf').get(var.get('b')).get('length'), var.get('max')))
                        continue
                    var.put('comb', Js([var.get('points').get(var.get('a')), var.get(u"null"), var.get(u"null"), var.get('points').get(var.get('b'))]))
                    if _seq(var.get('points').get(var.get('a')).get('y').callprop('cmp', var.get('points').get(var.get('b')).get('y')),Js(0.0)):
                        var.get('comb').put('1', var.get('points').get(var.get('a')).callprop('add', var.get('points').get(var.get('b'))))
                        var.get('comb').put('2', var.get('points').get(var.get('a')).callprop('toJ').callprop('mixedAdd', var.get('points').get(var.get('b')).callprop('neg')))
                    else:
                        if _seq(var.get('points').get(var.get('a')).get('y').callprop('cmp', var.get('points').get(var.get('b')).get('y').callprop('redNeg')),Js(0.0)):
                            var.get('comb').put('1', var.get('points').get(var.get('a')).callprop('toJ').callprop('mixedAdd', var.get('points').get(var.get('b'))))
                            var.get('comb').put('2', var.get('points').get(var.get('a')).callprop('add', var.get('points').get(var.get('b')).callprop('neg')))
                        else:
                            var.get('comb').put('1', var.get('points').get(var.get('a')).callprop('toJ').callprop('mixedAdd', var.get('points').get(var.get('b'))))
                            var.get('comb').put('2', var.get('points').get(var.get('a')).callprop('toJ').callprop('mixedAdd', var.get('points').get(var.get('b')).callprop('neg')))
                    var.put('index', Js([(-Js(3.0)), (-Js(1.0)), (-Js(5.0)), (-Js(7.0)), Js(0.0), Js(7.0), Js(5.0), Js(1.0), Js(3.0)]))
                    var.put('jsf', var.get('getJSF')(var.get('coeffs').get(var.get('a')), var.get('coeffs').get(var.get('b'))))
                    var.put('max', var.get('Math').callprop('max', var.get('jsf').get('0').get('length'), var.get('max')))
                    var.get('naf').put(var.get('a'), var.get('Array').create(var.get('max')))
                    var.get('naf').put(var.get('b'), var.get('Array').create(var.get('max')))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('max')):
                        try:
                            var.put('ja', (var.get('jsf').get('0').get(var.get('j'))|Js(0.0)))
                            var.put('jb', (var.get('jsf').get('1').get(var.get('j'))|Js(0.0)))
                            var.get('naf').get(var.get('a')).put(var.get('j'), var.get('index').get((((var.get('ja')+Js(1.0))*Js(3.0))+(var.get('jb')+Js(1.0)))))
                            var.get('naf').get(var.get('b')).put(var.get('j'), Js(0.0))
                            var.get('wnd').put(var.get('a'), var.get('comb'))
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                finally:
                        var.put('i', Js(2.0), '-')
            var.put('acc', var.get(u"this").callprop('jpoint', var.get(u"null"), var.get(u"null"), var.get(u"null")))
            var.put('tmp', var.get(u"this").get('_wnafT4'))
            #for JS loop
            var.put('i', var.get('max'))
            while (var.get('i')>=Js(0.0)):
                try:
                    var.put('k', Js(0.0))
                    while (var.get('i')>=Js(0.0)):
                        var.put('zero', Js(True))
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get('len')):
                            try:
                                var.get('tmp').put(var.get('j'), (var.get('naf').get(var.get('j')).get(var.get('i'))|Js(0.0)))
                                if PyJsStrictNeq(var.get('tmp').get(var.get('j')),Js(0.0)):
                                    var.put('zero', Js(False))
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        if var.get('zero').neg():
                            break
                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    if (var.get('i')>=Js(0.0)):
                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                    var.put('acc', var.get('acc').callprop('dblp', var.get('k')))
                    if (var.get('i')<Js(0.0)):
                        break
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('len')):
                        try:
                            var.put('z', var.get('tmp').get(var.get('j')))
                            pass
                            if _seq(var.get('z'),Js(0.0)):
                                continue
                            else:
                                if (var.get('z')>Js(0.0)):
                                    var.put('p', var.get('wnd').get(var.get('j')).get(((var.get('z')-Js(1.0))>>Js(1.0))))
                                else:
                                    if (var.get('z')<Js(0.0)):
                                        var.put('p', var.get('wnd').get(var.get('j')).get((((-var.get('z'))-Js(1.0))>>Js(1.0))).callprop('neg'))
                            if _seq(var.get('p').get('type'),Js('affine')):
                                var.put('acc', var.get('acc').callprop('mixedAdd', var.get('p')))
                            else:
                                var.put('acc', var.get('acc').callprop('add', var.get('p')))
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.get('wnd').put(var.get('i'), var.get(u"null"))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if var.get('jacobianResult'):
                return var.get('acc')
            else:
                return var.get('acc').callprop('toP')
        PyJs__wnafMulAdd_2244_._set_name('_wnafMulAdd')
        var.get('BaseCurve').get('prototype').put('_wnafMulAdd', PyJs__wnafMulAdd_2244_)
        pass
        var.get('BaseCurve').put('BasePoint', var.get('BasePoint'))
        @Js
        def PyJs_eq_2245_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'eq':PyJs_eq_2245_}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Not implemented')))
            raise PyJsTempException
        PyJs_eq_2245_._set_name('eq')
        var.get('BasePoint').get('prototype').put('eq', PyJs_eq_2245_)
        @Js
        def PyJs_validate_2246_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'validate':PyJs_validate_2246_}, var)
            var.registers([])
            return var.get(u"this").get('curve').callprop('validate', var.get(u"this"))
        PyJs_validate_2246_._set_name('validate')
        var.get('BasePoint').get('prototype').put('validate', PyJs_validate_2246_)
        @Js
        def PyJs_decodePoint_2247_(bytes, enc, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'enc':enc, 'this':this, 'arguments':arguments, 'decodePoint':PyJs_decodePoint_2247_}, var)
            var.registers(['len', 'bytes', 'enc', 'res'])
            var.put('bytes', var.get('utils').callprop('toArray', var.get('bytes'), var.get('enc')))
            var.put('len', var.get(u"this").get('p').callprop('byteLength'))
            if (((_seq(var.get('bytes').get('0'),Js(4)) or _seq(var.get('bytes').get('0'),Js(6))) or _seq(var.get('bytes').get('0'),Js(7))) and _seq((var.get('bytes').get('length')-Js(1.0)),(Js(2.0)*var.get('len')))):
                if _seq(var.get('bytes').get('0'),Js(6)):
                    var.get('assert')(_seq((var.get('bytes').get((var.get('bytes').get('length')-Js(1.0)))%Js(2.0)),Js(0.0)))
                else:
                    if _seq(var.get('bytes').get('0'),Js(7)):
                        var.get('assert')(_seq((var.get('bytes').get((var.get('bytes').get('length')-Js(1.0)))%Js(2.0)),Js(1.0)))
                var.put('res', var.get(u"this").callprop('point', var.get('bytes').callprop('slice', Js(1.0), (Js(1.0)+var.get('len'))), var.get('bytes').callprop('slice', (Js(1.0)+var.get('len')), (Js(1.0)+(Js(2.0)*var.get('len'))))))
                return var.get('res')
            else:
                if ((_seq(var.get('bytes').get('0'),Js(2)) or _seq(var.get('bytes').get('0'),Js(3))) and _seq((var.get('bytes').get('length')-Js(1.0)),var.get('len'))):
                    return var.get(u"this").callprop('pointFromX', var.get('bytes').callprop('slice', Js(1.0), (Js(1.0)+var.get('len'))), _seq(var.get('bytes').get('0'),Js(3)))
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Unknown point format')))
            raise PyJsTempException
        PyJs_decodePoint_2247_._set_name('decodePoint')
        var.get('BaseCurve').get('prototype').put('decodePoint', PyJs_decodePoint_2247_)
        @Js
        def PyJs_encodeCompressed_2248_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'encodeCompressed':PyJs_encodeCompressed_2248_}, var)
            var.registers(['enc'])
            return var.get(u"this").callprop('encode', var.get('enc'), Js(True))
        PyJs_encodeCompressed_2248_._set_name('encodeCompressed')
        var.get('BasePoint').get('prototype').put('encodeCompressed', PyJs_encodeCompressed_2248_)
        @Js
        def PyJs__encode_2249_(compact, this, arguments, var=var):
            var = Scope({'compact':compact, 'this':this, 'arguments':arguments, '_encode':PyJs__encode_2249_}, var)
            var.registers(['len', 'x', 'compact'])
            var.put('len', var.get(u"this").get('curve').get('p').callprop('byteLength'))
            var.put('x', var.get(u"this").callprop('getX').callprop('toArray', Js('be'), var.get('len')))
            if var.get('compact'):
                return Js([(Js(2) if var.get(u"this").callprop('getY').callprop('isEven') else Js(3))]).callprop('concat', var.get('x'))
            return Js([Js(4)]).callprop('concat', var.get('x'), var.get(u"this").callprop('getY').callprop('toArray', Js('be'), var.get('len')))
        PyJs__encode_2249_._set_name('_encode')
        var.get('BasePoint').get('prototype').put('_encode', PyJs__encode_2249_)
        @Js
        def PyJs_encode_2250_(enc, compact, this, arguments, var=var):
            var = Scope({'enc':enc, 'compact':compact, 'this':this, 'arguments':arguments, 'encode':PyJs_encode_2250_}, var)
            var.registers(['compact', 'enc'])
            return var.get('utils').callprop('encode', var.get(u"this").callprop('_encode', var.get('compact')), var.get('enc'))
        PyJs_encode_2250_._set_name('encode')
        var.get('BasePoint').get('prototype').put('encode', PyJs_encode_2250_)
        @Js
        def PyJs_precompute_2251_(power, this, arguments, var=var):
            var = Scope({'power':power, 'this':this, 'arguments':arguments, 'precompute':PyJs_precompute_2251_}, var)
            var.registers(['power', 'precomputed'])
            if var.get(u"this").get('precomputed'):
                return var.get(u"this")
            var.put('precomputed', Js({'doubles':var.get(u"null"),'naf':var.get(u"null"),'beta':var.get(u"null")}))
            var.get('precomputed').put('naf', var.get(u"this").callprop('_getNAFPoints', Js(8.0)))
            var.get('precomputed').put('doubles', var.get(u"this").callprop('_getDoubles', Js(4.0), var.get('power')))
            var.get('precomputed').put('beta', var.get(u"this").callprop('_getBeta'))
            var.get(u"this").put('precomputed', var.get('precomputed'))
            return var.get(u"this")
        PyJs_precompute_2251_._set_name('precompute')
        var.get('BasePoint').get('prototype').put('precompute', PyJs_precompute_2251_)
        @Js
        def PyJs__hasDoubles_2252_(k, this, arguments, var=var):
            var = Scope({'k':k, 'this':this, 'arguments':arguments, '_hasDoubles':PyJs__hasDoubles_2252_}, var)
            var.registers(['doubles', 'k'])
            if var.get(u"this").get('precomputed').neg():
                return Js(False)
            var.put('doubles', var.get(u"this").get('precomputed').get('doubles'))
            if var.get('doubles').neg():
                return Js(False)
            return (var.get('doubles').get('points').get('length')>=var.get('Math').callprop('ceil', ((var.get('k').callprop('bitLength')+Js(1.0))/var.get('doubles').get('step'))))
        PyJs__hasDoubles_2252_._set_name('_hasDoubles')
        var.get('BasePoint').get('prototype').put('_hasDoubles', PyJs__hasDoubles_2252_)
        @Js
        def PyJs__getDoubles_2253_(step, power, this, arguments, var=var):
            var = Scope({'step':step, 'power':power, 'this':this, 'arguments':arguments, '_getDoubles':PyJs__getDoubles_2253_}, var)
            var.registers(['doubles', 'j', 'i', 'acc', 'power', 'step'])
            if (var.get(u"this").get('precomputed') and var.get(u"this").get('precomputed').get('doubles')):
                return var.get(u"this").get('precomputed').get('doubles')
            var.put('doubles', Js([var.get(u"this")]))
            var.put('acc', var.get(u"this"))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('power')):
                try:
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('step')):
                        try:
                            var.put('acc', var.get('acc').callprop('dbl'))
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    var.get('doubles').callprop('push', var.get('acc'))
                finally:
                        var.put('i', var.get('step'), '+')
            return Js({'step':var.get('step'),'points':var.get('doubles')})
        PyJs__getDoubles_2253_._set_name('_getDoubles')
        var.get('BasePoint').get('prototype').put('_getDoubles', PyJs__getDoubles_2253_)
        @Js
        def PyJs__getNAFPoints_2254_(wnd, this, arguments, var=var):
            var = Scope({'wnd':wnd, 'this':this, 'arguments':arguments, '_getNAFPoints':PyJs__getNAFPoints_2254_}, var)
            var.registers(['i', 'max', 'dbl', 'wnd', 'res'])
            if (var.get(u"this").get('precomputed') and var.get(u"this").get('precomputed').get('naf')):
                return var.get(u"this").get('precomputed').get('naf')
            var.put('res', Js([var.get(u"this")]))
            var.put('max', ((Js(1.0)<<var.get('wnd'))-Js(1.0)))
            var.put('dbl', (var.get(u"null") if _seq(var.get('max'),Js(1.0)) else var.get(u"this").callprop('dbl')))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('max')):
                try:
                    var.get('res').put(var.get('i'), var.get('res').get((var.get('i')-Js(1.0))).callprop('add', var.get('dbl')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return Js({'wnd':var.get('wnd'),'points':var.get('res')})
        PyJs__getNAFPoints_2254_._set_name('_getNAFPoints')
        var.get('BasePoint').get('prototype').put('_getNAFPoints', PyJs__getNAFPoints_2254_)
        @Js
        def PyJs__getBeta_2255_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_getBeta':PyJs__getBeta_2255_}, var)
            var.registers([])
            return var.get(u"null")
        PyJs__getBeta_2255_._set_name('_getBeta')
        var.get('BasePoint').get('prototype').put('_getBeta', PyJs__getBeta_2255_)
        @Js
        def PyJs_dblp_2256_(k, this, arguments, var=var):
            var = Scope({'k':k, 'this':this, 'arguments':arguments, 'dblp':PyJs_dblp_2256_}, var)
            var.registers(['i', 'r', 'k'])
            var.put('r', var.get(u"this"))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('k')):
                try:
                    var.put('r', var.get('r').callprop('dbl'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('r')
        PyJs_dblp_2256_._set_name('dblp')
        var.get('BasePoint').get('prototype').put('dblp', PyJs_dblp_2256_)
    PyJs_anonymous_2239_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2257_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'BN', 'EdwardsCurve', 'Base', 'utils', 'inherits', 'assert', 'Point'])
        @Js
        def PyJsHoisted_EdwardsCurve_(conf, this, arguments, var=var):
            var = Scope({'conf':conf, 'this':this, 'arguments':arguments}, var)
            var.registers(['conf'])
            var.get(u"this").put('twisted', PyJsStrictNeq((var.get('conf').get('a')|Js(0.0)),Js(1.0)))
            var.get(u"this").put('mOneA', (var.get(u"this").get('twisted') and _seq((var.get('conf').get('a')|Js(0.0)),(-Js(1.0)))))
            var.get(u"this").put('extended', var.get(u"this").get('mOneA'))
            var.get('Base').callprop('call', var.get(u"this"), Js('edwards'), var.get('conf'))
            var.get(u"this").put('a', var.get('BN').create(var.get('conf').get('a'), Js(16.0)).callprop('umod', var.get(u"this").get('red').get('m')))
            var.get(u"this").put('a', var.get(u"this").get('a').callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('c', var.get('BN').create(var.get('conf').get('c'), Js(16.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('c2', var.get(u"this").get('c').callprop('redSqr'))
            var.get(u"this").put('d', var.get('BN').create(var.get('conf').get('d'), Js(16.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('dd', var.get(u"this").get('d').callprop('redAdd', var.get(u"this").get('d')))
            var.get('assert')((var.get(u"this").get('twisted').neg() or _seq(var.get(u"this").get('c').callprop('fromRed').callprop('cmpn', Js(1.0)),Js(0.0))))
            var.get(u"this").put('oneC', _seq((var.get('conf').get('c')|Js(0.0)),Js(1.0)))
        PyJsHoisted_EdwardsCurve_.func_name = 'EdwardsCurve'
        var.put('EdwardsCurve', PyJsHoisted_EdwardsCurve_)
        @Js
        def PyJsHoisted_Point_(curve, x, y, z, t, this, arguments, var=var):
            var = Scope({'curve':curve, 'x':x, 'y':y, 'z':z, 't':t, 'this':this, 'arguments':arguments}, var)
            var.registers(['z', 'x', 'y', 't', 'curve'])
            var.get('Base').get('BasePoint').callprop('call', var.get(u"this"), var.get('curve'), Js('projective'))
            if ((_seq(var.get('x'),var.get(u"null")) and _seq(var.get('y'),var.get(u"null"))) and _seq(var.get('z'),var.get(u"null"))):
                var.get(u"this").put('x', var.get(u"this").get('curve').get('zero'))
                var.get(u"this").put('y', var.get(u"this").get('curve').get('one'))
                var.get(u"this").put('z', var.get(u"this").get('curve').get('one'))
                var.get(u"this").put('t', var.get(u"this").get('curve').get('zero'))
                var.get(u"this").put('zOne', Js(True))
            else:
                var.get(u"this").put('x', var.get('BN').create(var.get('x'), Js(16.0)))
                var.get(u"this").put('y', var.get('BN').create(var.get('y'), Js(16.0)))
                var.get(u"this").put('z', (var.get('BN').create(var.get('z'), Js(16.0)) if var.get('z') else var.get(u"this").get('curve').get('one')))
                var.get(u"this").put('t', (var.get('t') and var.get('BN').create(var.get('t'), Js(16.0))))
                if var.get(u"this").get('x').get('red').neg():
                    var.get(u"this").put('x', var.get(u"this").get('x').callprop('toRed', var.get(u"this").get('curve').get('red')))
                if var.get(u"this").get('y').get('red').neg():
                    var.get(u"this").put('y', var.get(u"this").get('y').callprop('toRed', var.get(u"this").get('curve').get('red')))
                if var.get(u"this").get('z').get('red').neg():
                    var.get(u"this").put('z', var.get(u"this").get('z').callprop('toRed', var.get(u"this").get('curve').get('red')))
                if (var.get(u"this").get('t') and var.get(u"this").get('t').get('red').neg()):
                    var.get(u"this").put('t', var.get(u"this").get('t').callprop('toRed', var.get(u"this").get('curve').get('red')))
                var.get(u"this").put('zOne', _seq(var.get(u"this").get('z'),var.get(u"this").get('curve').get('one')))
                if (var.get(u"this").get('curve').get('extended') and var.get(u"this").get('t').neg()):
                    var.get(u"this").put('t', var.get(u"this").get('x').callprop('redMul', var.get(u"this").get('y')))
                    if var.get(u"this").get('zOne').neg():
                        var.get(u"this").put('t', var.get(u"this").get('t').callprop('redMul', var.get(u"this").get('z').callprop('redInvm')))
        PyJsHoisted_Point_.func_name = 'Point'
        var.put('Point', PyJsHoisted_Point_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Base', var.get('require')(Js('./base')))
        var.put('assert', var.get('utils').get('assert'))
        pass
        var.get('inherits')(var.get('EdwardsCurve'), var.get('Base'))
        var.get('module').put('exports', var.get('EdwardsCurve'))
        @Js
        def PyJs__mulA_2258_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, '_mulA':PyJs__mulA_2258_}, var)
            var.registers(['num'])
            if var.get(u"this").get('mOneA'):
                return var.get('num').callprop('redNeg')
            else:
                return var.get(u"this").get('a').callprop('redMul', var.get('num'))
        PyJs__mulA_2258_._set_name('_mulA')
        var.get('EdwardsCurve').get('prototype').put('_mulA', PyJs__mulA_2258_)
        @Js
        def PyJs__mulC_2259_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, '_mulC':PyJs__mulC_2259_}, var)
            var.registers(['num'])
            if var.get(u"this").get('oneC'):
                return var.get('num')
            else:
                return var.get(u"this").get('c').callprop('redMul', var.get('num'))
        PyJs__mulC_2259_._set_name('_mulC')
        var.get('EdwardsCurve').get('prototype').put('_mulC', PyJs__mulC_2259_)
        @Js
        def PyJs_jpoint_2260_(x, y, z, t, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 't':t, 'this':this, 'arguments':arguments, 'jpoint':PyJs_jpoint_2260_}, var)
            var.registers(['x', 't', 'z', 'y'])
            return var.get(u"this").callprop('point', var.get('x'), var.get('y'), var.get('z'), var.get('t'))
        PyJs_jpoint_2260_._set_name('jpoint')
        var.get('EdwardsCurve').get('prototype').put('jpoint', PyJs_jpoint_2260_)
        @Js
        def PyJs_pointFromX_2261_(x, odd, this, arguments, var=var):
            var = Scope({'x':x, 'odd':odd, 'this':this, 'arguments':arguments, 'pointFromX':PyJs_pointFromX_2261_}, var)
            var.registers(['x2', 'y2', 'rhs', 'y', 'x', 'isOdd', 'lhs', 'odd'])
            var.put('x', var.get('BN').create(var.get('x'), Js(16.0)))
            if var.get('x').get('red').neg():
                var.put('x', var.get('x').callprop('toRed', var.get(u"this").get('red')))
            var.put('x2', var.get('x').callprop('redSqr'))
            var.put('rhs', var.get(u"this").get('c2').callprop('redSub', var.get(u"this").get('a').callprop('redMul', var.get('x2'))))
            var.put('lhs', var.get(u"this").get('one').callprop('redSub', var.get(u"this").get('c2').callprop('redMul', var.get(u"this").get('d')).callprop('redMul', var.get('x2'))))
            var.put('y2', var.get('rhs').callprop('redMul', var.get('lhs').callprop('redInvm')))
            var.put('y', var.get('y2').callprop('redSqrt'))
            if PyJsStrictNeq(var.get('y').callprop('redSqr').callprop('redSub', var.get('y2')).callprop('cmp', var.get(u"this").get('zero')),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('invalid point')))
                raise PyJsTempException
            var.put('isOdd', var.get('y').callprop('fromRed').callprop('isOdd'))
            if ((var.get('odd') and var.get('isOdd').neg()) or (var.get('odd').neg() and var.get('isOdd'))):
                var.put('y', var.get('y').callprop('redNeg'))
            return var.get(u"this").callprop('point', var.get('x'), var.get('y'))
        PyJs_pointFromX_2261_._set_name('pointFromX')
        var.get('EdwardsCurve').get('prototype').put('pointFromX', PyJs_pointFromX_2261_)
        @Js
        def PyJs_pointFromY_2262_(y, odd, this, arguments, var=var):
            var = Scope({'y':y, 'odd':odd, 'this':this, 'arguments':arguments, 'pointFromY':PyJs_pointFromY_2262_}, var)
            var.registers(['x2', 'y2', 'rhs', 'x', 'y', 'lhs', 'odd'])
            var.put('y', var.get('BN').create(var.get('y'), Js(16.0)))
            if var.get('y').get('red').neg():
                var.put('y', var.get('y').callprop('toRed', var.get(u"this").get('red')))
            var.put('y2', var.get('y').callprop('redSqr'))
            var.put('lhs', var.get('y2').callprop('redSub', var.get(u"this").get('c2')))
            var.put('rhs', var.get('y2').callprop('redMul', var.get(u"this").get('d')).callprop('redMul', var.get(u"this").get('c2')).callprop('redSub', var.get(u"this").get('a')))
            var.put('x2', var.get('lhs').callprop('redMul', var.get('rhs').callprop('redInvm')))
            if _seq(var.get('x2').callprop('cmp', var.get(u"this").get('zero')),Js(0.0)):
                if var.get('odd'):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('invalid point')))
                    raise PyJsTempException
                else:
                    return var.get(u"this").callprop('point', var.get(u"this").get('zero'), var.get('y'))
            var.put('x', var.get('x2').callprop('redSqrt'))
            if PyJsStrictNeq(var.get('x').callprop('redSqr').callprop('redSub', var.get('x2')).callprop('cmp', var.get(u"this").get('zero')),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('invalid point')))
                raise PyJsTempException
            if PyJsStrictNeq(var.get('x').callprop('fromRed').callprop('isOdd'),var.get('odd')):
                var.put('x', var.get('x').callprop('redNeg'))
            return var.get(u"this").callprop('point', var.get('x'), var.get('y'))
        PyJs_pointFromY_2262_._set_name('pointFromY')
        var.get('EdwardsCurve').get('prototype').put('pointFromY', PyJs_pointFromY_2262_)
        @Js
        def PyJs_validate_2263_(point, this, arguments, var=var):
            var = Scope({'point':point, 'this':this, 'arguments':arguments, 'validate':PyJs_validate_2263_}, var)
            var.registers(['x2', 'y2', 'rhs', 'point', 'lhs'])
            if var.get('point').callprop('isInfinity'):
                return Js(True)
            var.get('point').callprop('normalize')
            var.put('x2', var.get('point').get('x').callprop('redSqr'))
            var.put('y2', var.get('point').get('y').callprop('redSqr'))
            var.put('lhs', var.get('x2').callprop('redMul', var.get(u"this").get('a')).callprop('redAdd', var.get('y2')))
            var.put('rhs', var.get(u"this").get('c2').callprop('redMul', var.get(u"this").get('one').callprop('redAdd', var.get(u"this").get('d').callprop('redMul', var.get('x2')).callprop('redMul', var.get('y2')))))
            return _seq(var.get('lhs').callprop('cmp', var.get('rhs')),Js(0.0))
        PyJs_validate_2263_._set_name('validate')
        var.get('EdwardsCurve').get('prototype').put('validate', PyJs_validate_2263_)
        pass
        var.get('inherits')(var.get('Point'), var.get('Base').get('BasePoint'))
        @Js
        def PyJs_pointFromJSON_2264_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments, 'pointFromJSON':PyJs_pointFromJSON_2264_}, var)
            var.registers(['obj'])
            return var.get('Point').callprop('fromJSON', var.get(u"this"), var.get('obj'))
        PyJs_pointFromJSON_2264_._set_name('pointFromJSON')
        var.get('EdwardsCurve').get('prototype').put('pointFromJSON', PyJs_pointFromJSON_2264_)
        @Js
        def PyJs_point_2265_(x, y, z, t, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 't':t, 'this':this, 'arguments':arguments, 'point':PyJs_point_2265_}, var)
            var.registers(['x', 't', 'z', 'y'])
            return var.get('Point').create(var.get(u"this"), var.get('x'), var.get('y'), var.get('z'), var.get('t'))
        PyJs_point_2265_._set_name('point')
        var.get('EdwardsCurve').get('prototype').put('point', PyJs_point_2265_)
        @Js
        def PyJs_fromJSON_2266_(curve, obj, this, arguments, var=var):
            var = Scope({'curve':curve, 'obj':obj, 'this':this, 'arguments':arguments, 'fromJSON':PyJs_fromJSON_2266_}, var)
            var.registers(['curve', 'obj'])
            return var.get('Point').create(var.get('curve'), var.get('obj').get('0'), var.get('obj').get('1'), var.get('obj').get('2'))
        PyJs_fromJSON_2266_._set_name('fromJSON')
        var.get('Point').put('fromJSON', PyJs_fromJSON_2266_)
        @Js
        def PyJs_inspect_2267_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'inspect':PyJs_inspect_2267_}, var)
            var.registers([])
            if var.get(u"this").callprop('isInfinity'):
                return Js('<EC Point Infinity>')
            return ((((((Js('<EC Point x: ')+var.get(u"this").get('x').callprop('fromRed').callprop('toString', Js(16.0), Js(2.0)))+Js(' y: '))+var.get(u"this").get('y').callprop('fromRed').callprop('toString', Js(16.0), Js(2.0)))+Js(' z: '))+var.get(u"this").get('z').callprop('fromRed').callprop('toString', Js(16.0), Js(2.0)))+Js('>'))
        PyJs_inspect_2267_._set_name('inspect')
        var.get('Point').get('prototype').put('inspect', PyJs_inspect_2267_)
        @Js
        def PyJs_isInfinity_2268_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'isInfinity':PyJs_isInfinity_2268_}, var)
            var.registers([])
            return (_seq(var.get(u"this").get('x').callprop('cmpn', Js(0.0)),Js(0.0)) and (_seq(var.get(u"this").get('y').callprop('cmp', var.get(u"this").get('z')),Js(0.0)) or (var.get(u"this").get('zOne') and _seq(var.get(u"this").get('y').callprop('cmp', var.get(u"this").get('curve').get('c')),Js(0.0)))))
        PyJs_isInfinity_2268_._set_name('isInfinity')
        var.get('Point').get('prototype').put('isInfinity', PyJs_isInfinity_2268_)
        @Js
        def PyJs__extDbl_2269_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_extDbl':PyJs__extDbl_2269_}, var)
            var.registers(['a', 'nt', 'f', 'ny', 'e', 'c', 'h', 'b', 'g', 'nx', 'nz', 'd'])
            var.put('a', var.get(u"this").get('x').callprop('redSqr'))
            var.put('b', var.get(u"this").get('y').callprop('redSqr'))
            var.put('c', var.get(u"this").get('z').callprop('redSqr'))
            var.put('c', var.get('c').callprop('redIAdd', var.get('c')))
            var.put('d', var.get(u"this").get('curve').callprop('_mulA', var.get('a')))
            var.put('e', var.get(u"this").get('x').callprop('redAdd', var.get(u"this").get('y')).callprop('redSqr').callprop('redISub', var.get('a')).callprop('redISub', var.get('b')))
            var.put('g', var.get('d').callprop('redAdd', var.get('b')))
            var.put('f', var.get('g').callprop('redSub', var.get('c')))
            var.put('h', var.get('d').callprop('redSub', var.get('b')))
            var.put('nx', var.get('e').callprop('redMul', var.get('f')))
            var.put('ny', var.get('g').callprop('redMul', var.get('h')))
            var.put('nt', var.get('e').callprop('redMul', var.get('h')))
            var.put('nz', var.get('f').callprop('redMul', var.get('g')))
            return var.get(u"this").get('curve').callprop('point', var.get('nx'), var.get('ny'), var.get('nz'), var.get('nt'))
        PyJs__extDbl_2269_._set_name('_extDbl')
        var.get('Point').get('prototype').put('_extDbl', PyJs__extDbl_2269_)
        @Js
        def PyJs__projDbl_2270_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_projDbl':PyJs__projDbl_2270_}, var)
            var.registers(['f', 'j', 'ny', 'c', 'e', 'h', 'b', 'nx', 'nz', 'd'])
            var.put('b', var.get(u"this").get('x').callprop('redAdd', var.get(u"this").get('y')).callprop('redSqr'))
            var.put('c', var.get(u"this").get('x').callprop('redSqr'))
            var.put('d', var.get(u"this").get('y').callprop('redSqr'))
            pass
            pass
            pass
            if var.get(u"this").get('curve').get('twisted'):
                var.put('e', var.get(u"this").get('curve').callprop('_mulA', var.get('c')))
                var.put('f', var.get('e').callprop('redAdd', var.get('d')))
                if var.get(u"this").get('zOne'):
                    var.put('nx', var.get('b').callprop('redSub', var.get('c')).callprop('redSub', var.get('d')).callprop('redMul', var.get('f').callprop('redSub', var.get(u"this").get('curve').get('two'))))
                    var.put('ny', var.get('f').callprop('redMul', var.get('e').callprop('redSub', var.get('d'))))
                    var.put('nz', var.get('f').callprop('redSqr').callprop('redSub', var.get('f')).callprop('redSub', var.get('f')))
                else:
                    var.put('h', var.get(u"this").get('z').callprop('redSqr'))
                    var.put('j', var.get('f').callprop('redSub', var.get('h')).callprop('redISub', var.get('h')))
                    var.put('nx', var.get('b').callprop('redSub', var.get('c')).callprop('redISub', var.get('d')).callprop('redMul', var.get('j')))
                    var.put('ny', var.get('f').callprop('redMul', var.get('e').callprop('redSub', var.get('d'))))
                    var.put('nz', var.get('f').callprop('redMul', var.get('j')))
            else:
                var.put('e', var.get('c').callprop('redAdd', var.get('d')))
                var.put('h', var.get(u"this").get('curve').callprop('_mulC', var.get(u"this").get('z')).callprop('redSqr'))
                var.put('j', var.get('e').callprop('redSub', var.get('h')).callprop('redSub', var.get('h')))
                var.put('nx', var.get(u"this").get('curve').callprop('_mulC', var.get('b').callprop('redISub', var.get('e'))).callprop('redMul', var.get('j')))
                var.put('ny', var.get(u"this").get('curve').callprop('_mulC', var.get('e')).callprop('redMul', var.get('c').callprop('redISub', var.get('d'))))
                var.put('nz', var.get('e').callprop('redMul', var.get('j')))
            return var.get(u"this").get('curve').callprop('point', var.get('nx'), var.get('ny'), var.get('nz'))
        PyJs__projDbl_2270_._set_name('_projDbl')
        var.get('Point').get('prototype').put('_projDbl', PyJs__projDbl_2270_)
        @Js
        def PyJs_dbl_2271_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'dbl':PyJs_dbl_2271_}, var)
            var.registers([])
            if var.get(u"this").callprop('isInfinity'):
                return var.get(u"this")
            if var.get(u"this").get('curve').get('extended'):
                return var.get(u"this").callprop('_extDbl')
            else:
                return var.get(u"this").callprop('_projDbl')
        PyJs_dbl_2271_._set_name('dbl')
        var.get('Point').get('prototype').put('dbl', PyJs_dbl_2271_)
        @Js
        def PyJs__extAdd_2272_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments, '_extAdd':PyJs__extAdd_2272_}, var)
            var.registers(['a', 'nt', 'f', 'ny', 'e', 'c', 'h', 'b', 'g', 'p', 'nx', 'nz', 'd'])
            var.put('a', var.get(u"this").get('y').callprop('redSub', var.get(u"this").get('x')).callprop('redMul', var.get('p').get('y').callprop('redSub', var.get('p').get('x'))))
            var.put('b', var.get(u"this").get('y').callprop('redAdd', var.get(u"this").get('x')).callprop('redMul', var.get('p').get('y').callprop('redAdd', var.get('p').get('x'))))
            var.put('c', var.get(u"this").get('t').callprop('redMul', var.get(u"this").get('curve').get('dd')).callprop('redMul', var.get('p').get('t')))
            var.put('d', var.get(u"this").get('z').callprop('redMul', var.get('p').get('z').callprop('redAdd', var.get('p').get('z'))))
            var.put('e', var.get('b').callprop('redSub', var.get('a')))
            var.put('f', var.get('d').callprop('redSub', var.get('c')))
            var.put('g', var.get('d').callprop('redAdd', var.get('c')))
            var.put('h', var.get('b').callprop('redAdd', var.get('a')))
            var.put('nx', var.get('e').callprop('redMul', var.get('f')))
            var.put('ny', var.get('g').callprop('redMul', var.get('h')))
            var.put('nt', var.get('e').callprop('redMul', var.get('h')))
            var.put('nz', var.get('f').callprop('redMul', var.get('g')))
            return var.get(u"this").get('curve').callprop('point', var.get('nx'), var.get('ny'), var.get('nz'), var.get('nt'))
        PyJs__extAdd_2272_._set_name('_extAdd')
        var.get('Point').get('prototype').put('_extAdd', PyJs__extAdd_2272_)
        @Js
        def PyJs__projAdd_2273_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments, '_projAdd':PyJs__projAdd_2273_}, var)
            var.registers(['a', 'f', 'tmp', 'ny', 'e', 'c', 'b', 'g', 'p', 'nx', 'nz', 'd'])
            var.put('a', var.get(u"this").get('z').callprop('redMul', var.get('p').get('z')))
            var.put('b', var.get('a').callprop('redSqr'))
            var.put('c', var.get(u"this").get('x').callprop('redMul', var.get('p').get('x')))
            var.put('d', var.get(u"this").get('y').callprop('redMul', var.get('p').get('y')))
            var.put('e', var.get(u"this").get('curve').get('d').callprop('redMul', var.get('c')).callprop('redMul', var.get('d')))
            var.put('f', var.get('b').callprop('redSub', var.get('e')))
            var.put('g', var.get('b').callprop('redAdd', var.get('e')))
            var.put('tmp', var.get(u"this").get('x').callprop('redAdd', var.get(u"this").get('y')).callprop('redMul', var.get('p').get('x').callprop('redAdd', var.get('p').get('y'))).callprop('redISub', var.get('c')).callprop('redISub', var.get('d')))
            var.put('nx', var.get('a').callprop('redMul', var.get('f')).callprop('redMul', var.get('tmp')))
            pass
            pass
            if var.get(u"this").get('curve').get('twisted'):
                var.put('ny', var.get('a').callprop('redMul', var.get('g')).callprop('redMul', var.get('d').callprop('redSub', var.get(u"this").get('curve').callprop('_mulA', var.get('c')))))
                var.put('nz', var.get('f').callprop('redMul', var.get('g')))
            else:
                var.put('ny', var.get('a').callprop('redMul', var.get('g')).callprop('redMul', var.get('d').callprop('redSub', var.get('c'))))
                var.put('nz', var.get(u"this").get('curve').callprop('_mulC', var.get('f')).callprop('redMul', var.get('g')))
            return var.get(u"this").get('curve').callprop('point', var.get('nx'), var.get('ny'), var.get('nz'))
        PyJs__projAdd_2273_._set_name('_projAdd')
        var.get('Point').get('prototype').put('_projAdd', PyJs__projAdd_2273_)
        @Js
        def PyJs_add_2274_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments, 'add':PyJs_add_2274_}, var)
            var.registers(['p'])
            if var.get(u"this").callprop('isInfinity'):
                return var.get('p')
            if var.get('p').callprop('isInfinity'):
                return var.get(u"this")
            if var.get(u"this").get('curve').get('extended'):
                return var.get(u"this").callprop('_extAdd', var.get('p'))
            else:
                return var.get(u"this").callprop('_projAdd', var.get('p'))
        PyJs_add_2274_._set_name('add')
        var.get('Point').get('prototype').put('add', PyJs_add_2274_)
        @Js
        def PyJs_mul_2275_(k, this, arguments, var=var):
            var = Scope({'k':k, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_2275_}, var)
            var.registers(['k'])
            if var.get(u"this").callprop('_hasDoubles', var.get('k')):
                return var.get(u"this").get('curve').callprop('_fixedNafMul', var.get(u"this"), var.get('k'))
            else:
                return var.get(u"this").get('curve').callprop('_wnafMul', var.get(u"this"), var.get('k'))
        PyJs_mul_2275_._set_name('mul')
        var.get('Point').get('prototype').put('mul', PyJs_mul_2275_)
        @Js
        def PyJs_mulAdd_2276_(k1, p, k2, this, arguments, var=var):
            var = Scope({'k1':k1, 'p':p, 'k2':k2, 'this':this, 'arguments':arguments, 'mulAdd':PyJs_mulAdd_2276_}, var)
            var.registers(['k2', 'p', 'k1'])
            return var.get(u"this").get('curve').callprop('_wnafMulAdd', Js(1.0), Js([var.get(u"this"), var.get('p')]), Js([var.get('k1'), var.get('k2')]), Js(2.0), Js(False))
        PyJs_mulAdd_2276_._set_name('mulAdd')
        var.get('Point').get('prototype').put('mulAdd', PyJs_mulAdd_2276_)
        @Js
        def PyJs_jmulAdd_2277_(k1, p, k2, this, arguments, var=var):
            var = Scope({'k1':k1, 'p':p, 'k2':k2, 'this':this, 'arguments':arguments, 'jmulAdd':PyJs_jmulAdd_2277_}, var)
            var.registers(['k2', 'p', 'k1'])
            return var.get(u"this").get('curve').callprop('_wnafMulAdd', Js(1.0), Js([var.get(u"this"), var.get('p')]), Js([var.get('k1'), var.get('k2')]), Js(2.0), Js(True))
        PyJs_jmulAdd_2277_._set_name('jmulAdd')
        var.get('Point').get('prototype').put('jmulAdd', PyJs_jmulAdd_2277_)
        @Js
        def PyJs_normalize_2278_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'normalize':PyJs_normalize_2278_}, var)
            var.registers(['zi'])
            if var.get(u"this").get('zOne'):
                return var.get(u"this")
            var.put('zi', var.get(u"this").get('z').callprop('redInvm'))
            var.get(u"this").put('x', var.get(u"this").get('x').callprop('redMul', var.get('zi')))
            var.get(u"this").put('y', var.get(u"this").get('y').callprop('redMul', var.get('zi')))
            if var.get(u"this").get('t'):
                var.get(u"this").put('t', var.get(u"this").get('t').callprop('redMul', var.get('zi')))
            var.get(u"this").put('z', var.get(u"this").get('curve').get('one'))
            var.get(u"this").put('zOne', Js(True))
            return var.get(u"this")
        PyJs_normalize_2278_._set_name('normalize')
        var.get('Point').get('prototype').put('normalize', PyJs_normalize_2278_)
        @Js
        def PyJs_neg_2279_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'neg':PyJs_neg_2279_}, var)
            var.registers([])
            return var.get(u"this").get('curve').callprop('point', var.get(u"this").get('x').callprop('redNeg'), var.get(u"this").get('y'), var.get(u"this").get('z'), (var.get(u"this").get('t') and var.get(u"this").get('t').callprop('redNeg')))
        PyJs_neg_2279_._set_name('neg')
        var.get('Point').get('prototype').put('neg', PyJs_neg_2279_)
        @Js
        def PyJs_getX_2280_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getX':PyJs_getX_2280_}, var)
            var.registers([])
            var.get(u"this").callprop('normalize')
            return var.get(u"this").get('x').callprop('fromRed')
        PyJs_getX_2280_._set_name('getX')
        var.get('Point').get('prototype').put('getX', PyJs_getX_2280_)
        @Js
        def PyJs_getY_2281_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getY':PyJs_getY_2281_}, var)
            var.registers([])
            var.get(u"this").callprop('normalize')
            return var.get(u"this").get('y').callprop('fromRed')
        PyJs_getY_2281_._set_name('getY')
        var.get('Point').get('prototype').put('getY', PyJs_getY_2281_)
        @Js
        def PyJs_eq_2282_(other, this, arguments, var=var):
            var = Scope({'other':other, 'this':this, 'arguments':arguments, 'eq':PyJs_eq_2282_}, var)
            var.registers(['other'])
            return (_seq(var.get(u"this"),var.get('other')) or (_seq(var.get(u"this").callprop('getX').callprop('cmp', var.get('other').callprop('getX')),Js(0.0)) and _seq(var.get(u"this").callprop('getY').callprop('cmp', var.get('other').callprop('getY')),Js(0.0))))
        PyJs_eq_2282_._set_name('eq')
        var.get('Point').get('prototype').put('eq', PyJs_eq_2282_)
        @Js
        def PyJs_eqXToP_2283_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'eqXToP':PyJs_eqXToP_2283_}, var)
            var.registers(['rx', 'x', 'xc', 't'])
            var.put('rx', var.get('x').callprop('toRed', var.get(u"this").get('curve').get('red')).callprop('redMul', var.get(u"this").get('z')))
            if _seq(var.get(u"this").get('x').callprop('cmp', var.get('rx')),Js(0.0)):
                return Js(True)
            var.put('xc', var.get('x').callprop('clone'))
            var.put('t', var.get(u"this").get('curve').get('redN').callprop('redMul', var.get(u"this").get('z')))
            #for JS loop

            while 1:
                var.get('xc').callprop('iadd', var.get(u"this").get('curve').get('n'))
                if (var.get('xc').callprop('cmp', var.get(u"this").get('curve').get('p'))>=Js(0.0)):
                    return Js(False)
                var.get('rx').callprop('redIAdd', var.get('t'))
                if _seq(var.get(u"this").get('x').callprop('cmp', var.get('rx')),Js(0.0)):
                    return Js(True)

        PyJs_eqXToP_2283_._set_name('eqXToP')
        var.get('Point').get('prototype').put('eqXToP', PyJs_eqXToP_2283_)
        var.get('Point').get('prototype').put('toP', var.get('Point').get('prototype').get('normalize'))
        var.get('Point').get('prototype').put('mixedAdd', var.get('Point').get('prototype').get('add'))
    PyJs_anonymous_2257_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2284_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'curve', 'module'])
        Js('use strict')
        var.put('curve', var.get('exports'))
        var.get('curve').put('base', var.get('require')(Js('./base')))
        var.get('curve').put('short', var.get('require')(Js('./short')))
        var.get('curve').put('mont', var.get('require')(Js('./mont')))
        var.get('curve').put('edwards', var.get('require')(Js('./edwards')))
    PyJs_anonymous_2284_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2285_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'BN', 'Base', 'MontCurve', 'utils', 'Point', 'inherits'])
        @Js
        def PyJsHoisted_MontCurve_(conf, this, arguments, var=var):
            var = Scope({'conf':conf, 'this':this, 'arguments':arguments}, var)
            var.registers(['conf'])
            var.get('Base').callprop('call', var.get(u"this"), Js('mont'), var.get('conf'))
            var.get(u"this").put('a', var.get('BN').create(var.get('conf').get('a'), Js(16.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('b', var.get('BN').create(var.get('conf').get('b'), Js(16.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('i4', var.get('BN').create(Js(4.0)).callprop('toRed', var.get(u"this").get('red')).callprop('redInvm'))
            var.get(u"this").put('two', var.get('BN').create(Js(2.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('a24', var.get(u"this").get('i4').callprop('redMul', var.get(u"this").get('a').callprop('redAdd', var.get(u"this").get('two'))))
        PyJsHoisted_MontCurve_.func_name = 'MontCurve'
        var.put('MontCurve', PyJsHoisted_MontCurve_)
        @Js
        def PyJsHoisted_Point_(curve, x, z, this, arguments, var=var):
            var = Scope({'curve':curve, 'x':x, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['z', 'x', 'curve'])
            var.get('Base').get('BasePoint').callprop('call', var.get(u"this"), var.get('curve'), Js('projective'))
            if (_seq(var.get('x'),var.get(u"null")) and _seq(var.get('z'),var.get(u"null"))):
                var.get(u"this").put('x', var.get(u"this").get('curve').get('one'))
                var.get(u"this").put('z', var.get(u"this").get('curve').get('zero'))
            else:
                var.get(u"this").put('x', var.get('BN').create(var.get('x'), Js(16.0)))
                var.get(u"this").put('z', var.get('BN').create(var.get('z'), Js(16.0)))
                if var.get(u"this").get('x').get('red').neg():
                    var.get(u"this").put('x', var.get(u"this").get('x').callprop('toRed', var.get(u"this").get('curve').get('red')))
                if var.get(u"this").get('z').get('red').neg():
                    var.get(u"this").put('z', var.get(u"this").get('z').callprop('toRed', var.get(u"this").get('curve').get('red')))
        PyJsHoisted_Point_.func_name = 'Point'
        var.put('Point', PyJsHoisted_Point_)
        Js('use strict')
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Base', var.get('require')(Js('./base')))
        var.put('utils', var.get('require')(Js('../utils')))
        pass
        var.get('inherits')(var.get('MontCurve'), var.get('Base'))
        var.get('module').put('exports', var.get('MontCurve'))
        @Js
        def PyJs_validate_2286_(point, this, arguments, var=var):
            var = Scope({'point':point, 'this':this, 'arguments':arguments, 'validate':PyJs_validate_2286_}, var)
            var.registers(['x2', 'x', 'rhs', 'y', 'point'])
            var.put('x', var.get('point').callprop('normalize').get('x'))
            var.put('x2', var.get('x').callprop('redSqr'))
            var.put('rhs', var.get('x2').callprop('redMul', var.get('x')).callprop('redAdd', var.get('x2').callprop('redMul', var.get(u"this").get('a'))).callprop('redAdd', var.get('x')))
            var.put('y', var.get('rhs').callprop('redSqrt'))
            return _seq(var.get('y').callprop('redSqr').callprop('cmp', var.get('rhs')),Js(0.0))
        PyJs_validate_2286_._set_name('validate')
        var.get('MontCurve').get('prototype').put('validate', PyJs_validate_2286_)
        pass
        var.get('inherits')(var.get('Point'), var.get('Base').get('BasePoint'))
        @Js
        def PyJs_decodePoint_2287_(bytes, enc, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'enc':enc, 'this':this, 'arguments':arguments, 'decodePoint':PyJs_decodePoint_2287_}, var)
            var.registers(['enc', 'bytes'])
            return var.get(u"this").callprop('point', var.get('utils').callprop('toArray', var.get('bytes'), var.get('enc')), Js(1.0))
        PyJs_decodePoint_2287_._set_name('decodePoint')
        var.get('MontCurve').get('prototype').put('decodePoint', PyJs_decodePoint_2287_)
        @Js
        def PyJs_point_2288_(x, z, this, arguments, var=var):
            var = Scope({'x':x, 'z':z, 'this':this, 'arguments':arguments, 'point':PyJs_point_2288_}, var)
            var.registers(['x', 'z'])
            return var.get('Point').create(var.get(u"this"), var.get('x'), var.get('z'))
        PyJs_point_2288_._set_name('point')
        var.get('MontCurve').get('prototype').put('point', PyJs_point_2288_)
        @Js
        def PyJs_pointFromJSON_2289_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments, 'pointFromJSON':PyJs_pointFromJSON_2289_}, var)
            var.registers(['obj'])
            return var.get('Point').callprop('fromJSON', var.get(u"this"), var.get('obj'))
        PyJs_pointFromJSON_2289_._set_name('pointFromJSON')
        var.get('MontCurve').get('prototype').put('pointFromJSON', PyJs_pointFromJSON_2289_)
        @Js
        def PyJs_precompute_2290_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'precompute':PyJs_precompute_2290_}, var)
            var.registers([])
            pass
        PyJs_precompute_2290_._set_name('precompute')
        var.get('Point').get('prototype').put('precompute', PyJs_precompute_2290_)
        @Js
        def PyJs__encode_2291_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_encode':PyJs__encode_2291_}, var)
            var.registers([])
            return var.get(u"this").callprop('getX').callprop('toArray', Js('be'), var.get(u"this").get('curve').get('p').callprop('byteLength'))
        PyJs__encode_2291_._set_name('_encode')
        var.get('Point').get('prototype').put('_encode', PyJs__encode_2291_)
        @Js
        def PyJs_fromJSON_2292_(curve, obj, this, arguments, var=var):
            var = Scope({'curve':curve, 'obj':obj, 'this':this, 'arguments':arguments, 'fromJSON':PyJs_fromJSON_2292_}, var)
            var.registers(['curve', 'obj'])
            return var.get('Point').create(var.get('curve'), var.get('obj').get('0'), (var.get('obj').get('1') or var.get('curve').get('one')))
        PyJs_fromJSON_2292_._set_name('fromJSON')
        var.get('Point').put('fromJSON', PyJs_fromJSON_2292_)
        @Js
        def PyJs_inspect_2293_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'inspect':PyJs_inspect_2293_}, var)
            var.registers([])
            if var.get(u"this").callprop('isInfinity'):
                return Js('<EC Point Infinity>')
            return ((((Js('<EC Point x: ')+var.get(u"this").get('x').callprop('fromRed').callprop('toString', Js(16.0), Js(2.0)))+Js(' z: '))+var.get(u"this").get('z').callprop('fromRed').callprop('toString', Js(16.0), Js(2.0)))+Js('>'))
        PyJs_inspect_2293_._set_name('inspect')
        var.get('Point').get('prototype').put('inspect', PyJs_inspect_2293_)
        @Js
        def PyJs_isInfinity_2294_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'isInfinity':PyJs_isInfinity_2294_}, var)
            var.registers([])
            return _seq(var.get(u"this").get('z').callprop('cmpn', Js(0.0)),Js(0.0))
        PyJs_isInfinity_2294_._set_name('isInfinity')
        var.get('Point').get('prototype').put('isInfinity', PyJs_isInfinity_2294_)
        @Js
        def PyJs_dbl_2295_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'dbl':PyJs_dbl_2295_}, var)
            var.registers(['a', 'aa', 'c', 'b', 'bb', 'nx', 'nz'])
            var.put('a', var.get(u"this").get('x').callprop('redAdd', var.get(u"this").get('z')))
            var.put('aa', var.get('a').callprop('redSqr'))
            var.put('b', var.get(u"this").get('x').callprop('redSub', var.get(u"this").get('z')))
            var.put('bb', var.get('b').callprop('redSqr'))
            var.put('c', var.get('aa').callprop('redSub', var.get('bb')))
            var.put('nx', var.get('aa').callprop('redMul', var.get('bb')))
            var.put('nz', var.get('c').callprop('redMul', var.get('bb').callprop('redAdd', var.get(u"this").get('curve').get('a24').callprop('redMul', var.get('c')))))
            return var.get(u"this").get('curve').callprop('point', var.get('nx'), var.get('nz'))
        PyJs_dbl_2295_._set_name('dbl')
        var.get('Point').get('prototype').put('dbl', PyJs_dbl_2295_)
        @Js
        def PyJs_add_2296_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'add':PyJs_add_2296_}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Not supported on Montgomery curve')))
            raise PyJsTempException
        PyJs_add_2296_._set_name('add')
        var.get('Point').get('prototype').put('add', PyJs_add_2296_)
        @Js
        def PyJs_diffAdd_2297_(p, diff, this, arguments, var=var):
            var = Scope({'p':p, 'diff':diff, 'this':this, 'arguments':arguments, 'diffAdd':PyJs_diffAdd_2297_}, var)
            var.registers(['a', 'diff', 'cb', 'c', 'da', 'b', 'p', 'nx', 'nz', 'd'])
            var.put('a', var.get(u"this").get('x').callprop('redAdd', var.get(u"this").get('z')))
            var.put('b', var.get(u"this").get('x').callprop('redSub', var.get(u"this").get('z')))
            var.put('c', var.get('p').get('x').callprop('redAdd', var.get('p').get('z')))
            var.put('d', var.get('p').get('x').callprop('redSub', var.get('p').get('z')))
            var.put('da', var.get('d').callprop('redMul', var.get('a')))
            var.put('cb', var.get('c').callprop('redMul', var.get('b')))
            var.put('nx', var.get('diff').get('z').callprop('redMul', var.get('da').callprop('redAdd', var.get('cb')).callprop('redSqr')))
            var.put('nz', var.get('diff').get('x').callprop('redMul', var.get('da').callprop('redISub', var.get('cb')).callprop('redSqr')))
            return var.get(u"this").get('curve').callprop('point', var.get('nx'), var.get('nz'))
        PyJs_diffAdd_2297_._set_name('diffAdd')
        var.get('Point').get('prototype').put('diffAdd', PyJs_diffAdd_2297_)
        @Js
        def PyJs_mul_2298_(k, this, arguments, var=var):
            var = Scope({'k':k, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_2298_}, var)
            var.registers(['bits', 'a', 'i', 'c', 'k', 'b', 't'])
            var.put('t', var.get('k').callprop('clone'))
            var.put('a', var.get(u"this"))
            var.put('b', var.get(u"this").get('curve').callprop('point', var.get(u"null"), var.get(u"null")))
            var.put('c', var.get(u"this"))
            #for JS loop
            var.put('bits', Js([]))
            while PyJsStrictNeq(var.get('t').callprop('cmpn', Js(0.0)),Js(0.0)):
                try:
                    var.get('bits').callprop('push', var.get('t').callprop('andln', Js(1.0)))
                finally:
                        var.get('t').callprop('iushrn', Js(1.0))
            #for JS loop
            var.put('i', (var.get('bits').get('length')-Js(1.0)))
            while (var.get('i')>=Js(0.0)):
                try:
                    if _seq(var.get('bits').get(var.get('i')),Js(0.0)):
                        var.put('a', var.get('a').callprop('diffAdd', var.get('b'), var.get('c')))
                        var.put('b', var.get('b').callprop('dbl'))
                    else:
                        var.put('b', var.get('a').callprop('diffAdd', var.get('b'), var.get('c')))
                        var.put('a', var.get('a').callprop('dbl'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            return var.get('b')
        PyJs_mul_2298_._set_name('mul')
        var.get('Point').get('prototype').put('mul', PyJs_mul_2298_)
        @Js
        def PyJs_mulAdd_2299_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'mulAdd':PyJs_mulAdd_2299_}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Not supported on Montgomery curve')))
            raise PyJsTempException
        PyJs_mulAdd_2299_._set_name('mulAdd')
        var.get('Point').get('prototype').put('mulAdd', PyJs_mulAdd_2299_)
        @Js
        def PyJs_jumlAdd_2300_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'jumlAdd':PyJs_jumlAdd_2300_}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Not supported on Montgomery curve')))
            raise PyJsTempException
        PyJs_jumlAdd_2300_._set_name('jumlAdd')
        var.get('Point').get('prototype').put('jumlAdd', PyJs_jumlAdd_2300_)
        @Js
        def PyJs_eq_2301_(other, this, arguments, var=var):
            var = Scope({'other':other, 'this':this, 'arguments':arguments, 'eq':PyJs_eq_2301_}, var)
            var.registers(['other'])
            return _seq(var.get(u"this").callprop('getX').callprop('cmp', var.get('other').callprop('getX')),Js(0.0))
        PyJs_eq_2301_._set_name('eq')
        var.get('Point').get('prototype').put('eq', PyJs_eq_2301_)
        @Js
        def PyJs_normalize_2302_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'normalize':PyJs_normalize_2302_}, var)
            var.registers([])
            var.get(u"this").put('x', var.get(u"this").get('x').callprop('redMul', var.get(u"this").get('z').callprop('redInvm')))
            var.get(u"this").put('z', var.get(u"this").get('curve').get('one'))
            return var.get(u"this")
        PyJs_normalize_2302_._set_name('normalize')
        var.get('Point').get('prototype').put('normalize', PyJs_normalize_2302_)
        @Js
        def PyJs_getX_2303_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getX':PyJs_getX_2303_}, var)
            var.registers([])
            var.get(u"this").callprop('normalize')
            return var.get(u"this").get('x').callprop('fromRed')
        PyJs_getX_2303_._set_name('getX')
        var.get('Point').get('prototype').put('getX', PyJs_getX_2303_)
    PyJs_anonymous_2285_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2304_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'BN', 'ShortCurve', 'JPoint', 'Base', 'utils', 'inherits', 'assert', 'Point'])
        @Js
        def PyJsHoisted_ShortCurve_(conf, this, arguments, var=var):
            var = Scope({'conf':conf, 'this':this, 'arguments':arguments}, var)
            var.registers(['conf'])
            var.get('Base').callprop('call', var.get(u"this"), Js('short'), var.get('conf'))
            var.get(u"this").put('a', var.get('BN').create(var.get('conf').get('a'), Js(16.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('b', var.get('BN').create(var.get('conf').get('b'), Js(16.0)).callprop('toRed', var.get(u"this").get('red')))
            var.get(u"this").put('tinv', var.get(u"this").get('two').callprop('redInvm'))
            var.get(u"this").put('zeroA', _seq(var.get(u"this").get('a').callprop('fromRed').callprop('cmpn', Js(0.0)),Js(0.0)))
            var.get(u"this").put('threeA', _seq(var.get(u"this").get('a').callprop('fromRed').callprop('sub', var.get(u"this").get('p')).callprop('cmpn', (-Js(3.0))),Js(0.0)))
            var.get(u"this").put('endo', var.get(u"this").callprop('_getEndomorphism', var.get('conf')))
            var.get(u"this").put('_endoWnafT1', var.get('Array').create(Js(4.0)))
            var.get(u"this").put('_endoWnafT2', var.get('Array').create(Js(4.0)))
        PyJsHoisted_ShortCurve_.func_name = 'ShortCurve'
        var.put('ShortCurve', PyJsHoisted_ShortCurve_)
        @Js
        def PyJsHoisted_Point_(curve, x, y, isRed, this, arguments, var=var):
            var = Scope({'curve':curve, 'x':x, 'y':y, 'isRed':isRed, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'isRed', 'curve', 'y'])
            var.get('Base').get('BasePoint').callprop('call', var.get(u"this"), var.get('curve'), Js('affine'))
            if (_seq(var.get('x'),var.get(u"null")) and _seq(var.get('y'),var.get(u"null"))):
                var.get(u"this").put('x', var.get(u"null"))
                var.get(u"this").put('y', var.get(u"null"))
                var.get(u"this").put('inf', Js(True))
            else:
                var.get(u"this").put('x', var.get('BN').create(var.get('x'), Js(16.0)))
                var.get(u"this").put('y', var.get('BN').create(var.get('y'), Js(16.0)))
                if var.get('isRed'):
                    var.get(u"this").get('x').callprop('forceRed', var.get(u"this").get('curve').get('red'))
                    var.get(u"this").get('y').callprop('forceRed', var.get(u"this").get('curve').get('red'))
                if var.get(u"this").get('x').get('red').neg():
                    var.get(u"this").put('x', var.get(u"this").get('x').callprop('toRed', var.get(u"this").get('curve').get('red')))
                if var.get(u"this").get('y').get('red').neg():
                    var.get(u"this").put('y', var.get(u"this").get('y').callprop('toRed', var.get(u"this").get('curve').get('red')))
                var.get(u"this").put('inf', Js(False))
        PyJsHoisted_Point_.func_name = 'Point'
        var.put('Point', PyJsHoisted_Point_)
        @Js
        def PyJsHoisted_JPoint_(curve, x, y, z, this, arguments, var=var):
            var = Scope({'curve':curve, 'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['z', 'x', 'curve', 'y'])
            var.get('Base').get('BasePoint').callprop('call', var.get(u"this"), var.get('curve'), Js('jacobian'))
            if ((_seq(var.get('x'),var.get(u"null")) and _seq(var.get('y'),var.get(u"null"))) and _seq(var.get('z'),var.get(u"null"))):
                var.get(u"this").put('x', var.get(u"this").get('curve').get('one'))
                var.get(u"this").put('y', var.get(u"this").get('curve').get('one'))
                var.get(u"this").put('z', var.get('BN').create(Js(0.0)))
            else:
                var.get(u"this").put('x', var.get('BN').create(var.get('x'), Js(16.0)))
                var.get(u"this").put('y', var.get('BN').create(var.get('y'), Js(16.0)))
                var.get(u"this").put('z', var.get('BN').create(var.get('z'), Js(16.0)))
            if var.get(u"this").get('x').get('red').neg():
                var.get(u"this").put('x', var.get(u"this").get('x').callprop('toRed', var.get(u"this").get('curve').get('red')))
            if var.get(u"this").get('y').get('red').neg():
                var.get(u"this").put('y', var.get(u"this").get('y').callprop('toRed', var.get(u"this").get('curve').get('red')))
            if var.get(u"this").get('z').get('red').neg():
                var.get(u"this").put('z', var.get(u"this").get('z').callprop('toRed', var.get(u"this").get('curve').get('red')))
            var.get(u"this").put('zOne', _seq(var.get(u"this").get('z'),var.get(u"this").get('curve').get('one')))
        PyJsHoisted_JPoint_.func_name = 'JPoint'
        var.put('JPoint', PyJsHoisted_JPoint_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Base', var.get('require')(Js('./base')))
        var.put('assert', var.get('utils').get('assert'))
        pass
        var.get('inherits')(var.get('ShortCurve'), var.get('Base'))
        var.get('module').put('exports', var.get('ShortCurve'))
        @Js
        def PyJs__getEndomorphism_2305_(conf, this, arguments, var=var):
            var = Scope({'conf':conf, 'this':this, 'arguments':arguments, '_getEndomorphism':PyJs__getEndomorphism_2305_}, var)
            var.registers(['lambdas', 'lambda', 'conf', 'basis', 'beta', 'betas'])
            if (((var.get(u"this").get('zeroA').neg() or var.get(u"this").get('g').neg()) or var.get(u"this").get('n').neg()) or PyJsStrictNeq(var.get(u"this").get('p').callprop('modn', Js(3.0)),Js(1.0))):
                return var.get('undefined')
            pass
            pass
            if var.get('conf').get('beta'):
                var.put('beta', var.get('BN').create(var.get('conf').get('beta'), Js(16.0)).callprop('toRed', var.get(u"this").get('red')))
            else:
                var.put('betas', var.get(u"this").callprop('_getEndoRoots', var.get(u"this").get('p')))
                var.put('beta', (var.get('betas').get('0') if (var.get('betas').get('0').callprop('cmp', var.get('betas').get('1'))<Js(0.0)) else var.get('betas').get('1')))
                var.put('beta', var.get('beta').callprop('toRed', var.get(u"this").get('red')))
            if var.get('conf').get('lambda'):
                var.put('lambda', var.get('BN').create(var.get('conf').get('lambda'), Js(16.0)))
            else:
                var.put('lambdas', var.get(u"this").callprop('_getEndoRoots', var.get(u"this").get('n')))
                if _seq(var.get(u"this").get('g').callprop('mul', var.get('lambdas').get('0')).get('x').callprop('cmp', var.get(u"this").get('g').get('x').callprop('redMul', var.get('beta'))),Js(0.0)):
                    var.put('lambda', var.get('lambdas').get('0'))
                else:
                    var.put('lambda', var.get('lambdas').get('1'))
                    var.get('assert')(_seq(var.get(u"this").get('g').callprop('mul', var.get('lambda')).get('x').callprop('cmp', var.get(u"this").get('g').get('x').callprop('redMul', var.get('beta'))),Js(0.0)))
            pass
            if var.get('conf').get('basis'):
                @Js
                def PyJs_anonymous_2306_(vec, this, arguments, var=var):
                    var = Scope({'vec':vec, 'this':this, 'arguments':arguments}, var)
                    var.registers(['vec'])
                    return Js({'a':var.get('BN').create(var.get('vec').get('a'), Js(16.0)),'b':var.get('BN').create(var.get('vec').get('b'), Js(16.0))})
                PyJs_anonymous_2306_._set_name('anonymous')
                var.put('basis', var.get('conf').get('basis').callprop('map', PyJs_anonymous_2306_))
            else:
                var.put('basis', var.get(u"this").callprop('_getEndoBasis', var.get('lambda')))
            return Js({'beta':var.get('beta'),'lambda':var.get('lambda'),'basis':var.get('basis')})
        PyJs__getEndomorphism_2305_._set_name('_getEndomorphism')
        var.get('ShortCurve').get('prototype').put('_getEndomorphism', PyJs__getEndomorphism_2305_)
        @Js
        def PyJs__getEndoRoots_2307_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, '_getEndoRoots':PyJs__getEndoRoots_2307_}, var)
            var.registers(['l1', 'num', 'tinv', 'l2', 'ntinv', 'red', 's'])
            var.put('red', (var.get(u"this").get('red') if _seq(var.get('num'),var.get(u"this").get('p')) else var.get('BN').callprop('mont', var.get('num'))))
            var.put('tinv', var.get('BN').create(Js(2.0)).callprop('toRed', var.get('red')).callprop('redInvm'))
            var.put('ntinv', var.get('tinv').callprop('redNeg'))
            var.put('s', var.get('BN').create(Js(3.0)).callprop('toRed', var.get('red')).callprop('redNeg').callprop('redSqrt').callprop('redMul', var.get('tinv')))
            var.put('l1', var.get('ntinv').callprop('redAdd', var.get('s')).callprop('fromRed'))
            var.put('l2', var.get('ntinv').callprop('redSub', var.get('s')).callprop('fromRed'))
            return Js([var.get('l1'), var.get('l2')])
        PyJs__getEndoRoots_2307_._set_name('_getEndoRoots')
        var.get('ShortCurve').get('prototype').put('_getEndoRoots', PyJs__getEndoRoots_2307_)
        @Js
        def PyJs__getEndoBasis_2308_(PyJsArg_6c616d626461_, this, arguments, var=var):
            var = Scope({'lambda':PyJsArg_6c616d626461_, 'this':this, 'arguments':arguments, '_getEndoBasis':PyJs__getEndoBasis_2308_}, var)
            var.registers(['u', 'y1', 'a2', 'b0', 'v', 'len2', 'b1', 'len1', 'x2', 'r', 'i', 'x', 'y', 'q', 'b2', 'prevR', 'lambda', 'aprxSqrt', 'a0', 'y2', 'a1', 'x1'])
            var.put('aprxSqrt', var.get(u"this").get('n').callprop('ushrn', var.get('Math').callprop('floor', (var.get(u"this").get('n').callprop('bitLength')/Js(2.0)))))
            var.put('u', var.get('lambda'))
            var.put('v', var.get(u"this").get('n').callprop('clone'))
            var.put('x1', var.get('BN').create(Js(1.0)))
            var.put('y1', var.get('BN').create(Js(0.0)))
            var.put('x2', var.get('BN').create(Js(0.0)))
            var.put('y2', var.get('BN').create(Js(1.0)))
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            var.put('i', Js(0.0))
            pass
            pass
            while PyJsStrictNeq(var.get('u').callprop('cmpn', Js(0.0)),Js(0.0)):
                var.put('q', var.get('v').callprop('div', var.get('u')))
                var.put('r', var.get('v').callprop('sub', var.get('q').callprop('mul', var.get('u'))))
                var.put('x', var.get('x2').callprop('sub', var.get('q').callprop('mul', var.get('x1'))))
                var.put('y', var.get('y2').callprop('sub', var.get('q').callprop('mul', var.get('y1'))))
                if (var.get('a1').neg() and (var.get('r').callprop('cmp', var.get('aprxSqrt'))<Js(0.0))):
                    var.put('a0', var.get('prevR').callprop('neg'))
                    var.put('b0', var.get('x1'))
                    var.put('a1', var.get('r').callprop('neg'))
                    var.put('b1', var.get('x'))
                else:
                    if (var.get('a1') and _seq(var.put('i',Js(var.get('i').to_number())+Js(1)),Js(2.0))):
                        break
                var.put('prevR', var.get('r'))
                var.put('v', var.get('u'))
                var.put('u', var.get('r'))
                var.put('x2', var.get('x1'))
                var.put('x1', var.get('x'))
                var.put('y2', var.get('y1'))
                var.put('y1', var.get('y'))
            var.put('a2', var.get('r').callprop('neg'))
            var.put('b2', var.get('x'))
            var.put('len1', var.get('a1').callprop('sqr').callprop('add', var.get('b1').callprop('sqr')))
            var.put('len2', var.get('a2').callprop('sqr').callprop('add', var.get('b2').callprop('sqr')))
            if (var.get('len2').callprop('cmp', var.get('len1'))>=Js(0.0)):
                var.put('a2', var.get('a0'))
                var.put('b2', var.get('b0'))
            if var.get('a1').get('negative'):
                var.put('a1', var.get('a1').callprop('neg'))
                var.put('b1', var.get('b1').callprop('neg'))
            if var.get('a2').get('negative'):
                var.put('a2', var.get('a2').callprop('neg'))
                var.put('b2', var.get('b2').callprop('neg'))
            return Js([Js({'a':var.get('a1'),'b':var.get('b1')}), Js({'a':var.get('a2'),'b':var.get('b2')})])
        PyJs__getEndoBasis_2308_._set_name('_getEndoBasis')
        var.get('ShortCurve').get('prototype').put('_getEndoBasis', PyJs__getEndoBasis_2308_)
        @Js
        def PyJs__endoSplit_2309_(k, this, arguments, var=var):
            var = Scope({'k':k, 'this':this, 'arguments':arguments, '_endoSplit':PyJs__endoSplit_2309_}, var)
            var.registers(['c2', 'v1', 'q2', 'v2', 'p2', 'q1', 'k', 'c1', 'basis', 'p1', 'k1', 'k2'])
            var.put('basis', var.get(u"this").get('endo').get('basis'))
            var.put('v1', var.get('basis').get('0'))
            var.put('v2', var.get('basis').get('1'))
            var.put('c1', var.get('v2').get('b').callprop('mul', var.get('k')).callprop('divRound', var.get(u"this").get('n')))
            var.put('c2', var.get('v1').get('b').callprop('neg').callprop('mul', var.get('k')).callprop('divRound', var.get(u"this").get('n')))
            var.put('p1', var.get('c1').callprop('mul', var.get('v1').get('a')))
            var.put('p2', var.get('c2').callprop('mul', var.get('v2').get('a')))
            var.put('q1', var.get('c1').callprop('mul', var.get('v1').get('b')))
            var.put('q2', var.get('c2').callprop('mul', var.get('v2').get('b')))
            var.put('k1', var.get('k').callprop('sub', var.get('p1')).callprop('sub', var.get('p2')))
            var.put('k2', var.get('q1').callprop('add', var.get('q2')).callprop('neg'))
            return Js({'k1':var.get('k1'),'k2':var.get('k2')})
        PyJs__endoSplit_2309_._set_name('_endoSplit')
        var.get('ShortCurve').get('prototype').put('_endoSplit', PyJs__endoSplit_2309_)
        @Js
        def PyJs_pointFromX_2310_(x, odd, this, arguments, var=var):
            var = Scope({'x':x, 'odd':odd, 'this':this, 'arguments':arguments, 'pointFromX':PyJs_pointFromX_2310_}, var)
            var.registers(['y2', 'y', 'x', 'isOdd', 'odd'])
            var.put('x', var.get('BN').create(var.get('x'), Js(16.0)))
            if var.get('x').get('red').neg():
                var.put('x', var.get('x').callprop('toRed', var.get(u"this").get('red')))
            var.put('y2', var.get('x').callprop('redSqr').callprop('redMul', var.get('x')).callprop('redIAdd', var.get('x').callprop('redMul', var.get(u"this").get('a'))).callprop('redIAdd', var.get(u"this").get('b')))
            var.put('y', var.get('y2').callprop('redSqrt'))
            if PyJsStrictNeq(var.get('y').callprop('redSqr').callprop('redSub', var.get('y2')).callprop('cmp', var.get(u"this").get('zero')),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('invalid point')))
                raise PyJsTempException
            var.put('isOdd', var.get('y').callprop('fromRed').callprop('isOdd'))
            if ((var.get('odd') and var.get('isOdd').neg()) or (var.get('odd').neg() and var.get('isOdd'))):
                var.put('y', var.get('y').callprop('redNeg'))
            return var.get(u"this").callprop('point', var.get('x'), var.get('y'))
        PyJs_pointFromX_2310_._set_name('pointFromX')
        var.get('ShortCurve').get('prototype').put('pointFromX', PyJs_pointFromX_2310_)
        @Js
        def PyJs_validate_2311_(point, this, arguments, var=var):
            var = Scope({'point':point, 'this':this, 'arguments':arguments, 'validate':PyJs_validate_2311_}, var)
            var.registers(['rhs', 'x', 'y', 'ax', 'point'])
            if var.get('point').get('inf'):
                return Js(True)
            var.put('x', var.get('point').get('x'))
            var.put('y', var.get('point').get('y'))
            var.put('ax', var.get(u"this").get('a').callprop('redMul', var.get('x')))
            var.put('rhs', var.get('x').callprop('redSqr').callprop('redMul', var.get('x')).callprop('redIAdd', var.get('ax')).callprop('redIAdd', var.get(u"this").get('b')))
            return _seq(var.get('y').callprop('redSqr').callprop('redISub', var.get('rhs')).callprop('cmpn', Js(0.0)),Js(0.0))
        PyJs_validate_2311_._set_name('validate')
        var.get('ShortCurve').get('prototype').put('validate', PyJs_validate_2311_)
        @Js
        def PyJs__endoWnafMulAdd_2312_(points, coeffs, jacobianResult, this, arguments, var=var):
            var = Scope({'points':points, 'coeffs':coeffs, 'jacobianResult':jacobianResult, 'this':this, 'arguments':arguments, '_endoWnafMulAdd':PyJs__endoWnafMulAdd_2312_}, var)
            var.registers(['coeffs', 'jacobianResult', 'j', 'i', 'ncoeffs', 'split', 'p', 'points', 'beta', 'npoints', 'res'])
            var.put('npoints', var.get(u"this").get('_endoWnafT1'))
            var.put('ncoeffs', var.get(u"this").get('_endoWnafT2'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('points').get('length')):
                try:
                    var.put('split', var.get(u"this").callprop('_endoSplit', var.get('coeffs').get(var.get('i'))))
                    var.put('p', var.get('points').get(var.get('i')))
                    var.put('beta', var.get('p').callprop('_getBeta'))
                    if var.get('split').get('k1').get('negative'):
                        var.get('split').get('k1').callprop('ineg')
                        var.put('p', var.get('p').callprop('neg', Js(True)))
                    if var.get('split').get('k2').get('negative'):
                        var.get('split').get('k2').callprop('ineg')
                        var.put('beta', var.get('beta').callprop('neg', Js(True)))
                    var.get('npoints').put((var.get('i')*Js(2.0)), var.get('p'))
                    var.get('npoints').put(((var.get('i')*Js(2.0))+Js(1.0)), var.get('beta'))
                    var.get('ncoeffs').put((var.get('i')*Js(2.0)), var.get('split').get('k1'))
                    var.get('ncoeffs').put(((var.get('i')*Js(2.0))+Js(1.0)), var.get('split').get('k2'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('res', var.get(u"this").callprop('_wnafMulAdd', Js(1.0), var.get('npoints'), var.get('ncoeffs'), (var.get('i')*Js(2.0)), var.get('jacobianResult')))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<(var.get('i')*Js(2.0))):
                try:
                    var.get('npoints').put(var.get('j'), var.get(u"null"))
                    var.get('ncoeffs').put(var.get('j'), var.get(u"null"))
                finally:
                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
            return var.get('res')
        PyJs__endoWnafMulAdd_2312_._set_name('_endoWnafMulAdd')
        var.get('ShortCurve').get('prototype').put('_endoWnafMulAdd', PyJs__endoWnafMulAdd_2312_)
        pass
        var.get('inherits')(var.get('Point'), var.get('Base').get('BasePoint'))
        @Js
        def PyJs_point_2313_(x, y, isRed, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'isRed':isRed, 'this':this, 'arguments':arguments, 'point':PyJs_point_2313_}, var)
            var.registers(['x', 'isRed', 'y'])
            return var.get('Point').create(var.get(u"this"), var.get('x'), var.get('y'), var.get('isRed'))
        PyJs_point_2313_._set_name('point')
        var.get('ShortCurve').get('prototype').put('point', PyJs_point_2313_)
        @Js
        def PyJs_pointFromJSON_2314_(obj, red, this, arguments, var=var):
            var = Scope({'obj':obj, 'red':red, 'this':this, 'arguments':arguments, 'pointFromJSON':PyJs_pointFromJSON_2314_}, var)
            var.registers(['red', 'obj'])
            return var.get('Point').callprop('fromJSON', var.get(u"this"), var.get('obj'), var.get('red'))
        PyJs_pointFromJSON_2314_._set_name('pointFromJSON')
        var.get('ShortCurve').get('prototype').put('pointFromJSON', PyJs_pointFromJSON_2314_)
        @Js
        def PyJs__getBeta_2315_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_getBeta':PyJs__getBeta_2315_}, var)
            var.registers(['endoMul', 'beta', 'curve', 'pre'])
            if var.get(u"this").get('curve').get('endo').neg():
                return var.get('undefined')
            var.put('pre', var.get(u"this").get('precomputed'))
            if (var.get('pre') and var.get('pre').get('beta')):
                return var.get('pre').get('beta')
            var.put('beta', var.get(u"this").get('curve').callprop('point', var.get(u"this").get('x').callprop('redMul', var.get(u"this").get('curve').get('endo').get('beta')), var.get(u"this").get('y')))
            if var.get('pre'):
                var.put('curve', var.get(u"this").get('curve'))
                @Js
                def PyJs_endoMul_2316_(p, this, arguments, var=var):
                    var = Scope({'p':p, 'this':this, 'arguments':arguments, 'endoMul':PyJs_endoMul_2316_}, var)
                    var.registers(['p'])
                    return var.get('curve').callprop('point', var.get('p').get('x').callprop('redMul', var.get('curve').get('endo').get('beta')), var.get('p').get('y'))
                PyJs_endoMul_2316_._set_name('endoMul')
                var.put('endoMul', PyJs_endoMul_2316_)
                var.get('pre').put('beta', var.get('beta'))
                def PyJs_LONG_2317_(var=var):
                    return var.get('beta').put('precomputed', Js({'beta':var.get(u"null"),'naf':(var.get('pre').get('naf') and Js({'wnd':var.get('pre').get('naf').get('wnd'),'points':var.get('pre').get('naf').get('points').callprop('map', var.get('endoMul'))})),'doubles':(var.get('pre').get('doubles') and Js({'step':var.get('pre').get('doubles').get('step'),'points':var.get('pre').get('doubles').get('points').callprop('map', var.get('endoMul'))}))}))
                PyJs_LONG_2317_()
            return var.get('beta')
        PyJs__getBeta_2315_._set_name('_getBeta')
        var.get('Point').get('prototype').put('_getBeta', PyJs__getBeta_2315_)
        @Js
        def PyJs_toJSON_2318_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_2318_}, var)
            var.registers([])
            if var.get(u"this").get('precomputed').neg():
                return Js([var.get(u"this").get('x'), var.get(u"this").get('y')])
            def PyJs_LONG_2319_(var=var):
                return (var.get(u"this").get('precomputed') and Js({'doubles':(var.get(u"this").get('precomputed').get('doubles') and Js({'step':var.get(u"this").get('precomputed').get('doubles').get('step'),'points':var.get(u"this").get('precomputed').get('doubles').get('points').callprop('slice', Js(1.0))})),'naf':(var.get(u"this").get('precomputed').get('naf') and Js({'wnd':var.get(u"this").get('precomputed').get('naf').get('wnd'),'points':var.get(u"this").get('precomputed').get('naf').get('points').callprop('slice', Js(1.0))}))}))
            return Js([var.get(u"this").get('x'), var.get(u"this").get('y'), PyJs_LONG_2319_()])
        PyJs_toJSON_2318_._set_name('toJSON')
        var.get('Point').get('prototype').put('toJSON', PyJs_toJSON_2318_)
        @Js
        def PyJs_fromJSON_2320_(curve, obj, red, this, arguments, var=var):
            var = Scope({'curve':curve, 'obj':obj, 'red':red, 'this':this, 'arguments':arguments, 'fromJSON':PyJs_fromJSON_2320_}, var)
            var.registers(['obj2point', 'obj', 'red', 'curve', 'res', 'pre'])
            @Js
            def PyJsHoisted_obj2point_(obj, this, arguments, var=var):
                var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
                var.registers(['obj'])
                return var.get('curve').callprop('point', var.get('obj').get('0'), var.get('obj').get('1'), var.get('red'))
            PyJsHoisted_obj2point_.func_name = 'obj2point'
            var.put('obj2point', PyJsHoisted_obj2point_)
            if _seq(var.get('obj',throw=False).typeof(),Js('string')):
                var.put('obj', var.get('JSON').callprop('parse', var.get('obj')))
            var.put('res', var.get('curve').callprop('point', var.get('obj').get('0'), var.get('obj').get('1'), var.get('red')))
            if var.get('obj').get('2').neg():
                return var.get('res')
            pass
            var.put('pre', var.get('obj').get('2'))
            def PyJs_LONG_2321_(var=var):
                return var.get('res').put('precomputed', Js({'beta':var.get(u"null"),'doubles':(var.get('pre').get('doubles') and Js({'step':var.get('pre').get('doubles').get('step'),'points':Js([var.get('res')]).callprop('concat', var.get('pre').get('doubles').get('points').callprop('map', var.get('obj2point')))})),'naf':(var.get('pre').get('naf') and Js({'wnd':var.get('pre').get('naf').get('wnd'),'points':Js([var.get('res')]).callprop('concat', var.get('pre').get('naf').get('points').callprop('map', var.get('obj2point')))}))}))
            PyJs_LONG_2321_()
            return var.get('res')
        PyJs_fromJSON_2320_._set_name('fromJSON')
        var.get('Point').put('fromJSON', PyJs_fromJSON_2320_)
        @Js
        def PyJs_inspect_2322_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'inspect':PyJs_inspect_2322_}, var)
            var.registers([])
            if var.get(u"this").callprop('isInfinity'):
                return Js('<EC Point Infinity>')
            return ((((Js('<EC Point x: ')+var.get(u"this").get('x').callprop('fromRed').callprop('toString', Js(16.0), Js(2.0)))+Js(' y: '))+var.get(u"this").get('y').callprop('fromRed').callprop('toString', Js(16.0), Js(2.0)))+Js('>'))
        PyJs_inspect_2322_._set_name('inspect')
        var.get('Point').get('prototype').put('inspect', PyJs_inspect_2322_)
        @Js
        def PyJs_isInfinity_2323_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'isInfinity':PyJs_isInfinity_2323_}, var)
            var.registers([])
            return var.get(u"this").get('inf')
        PyJs_isInfinity_2323_._set_name('isInfinity')
        var.get('Point').get('prototype').put('isInfinity', PyJs_isInfinity_2323_)
        @Js
        def PyJs_add_2324_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments, 'add':PyJs_add_2324_}, var)
            var.registers(['ny', 'c', 'nx', 'p'])
            if var.get(u"this").get('inf'):
                return var.get('p')
            if var.get('p').get('inf'):
                return var.get(u"this")
            if var.get(u"this").callprop('eq', var.get('p')):
                return var.get(u"this").callprop('dbl')
            if var.get(u"this").callprop('neg').callprop('eq', var.get('p')):
                return var.get(u"this").get('curve').callprop('point', var.get(u"null"), var.get(u"null"))
            if _seq(var.get(u"this").get('x').callprop('cmp', var.get('p').get('x')),Js(0.0)):
                return var.get(u"this").get('curve').callprop('point', var.get(u"null"), var.get(u"null"))
            var.put('c', var.get(u"this").get('y').callprop('redSub', var.get('p').get('y')))
            if PyJsStrictNeq(var.get('c').callprop('cmpn', Js(0.0)),Js(0.0)):
                var.put('c', var.get('c').callprop('redMul', var.get(u"this").get('x').callprop('redSub', var.get('p').get('x')).callprop('redInvm')))
            var.put('nx', var.get('c').callprop('redSqr').callprop('redISub', var.get(u"this").get('x')).callprop('redISub', var.get('p').get('x')))
            var.put('ny', var.get('c').callprop('redMul', var.get(u"this").get('x').callprop('redSub', var.get('nx'))).callprop('redISub', var.get(u"this").get('y')))
            return var.get(u"this").get('curve').callprop('point', var.get('nx'), var.get('ny'))
        PyJs_add_2324_._set_name('add')
        var.get('Point').get('prototype').put('add', PyJs_add_2324_)
        @Js
        def PyJs_dbl_2325_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'dbl':PyJs_dbl_2325_}, var)
            var.registers(['x2', 'a', 'dyinv', 'ny', 'c', 'ys1', 'nx'])
            if var.get(u"this").get('inf'):
                return var.get(u"this")
            var.put('ys1', var.get(u"this").get('y').callprop('redAdd', var.get(u"this").get('y')))
            if _seq(var.get('ys1').callprop('cmpn', Js(0.0)),Js(0.0)):
                return var.get(u"this").get('curve').callprop('point', var.get(u"null"), var.get(u"null"))
            var.put('a', var.get(u"this").get('curve').get('a'))
            var.put('x2', var.get(u"this").get('x').callprop('redSqr'))
            var.put('dyinv', var.get('ys1').callprop('redInvm'))
            var.put('c', var.get('x2').callprop('redAdd', var.get('x2')).callprop('redIAdd', var.get('x2')).callprop('redIAdd', var.get('a')).callprop('redMul', var.get('dyinv')))
            var.put('nx', var.get('c').callprop('redSqr').callprop('redISub', var.get(u"this").get('x').callprop('redAdd', var.get(u"this").get('x'))))
            var.put('ny', var.get('c').callprop('redMul', var.get(u"this").get('x').callprop('redSub', var.get('nx'))).callprop('redISub', var.get(u"this").get('y')))
            return var.get(u"this").get('curve').callprop('point', var.get('nx'), var.get('ny'))
        PyJs_dbl_2325_._set_name('dbl')
        var.get('Point').get('prototype').put('dbl', PyJs_dbl_2325_)
        @Js
        def PyJs_getX_2326_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getX':PyJs_getX_2326_}, var)
            var.registers([])
            return var.get(u"this").get('x').callprop('fromRed')
        PyJs_getX_2326_._set_name('getX')
        var.get('Point').get('prototype').put('getX', PyJs_getX_2326_)
        @Js
        def PyJs_getY_2327_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getY':PyJs_getY_2327_}, var)
            var.registers([])
            return var.get(u"this").get('y').callprop('fromRed')
        PyJs_getY_2327_._set_name('getY')
        var.get('Point').get('prototype').put('getY', PyJs_getY_2327_)
        @Js
        def PyJs_mul_2328_(k, this, arguments, var=var):
            var = Scope({'k':k, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_2328_}, var)
            var.registers(['k'])
            var.put('k', var.get('BN').create(var.get('k'), Js(16.0)))
            if var.get(u"this").callprop('isInfinity'):
                return var.get(u"this")
            else:
                if var.get(u"this").callprop('_hasDoubles', var.get('k')):
                    return var.get(u"this").get('curve').callprop('_fixedNafMul', var.get(u"this"), var.get('k'))
                else:
                    if var.get(u"this").get('curve').get('endo'):
                        return var.get(u"this").get('curve').callprop('_endoWnafMulAdd', Js([var.get(u"this")]), Js([var.get('k')]))
                    else:
                        return var.get(u"this").get('curve').callprop('_wnafMul', var.get(u"this"), var.get('k'))
        PyJs_mul_2328_._set_name('mul')
        var.get('Point').get('prototype').put('mul', PyJs_mul_2328_)
        @Js
        def PyJs_mulAdd_2329_(k1, p2, k2, this, arguments, var=var):
            var = Scope({'k1':k1, 'p2':p2, 'k2':k2, 'this':this, 'arguments':arguments, 'mulAdd':PyJs_mulAdd_2329_}, var)
            var.registers(['coeffs', 'p2', 'points', 'k1', 'k2'])
            var.put('points', Js([var.get(u"this"), var.get('p2')]))
            var.put('coeffs', Js([var.get('k1'), var.get('k2')]))
            if var.get(u"this").get('curve').get('endo'):
                return var.get(u"this").get('curve').callprop('_endoWnafMulAdd', var.get('points'), var.get('coeffs'))
            else:
                return var.get(u"this").get('curve').callprop('_wnafMulAdd', Js(1.0), var.get('points'), var.get('coeffs'), Js(2.0))
        PyJs_mulAdd_2329_._set_name('mulAdd')
        var.get('Point').get('prototype').put('mulAdd', PyJs_mulAdd_2329_)
        @Js
        def PyJs_jmulAdd_2330_(k1, p2, k2, this, arguments, var=var):
            var = Scope({'k1':k1, 'p2':p2, 'k2':k2, 'this':this, 'arguments':arguments, 'jmulAdd':PyJs_jmulAdd_2330_}, var)
            var.registers(['coeffs', 'p2', 'points', 'k1', 'k2'])
            var.put('points', Js([var.get(u"this"), var.get('p2')]))
            var.put('coeffs', Js([var.get('k1'), var.get('k2')]))
            if var.get(u"this").get('curve').get('endo'):
                return var.get(u"this").get('curve').callprop('_endoWnafMulAdd', var.get('points'), var.get('coeffs'), Js(True))
            else:
                return var.get(u"this").get('curve').callprop('_wnafMulAdd', Js(1.0), var.get('points'), var.get('coeffs'), Js(2.0), Js(True))
        PyJs_jmulAdd_2330_._set_name('jmulAdd')
        var.get('Point').get('prototype').put('jmulAdd', PyJs_jmulAdd_2330_)
        @Js
        def PyJs_eq_2331_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments, 'eq':PyJs_eq_2331_}, var)
            var.registers(['p'])
            return (_seq(var.get(u"this"),var.get('p')) or (_seq(var.get(u"this").get('inf'),var.get('p').get('inf')) and (var.get(u"this").get('inf') or (_seq(var.get(u"this").get('x').callprop('cmp', var.get('p').get('x')),Js(0.0)) and _seq(var.get(u"this").get('y').callprop('cmp', var.get('p').get('y')),Js(0.0))))))
        PyJs_eq_2331_._set_name('eq')
        var.get('Point').get('prototype').put('eq', PyJs_eq_2331_)
        @Js
        def PyJs_neg_2332_(_precompute, this, arguments, var=var):
            var = Scope({'_precompute':_precompute, 'this':this, 'arguments':arguments, 'neg':PyJs_neg_2332_}, var)
            var.registers(['pre', 'negate', '_precompute', 'res'])
            if var.get(u"this").get('inf'):
                return var.get(u"this")
            var.put('res', var.get(u"this").get('curve').callprop('point', var.get(u"this").get('x'), var.get(u"this").get('y').callprop('redNeg')))
            if (var.get('_precompute') and var.get(u"this").get('precomputed')):
                var.put('pre', var.get(u"this").get('precomputed'))
                @Js
                def PyJs_negate_2333_(p, this, arguments, var=var):
                    var = Scope({'p':p, 'this':this, 'arguments':arguments, 'negate':PyJs_negate_2333_}, var)
                    var.registers(['p'])
                    return var.get('p').callprop('neg')
                PyJs_negate_2333_._set_name('negate')
                var.put('negate', PyJs_negate_2333_)
                var.get('res').put('precomputed', Js({'naf':(var.get('pre').get('naf') and Js({'wnd':var.get('pre').get('naf').get('wnd'),'points':var.get('pre').get('naf').get('points').callprop('map', var.get('negate'))})),'doubles':(var.get('pre').get('doubles') and Js({'step':var.get('pre').get('doubles').get('step'),'points':var.get('pre').get('doubles').get('points').callprop('map', var.get('negate'))}))}))
            return var.get('res')
        PyJs_neg_2332_._set_name('neg')
        var.get('Point').get('prototype').put('neg', PyJs_neg_2332_)
        @Js
        def PyJs_toJ_2334_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toJ':PyJs_toJ_2334_}, var)
            var.registers(['res'])
            if var.get(u"this").get('inf'):
                return var.get(u"this").get('curve').callprop('jpoint', var.get(u"null"), var.get(u"null"), var.get(u"null"))
            var.put('res', var.get(u"this").get('curve').callprop('jpoint', var.get(u"this").get('x'), var.get(u"this").get('y'), var.get(u"this").get('curve').get('one')))
            return var.get('res')
        PyJs_toJ_2334_._set_name('toJ')
        var.get('Point').get('prototype').put('toJ', PyJs_toJ_2334_)
        pass
        var.get('inherits')(var.get('JPoint'), var.get('Base').get('BasePoint'))
        @Js
        def PyJs_jpoint_2335_(x, y, z, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments, 'jpoint':PyJs_jpoint_2335_}, var)
            var.registers(['x', 'z', 'y'])
            return var.get('JPoint').create(var.get(u"this"), var.get('x'), var.get('y'), var.get('z'))
        PyJs_jpoint_2335_._set_name('jpoint')
        var.get('ShortCurve').get('prototype').put('jpoint', PyJs_jpoint_2335_)
        @Js
        def PyJs_toP_2336_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toP':PyJs_toP_2336_}, var)
            var.registers(['zinv2', 'ax', 'ay', 'zinv'])
            if var.get(u"this").callprop('isInfinity'):
                return var.get(u"this").get('curve').callprop('point', var.get(u"null"), var.get(u"null"))
            var.put('zinv', var.get(u"this").get('z').callprop('redInvm'))
            var.put('zinv2', var.get('zinv').callprop('redSqr'))
            var.put('ax', var.get(u"this").get('x').callprop('redMul', var.get('zinv2')))
            var.put('ay', var.get(u"this").get('y').callprop('redMul', var.get('zinv2')).callprop('redMul', var.get('zinv')))
            return var.get(u"this").get('curve').callprop('point', var.get('ax'), var.get('ay'))
        PyJs_toP_2336_._set_name('toP')
        var.get('JPoint').get('prototype').put('toP', PyJs_toP_2336_)
        @Js
        def PyJs_neg_2337_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'neg':PyJs_neg_2337_}, var)
            var.registers([])
            return var.get(u"this").get('curve').callprop('jpoint', var.get(u"this").get('x'), var.get(u"this").get('y').callprop('redNeg'), var.get(u"this").get('z'))
        PyJs_neg_2337_._set_name('neg')
        var.get('JPoint').get('prototype').put('neg', PyJs_neg_2337_)
        @Js
        def PyJs_add_2338_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments, 'add':PyJs_add_2338_}, var)
            var.registers(['r', 'u2', 'u1', 's2', 'v', 'ny', 'pz2', 'h', 'h2', 'p', 's1', 'z2', 'nx', 'nz', 'h3'])
            if var.get(u"this").callprop('isInfinity'):
                return var.get('p')
            if var.get('p').callprop('isInfinity'):
                return var.get(u"this")
            var.put('pz2', var.get('p').get('z').callprop('redSqr'))
            var.put('z2', var.get(u"this").get('z').callprop('redSqr'))
            var.put('u1', var.get(u"this").get('x').callprop('redMul', var.get('pz2')))
            var.put('u2', var.get('p').get('x').callprop('redMul', var.get('z2')))
            var.put('s1', var.get(u"this").get('y').callprop('redMul', var.get('pz2').callprop('redMul', var.get('p').get('z'))))
            var.put('s2', var.get('p').get('y').callprop('redMul', var.get('z2').callprop('redMul', var.get(u"this").get('z'))))
            var.put('h', var.get('u1').callprop('redSub', var.get('u2')))
            var.put('r', var.get('s1').callprop('redSub', var.get('s2')))
            if _seq(var.get('h').callprop('cmpn', Js(0.0)),Js(0.0)):
                if PyJsStrictNeq(var.get('r').callprop('cmpn', Js(0.0)),Js(0.0)):
                    return var.get(u"this").get('curve').callprop('jpoint', var.get(u"null"), var.get(u"null"), var.get(u"null"))
                else:
                    return var.get(u"this").callprop('dbl')
            var.put('h2', var.get('h').callprop('redSqr'))
            var.put('h3', var.get('h2').callprop('redMul', var.get('h')))
            var.put('v', var.get('u1').callprop('redMul', var.get('h2')))
            var.put('nx', var.get('r').callprop('redSqr').callprop('redIAdd', var.get('h3')).callprop('redISub', var.get('v')).callprop('redISub', var.get('v')))
            var.put('ny', var.get('r').callprop('redMul', var.get('v').callprop('redISub', var.get('nx'))).callprop('redISub', var.get('s1').callprop('redMul', var.get('h3'))))
            var.put('nz', var.get(u"this").get('z').callprop('redMul', var.get('p').get('z')).callprop('redMul', var.get('h')))
            return var.get(u"this").get('curve').callprop('jpoint', var.get('nx'), var.get('ny'), var.get('nz'))
        PyJs_add_2338_._set_name('add')
        var.get('JPoint').get('prototype').put('add', PyJs_add_2338_)
        @Js
        def PyJs_mixedAdd_2339_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments, 'mixedAdd':PyJs_mixedAdd_2339_}, var)
            var.registers(['r', 'u2', 'u1', 's2', 'v', 'ny', 'h', 'h2', 'p', 's1', 'z2', 'nx', 'nz', 'h3'])
            if var.get(u"this").callprop('isInfinity'):
                return var.get('p').callprop('toJ')
            if var.get('p').callprop('isInfinity'):
                return var.get(u"this")
            var.put('z2', var.get(u"this").get('z').callprop('redSqr'))
            var.put('u1', var.get(u"this").get('x'))
            var.put('u2', var.get('p').get('x').callprop('redMul', var.get('z2')))
            var.put('s1', var.get(u"this").get('y'))
            var.put('s2', var.get('p').get('y').callprop('redMul', var.get('z2')).callprop('redMul', var.get(u"this").get('z')))
            var.put('h', var.get('u1').callprop('redSub', var.get('u2')))
            var.put('r', var.get('s1').callprop('redSub', var.get('s2')))
            if _seq(var.get('h').callprop('cmpn', Js(0.0)),Js(0.0)):
                if PyJsStrictNeq(var.get('r').callprop('cmpn', Js(0.0)),Js(0.0)):
                    return var.get(u"this").get('curve').callprop('jpoint', var.get(u"null"), var.get(u"null"), var.get(u"null"))
                else:
                    return var.get(u"this").callprop('dbl')
            var.put('h2', var.get('h').callprop('redSqr'))
            var.put('h3', var.get('h2').callprop('redMul', var.get('h')))
            var.put('v', var.get('u1').callprop('redMul', var.get('h2')))
            var.put('nx', var.get('r').callprop('redSqr').callprop('redIAdd', var.get('h3')).callprop('redISub', var.get('v')).callprop('redISub', var.get('v')))
            var.put('ny', var.get('r').callprop('redMul', var.get('v').callprop('redISub', var.get('nx'))).callprop('redISub', var.get('s1').callprop('redMul', var.get('h3'))))
            var.put('nz', var.get(u"this").get('z').callprop('redMul', var.get('h')))
            return var.get(u"this").get('curve').callprop('jpoint', var.get('nx'), var.get('ny'), var.get('nz'))
        PyJs_mixedAdd_2339_._set_name('mixedAdd')
        var.get('JPoint').get('prototype').put('mixedAdd', PyJs_mixedAdd_2339_)
        @Js
        def PyJs_dblp_2340_(pow, this, arguments, var=var):
            var = Scope({'pow':pow, 'this':this, 'arguments':arguments, 'dblp':PyJs_dblp_2340_}, var)
            var.registers(['a', 'jyd2', 'nz', 'jz', 'jyd4', 'r', 'i', 'c', 'tinv', 'jz4', 'dny', 'nx', 't2', 'jx', 'jx2', 'pow', 'jy', 't1', 'jyd'])
            if _seq(var.get('pow'),Js(0.0)):
                return var.get(u"this")
            if var.get(u"this").callprop('isInfinity'):
                return var.get(u"this")
            if var.get('pow').neg():
                return var.get(u"this").callprop('dbl')
            if (var.get(u"this").get('curve').get('zeroA') or var.get(u"this").get('curve').get('threeA')):
                var.put('r', var.get(u"this"))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('pow')):
                    try:
                        var.put('r', var.get('r').callprop('dbl'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('r')
            var.put('a', var.get(u"this").get('curve').get('a'))
            var.put('tinv', var.get(u"this").get('curve').get('tinv'))
            var.put('jx', var.get(u"this").get('x'))
            var.put('jy', var.get(u"this").get('y'))
            var.put('jz', var.get(u"this").get('z'))
            var.put('jz4', var.get('jz').callprop('redSqr').callprop('redSqr'))
            var.put('jyd', var.get('jy').callprop('redAdd', var.get('jy')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('pow')):
                try:
                    var.put('jx2', var.get('jx').callprop('redSqr'))
                    var.put('jyd2', var.get('jyd').callprop('redSqr'))
                    var.put('jyd4', var.get('jyd2').callprop('redSqr'))
                    var.put('c', var.get('jx2').callprop('redAdd', var.get('jx2')).callprop('redIAdd', var.get('jx2')).callprop('redIAdd', var.get('a').callprop('redMul', var.get('jz4'))))
                    var.put('t1', var.get('jx').callprop('redMul', var.get('jyd2')))
                    var.put('nx', var.get('c').callprop('redSqr').callprop('redISub', var.get('t1').callprop('redAdd', var.get('t1'))))
                    var.put('t2', var.get('t1').callprop('redISub', var.get('nx')))
                    var.put('dny', var.get('c').callprop('redMul', var.get('t2')))
                    var.put('dny', var.get('dny').callprop('redIAdd', var.get('dny')).callprop('redISub', var.get('jyd4')))
                    var.put('nz', var.get('jyd').callprop('redMul', var.get('jz')))
                    if ((var.get('i')+Js(1.0))<var.get('pow')):
                        var.put('jz4', var.get('jz4').callprop('redMul', var.get('jyd4')))
                    var.put('jx', var.get('nx'))
                    var.put('jz', var.get('nz'))
                    var.put('jyd', var.get('dny'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get(u"this").get('curve').callprop('jpoint', var.get('jx'), var.get('jyd').callprop('redMul', var.get('tinv')), var.get('jz'))
        PyJs_dblp_2340_._set_name('dblp')
        var.get('JPoint').get('prototype').put('dblp', PyJs_dblp_2340_)
        @Js
        def PyJs_dbl_2341_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'dbl':PyJs_dbl_2341_}, var)
            var.registers([])
            if var.get(u"this").callprop('isInfinity'):
                return var.get(u"this")
            if var.get(u"this").get('curve').get('zeroA'):
                return var.get(u"this").callprop('_zeroDbl')
            else:
                if var.get(u"this").get('curve').get('threeA'):
                    return var.get(u"this").callprop('_threeDbl')
                else:
                    return var.get(u"this").callprop('_dbl')
        PyJs_dbl_2341_._set_name('dbl')
        var.get('JPoint').get('prototype').put('dbl', PyJs_dbl_2341_)
        @Js
        def PyJs__zeroDbl_2342_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_zeroDbl':PyJs__zeroDbl_2342_}, var)
            var.registers(['yyyy', 'a', 'f', 'ny', 'c', 'e', 'm', 'b', 'yy', 'd', 'xx', 'nx', 't', 'nz', 'c8', 'yyyy8', 's'])
            pass
            pass
            pass
            if var.get(u"this").get('zOne'):
                var.put('xx', var.get(u"this").get('x').callprop('redSqr'))
                var.put('yy', var.get(u"this").get('y').callprop('redSqr'))
                var.put('yyyy', var.get('yy').callprop('redSqr'))
                var.put('s', var.get(u"this").get('x').callprop('redAdd', var.get('yy')).callprop('redSqr').callprop('redISub', var.get('xx')).callprop('redISub', var.get('yyyy')))
                var.put('s', var.get('s').callprop('redIAdd', var.get('s')))
                var.put('m', var.get('xx').callprop('redAdd', var.get('xx')).callprop('redIAdd', var.get('xx')))
                var.put('t', var.get('m').callprop('redSqr').callprop('redISub', var.get('s')).callprop('redISub', var.get('s')))
                var.put('yyyy8', var.get('yyyy').callprop('redIAdd', var.get('yyyy')))
                var.put('yyyy8', var.get('yyyy8').callprop('redIAdd', var.get('yyyy8')))
                var.put('yyyy8', var.get('yyyy8').callprop('redIAdd', var.get('yyyy8')))
                var.put('nx', var.get('t'))
                var.put('ny', var.get('m').callprop('redMul', var.get('s').callprop('redISub', var.get('t'))).callprop('redISub', var.get('yyyy8')))
                var.put('nz', var.get(u"this").get('y').callprop('redAdd', var.get(u"this").get('y')))
            else:
                var.put('a', var.get(u"this").get('x').callprop('redSqr'))
                var.put('b', var.get(u"this").get('y').callprop('redSqr'))
                var.put('c', var.get('b').callprop('redSqr'))
                var.put('d', var.get(u"this").get('x').callprop('redAdd', var.get('b')).callprop('redSqr').callprop('redISub', var.get('a')).callprop('redISub', var.get('c')))
                var.put('d', var.get('d').callprop('redIAdd', var.get('d')))
                var.put('e', var.get('a').callprop('redAdd', var.get('a')).callprop('redIAdd', var.get('a')))
                var.put('f', var.get('e').callprop('redSqr'))
                var.put('c8', var.get('c').callprop('redIAdd', var.get('c')))
                var.put('c8', var.get('c8').callprop('redIAdd', var.get('c8')))
                var.put('c8', var.get('c8').callprop('redIAdd', var.get('c8')))
                var.put('nx', var.get('f').callprop('redISub', var.get('d')).callprop('redISub', var.get('d')))
                var.put('ny', var.get('e').callprop('redMul', var.get('d').callprop('redISub', var.get('nx'))).callprop('redISub', var.get('c8')))
                var.put('nz', var.get(u"this").get('y').callprop('redMul', var.get(u"this").get('z')))
                var.put('nz', var.get('nz').callprop('redIAdd', var.get('nz')))
            return var.get(u"this").get('curve').callprop('jpoint', var.get('nx'), var.get('ny'), var.get('nz'))
        PyJs__zeroDbl_2342_._set_name('_zeroDbl')
        var.get('JPoint').get('prototype').put('_zeroDbl', PyJs__zeroDbl_2342_)
        @Js
        def PyJs__threeDbl_2343_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_threeDbl':PyJs__threeDbl_2343_}, var)
            var.registers(['beta8', 'yyyy', 'delta', 'beta4', 'ny', 'm', 'yy', 'xx', 'gamma', 'beta', 'alpha', 'nx', 't', 'nz', 'ggamma8', 'yyyy8', 's'])
            pass
            pass
            pass
            if var.get(u"this").get('zOne'):
                var.put('xx', var.get(u"this").get('x').callprop('redSqr'))
                var.put('yy', var.get(u"this").get('y').callprop('redSqr'))
                var.put('yyyy', var.get('yy').callprop('redSqr'))
                var.put('s', var.get(u"this").get('x').callprop('redAdd', var.get('yy')).callprop('redSqr').callprop('redISub', var.get('xx')).callprop('redISub', var.get('yyyy')))
                var.put('s', var.get('s').callprop('redIAdd', var.get('s')))
                var.put('m', var.get('xx').callprop('redAdd', var.get('xx')).callprop('redIAdd', var.get('xx')).callprop('redIAdd', var.get(u"this").get('curve').get('a')))
                var.put('t', var.get('m').callprop('redSqr').callprop('redISub', var.get('s')).callprop('redISub', var.get('s')))
                var.put('nx', var.get('t'))
                var.put('yyyy8', var.get('yyyy').callprop('redIAdd', var.get('yyyy')))
                var.put('yyyy8', var.get('yyyy8').callprop('redIAdd', var.get('yyyy8')))
                var.put('yyyy8', var.get('yyyy8').callprop('redIAdd', var.get('yyyy8')))
                var.put('ny', var.get('m').callprop('redMul', var.get('s').callprop('redISub', var.get('t'))).callprop('redISub', var.get('yyyy8')))
                var.put('nz', var.get(u"this").get('y').callprop('redAdd', var.get(u"this").get('y')))
            else:
                var.put('delta', var.get(u"this").get('z').callprop('redSqr'))
                var.put('gamma', var.get(u"this").get('y').callprop('redSqr'))
                var.put('beta', var.get(u"this").get('x').callprop('redMul', var.get('gamma')))
                var.put('alpha', var.get(u"this").get('x').callprop('redSub', var.get('delta')).callprop('redMul', var.get(u"this").get('x').callprop('redAdd', var.get('delta'))))
                var.put('alpha', var.get('alpha').callprop('redAdd', var.get('alpha')).callprop('redIAdd', var.get('alpha')))
                var.put('beta4', var.get('beta').callprop('redIAdd', var.get('beta')))
                var.put('beta4', var.get('beta4').callprop('redIAdd', var.get('beta4')))
                var.put('beta8', var.get('beta4').callprop('redAdd', var.get('beta4')))
                var.put('nx', var.get('alpha').callprop('redSqr').callprop('redISub', var.get('beta8')))
                var.put('nz', var.get(u"this").get('y').callprop('redAdd', var.get(u"this").get('z')).callprop('redSqr').callprop('redISub', var.get('gamma')).callprop('redISub', var.get('delta')))
                var.put('ggamma8', var.get('gamma').callprop('redSqr'))
                var.put('ggamma8', var.get('ggamma8').callprop('redIAdd', var.get('ggamma8')))
                var.put('ggamma8', var.get('ggamma8').callprop('redIAdd', var.get('ggamma8')))
                var.put('ggamma8', var.get('ggamma8').callprop('redIAdd', var.get('ggamma8')))
                var.put('ny', var.get('alpha').callprop('redMul', var.get('beta4').callprop('redISub', var.get('nx'))).callprop('redISub', var.get('ggamma8')))
            return var.get(u"this").get('curve').callprop('jpoint', var.get('nx'), var.get('ny'), var.get('nz'))
        PyJs__threeDbl_2343_._set_name('_threeDbl')
        var.get('JPoint').get('prototype').put('_threeDbl', PyJs__threeDbl_2343_)
        @Js
        def PyJs__dbl_2344_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, '_dbl':PyJs__dbl_2344_}, var)
            var.registers(['a', 't1', 'jx2', 'c', 'ny', 'nz', 'jz4', 'jy', 'jy2', 'jyd8', 'nx', 'jxd4', 'jx', 't2', 'jz'])
            var.put('a', var.get(u"this").get('curve').get('a'))
            var.put('jx', var.get(u"this").get('x'))
            var.put('jy', var.get(u"this").get('y'))
            var.put('jz', var.get(u"this").get('z'))
            var.put('jz4', var.get('jz').callprop('redSqr').callprop('redSqr'))
            var.put('jx2', var.get('jx').callprop('redSqr'))
            var.put('jy2', var.get('jy').callprop('redSqr'))
            var.put('c', var.get('jx2').callprop('redAdd', var.get('jx2')).callprop('redIAdd', var.get('jx2')).callprop('redIAdd', var.get('a').callprop('redMul', var.get('jz4'))))
            var.put('jxd4', var.get('jx').callprop('redAdd', var.get('jx')))
            var.put('jxd4', var.get('jxd4').callprop('redIAdd', var.get('jxd4')))
            var.put('t1', var.get('jxd4').callprop('redMul', var.get('jy2')))
            var.put('nx', var.get('c').callprop('redSqr').callprop('redISub', var.get('t1').callprop('redAdd', var.get('t1'))))
            var.put('t2', var.get('t1').callprop('redISub', var.get('nx')))
            var.put('jyd8', var.get('jy2').callprop('redSqr'))
            var.put('jyd8', var.get('jyd8').callprop('redIAdd', var.get('jyd8')))
            var.put('jyd8', var.get('jyd8').callprop('redIAdd', var.get('jyd8')))
            var.put('jyd8', var.get('jyd8').callprop('redIAdd', var.get('jyd8')))
            var.put('ny', var.get('c').callprop('redMul', var.get('t2')).callprop('redISub', var.get('jyd8')))
            var.put('nz', var.get('jy').callprop('redAdd', var.get('jy')).callprop('redMul', var.get('jz')))
            return var.get(u"this").get('curve').callprop('jpoint', var.get('nx'), var.get('ny'), var.get('nz'))
        PyJs__dbl_2344_._set_name('_dbl')
        var.get('JPoint').get('prototype').put('_dbl', PyJs__dbl_2344_)
        @Js
        def PyJs_trpl_2345_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'trpl':PyJs_trpl_2345_}, var)
            var.registers(['yyyy', 'u', 'ee', 'ny', 'e', 'nz', 'zz', 'yyu4', 'm', 'yy', 'xx', 'mm', 't', 'nx'])
            if var.get(u"this").get('curve').get('zeroA').neg():
                return var.get(u"this").callprop('dbl').callprop('add', var.get(u"this"))
            var.put('xx', var.get(u"this").get('x').callprop('redSqr'))
            var.put('yy', var.get(u"this").get('y').callprop('redSqr'))
            var.put('zz', var.get(u"this").get('z').callprop('redSqr'))
            var.put('yyyy', var.get('yy').callprop('redSqr'))
            var.put('m', var.get('xx').callprop('redAdd', var.get('xx')).callprop('redIAdd', var.get('xx')))
            var.put('mm', var.get('m').callprop('redSqr'))
            var.put('e', var.get(u"this").get('x').callprop('redAdd', var.get('yy')).callprop('redSqr').callprop('redISub', var.get('xx')).callprop('redISub', var.get('yyyy')))
            var.put('e', var.get('e').callprop('redIAdd', var.get('e')))
            var.put('e', var.get('e').callprop('redAdd', var.get('e')).callprop('redIAdd', var.get('e')))
            var.put('e', var.get('e').callprop('redISub', var.get('mm')))
            var.put('ee', var.get('e').callprop('redSqr'))
            var.put('t', var.get('yyyy').callprop('redIAdd', var.get('yyyy')))
            var.put('t', var.get('t').callprop('redIAdd', var.get('t')))
            var.put('t', var.get('t').callprop('redIAdd', var.get('t')))
            var.put('t', var.get('t').callprop('redIAdd', var.get('t')))
            var.put('u', var.get('m').callprop('redIAdd', var.get('e')).callprop('redSqr').callprop('redISub', var.get('mm')).callprop('redISub', var.get('ee')).callprop('redISub', var.get('t')))
            var.put('yyu4', var.get('yy').callprop('redMul', var.get('u')))
            var.put('yyu4', var.get('yyu4').callprop('redIAdd', var.get('yyu4')))
            var.put('yyu4', var.get('yyu4').callprop('redIAdd', var.get('yyu4')))
            var.put('nx', var.get(u"this").get('x').callprop('redMul', var.get('ee')).callprop('redISub', var.get('yyu4')))
            var.put('nx', var.get('nx').callprop('redIAdd', var.get('nx')))
            var.put('nx', var.get('nx').callprop('redIAdd', var.get('nx')))
            var.put('ny', var.get(u"this").get('y').callprop('redMul', var.get('u').callprop('redMul', var.get('t').callprop('redISub', var.get('u'))).callprop('redISub', var.get('e').callprop('redMul', var.get('ee')))))
            var.put('ny', var.get('ny').callprop('redIAdd', var.get('ny')))
            var.put('ny', var.get('ny').callprop('redIAdd', var.get('ny')))
            var.put('ny', var.get('ny').callprop('redIAdd', var.get('ny')))
            var.put('nz', var.get(u"this").get('z').callprop('redAdd', var.get('e')).callprop('redSqr').callprop('redISub', var.get('zz')).callprop('redISub', var.get('ee')))
            return var.get(u"this").get('curve').callprop('jpoint', var.get('nx'), var.get('ny'), var.get('nz'))
        PyJs_trpl_2345_._set_name('trpl')
        var.get('JPoint').get('prototype').put('trpl', PyJs_trpl_2345_)
        @Js
        def PyJs_mul_2346_(k, kbase, this, arguments, var=var):
            var = Scope({'k':k, 'kbase':kbase, 'this':this, 'arguments':arguments, 'mul':PyJs_mul_2346_}, var)
            var.registers(['k', 'kbase'])
            var.put('k', var.get('BN').create(var.get('k'), var.get('kbase')))
            return var.get(u"this").get('curve').callprop('_wnafMul', var.get(u"this"), var.get('k'))
        PyJs_mul_2346_._set_name('mul')
        var.get('JPoint').get('prototype').put('mul', PyJs_mul_2346_)
        @Js
        def PyJs_eq_2347_(p, this, arguments, var=var):
            var = Scope({'p':p, 'this':this, 'arguments':arguments, 'eq':PyJs_eq_2347_}, var)
            var.registers(['pz2', 'p', 'z2', 'z3', 'pz3'])
            if _seq(var.get('p').get('type'),Js('affine')):
                return var.get(u"this").callprop('eq', var.get('p').callprop('toJ'))
            if _seq(var.get(u"this"),var.get('p')):
                return Js(True)
            var.put('z2', var.get(u"this").get('z').callprop('redSqr'))
            var.put('pz2', var.get('p').get('z').callprop('redSqr'))
            if PyJsStrictNeq(var.get(u"this").get('x').callprop('redMul', var.get('pz2')).callprop('redISub', var.get('p').get('x').callprop('redMul', var.get('z2'))).callprop('cmpn', Js(0.0)),Js(0.0)):
                return Js(False)
            var.put('z3', var.get('z2').callprop('redMul', var.get(u"this").get('z')))
            var.put('pz3', var.get('pz2').callprop('redMul', var.get('p').get('z')))
            return _seq(var.get(u"this").get('y').callprop('redMul', var.get('pz3')).callprop('redISub', var.get('p').get('y').callprop('redMul', var.get('z3'))).callprop('cmpn', Js(0.0)),Js(0.0))
        PyJs_eq_2347_._set_name('eq')
        var.get('JPoint').get('prototype').put('eq', PyJs_eq_2347_)
        @Js
        def PyJs_eqXToP_2348_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'eqXToP':PyJs_eqXToP_2348_}, var)
            var.registers(['zs', 'x', 'xc', 't', 'rx'])
            var.put('zs', var.get(u"this").get('z').callprop('redSqr'))
            var.put('rx', var.get('x').callprop('toRed', var.get(u"this").get('curve').get('red')).callprop('redMul', var.get('zs')))
            if _seq(var.get(u"this").get('x').callprop('cmp', var.get('rx')),Js(0.0)):
                return Js(True)
            var.put('xc', var.get('x').callprop('clone'))
            var.put('t', var.get(u"this").get('curve').get('redN').callprop('redMul', var.get('zs')))
            #for JS loop

            while 1:
                var.get('xc').callprop('iadd', var.get(u"this").get('curve').get('n'))
                if (var.get('xc').callprop('cmp', var.get(u"this").get('curve').get('p'))>=Js(0.0)):
                    return Js(False)
                var.get('rx').callprop('redIAdd', var.get('t'))
                if _seq(var.get(u"this").get('x').callprop('cmp', var.get('rx')),Js(0.0)):
                    return Js(True)

        PyJs_eqXToP_2348_._set_name('eqXToP')
        var.get('JPoint').get('prototype').put('eqXToP', PyJs_eqXToP_2348_)
        @Js
        def PyJs_inspect_2349_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'inspect':PyJs_inspect_2349_}, var)
            var.registers([])
            if var.get(u"this").callprop('isInfinity'):
                return Js('<EC JPoint Infinity>')
            return ((((((Js('<EC JPoint x: ')+var.get(u"this").get('x').callprop('toString', Js(16.0), Js(2.0)))+Js(' y: '))+var.get(u"this").get('y').callprop('toString', Js(16.0), Js(2.0)))+Js(' z: '))+var.get(u"this").get('z').callprop('toString', Js(16.0), Js(2.0)))+Js('>'))
        PyJs_inspect_2349_._set_name('inspect')
        var.get('JPoint').get('prototype').put('inspect', PyJs_inspect_2349_)
        @Js
        def PyJs_isInfinity_2350_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'isInfinity':PyJs_isInfinity_2350_}, var)
            var.registers([])
            return _seq(var.get(u"this").get('z').callprop('cmpn', Js(0.0)),Js(0.0))
        PyJs_isInfinity_2350_._set_name('isInfinity')
        var.get('JPoint').get('prototype').put('isInfinity', PyJs_isInfinity_2350_)
    PyJs_anonymous_2304_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2351_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'hash', 'PresetCurve', 'assert', 'pre', 'utils', 'curves', 'curve', 'defineCurve'])
        @Js
        def PyJsHoisted_PresetCurve_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            if _seq(var.get('options').get('type'),Js('short')):
                var.get(u"this").put('curve', var.get('curve').get('short').create(var.get('options')))
            else:
                if _seq(var.get('options').get('type'),Js('edwards')):
                    var.get(u"this").put('curve', var.get('curve').get('edwards').create(var.get('options')))
                else:
                    var.get(u"this").put('curve', var.get('curve').get('mont').create(var.get('options')))
            var.get(u"this").put('g', var.get(u"this").get('curve').get('g'))
            var.get(u"this").put('n', var.get(u"this").get('curve').get('n'))
            var.get(u"this").put('hash', var.get('options').get('hash'))
            var.get('assert')(var.get(u"this").get('g').callprop('validate'), Js('Invalid curve'))
            var.get('assert')(var.get(u"this").get('g').callprop('mul', var.get(u"this").get('n')).callprop('isInfinity'), Js('Invalid curve, G*N != O'))
        PyJsHoisted_PresetCurve_.func_name = 'PresetCurve'
        var.put('PresetCurve', PyJsHoisted_PresetCurve_)
        @Js
        def PyJsHoisted_defineCurve_(name, options, this, arguments, var=var):
            var = Scope({'name':name, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'options'])
            @Js
            def PyJs_get_2352_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2352_}, var)
                var.registers(['curve'])
                var.put('curve', var.get('PresetCurve').create(var.get('options')))
                var.get('Object').callprop('defineProperty', var.get('curves'), var.get('name'), Js({'configurable':Js(True),'enumerable':Js(True),'value':var.get('curve')}))
                return var.get('curve')
            PyJs_get_2352_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('curves'), var.get('name'), Js({'configurable':Js(True),'enumerable':Js(True),'get':PyJs_get_2352_}))
        PyJsHoisted_defineCurve_.func_name = 'defineCurve'
        var.put('defineCurve', PyJsHoisted_defineCurve_)
        Js('use strict')
        var.put('curves', var.get('exports'))
        var.put('hash', var.get('require')(Js('hash.js')))
        var.put('curve', var.get('require')(Js('./curve')))
        var.put('utils', var.get('require')(Js('./utils')))
        var.put('assert', var.get('utils').get('assert'))
        pass
        var.get('curves').put('PresetCurve', var.get('PresetCurve'))
        pass
        def PyJs_LONG_2353_(var=var):
            return var.get('defineCurve')(Js('p192'), Js({'type':Js('short'),'prime':Js('p192'),'p':Js('ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff'),'a':Js('ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc'),'b':Js('64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1'),'n':Js('ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831'),'hash':var.get('hash').get('sha256'),'gRed':Js(False),'g':Js([Js('188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012'), Js('07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811')])}))
        PyJs_LONG_2353_()
        def PyJs_LONG_2354_(var=var):
            return var.get('defineCurve')(Js('p224'), Js({'type':Js('short'),'prime':Js('p224'),'p':Js('ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001'),'a':Js('ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe'),'b':Js('b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4'),'n':Js('ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d'),'hash':var.get('hash').get('sha256'),'gRed':Js(False),'g':Js([Js('b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21'), Js('bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34')])}))
        PyJs_LONG_2354_()
        def PyJs_LONG_2355_(var=var):
            return var.get('defineCurve')(Js('p256'), Js({'type':Js('short'),'prime':var.get(u"null"),'p':Js('ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff'),'a':Js('ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc'),'b':Js('5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b'),'n':Js('ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551'),'hash':var.get('hash').get('sha256'),'gRed':Js(False),'g':Js([Js('6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296'), Js('4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5')])}))
        PyJs_LONG_2355_()
        def PyJs_LONG_2356_(var=var):
            return var.get('defineCurve')(Js('p384'), Js({'type':Js('short'),'prime':var.get(u"null"),'p':(Js('ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ')+Js('fffffffe ffffffff 00000000 00000000 ffffffff')),'a':(Js('ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ')+Js('fffffffe ffffffff 00000000 00000000 fffffffc')),'b':(Js('b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ')+Js('5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef')),'n':(Js('ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ')+Js('f4372ddf 581a0db2 48b0a77a ecec196a ccc52973')),'hash':var.get('hash').get('sha384'),'gRed':Js(False),'g':Js([(Js('aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ')+Js('5502f25d bf55296c 3a545e38 72760ab7')), (Js('3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ')+Js('0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'))])}))
        PyJs_LONG_2356_()
        def PyJs_LONG_2357_(var=var):
            return var.get('defineCurve')(Js('p521'), Js({'type':Js('short'),'prime':var.get(u"null"),'p':((Js('000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ')+Js('ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff '))+Js('ffffffff ffffffff ffffffff ffffffff ffffffff')),'a':((Js('000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ')+Js('ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff '))+Js('ffffffff ffffffff ffffffff ffffffff fffffffc')),'b':((Js('00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ')+Js('99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd '))+Js('3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00')),'n':((Js('000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ')+Js('ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 '))+Js('f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409')),'hash':var.get('hash').get('sha512'),'gRed':Js(False),'g':Js([((Js('000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ')+Js('053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 '))+Js('a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66')), ((Js('00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ')+Js('579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 '))+Js('3fad0761 353c7086 a272c240 88be9476 9fd16650'))])}))
        PyJs_LONG_2357_()
        var.get('defineCurve')(Js('curve25519'), Js({'type':Js('mont'),'prime':Js('p25519'),'p':Js('7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed'),'a':Js('76d06'),'b':Js('1'),'n':Js('1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed'),'hash':var.get('hash').get('sha256'),'gRed':Js(False),'g':Js([Js('9')])}))
        def PyJs_LONG_2358_(var=var):
            return var.get('defineCurve')(Js('ed25519'), Js({'type':Js('edwards'),'prime':Js('p25519'),'p':Js('7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed'),'a':Js('-1'),'c':Js('1'),'d':Js('52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3'),'n':Js('1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed'),'hash':var.get('hash').get('sha256'),'gRed':Js(False),'g':Js([Js('216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a'), Js('6666666666666666666666666666666666666666666666666666666666666658')])}))
        PyJs_LONG_2358_()
        pass
        try:
            var.put('pre', var.get('require')(Js('./precomputed/secp256k1')))
        except PyJsException as PyJsTempException:
            PyJsHolder_65_55565555 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                var.put('pre', var.get('undefined'))
            finally:
                if PyJsHolder_65_55565555 is not None:
                    var.own['e'] = PyJsHolder_65_55565555
                else:
                    del var.own['e']
                del PyJsHolder_65_55565555
        def PyJs_LONG_2359_(var=var):
            return var.get('defineCurve')(Js('secp256k1'), Js({'type':Js('short'),'prime':Js('k256'),'p':Js('ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f'),'a':Js('0'),'b':Js('7'),'n':Js('ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141'),'h':Js('1'),'hash':var.get('hash').get('sha256'),'beta':Js('7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),'lambda':Js('5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72'),'basis':Js([Js({'a':Js('3086d221a7d46bcde86c90e49284eb15'),'b':Js('-e4437ed6010e88286f547fa90abfe4c3')}), Js({'a':Js('114ca50f7a8e2f3f657c1108d9d44cfd8'),'b':Js('3086d221a7d46bcde86c90e49284eb15')})]),'gRed':Js(False),'g':Js([Js('79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'), Js('483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'), var.get('pre')])}))
        PyJs_LONG_2359_()
    PyJs_anonymous_2351_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2360_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['KeyPair', 'exports', 'require', 'Signature', 'module', 'BN', 'assert', 'utils', 'curves', 'HmacDRBG', 'EC', 'rand'])
        @Js
        def PyJsHoisted_EC_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options'])
            if var.get(u"this").instanceof(var.get('EC')).neg():
                return var.get('EC').create(var.get('options'))
            if _seq(var.get('options',throw=False).typeof(),Js('string')):
                var.get('assert')(var.get('curves').callprop('hasOwnProperty', var.get('options')), (Js('Unknown curve ')+var.get('options')))
                var.put('options', var.get('curves').get(var.get('options')))
            if var.get('options').instanceof(var.get('curves').get('PresetCurve')):
                var.put('options', Js({'curve':var.get('options')}))
            var.get(u"this").put('curve', var.get('options').get('curve').get('curve'))
            var.get(u"this").put('n', var.get(u"this").get('curve').get('n'))
            var.get(u"this").put('nh', var.get(u"this").get('n').callprop('ushrn', Js(1.0)))
            var.get(u"this").put('g', var.get(u"this").get('curve').get('g'))
            var.get(u"this").put('g', var.get('options').get('curve').get('g'))
            var.get(u"this").get('g').callprop('precompute', (var.get('options').get('curve').get('n').callprop('bitLength')+Js(1.0)))
            var.get(u"this").put('hash', (var.get('options').get('hash') or var.get('options').get('curve').get('hash')))
        PyJsHoisted_EC_.func_name = 'EC'
        var.put('EC', PyJsHoisted_EC_)
        Js('use strict')
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('HmacDRBG', var.get('require')(Js('hmac-drbg')))
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('curves', var.get('require')(Js('../curves')))
        var.put('rand', var.get('require')(Js('brorand')))
        var.put('assert', var.get('utils').get('assert'))
        var.put('KeyPair', var.get('require')(Js('./key')))
        var.put('Signature', var.get('require')(Js('./signature')))
        pass
        var.get('module').put('exports', var.get('EC'))
        @Js
        def PyJs_keyPair_2361_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments, 'keyPair':PyJs_keyPair_2361_}, var)
            var.registers(['options'])
            return var.get('KeyPair').create(var.get(u"this"), var.get('options'))
        PyJs_keyPair_2361_._set_name('keyPair')
        var.get('EC').get('prototype').put('keyPair', PyJs_keyPair_2361_)
        @Js
        def PyJs_keyFromPrivate_2362_(priv, enc, this, arguments, var=var):
            var = Scope({'priv':priv, 'enc':enc, 'this':this, 'arguments':arguments, 'keyFromPrivate':PyJs_keyFromPrivate_2362_}, var)
            var.registers(['priv', 'enc'])
            return var.get('KeyPair').callprop('fromPrivate', var.get(u"this"), var.get('priv'), var.get('enc'))
        PyJs_keyFromPrivate_2362_._set_name('keyFromPrivate')
        var.get('EC').get('prototype').put('keyFromPrivate', PyJs_keyFromPrivate_2362_)
        @Js
        def PyJs_keyFromPublic_2363_(pub, enc, this, arguments, var=var):
            var = Scope({'pub':pub, 'enc':enc, 'this':this, 'arguments':arguments, 'keyFromPublic':PyJs_keyFromPublic_2363_}, var)
            var.registers(['pub', 'enc'])
            return var.get('KeyPair').callprop('fromPublic', var.get(u"this"), var.get('pub'), var.get('enc'))
        PyJs_keyFromPublic_2363_._set_name('keyFromPublic')
        var.get('EC').get('prototype').put('keyFromPublic', PyJs_keyFromPublic_2363_)
        @Js
        def PyJs_genKeyPair_2364_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments, 'genKeyPair':PyJs_genKeyPair_2364_}, var)
            var.registers(['options', 'priv', 'ns2', 'drbg', 'bytes'])
            if var.get('options').neg():
                var.put('options', Js({}))
            def PyJs_LONG_2365_(var=var):
                return var.get('HmacDRBG').create(Js({'hash':var.get(u"this").get('hash'),'pers':var.get('options').get('pers'),'persEnc':(var.get('options').get('persEnc') or Js('utf8')),'entropy':(var.get('options').get('entropy') or var.get('rand')(var.get(u"this").get('hash').get('hmacStrength'))),'entropyEnc':((var.get('options').get('entropy') and var.get('options').get('entropyEnc')) or Js('utf8')),'nonce':var.get(u"this").get('n').callprop('toArray')}))
            var.put('drbg', PyJs_LONG_2365_())
            var.put('bytes', var.get(u"this").get('n').callprop('byteLength'))
            var.put('ns2', var.get(u"this").get('n').callprop('sub', var.get('BN').create(Js(2.0))))
            while 1:
                var.put('priv', var.get('BN').create(var.get('drbg').callprop('generate', var.get('bytes'))))
                if (var.get('priv').callprop('cmp', var.get('ns2'))>Js(0.0)):
                    continue
                var.get('priv').callprop('iaddn', Js(1.0))
                return var.get(u"this").callprop('keyFromPrivate', var.get('priv'))
                if not Js(True):
                    break
        PyJs_genKeyPair_2364_._set_name('genKeyPair')
        var.get('EC').get('prototype').put('genKeyPair', PyJs_genKeyPair_2364_)
        @Js
        def PyJs_truncateToN_2366_(msg, truncOnly, this, arguments, var=var):
            var = Scope({'msg':msg, 'truncOnly':truncOnly, 'this':this, 'arguments':arguments, 'truncateToN':PyJs_truncateToN_2366_}, var)
            var.registers(['delta', 'msg', 'truncOnly'])
            var.put('delta', ((var.get('msg').callprop('byteLength')*Js(8.0))-var.get(u"this").get('n').callprop('bitLength')))
            if (var.get('delta')>Js(0.0)):
                var.put('msg', var.get('msg').callprop('ushrn', var.get('delta')))
            if (var.get('truncOnly').neg() and (var.get('msg').callprop('cmp', var.get(u"this").get('n'))>=Js(0.0))):
                return var.get('msg').callprop('sub', var.get(u"this").get('n'))
            else:
                return var.get('msg')
        PyJs_truncateToN_2366_._set_name('truncateToN')
        var.get('EC').get('prototype').put('_truncateToN', PyJs_truncateToN_2366_)
        @Js
        def PyJs_sign_2367_(msg, key, enc, options, this, arguments, var=var):
            var = Scope({'msg':msg, 'key':key, 'enc':enc, 'options':options, 'this':this, 'arguments':arguments, 'sign':PyJs_sign_2367_}, var)
            var.registers(['options', 's', 'r', 'msg', 'kpX', 'k', 'recoveryParam', 'drbg', 'enc', 'kp', 'key', 'bkey', 'iter', 'nonce', 'ns1', 'bytes'])
            if _seq((Js('undefined') if _seq(var.get('enc',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('enc'))),Js('object')):
                var.put('options', var.get('enc'))
                var.put('enc', var.get(u"null"))
            if var.get('options').neg():
                var.put('options', Js({}))
            var.put('key', var.get(u"this").callprop('keyFromPrivate', var.get('key'), var.get('enc')))
            var.put('msg', var.get(u"this").callprop('_truncateToN', var.get('BN').create(var.get('msg'), Js(16.0))))
            var.put('bytes', var.get(u"this").get('n').callprop('byteLength'))
            var.put('bkey', var.get('key').callprop('getPrivate').callprop('toArray', Js('be'), var.get('bytes')))
            var.put('nonce', var.get('msg').callprop('toArray', Js('be'), var.get('bytes')))
            var.put('drbg', var.get('HmacDRBG').create(Js({'hash':var.get(u"this").get('hash'),'entropy':var.get('bkey'),'nonce':var.get('nonce'),'pers':var.get('options').get('pers'),'persEnc':(var.get('options').get('persEnc') or Js('utf8'))})))
            var.put('ns1', var.get(u"this").get('n').callprop('sub', var.get('BN').create(Js(1.0))))
            #for JS loop
            var.put('iter', Js(0.0))
            while Js(True):
                try:
                    var.put('k', (var.get('options').callprop('k', var.get('iter')) if var.get('options').get('k') else var.get('BN').create(var.get('drbg').callprop('generate', var.get(u"this").get('n').callprop('byteLength')))))
                    var.put('k', var.get(u"this").callprop('_truncateToN', var.get('k'), Js(True)))
                    if ((var.get('k').callprop('cmpn', Js(1.0))<=Js(0.0)) or (var.get('k').callprop('cmp', var.get('ns1'))>=Js(0.0))):
                        continue
                    var.put('kp', var.get(u"this").get('g').callprop('mul', var.get('k')))
                    if var.get('kp').callprop('isInfinity'):
                        continue
                    var.put('kpX', var.get('kp').callprop('getX'))
                    var.put('r', var.get('kpX').callprop('umod', var.get(u"this").get('n')))
                    if _seq(var.get('r').callprop('cmpn', Js(0.0)),Js(0.0)):
                        continue
                    var.put('s', var.get('k').callprop('invm', var.get(u"this").get('n')).callprop('mul', var.get('r').callprop('mul', var.get('key').callprop('getPrivate')).callprop('iadd', var.get('msg'))))
                    var.put('s', var.get('s').callprop('umod', var.get(u"this").get('n')))
                    if _seq(var.get('s').callprop('cmpn', Js(0.0)),Js(0.0)):
                        continue
                    var.put('recoveryParam', ((Js(1.0) if var.get('kp').callprop('getY').callprop('isOdd') else Js(0.0))|(Js(2.0) if PyJsStrictNeq(var.get('kpX').callprop('cmp', var.get('r')),Js(0.0)) else Js(0.0))))
                    if (var.get('options').get('canonical') and (var.get('s').callprop('cmp', var.get(u"this").get('nh'))>Js(0.0))):
                        var.put('s', var.get(u"this").get('n').callprop('sub', var.get('s')))
                        var.put('recoveryParam', Js(1.0), '^')
                    return var.get('Signature').create(Js({'r':var.get('r'),'s':var.get('s'),'recoveryParam':var.get('recoveryParam')}))
                finally:
                        (var.put('iter',Js(var.get('iter').to_number())+Js(1))-Js(1))
        PyJs_sign_2367_._set_name('sign')
        var.get('EC').get('prototype').put('sign', PyJs_sign_2367_)
        @Js
        def PyJs_verify_2368_(msg, signature, key, enc, this, arguments, var=var):
            var = Scope({'msg':msg, 'signature':signature, 'key':key, 'enc':enc, 'this':this, 'arguments':arguments, 'verify':PyJs_verify_2368_}, var)
            var.registers(['r', 'u2', 'u1', 'msg', 'p', 'key', 'enc', 'sinv', 'signature', 's'])
            var.put('msg', var.get(u"this").callprop('_truncateToN', var.get('BN').create(var.get('msg'), Js(16.0))))
            var.put('key', var.get(u"this").callprop('keyFromPublic', var.get('key'), var.get('enc')))
            var.put('signature', var.get('Signature').create(var.get('signature'), Js('hex')))
            var.put('r', var.get('signature').get('r'))
            var.put('s', var.get('signature').get('s'))
            if ((var.get('r').callprop('cmpn', Js(1.0))<Js(0.0)) or (var.get('r').callprop('cmp', var.get(u"this").get('n'))>=Js(0.0))):
                return Js(False)
            if ((var.get('s').callprop('cmpn', Js(1.0))<Js(0.0)) or (var.get('s').callprop('cmp', var.get(u"this").get('n'))>=Js(0.0))):
                return Js(False)
            var.put('sinv', var.get('s').callprop('invm', var.get(u"this").get('n')))
            var.put('u1', var.get('sinv').callprop('mul', var.get('msg')).callprop('umod', var.get(u"this").get('n')))
            var.put('u2', var.get('sinv').callprop('mul', var.get('r')).callprop('umod', var.get(u"this").get('n')))
            if var.get(u"this").get('curve').get('_maxwellTrick').neg():
                var.put('p', var.get(u"this").get('g').callprop('mulAdd', var.get('u1'), var.get('key').callprop('getPublic'), var.get('u2')))
                if var.get('p').callprop('isInfinity'):
                    return Js(False)
                return _seq(var.get('p').callprop('getX').callprop('umod', var.get(u"this").get('n')).callprop('cmp', var.get('r')),Js(0.0))
            var.put('p', var.get(u"this").get('g').callprop('jmulAdd', var.get('u1'), var.get('key').callprop('getPublic'), var.get('u2')))
            if var.get('p').callprop('isInfinity'):
                return Js(False)
            return var.get('p').callprop('eqXToP', var.get('r'))
        PyJs_verify_2368_._set_name('verify')
        var.get('EC').get('prototype').put('verify', PyJs_verify_2368_)
        @Js
        def PyJs_anonymous_2369_(msg, signature, j, enc, this, arguments, var=var):
            var = Scope({'msg':msg, 'signature':signature, 'j':j, 'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['r', 'signature', 'j', 'e', 's2', 'msg', 'isYOdd', 'n', 's1', 'isSecondKey', 'enc', 'rInv', 's'])
            var.get('assert')(_seq((Js(3.0)&var.get('j')),var.get('j')), Js('The recovery param is more than two bits'))
            var.put('signature', var.get('Signature').create(var.get('signature'), var.get('enc')))
            var.put('n', var.get(u"this").get('n'))
            var.put('e', var.get('BN').create(var.get('msg')))
            var.put('r', var.get('signature').get('r'))
            var.put('s', var.get('signature').get('s'))
            var.put('isYOdd', (var.get('j')&Js(1.0)))
            var.put('isSecondKey', (var.get('j')>>Js(1.0)))
            if ((var.get('r').callprop('cmp', var.get(u"this").get('curve').get('p').callprop('umod', var.get(u"this").get('curve').get('n')))>=Js(0.0)) and var.get('isSecondKey')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Unable to find sencond key candinate')))
                raise PyJsTempException
            if var.get('isSecondKey'):
                var.put('r', var.get(u"this").get('curve').callprop('pointFromX', var.get('r').callprop('add', var.get(u"this").get('curve').get('n')), var.get('isYOdd')))
            else:
                var.put('r', var.get(u"this").get('curve').callprop('pointFromX', var.get('r'), var.get('isYOdd')))
            var.put('rInv', var.get('signature').get('r').callprop('invm', var.get('n')))
            var.put('s1', var.get('n').callprop('sub', var.get('e')).callprop('mul', var.get('rInv')).callprop('umod', var.get('n')))
            var.put('s2', var.get('s').callprop('mul', var.get('rInv')).callprop('umod', var.get('n')))
            return var.get(u"this").get('g').callprop('mulAdd', var.get('s1'), var.get('r'), var.get('s2'))
        PyJs_anonymous_2369_._set_name('anonymous')
        var.get('EC').get('prototype').put('recoverPubKey', PyJs_anonymous_2369_)
        @Js
        def PyJs_anonymous_2370_(e, signature, Q, enc, this, arguments, var=var):
            var = Scope({'e':e, 'signature':signature, 'Q':Q, 'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['Q', 'i', 'e', 'signature', 'Qprime', 'enc'])
            var.put('signature', var.get('Signature').create(var.get('signature'), var.get('enc')))
            if PyJsStrictNeq(var.get('signature').get('recoveryParam'),var.get(u"null")):
                return var.get('signature').get('recoveryParam')
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(4.0)):
                try:
                    pass
                    try:
                        var.put('Qprime', var.get(u"this").callprop('recoverPubKey', var.get('e'), var.get('signature'), var.get('i')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_41822911 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            continue
                        finally:
                            if PyJsHolder_65_41822911 is not None:
                                var.own['e'] = PyJsHolder_65_41822911
                            else:
                                del var.own['e']
                            del PyJsHolder_65_41822911
                    if var.get('Qprime').callprop('eq', var.get('Q')):
                        return var.get('i')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Unable to find valid recovery factor')))
            raise PyJsTempException
        PyJs_anonymous_2370_._set_name('anonymous')
        var.get('EC').get('prototype').put('getKeyRecoveryParam', PyJs_anonymous_2370_)
    PyJs_anonymous_2360_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2371_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['KeyPair', 'exports', 'require', 'module', 'BN', 'utils', 'assert'])
        @Js
        def PyJsHoisted_KeyPair_(ec, options, this, arguments, var=var):
            var = Scope({'ec':ec, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'ec'])
            var.get(u"this").put('ec', var.get('ec'))
            var.get(u"this").put('priv', var.get(u"null"))
            var.get(u"this").put('pub', var.get(u"null"))
            if var.get('options').get('priv'):
                var.get(u"this").callprop('_importPrivate', var.get('options').get('priv'), var.get('options').get('privEnc'))
            if var.get('options').get('pub'):
                var.get(u"this").callprop('_importPublic', var.get('options').get('pub'), var.get('options').get('pubEnc'))
        PyJsHoisted_KeyPair_.func_name = 'KeyPair'
        var.put('KeyPair', PyJsHoisted_KeyPair_)
        Js('use strict')
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('assert', var.get('utils').get('assert'))
        pass
        var.get('module').put('exports', var.get('KeyPair'))
        @Js
        def PyJs_fromPublic_2372_(ec, pub, enc, this, arguments, var=var):
            var = Scope({'ec':ec, 'pub':pub, 'enc':enc, 'this':this, 'arguments':arguments, 'fromPublic':PyJs_fromPublic_2372_}, var)
            var.registers(['pub', 'enc', 'ec'])
            if var.get('pub').instanceof(var.get('KeyPair')):
                return var.get('pub')
            return var.get('KeyPair').create(var.get('ec'), Js({'pub':var.get('pub'),'pubEnc':var.get('enc')}))
        PyJs_fromPublic_2372_._set_name('fromPublic')
        var.get('KeyPair').put('fromPublic', PyJs_fromPublic_2372_)
        @Js
        def PyJs_fromPrivate_2373_(ec, priv, enc, this, arguments, var=var):
            var = Scope({'ec':ec, 'priv':priv, 'enc':enc, 'this':this, 'arguments':arguments, 'fromPrivate':PyJs_fromPrivate_2373_}, var)
            var.registers(['priv', 'enc', 'ec'])
            if var.get('priv').instanceof(var.get('KeyPair')):
                return var.get('priv')
            return var.get('KeyPair').create(var.get('ec'), Js({'priv':var.get('priv'),'privEnc':var.get('enc')}))
        PyJs_fromPrivate_2373_._set_name('fromPrivate')
        var.get('KeyPair').put('fromPrivate', PyJs_fromPrivate_2373_)
        @Js
        def PyJs_validate_2374_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'validate':PyJs_validate_2374_}, var)
            var.registers(['pub'])
            var.put('pub', var.get(u"this").callprop('getPublic'))
            if var.get('pub').callprop('isInfinity'):
                return Js({'result':Js(False),'reason':Js('Invalid public key')})
            if var.get('pub').callprop('validate').neg():
                return Js({'result':Js(False),'reason':Js('Public key is not a point')})
            if var.get('pub').callprop('mul', var.get(u"this").get('ec').get('curve').get('n')).callprop('isInfinity').neg():
                return Js({'result':Js(False),'reason':Js('Public key * N != O')})
            return Js({'result':Js(True),'reason':var.get(u"null")})
        PyJs_validate_2374_._set_name('validate')
        var.get('KeyPair').get('prototype').put('validate', PyJs_validate_2374_)
        @Js
        def PyJs_getPublic_2375_(compact, enc, this, arguments, var=var):
            var = Scope({'compact':compact, 'enc':enc, 'this':this, 'arguments':arguments, 'getPublic':PyJs_getPublic_2375_}, var)
            var.registers(['compact', 'enc'])
            if _seq(var.get('compact',throw=False).typeof(),Js('string')):
                var.put('enc', var.get('compact'))
                var.put('compact', var.get(u"null"))
            if var.get(u"this").get('pub').neg():
                var.get(u"this").put('pub', var.get(u"this").get('ec').get('g').callprop('mul', var.get(u"this").get('priv')))
            if var.get('enc').neg():
                return var.get(u"this").get('pub')
            return var.get(u"this").get('pub').callprop('encode', var.get('enc'), var.get('compact'))
        PyJs_getPublic_2375_._set_name('getPublic')
        var.get('KeyPair').get('prototype').put('getPublic', PyJs_getPublic_2375_)
        @Js
        def PyJs_getPrivate_2376_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'getPrivate':PyJs_getPrivate_2376_}, var)
            var.registers(['enc'])
            if _seq(var.get('enc'),Js('hex')):
                return var.get(u"this").get('priv').callprop('toString', Js(16.0), Js(2.0))
            else:
                return var.get(u"this").get('priv')
        PyJs_getPrivate_2376_._set_name('getPrivate')
        var.get('KeyPair').get('prototype').put('getPrivate', PyJs_getPrivate_2376_)
        @Js
        def PyJs__importPrivate_2377_(key, enc, this, arguments, var=var):
            var = Scope({'key':key, 'enc':enc, 'this':this, 'arguments':arguments, '_importPrivate':PyJs__importPrivate_2377_}, var)
            var.registers(['key', 'enc'])
            var.get(u"this").put('priv', var.get('BN').create(var.get('key'), (var.get('enc') or Js(16.0))))
            var.get(u"this").put('priv', var.get(u"this").get('priv').callprop('umod', var.get(u"this").get('ec').get('curve').get('n')))
        PyJs__importPrivate_2377_._set_name('_importPrivate')
        var.get('KeyPair').get('prototype').put('_importPrivate', PyJs__importPrivate_2377_)
        @Js
        def PyJs__importPublic_2378_(key, enc, this, arguments, var=var):
            var = Scope({'key':key, 'enc':enc, 'this':this, 'arguments':arguments, '_importPublic':PyJs__importPublic_2378_}, var)
            var.registers(['key', 'enc'])
            if (var.get('key').get('x') or var.get('key').get('y')):
                if _seq(var.get(u"this").get('ec').get('curve').get('type'),Js('mont')):
                    var.get('assert')(var.get('key').get('x'), Js('Need x coordinate'))
                else:
                    if (_seq(var.get(u"this").get('ec').get('curve').get('type'),Js('short')) or _seq(var.get(u"this").get('ec').get('curve').get('type'),Js('edwards'))):
                        var.get('assert')((var.get('key').get('x') and var.get('key').get('y')), Js('Need both x and y coordinate'))
                var.get(u"this").put('pub', var.get(u"this").get('ec').get('curve').callprop('point', var.get('key').get('x'), var.get('key').get('y')))
                return var.get('undefined')
            var.get(u"this").put('pub', var.get(u"this").get('ec').get('curve').callprop('decodePoint', var.get('key'), var.get('enc')))
        PyJs__importPublic_2378_._set_name('_importPublic')
        var.get('KeyPair').get('prototype').put('_importPublic', PyJs__importPublic_2378_)
        @Js
        def PyJs_derive_2379_(pub, this, arguments, var=var):
            var = Scope({'pub':pub, 'this':this, 'arguments':arguments, 'derive':PyJs_derive_2379_}, var)
            var.registers(['pub'])
            return var.get('pub').callprop('mul', var.get(u"this").get('priv')).callprop('getX')
        PyJs_derive_2379_._set_name('derive')
        var.get('KeyPair').get('prototype').put('derive', PyJs_derive_2379_)
        @Js
        def PyJs_sign_2380_(msg, enc, options, this, arguments, var=var):
            var = Scope({'msg':msg, 'enc':enc, 'options':options, 'this':this, 'arguments':arguments, 'sign':PyJs_sign_2380_}, var)
            var.registers(['options', 'msg', 'enc'])
            return var.get(u"this").get('ec').callprop('sign', var.get('msg'), var.get(u"this"), var.get('enc'), var.get('options'))
        PyJs_sign_2380_._set_name('sign')
        var.get('KeyPair').get('prototype').put('sign', PyJs_sign_2380_)
        @Js
        def PyJs_verify_2381_(msg, signature, this, arguments, var=var):
            var = Scope({'msg':msg, 'signature':signature, 'this':this, 'arguments':arguments, 'verify':PyJs_verify_2381_}, var)
            var.registers(['msg', 'signature'])
            return var.get(u"this").get('ec').callprop('verify', var.get('msg'), var.get('signature'), var.get(u"this"))
        PyJs_verify_2381_._set_name('verify')
        var.get('KeyPair').get('prototype').put('verify', PyJs_verify_2381_)
        @Js
        def PyJs_inspect_2382_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'inspect':PyJs_inspect_2382_}, var)
            var.registers([])
            return ((((Js('<Key priv: ')+(var.get(u"this").get('priv') and var.get(u"this").get('priv').callprop('toString', Js(16.0), Js(2.0))))+Js(' pub: '))+(var.get(u"this").get('pub') and var.get(u"this").get('pub').callprop('inspect')))+Js(' >'))
        PyJs_inspect_2382_._set_name('inspect')
        var.get('KeyPair').get('prototype').put('inspect', PyJs_inspect_2382_)
    PyJs_anonymous_2371_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2383_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Signature', 'constructLength', 'BN', 'module', 'getLength', 'Position', 'utils', 'assert', 'rmPadding'])
        @Js
        def PyJsHoisted_Signature_(options, enc, this, arguments, var=var):
            var = Scope({'options':options, 'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'enc'])
            if var.get('options').instanceof(var.get('Signature')):
                return var.get('options')
            if var.get(u"this").callprop('_importDER', var.get('options'), var.get('enc')):
                return var.get('undefined')
            var.get('assert')((var.get('options').get('r') and var.get('options').get('s')), Js('Signature without r or s'))
            var.get(u"this").put('r', var.get('BN').create(var.get('options').get('r'), Js(16.0)))
            var.get(u"this").put('s', var.get('BN').create(var.get('options').get('s'), Js(16.0)))
            if _seq(var.get('options').get('recoveryParam'),var.get('undefined')):
                var.get(u"this").put('recoveryParam', var.get(u"null"))
            else:
                var.get(u"this").put('recoveryParam', var.get('options').get('recoveryParam'))
        PyJsHoisted_Signature_.func_name = 'Signature'
        var.put('Signature', PyJsHoisted_Signature_)
        @Js
        def PyJsHoisted_Position_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('place', Js(0.0))
        PyJsHoisted_Position_.func_name = 'Position'
        var.put('Position', PyJsHoisted_Position_)
        @Js
        def PyJsHoisted_getLength_(buf, p, this, arguments, var=var):
            var = Scope({'buf':buf, 'p':p, 'this':this, 'arguments':arguments}, var)
            var.registers(['octetLen', 'i', 'off', 'buf', 'initial', 'p', 'val'])
            var.put('initial', var.get('buf').get((var.get('p').put('place',Js(var.get('p').get('place').to_number())+Js(1))-Js(1))))
            if (var.get('initial')&Js(128)).neg():
                return var.get('initial')
            var.put('octetLen', (var.get('initial')&Js(15)))
            if (_seq(var.get('octetLen'),Js(0.0)) or (var.get('octetLen')>Js(4.0))):
                return Js(False)
            var.put('val', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('off', var.get('p').get('place'))
            while (var.get('i')<var.get('octetLen')):
                try:
                    var.put('val', Js(8.0), '<<')
                    var.put('val', var.get('buf').get(var.get('off')), '|')
                    var.put('val', Js(0.0), '>>>')
                finally:
                        PyJsComma((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)),(var.put('off',Js(var.get('off').to_number())+Js(1))-Js(1)))
            if (var.get('val')<=Js(127)):
                return Js(False)
            var.get('p').put('place', var.get('off'))
            return var.get('val')
        PyJsHoisted_getLength_.func_name = 'getLength'
        var.put('getLength', PyJsHoisted_getLength_)
        @Js
        def PyJsHoisted_rmPadding_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'buf', 'len'])
            var.put('i', Js(0.0))
            var.put('len', (var.get('buf').get('length')-Js(1.0)))
            while ((var.get('buf').get(var.get('i')).neg() and (var.get('buf').get((var.get('i')+Js(1.0)))&Js(128)).neg()) and (var.get('i')<var.get('len'))):
                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if _seq(var.get('i'),Js(0.0)):
                return var.get('buf')
            return var.get('buf').callprop('slice', var.get('i'))
        PyJsHoisted_rmPadding_.func_name = 'rmPadding'
        var.put('rmPadding', PyJsHoisted_rmPadding_)
        @Js
        def PyJsHoisted_constructLength_(arr, len, this, arguments, var=var):
            var = Scope({'arr':arr, 'len':len, 'this':this, 'arguments':arguments}, var)
            var.registers(['octets', 'len', 'arr'])
            if (var.get('len')<Js(128)):
                var.get('arr').callprop('push', var.get('len'))
                return var.get('undefined')
            var.put('octets', (Js(1.0)+PyJsBshift((var.get('Math').callprop('log', var.get('len'))/var.get('Math').get('LN2')),Js(3.0))))
            var.get('arr').callprop('push', (var.get('octets')|Js(128)))
            while var.put('octets',Js(var.get('octets').to_number())-Js(1)):
                var.get('arr').callprop('push', (PyJsBshift(var.get('len'),(var.get('octets')<<Js(3.0)))&Js(255)))
            var.get('arr').callprop('push', var.get('len'))
        PyJsHoisted_constructLength_.func_name = 'constructLength'
        var.put('constructLength', PyJsHoisted_constructLength_)
        Js('use strict')
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('assert', var.get('utils').get('assert'))
        pass
        var.get('module').put('exports', var.get('Signature'))
        pass
        pass
        pass
        @Js
        def PyJs__importDER_2384_(data, enc, this, arguments, var=var):
            var = Scope({'data':data, 'enc':enc, 'this':this, 'arguments':arguments, '_importDER':PyJs__importDER_2384_}, var)
            var.registers(['r', 'len', 'slen', 'p', 'rlen', 'data', 'enc', 's'])
            var.put('data', var.get('utils').callprop('toArray', var.get('data'), var.get('enc')))
            var.put('p', var.get('Position').create())
            if PyJsStrictNeq(var.get('data').get((var.get('p').put('place',Js(var.get('p').get('place').to_number())+Js(1))-Js(1))),Js(48)):
                return Js(False)
            var.put('len', var.get('getLength')(var.get('data'), var.get('p')))
            if _seq(var.get('len'),Js(False)):
                return Js(False)
            if PyJsStrictNeq((var.get('len')+var.get('p').get('place')),var.get('data').get('length')):
                return Js(False)
            if PyJsStrictNeq(var.get('data').get((var.get('p').put('place',Js(var.get('p').get('place').to_number())+Js(1))-Js(1))),Js(2)):
                return Js(False)
            var.put('rlen', var.get('getLength')(var.get('data'), var.get('p')))
            if _seq(var.get('rlen'),Js(False)):
                return Js(False)
            var.put('r', var.get('data').callprop('slice', var.get('p').get('place'), (var.get('rlen')+var.get('p').get('place'))))
            var.get('p').put('place', var.get('rlen'), '+')
            if PyJsStrictNeq(var.get('data').get((var.get('p').put('place',Js(var.get('p').get('place').to_number())+Js(1))-Js(1))),Js(2)):
                return Js(False)
            var.put('slen', var.get('getLength')(var.get('data'), var.get('p')))
            if _seq(var.get('slen'),Js(False)):
                return Js(False)
            if PyJsStrictNeq(var.get('data').get('length'),(var.get('slen')+var.get('p').get('place'))):
                return Js(False)
            var.put('s', var.get('data').callprop('slice', var.get('p').get('place'), (var.get('slen')+var.get('p').get('place'))))
            if _seq(var.get('r').get('0'),Js(0.0)):
                if (var.get('r').get('1')&Js(128)):
                    var.put('r', var.get('r').callprop('slice', Js(1.0)))
                else:
                    return Js(False)
            if _seq(var.get('s').get('0'),Js(0.0)):
                if (var.get('s').get('1')&Js(128)):
                    var.put('s', var.get('s').callprop('slice', Js(1.0)))
                else:
                    return Js(False)
            var.get(u"this").put('r', var.get('BN').create(var.get('r')))
            var.get(u"this").put('s', var.get('BN').create(var.get('s')))
            var.get(u"this").put('recoveryParam', var.get(u"null"))
            return Js(True)
        PyJs__importDER_2384_._set_name('_importDER')
        var.get('Signature').get('prototype').put('_importDER', PyJs__importDER_2384_)
        pass
        @Js
        def PyJs_toDER_2385_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'toDER':PyJs_toDER_2385_}, var)
            var.registers(['s', 'r', 'arr', 'enc', 'backHalf', 'res'])
            var.put('r', var.get(u"this").get('r').callprop('toArray'))
            var.put('s', var.get(u"this").get('s').callprop('toArray'))
            if (var.get('r').get('0')&Js(128)):
                var.put('r', Js([Js(0.0)]).callprop('concat', var.get('r')))
            if (var.get('s').get('0')&Js(128)):
                var.put('s', Js([Js(0.0)]).callprop('concat', var.get('s')))
            var.put('r', var.get('rmPadding')(var.get('r')))
            var.put('s', var.get('rmPadding')(var.get('s')))
            while (var.get('s').get('0').neg() and (var.get('s').get('1')&Js(128)).neg()):
                var.put('s', var.get('s').callprop('slice', Js(1.0)))
            var.put('arr', Js([Js(2)]))
            var.get('constructLength')(var.get('arr'), var.get('r').get('length'))
            var.put('arr', var.get('arr').callprop('concat', var.get('r')))
            var.get('arr').callprop('push', Js(2))
            var.get('constructLength')(var.get('arr'), var.get('s').get('length'))
            var.put('backHalf', var.get('arr').callprop('concat', var.get('s')))
            var.put('res', Js([Js(48)]))
            var.get('constructLength')(var.get('res'), var.get('backHalf').get('length'))
            var.put('res', var.get('res').callprop('concat', var.get('backHalf')))
            return var.get('utils').callprop('encode', var.get('res'), var.get('enc'))
        PyJs_toDER_2385_._set_name('toDER')
        var.get('Signature').get('prototype').put('toDER', PyJs_toDER_2385_)
    PyJs_anonymous_2383_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2386_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['KeyPair', 'exports', 'require', 'parseBytes', 'Signature', 'hash', 'module', 'assert', 'EDDSA', 'utils', 'curves'])
        @Js
        def PyJsHoisted_EDDSA_(curve, this, arguments, var=var):
            var = Scope({'curve':curve, 'this':this, 'arguments':arguments}, var)
            var.registers(['curve'])
            var.get('assert')(_seq(var.get('curve'),Js('ed25519')), Js('only tested with ed25519 so far'))
            if var.get(u"this").instanceof(var.get('EDDSA')).neg():
                return var.get('EDDSA').create(var.get('curve'))
            var.put('curve', var.get('curves').get(var.get('curve')).get('curve'))
            var.get(u"this").put('curve', var.get('curve'))
            var.get(u"this").put('g', var.get('curve').get('g'))
            var.get(u"this").get('g').callprop('precompute', (var.get('curve').get('n').callprop('bitLength')+Js(1.0)))
            var.get(u"this").put('pointClass', var.get('curve').callprop('point').get('constructor'))
            var.get(u"this").put('encodingLength', var.get('Math').callprop('ceil', (var.get('curve').get('n').callprop('bitLength')/Js(8.0))))
            var.get(u"this").put('hash', var.get('hash').get('sha512'))
        PyJsHoisted_EDDSA_.func_name = 'EDDSA'
        var.put('EDDSA', PyJsHoisted_EDDSA_)
        Js('use strict')
        var.put('hash', var.get('require')(Js('hash.js')))
        var.put('curves', var.get('require')(Js('../curves')))
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('assert', var.get('utils').get('assert'))
        var.put('parseBytes', var.get('utils').get('parseBytes'))
        var.put('KeyPair', var.get('require')(Js('./key')))
        var.put('Signature', var.get('require')(Js('./signature')))
        pass
        var.get('module').put('exports', var.get('EDDSA'))
        @Js
        def PyJs_sign_2387_(message, secret, this, arguments, var=var):
            var = Scope({'message':message, 'secret':secret, 'this':this, 'arguments':arguments, 'sign':PyJs_sign_2387_}, var)
            var.registers(['S', 'r', 'R', 's_', 'secret', 'key', 'Rencoded', 'message'])
            var.put('message', var.get('parseBytes')(var.get('message')))
            var.put('key', var.get(u"this").callprop('keyFromSecret', var.get('secret')))
            var.put('r', var.get(u"this").callprop('hashInt', var.get('key').callprop('messagePrefix'), var.get('message')))
            var.put('R', var.get(u"this").get('g').callprop('mul', var.get('r')))
            var.put('Rencoded', var.get(u"this").callprop('encodePoint', var.get('R')))
            var.put('s_', var.get(u"this").callprop('hashInt', var.get('Rencoded'), var.get('key').callprop('pubBytes'), var.get('message')).callprop('mul', var.get('key').callprop('priv')))
            var.put('S', var.get('r').callprop('add', var.get('s_')).callprop('umod', var.get(u"this").get('curve').get('n')))
            return var.get(u"this").callprop('makeSignature', Js({'R':var.get('R'),'S':var.get('S'),'Rencoded':var.get('Rencoded')}))
        PyJs_sign_2387_._set_name('sign')
        var.get('EDDSA').get('prototype').put('sign', PyJs_sign_2387_)
        @Js
        def PyJs_verify_2388_(message, sig, pub, this, arguments, var=var):
            var = Scope({'message':message, 'sig':sig, 'pub':pub, 'this':this, 'arguments':arguments, 'verify':PyJs_verify_2388_}, var)
            var.registers(['sig', 'h', 'RplusAh', 'pub', 'key', 'SG', 'message'])
            var.put('message', var.get('parseBytes')(var.get('message')))
            var.put('sig', var.get(u"this").callprop('makeSignature', var.get('sig')))
            var.put('key', var.get(u"this").callprop('keyFromPublic', var.get('pub')))
            var.put('h', var.get(u"this").callprop('hashInt', var.get('sig').callprop('Rencoded'), var.get('key').callprop('pubBytes'), var.get('message')))
            var.put('SG', var.get(u"this").get('g').callprop('mul', var.get('sig').callprop('S')))
            var.put('RplusAh', var.get('sig').callprop('R').callprop('add', var.get('key').callprop('pub').callprop('mul', var.get('h'))))
            return var.get('RplusAh').callprop('eq', var.get('SG'))
        PyJs_verify_2388_._set_name('verify')
        var.get('EDDSA').get('prototype').put('verify', PyJs_verify_2388_)
        @Js
        def PyJs_hashInt_2389_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'hashInt':PyJs_hashInt_2389_}, var)
            var.registers(['i', 'hash'])
            var.put('hash', var.get(u"this").callprop('hash'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.get('hash').callprop('update', var.get('arguments').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('utils').callprop('intFromLE', var.get('hash').callprop('digest')).callprop('umod', var.get(u"this").get('curve').get('n'))
        PyJs_hashInt_2389_._set_name('hashInt')
        var.get('EDDSA').get('prototype').put('hashInt', PyJs_hashInt_2389_)
        @Js
        def PyJs_keyFromPublic_2390_(pub, this, arguments, var=var):
            var = Scope({'pub':pub, 'this':this, 'arguments':arguments, 'keyFromPublic':PyJs_keyFromPublic_2390_}, var)
            var.registers(['pub'])
            return var.get('KeyPair').callprop('fromPublic', var.get(u"this"), var.get('pub'))
        PyJs_keyFromPublic_2390_._set_name('keyFromPublic')
        var.get('EDDSA').get('prototype').put('keyFromPublic', PyJs_keyFromPublic_2390_)
        @Js
        def PyJs_keyFromSecret_2391_(secret, this, arguments, var=var):
            var = Scope({'secret':secret, 'this':this, 'arguments':arguments, 'keyFromSecret':PyJs_keyFromSecret_2391_}, var)
            var.registers(['secret'])
            return var.get('KeyPair').callprop('fromSecret', var.get(u"this"), var.get('secret'))
        PyJs_keyFromSecret_2391_._set_name('keyFromSecret')
        var.get('EDDSA').get('prototype').put('keyFromSecret', PyJs_keyFromSecret_2391_)
        @Js
        def PyJs_makeSignature_2392_(sig, this, arguments, var=var):
            var = Scope({'sig':sig, 'this':this, 'arguments':arguments, 'makeSignature':PyJs_makeSignature_2392_}, var)
            var.registers(['sig'])
            if var.get('sig').instanceof(var.get('Signature')):
                return var.get('sig')
            return var.get('Signature').create(var.get(u"this"), var.get('sig'))
        PyJs_makeSignature_2392_._set_name('makeSignature')
        var.get('EDDSA').get('prototype').put('makeSignature', PyJs_makeSignature_2392_)
        @Js
        def PyJs_encodePoint_2393_(point, this, arguments, var=var):
            var = Scope({'point':point, 'this':this, 'arguments':arguments, 'encodePoint':PyJs_encodePoint_2393_}, var)
            var.registers(['point', 'enc'])
            var.put('enc', var.get('point').callprop('getY').callprop('toArray', Js('le'), var.get(u"this").get('encodingLength')))
            var.get('enc').put((var.get(u"this").get('encodingLength')-Js(1.0)), (Js(128) if var.get('point').callprop('getX').callprop('isOdd') else Js(0.0)), '|')
            return var.get('enc')
        PyJs_encodePoint_2393_._set_name('encodePoint')
        var.get('EDDSA').get('prototype').put('encodePoint', PyJs_encodePoint_2393_)
        @Js
        def PyJs_decodePoint_2394_(bytes, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'this':this, 'arguments':arguments, 'decodePoint':PyJs_decodePoint_2394_}, var)
            var.registers(['y', 'normed', 'xIsOdd', 'lastIx', 'bytes'])
            var.put('bytes', var.get('utils').callprop('parseBytes', var.get('bytes')))
            var.put('lastIx', (var.get('bytes').get('length')-Js(1.0)))
            var.put('normed', var.get('bytes').callprop('slice', Js(0.0), var.get('lastIx')).callprop('concat', (var.get('bytes').get(var.get('lastIx'))&(~Js(128)))))
            var.put('xIsOdd', PyJsStrictNeq((var.get('bytes').get(var.get('lastIx'))&Js(128)),Js(0.0)))
            var.put('y', var.get('utils').callprop('intFromLE', var.get('normed')))
            return var.get(u"this").get('curve').callprop('pointFromY', var.get('y'), var.get('xIsOdd'))
        PyJs_decodePoint_2394_._set_name('decodePoint')
        var.get('EDDSA').get('prototype').put('decodePoint', PyJs_decodePoint_2394_)
        @Js
        def PyJs_encodeInt_2395_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, 'encodeInt':PyJs_encodeInt_2395_}, var)
            var.registers(['num'])
            return var.get('num').callprop('toArray', Js('le'), var.get(u"this").get('encodingLength'))
        PyJs_encodeInt_2395_._set_name('encodeInt')
        var.get('EDDSA').get('prototype').put('encodeInt', PyJs_encodeInt_2395_)
        @Js
        def PyJs_decodeInt_2396_(bytes, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'this':this, 'arguments':arguments, 'decodeInt':PyJs_decodeInt_2396_}, var)
            var.registers(['bytes'])
            return var.get('utils').callprop('intFromLE', var.get('bytes'))
        PyJs_decodeInt_2396_._set_name('decodeInt')
        var.get('EDDSA').get('prototype').put('decodeInt', PyJs_decodeInt_2396_)
        @Js
        def PyJs_isPoint_2397_(val, this, arguments, var=var):
            var = Scope({'val':val, 'this':this, 'arguments':arguments, 'isPoint':PyJs_isPoint_2397_}, var)
            var.registers(['val'])
            return var.get('val').instanceof(var.get(u"this").get('pointClass'))
        PyJs_isPoint_2397_._set_name('isPoint')
        var.get('EDDSA').get('prototype').put('isPoint', PyJs_isPoint_2397_)
    PyJs_anonymous_2386_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2398_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['KeyPair', 'exports', 'cachedProperty', 'require', 'parseBytes', 'module', 'utils', 'assert'])
        @Js
        def PyJsHoisted_KeyPair_(eddsa, params, this, arguments, var=var):
            var = Scope({'eddsa':eddsa, 'params':params, 'this':this, 'arguments':arguments}, var)
            var.registers(['eddsa', 'params'])
            var.get(u"this").put('eddsa', var.get('eddsa'))
            var.get(u"this").put('_secret', var.get('parseBytes')(var.get('params').get('secret')))
            if var.get('eddsa').callprop('isPoint', var.get('params').get('pub')):
                var.get(u"this").put('_pub', var.get('params').get('pub'))
            else:
                var.get(u"this").put('_pubBytes', var.get('parseBytes')(var.get('params').get('pub')))
        PyJsHoisted_KeyPair_.func_name = 'KeyPair'
        var.put('KeyPair', PyJsHoisted_KeyPair_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('assert', var.get('utils').get('assert'))
        var.put('parseBytes', var.get('utils').get('parseBytes'))
        var.put('cachedProperty', var.get('utils').get('cachedProperty'))
        pass
        @Js
        def PyJs_fromPublic_2399_(eddsa, pub, this, arguments, var=var):
            var = Scope({'eddsa':eddsa, 'pub':pub, 'this':this, 'arguments':arguments, 'fromPublic':PyJs_fromPublic_2399_}, var)
            var.registers(['eddsa', 'pub'])
            if var.get('pub').instanceof(var.get('KeyPair')):
                return var.get('pub')
            return var.get('KeyPair').create(var.get('eddsa'), Js({'pub':var.get('pub')}))
        PyJs_fromPublic_2399_._set_name('fromPublic')
        var.get('KeyPair').put('fromPublic', PyJs_fromPublic_2399_)
        @Js
        def PyJs_fromSecret_2400_(eddsa, secret, this, arguments, var=var):
            var = Scope({'eddsa':eddsa, 'secret':secret, 'this':this, 'arguments':arguments, 'fromSecret':PyJs_fromSecret_2400_}, var)
            var.registers(['eddsa', 'secret'])
            if var.get('secret').instanceof(var.get('KeyPair')):
                return var.get('secret')
            return var.get('KeyPair').create(var.get('eddsa'), Js({'secret':var.get('secret')}))
        PyJs_fromSecret_2400_._set_name('fromSecret')
        var.get('KeyPair').put('fromSecret', PyJs_fromSecret_2400_)
        @Js
        def PyJs_secret_2401_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'secret':PyJs_secret_2401_}, var)
            var.registers([])
            return var.get(u"this").get('_secret')
        PyJs_secret_2401_._set_name('secret')
        var.get('KeyPair').get('prototype').put('secret', PyJs_secret_2401_)
        @Js
        def PyJs_pubBytes_2402_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'pubBytes':PyJs_pubBytes_2402_}, var)
            var.registers([])
            return var.get(u"this").get('eddsa').callprop('encodePoint', var.get(u"this").callprop('pub'))
        PyJs_pubBytes_2402_._set_name('pubBytes')
        var.get('cachedProperty')(var.get('KeyPair'), Js('pubBytes'), PyJs_pubBytes_2402_)
        @Js
        def PyJs_pub_2403_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'pub':PyJs_pub_2403_}, var)
            var.registers([])
            if var.get(u"this").get('_pubBytes'):
                return var.get(u"this").get('eddsa').callprop('decodePoint', var.get(u"this").get('_pubBytes'))
            return var.get(u"this").get('eddsa').get('g').callprop('mul', var.get(u"this").callprop('priv'))
        PyJs_pub_2403_._set_name('pub')
        var.get('cachedProperty')(var.get('KeyPair'), Js('pub'), PyJs_pub_2403_)
        @Js
        def PyJs_privBytes_2404_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'privBytes':PyJs_privBytes_2404_}, var)
            var.registers(['eddsa', 'a', 'lastIx', 'hash'])
            var.put('eddsa', var.get(u"this").get('eddsa'))
            var.put('hash', var.get(u"this").callprop('hash'))
            var.put('lastIx', (var.get('eddsa').get('encodingLength')-Js(1.0)))
            var.put('a', var.get('hash').callprop('slice', Js(0.0), var.get('eddsa').get('encodingLength')))
            var.get('a').put('0', Js(248.0), '&')
            var.get('a').put(var.get('lastIx'), Js(127.0), '&')
            var.get('a').put(var.get('lastIx'), Js(64.0), '|')
            return var.get('a')
        PyJs_privBytes_2404_._set_name('privBytes')
        var.get('cachedProperty')(var.get('KeyPair'), Js('privBytes'), PyJs_privBytes_2404_)
        @Js
        def PyJs_priv_2405_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'priv':PyJs_priv_2405_}, var)
            var.registers([])
            return var.get(u"this").get('eddsa').callprop('decodeInt', var.get(u"this").callprop('privBytes'))
        PyJs_priv_2405_._set_name('priv')
        var.get('cachedProperty')(var.get('KeyPair'), Js('priv'), PyJs_priv_2405_)
        @Js
        def PyJs_hash_2406_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'hash':PyJs_hash_2406_}, var)
            var.registers([])
            return var.get(u"this").get('eddsa').callprop('hash').callprop('update', var.get(u"this").callprop('secret')).callprop('digest')
        PyJs_hash_2406_._set_name('hash')
        var.get('cachedProperty')(var.get('KeyPair'), Js('hash'), PyJs_hash_2406_)
        @Js
        def PyJs_messagePrefix_2407_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'messagePrefix':PyJs_messagePrefix_2407_}, var)
            var.registers([])
            return var.get(u"this").callprop('hash').callprop('slice', var.get(u"this").get('eddsa').get('encodingLength'))
        PyJs_messagePrefix_2407_._set_name('messagePrefix')
        var.get('cachedProperty')(var.get('KeyPair'), Js('messagePrefix'), PyJs_messagePrefix_2407_)
        @Js
        def PyJs_sign_2408_(message, this, arguments, var=var):
            var = Scope({'message':message, 'this':this, 'arguments':arguments, 'sign':PyJs_sign_2408_}, var)
            var.registers(['message'])
            var.get('assert')(var.get(u"this").get('_secret'), Js('KeyPair can only verify'))
            return var.get(u"this").get('eddsa').callprop('sign', var.get('message'), var.get(u"this"))
        PyJs_sign_2408_._set_name('sign')
        var.get('KeyPair').get('prototype').put('sign', PyJs_sign_2408_)
        @Js
        def PyJs_verify_2409_(message, sig, this, arguments, var=var):
            var = Scope({'message':message, 'sig':sig, 'this':this, 'arguments':arguments, 'verify':PyJs_verify_2409_}, var)
            var.registers(['message', 'sig'])
            return var.get(u"this").get('eddsa').callprop('verify', var.get('message'), var.get('sig'), var.get(u"this"))
        PyJs_verify_2409_._set_name('verify')
        var.get('KeyPair').get('prototype').put('verify', PyJs_verify_2409_)
        @Js
        def PyJs_getSecret_2410_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'getSecret':PyJs_getSecret_2410_}, var)
            var.registers(['enc'])
            var.get('assert')(var.get(u"this").get('_secret'), Js('KeyPair is public only'))
            return var.get('utils').callprop('encode', var.get(u"this").callprop('secret'), var.get('enc'))
        PyJs_getSecret_2410_._set_name('getSecret')
        var.get('KeyPair').get('prototype').put('getSecret', PyJs_getSecret_2410_)
        @Js
        def PyJs_getPublic_2411_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'getPublic':PyJs_getPublic_2411_}, var)
            var.registers(['enc'])
            return var.get('utils').callprop('encode', var.get(u"this").callprop('pubBytes'), var.get('enc'))
        PyJs_getPublic_2411_._set_name('getPublic')
        var.get('KeyPair').get('prototype').put('getPublic', PyJs_getPublic_2411_)
        var.get('module').put('exports', var.get('KeyPair'))
    PyJs_anonymous_2398_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2412_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'cachedProperty', 'require', 'parseBytes', 'Signature', 'BN', 'module', 'utils', 'assert'])
        @Js
        def PyJsHoisted_Signature_(eddsa, sig, this, arguments, var=var):
            var = Scope({'eddsa':eddsa, 'sig':sig, 'this':this, 'arguments':arguments}, var)
            var.registers(['eddsa', 'sig'])
            var.get(u"this").put('eddsa', var.get('eddsa'))
            if PyJsStrictNeq((Js('undefined') if _seq(var.get('sig',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('sig'))),Js('object')):
                var.put('sig', var.get('parseBytes')(var.get('sig')))
            if var.get('Array').callprop('isArray', var.get('sig')):
                var.put('sig', Js({'R':var.get('sig').callprop('slice', Js(0.0), var.get('eddsa').get('encodingLength')),'S':var.get('sig').callprop('slice', var.get('eddsa').get('encodingLength'))}))
            var.get('assert')((var.get('sig').get('R') and var.get('sig').get('S')), Js('Signature without R or S'))
            if var.get('eddsa').callprop('isPoint', var.get('sig').get('R')):
                var.get(u"this").put('_R', var.get('sig').get('R'))
            if var.get('sig').get('S').instanceof(var.get('BN')):
                var.get(u"this").put('_S', var.get('sig').get('S'))
            var.get(u"this").put('_Rencoded', (var.get('sig').get('R') if var.get('Array').callprop('isArray', var.get('sig').get('R')) else var.get('sig').get('Rencoded')))
            var.get(u"this").put('_Sencoded', (var.get('sig').get('S') if var.get('Array').callprop('isArray', var.get('sig').get('S')) else var.get('sig').get('Sencoded')))
        PyJsHoisted_Signature_.func_name = 'Signature'
        var.put('Signature', PyJsHoisted_Signature_)
        Js('use strict')
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('assert', var.get('utils').get('assert'))
        var.put('cachedProperty', var.get('utils').get('cachedProperty'))
        var.put('parseBytes', var.get('utils').get('parseBytes'))
        pass
        @Js
        def PyJs_S_2413_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'S':PyJs_S_2413_}, var)
            var.registers([])
            return var.get(u"this").get('eddsa').callprop('decodeInt', var.get(u"this").callprop('Sencoded'))
        PyJs_S_2413_._set_name('S')
        var.get('cachedProperty')(var.get('Signature'), Js('S'), PyJs_S_2413_)
        @Js
        def PyJs_R_2414_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'R':PyJs_R_2414_}, var)
            var.registers([])
            return var.get(u"this").get('eddsa').callprop('decodePoint', var.get(u"this").callprop('Rencoded'))
        PyJs_R_2414_._set_name('R')
        var.get('cachedProperty')(var.get('Signature'), Js('R'), PyJs_R_2414_)
        @Js
        def PyJs_Rencoded_2415_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'Rencoded':PyJs_Rencoded_2415_}, var)
            var.registers([])
            return var.get(u"this").get('eddsa').callprop('encodePoint', var.get(u"this").callprop('R'))
        PyJs_Rencoded_2415_._set_name('Rencoded')
        var.get('cachedProperty')(var.get('Signature'), Js('Rencoded'), PyJs_Rencoded_2415_)
        @Js
        def PyJs_Sencoded_2416_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'Sencoded':PyJs_Sencoded_2416_}, var)
            var.registers([])
            return var.get(u"this").get('eddsa').callprop('encodeInt', var.get(u"this").callprop('S'))
        PyJs_Sencoded_2416_._set_name('Sencoded')
        var.get('cachedProperty')(var.get('Signature'), Js('Sencoded'), PyJs_Sencoded_2416_)
        @Js
        def PyJs_toBytes_2417_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toBytes':PyJs_toBytes_2417_}, var)
            var.registers([])
            return var.get(u"this").callprop('Rencoded').callprop('concat', var.get(u"this").callprop('Sencoded'))
        PyJs_toBytes_2417_._set_name('toBytes')
        var.get('Signature').get('prototype').put('toBytes', PyJs_toBytes_2417_)
        @Js
        def PyJs_toHex_2418_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toHex':PyJs_toHex_2418_}, var)
            var.registers([])
            return var.get('utils').callprop('encode', var.get(u"this").callprop('toBytes'), Js('hex')).callprop('toUpperCase')
        PyJs_toHex_2418_._set_name('toHex')
        var.get('Signature').get('prototype').put('toHex', PyJs_toHex_2418_)
        var.get('module').put('exports', var.get('Signature'))
    PyJs_anonymous_2412_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2419_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        def PyJs_LONG_2420_(var=var):
            return var.get('module').put('exports', Js({'doubles':Js({'step':Js(4.0),'points':Js([Js([Js('e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a'), Js('f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821')]), Js([Js('8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508'), Js('11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf')]), Js([Js('175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739'), Js('d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695')]), Js([Js('363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640'), Js('4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9')]), Js([Js('8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c'), Js('4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36')]), Js([Js('723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda'), Js('96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f')]), Js([Js('eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa'), Js('5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999')]), Js([Js('100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0'), Js('cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09')]), Js([Js('e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d'), Js('9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d')]), Js([Js('feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d'), Js('e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088')]), Js([Js('da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1'), Js('9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d')]), Js([Js('53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0'), Js('5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8')]), Js([Js('8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047'), Js('10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a')]), Js([Js('385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862'), Js('283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453')]), Js([Js('6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7'), Js('7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160')]), Js([Js('3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd'), Js('56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0')]), Js([Js('85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83'), Js('7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6')]), Js([Js('948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a'), Js('53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589')]), Js([Js('6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8'), Js('bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17')]), Js([Js('e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d'), Js('4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda')]), Js([Js('e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725'), Js('7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd')]), Js([Js('213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754'), Js('4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2')]), Js([Js('4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c'), Js('17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6')]), Js([Js('fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6'), Js('6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f')]), Js([Js('76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39'), Js('c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01')]), Js([Js('c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891'), Js('893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3')]), Js([Js('d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b'), Js('febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f')]), Js([Js('b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03'), Js('2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7')]), Js([Js('e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d'), Js('eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78')]), Js([Js('a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070'), Js('7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1')]), Js([Js('90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4'), Js('e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150')]), Js([Js('8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da'), Js('662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82')]), Js([Js('e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11'), Js('1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc')]), Js([Js('8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e'), Js('efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b')]), Js([Js('e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41'), Js('2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51')]), Js([Js('b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef'), Js('67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45')]), Js([Js('d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8'), Js('db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120')]), Js([Js('324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d'), Js('648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84')]), Js([Js('4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96'), Js('35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d')]), Js([Js('9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd'), Js('ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d')]), Js([Js('6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5'), Js('9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8')]), Js([Js('a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266'), Js('40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8')]), Js([Js('7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71'), Js('34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac')]), Js([Js('928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac'), Js('c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f')]), Js([Js('85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751'), Js('1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962')]), Js([Js('ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e'), Js('493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907')]), Js([Js('827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241'), Js('c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec')]), Js([Js('eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3'), Js('be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d')]), Js([Js('e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f'), Js('4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414')]), Js([Js('1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19'), Js('aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd')]), Js([Js('146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be'), Js('b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0')]), Js([Js('fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9'), Js('6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811')]), Js([Js('da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2'), Js('8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1')]), Js([Js('a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13'), Js('7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c')]), Js([Js('174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c'), Js('ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73')]), Js([Js('959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba'), Js('2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd')]), Js([Js('d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151'), Js('e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405')]), Js([Js('64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073'), Js('d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589')]), Js([Js('8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458'), Js('38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e')]), Js([Js('13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b'), Js('69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27')]), Js([Js('bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366'), Js('d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1')]), Js([Js('8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa'), Js('40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482')]), Js([Js('8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0'), Js('620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945')]), Js([Js('dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787'), Js('7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573')]), Js([Js('f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e'), Js('ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82')])])}),'naf':Js({'wnd':Js(7.0),'points':Js([Js([Js('f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9'), Js('388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672')]), Js([Js('2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4'), Js('d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6')]), Js([Js('5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc'), Js('6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da')]), Js([Js('acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe'), Js('cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37')]), Js([Js('774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb'), Js('d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b')]), Js([Js('f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8'), Js('ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81')]), Js([Js('d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e'), Js('581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58')]), Js([Js('defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34'), Js('4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77')]), Js([Js('2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c'), Js('85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a')]), Js([Js('352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5'), Js('321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c')]), Js([Js('2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f'), Js('2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67')]), Js([Js('9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714'), Js('73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402')]), Js([Js('daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729'), Js('a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55')]), Js([Js('c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db'), Js('2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482')]), Js([Js('6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4'), Js('e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82')]), Js([Js('1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5'), Js('b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396')]), Js([Js('605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479'), Js('2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49')]), Js([Js('62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d'), Js('80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf')]), Js([Js('80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f'), Js('1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a')]), Js([Js('7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb'), Js('d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7')]), Js([Js('d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9'), Js('eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933')]), Js([Js('49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963'), Js('758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a')]), Js([Js('77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74'), Js('958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6')]), Js([Js('f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530'), Js('e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37')]), Js([Js('463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b'), Js('5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e')]), Js([Js('f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247'), Js('cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6')]), Js([Js('caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1'), Js('cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476')]), Js([Js('2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120'), Js('4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40')]), Js([Js('7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435'), Js('91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61')]), Js([Js('754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18'), Js('673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683')]), Js([Js('e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8'), Js('59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5')]), Js([Js('186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb'), Js('3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b')]), Js([Js('df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f'), Js('55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417')]), Js([Js('5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143'), Js('efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868')]), Js([Js('290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba'), Js('e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a')]), Js([Js('af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45'), Js('f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6')]), Js([Js('766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a'), Js('744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996')]), Js([Js('59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e'), Js('c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e')]), Js([Js('f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8'), Js('e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d')]), Js([Js('7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c'), Js('30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2')]), Js([Js('948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519'), Js('e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e')]), Js([Js('7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab'), Js('100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437')]), Js([Js('3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca'), Js('ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311')]), Js([Js('d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf'), Js('8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4')]), Js([Js('1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610'), Js('68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575')]), Js([Js('733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4'), Js('f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d')]), Js([Js('15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c'), Js('d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d')]), Js([Js('a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940'), Js('edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629')]), Js([Js('e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980'), Js('a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06')]), Js([Js('311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3'), Js('66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374')]), Js([Js('34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf'), Js('9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee')]), Js([Js('f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63'), Js('4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1')]), Js([Js('d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448'), Js('fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b')]), Js([Js('32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf'), Js('5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661')]), Js([Js('7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5'), Js('8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6')]), Js([Js('ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6'), Js('8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e')]), Js([Js('16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5'), Js('5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d')]), Js([Js('eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99'), Js('f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc')]), Js([Js('78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51'), Js('f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4')]), Js([Js('494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5'), Js('42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c')]), Js([Js('a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5'), Js('204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b')]), Js([Js('c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997'), Js('4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913')]), Js([Js('841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881'), Js('73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154')]), Js([Js('5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5'), Js('39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865')]), Js([Js('36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66'), Js('d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc')]), Js([Js('336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726'), Js('ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224')]), Js([Js('8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede'), Js('6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e')]), Js([Js('1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94'), Js('60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6')]), Js([Js('85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31'), Js('3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511')]), Js([Js('29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51'), Js('b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b')]), Js([Js('a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252'), Js('ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2')]), Js([Js('4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5'), Js('cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c')]), Js([Js('d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b'), Js('6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3')]), Js([Js('ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4'), Js('322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d')]), Js([Js('af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f'), Js('6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700')]), Js([Js('e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889'), Js('2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4')]), Js([Js('591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246'), Js('b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196')]), Js([Js('11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984'), Js('998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4')]), Js([Js('3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a'), Js('b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257')]), Js([Js('cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030'), Js('bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13')]), Js([Js('c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197'), Js('6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096')]), Js([Js('c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593'), Js('c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38')]), Js([Js('a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef'), Js('21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f')]), Js([Js('347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38'), Js('60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448')]), Js([Js('da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a'), Js('49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a')]), Js([Js('c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111'), Js('5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4')]), Js([Js('4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502'), Js('7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437')]), Js([Js('3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea'), Js('be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7')]), Js([Js('cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26'), Js('8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d')]), Js([Js('b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986'), Js('39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a')]), Js([Js('d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e'), Js('62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54')]), Js([Js('48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4'), Js('25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77')]), Js([Js('dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda'), Js('ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517')]), Js([Js('6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859'), Js('cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10')]), Js([Js('e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f'), Js('f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125')]), Js([Js('eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c'), Js('6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e')]), Js([Js('13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942'), Js('fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1')]), Js([Js('ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a'), Js('1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2')]), Js([Js('b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80'), Js('5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423')]), Js([Js('ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d'), Js('438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8')]), Js([Js('8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1'), Js('cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758')]), Js([Js('52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63'), Js('c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375')]), Js([Js('e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352'), Js('6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d')]), Js([Js('7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193'), Js('ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec')]), Js([Js('5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00'), Js('9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0')]), Js([Js('32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58'), Js('ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c')]), Js([Js('e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7'), Js('d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4')]), Js([Js('8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8'), Js('c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f')]), Js([Js('4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e'), Js('67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649')]), Js([Js('3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d'), Js('cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826')]), Js([Js('674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b'), Js('299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5')]), Js([Js('d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f'), Js('f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87')]), Js([Js('30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6'), Js('462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b')]), Js([Js('be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297'), Js('62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc')]), Js([Js('93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a'), Js('7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c')]), Js([Js('b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c'), Js('ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f')]), Js([Js('d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52'), Js('4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a')]), Js([Js('d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb'), Js('bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46')]), Js([Js('463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065'), Js('bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f')]), Js([Js('7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917'), Js('603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03')]), Js([Js('74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9'), Js('cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08')]), Js([Js('30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3'), Js('553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8')]), Js([Js('9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57'), Js('712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373')]), Js([Js('176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66'), Js('ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3')]), Js([Js('75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8'), Js('9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8')]), Js([Js('809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721'), Js('9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1')]), Js([Js('1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180'), Js('4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9')])])})}))
        PyJs_LONG_2420_()
    PyJs_anonymous_2419_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2421_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'cachedProperty', 'require', 'minAssert', 'parseBytes', 'BN', 'module', 'intFromLE', 'minUtils', 'utils', 'getNAF', 'getJSF'])
        @Js
        def PyJsHoisted_getNAF_(num, w, bits, this, arguments, var=var):
            var = Scope({'num':num, 'w':w, 'bits':bits, 'this':this, 'arguments':arguments}, var)
            var.registers(['bits', 'w', 'z', 'i', 'num', 'k', 'naf', 'mod', 'ws'])
            var.put('naf', var.get('Array').create((var.get('Math').callprop('max', var.get('num').callprop('bitLength'), var.get('bits'))+Js(1.0))))
            var.get('naf').callprop('fill', Js(0.0))
            var.put('ws', (Js(1.0)<<(var.get('w')+Js(1.0))))
            var.put('k', var.get('num').callprop('clone'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('naf').get('length')):
                try:
                    pass
                    var.put('mod', var.get('k').callprop('andln', (var.get('ws')-Js(1.0))))
                    if var.get('k').callprop('isOdd'):
                        if (var.get('mod')>((var.get('ws')>>Js(1.0))-Js(1.0))):
                            var.put('z', ((var.get('ws')>>Js(1.0))-var.get('mod')))
                        else:
                            var.put('z', var.get('mod'))
                        var.get('k').callprop('isubn', var.get('z'))
                    else:
                        var.put('z', Js(0.0))
                    var.get('naf').put(var.get('i'), var.get('z'))
                    var.get('k').callprop('iushrn', Js(1.0))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('naf')
        PyJsHoisted_getNAF_.func_name = 'getNAF'
        var.put('getNAF', PyJsHoisted_getNAF_)
        @Js
        def PyJsHoisted_getJSF_(k1, k2, this, arguments, var=var):
            var = Scope({'k1':k1, 'k2':k2, 'this':this, 'arguments':arguments}, var)
            var.registers(['k1', 'u2', 'u1', 'd1', 'jsf', 'k2', 'm8', 'm14', 'd2', 'm24'])
            var.put('jsf', Js([Js([]), Js([])]))
            var.put('k1', var.get('k1').callprop('clone'))
            var.put('k2', var.get('k2').callprop('clone'))
            var.put('d1', Js(0.0))
            var.put('d2', Js(0.0))
            while ((var.get('k1').callprop('cmpn', (-var.get('d1')))>Js(0.0)) or (var.get('k2').callprop('cmpn', (-var.get('d2')))>Js(0.0))):
                var.put('m14', ((var.get('k1').callprop('andln', Js(3.0))+var.get('d1'))&Js(3.0)))
                var.put('m24', ((var.get('k2').callprop('andln', Js(3.0))+var.get('d2'))&Js(3.0)))
                if _seq(var.get('m14'),Js(3.0)):
                    var.put('m14', (-Js(1.0)))
                if _seq(var.get('m24'),Js(3.0)):
                    var.put('m24', (-Js(1.0)))
                pass
                if _seq((var.get('m14')&Js(1.0)),Js(0.0)):
                    var.put('u1', Js(0.0))
                else:
                    var.put('m8', ((var.get('k1').callprop('andln', Js(7.0))+var.get('d1'))&Js(7.0)))
                    if ((_seq(var.get('m8'),Js(3.0)) or _seq(var.get('m8'),Js(5.0))) and _seq(var.get('m24'),Js(2.0))):
                        var.put('u1', (-var.get('m14')))
                    else:
                        var.put('u1', var.get('m14'))
                var.get('jsf').get('0').callprop('push', var.get('u1'))
                pass
                if _seq((var.get('m24')&Js(1.0)),Js(0.0)):
                    var.put('u2', Js(0.0))
                else:
                    var.put('m8', ((var.get('k2').callprop('andln', Js(7.0))+var.get('d2'))&Js(7.0)))
                    if ((_seq(var.get('m8'),Js(3.0)) or _seq(var.get('m8'),Js(5.0))) and _seq(var.get('m14'),Js(2.0))):
                        var.put('u2', (-var.get('m24')))
                    else:
                        var.put('u2', var.get('m24'))
                var.get('jsf').get('1').callprop('push', var.get('u2'))
                if _seq((Js(2.0)*var.get('d1')),(var.get('u1')+Js(1.0))):
                    var.put('d1', (Js(1.0)-var.get('d1')))
                if _seq((Js(2.0)*var.get('d2')),(var.get('u2')+Js(1.0))):
                    var.put('d2', (Js(1.0)-var.get('d2')))
                var.get('k1').callprop('iushrn', Js(1.0))
                var.get('k2').callprop('iushrn', Js(1.0))
            return var.get('jsf')
        PyJsHoisted_getJSF_.func_name = 'getJSF'
        var.put('getJSF', PyJsHoisted_getJSF_)
        @Js
        def PyJsHoisted_cachedProperty_(obj, name, computer, this, arguments, var=var):
            var = Scope({'obj':obj, 'name':name, 'computer':computer, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'key', 'computer', 'obj'])
            var.put('key', (Js('_')+var.get('name')))
            @Js
            def PyJs_cachedProperty_2422_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'cachedProperty':PyJs_cachedProperty_2422_}, var)
                var.registers([])
                return (var.get(u"this").get(var.get('key')) if PyJsStrictNeq(var.get(u"this").get(var.get('key')),var.get('undefined')) else var.get(u"this").put(var.get('key'), var.get('computer').callprop('call', var.get(u"this"))))
            PyJs_cachedProperty_2422_._set_name('cachedProperty')
            var.get('obj').get('prototype').put(var.get('name'), PyJs_cachedProperty_2422_)
        PyJsHoisted_cachedProperty_.func_name = 'cachedProperty'
        var.put('cachedProperty', PyJsHoisted_cachedProperty_)
        @Js
        def PyJsHoisted_parseBytes_(bytes, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['bytes'])
            return (var.get('utils').callprop('toArray', var.get('bytes'), Js('hex')) if _seq(var.get('bytes',throw=False).typeof(),Js('string')) else var.get('bytes'))
        PyJsHoisted_parseBytes_.func_name = 'parseBytes'
        var.put('parseBytes', PyJsHoisted_parseBytes_)
        @Js
        def PyJsHoisted_intFromLE_(bytes, this, arguments, var=var):
            var = Scope({'bytes':bytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['bytes'])
            return var.get('BN').create(var.get('bytes'), Js('hex'), Js('le'))
        PyJsHoisted_intFromLE_.func_name = 'intFromLE'
        var.put('intFromLE', PyJsHoisted_intFromLE_)
        Js('use strict')
        var.put('utils', var.get('exports'))
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('minAssert', var.get('require')(Js('minimalistic-assert')))
        var.put('minUtils', var.get('require')(Js('minimalistic-crypto-utils')))
        var.get('utils').put('assert', var.get('minAssert'))
        var.get('utils').put('toArray', var.get('minUtils').get('toArray'))
        var.get('utils').put('zero2', var.get('minUtils').get('zero2'))
        var.get('utils').put('toHex', var.get('minUtils').get('toHex'))
        var.get('utils').put('encode', var.get('minUtils').get('encode'))
        pass
        var.get('utils').put('getNAF', var.get('getNAF'))
        pass
        var.get('utils').put('getJSF', var.get('getJSF'))
        pass
        var.get('utils').put('cachedProperty', var.get('cachedProperty'))
        pass
        var.get('utils').put('parseBytes', var.get('parseBytes'))
        pass
        var.get('utils').put('intFromLE', var.get('intFromLE'))
    PyJs_anonymous_2421_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2423_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('15').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2423_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2424_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        def PyJs_LONG_2425_(var=var):
            return var.get('module').put('exports', Js({'_from':Js('elliptic@^6.5.3'),'_id':Js('elliptic@6.5.3'),'_inBundle':Js(False),'_integrity':Js('sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw=='),'_location':Js('/elliptic'),'_phantomChildren':Js({}),'_requested':Js({'type':Js('range'),'registry':Js(True),'raw':Js('elliptic@^6.5.3'),'name':Js('elliptic'),'escapedName':Js('elliptic'),'rawSpec':Js('^6.5.3'),'saveSpec':var.get(u"null"),'fetchSpec':Js('^6.5.3')}),'_requiredBy':Js([Js('/browserify-sign'), Js('/create-ecdh')]),'_resolved':Js('https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz'),'_shasum':Js('cb59eb2efdaf73a0bd78ccd7015a62ad6e0f93d6'),'_spec':Js('elliptic@^6.5.3'),'_where':Js('/home/alain/.virtualenvs/twist.moe/lib/python3.9/site-packages/js2py/node_modules/browserify-sign'),'author':Js({'name':Js('Fedor Indutny'),'email':Js('fedor@indutny.com')}),'bugs':Js({'url':Js('https://github.com/indutny/elliptic/issues')}),'bundleDependencies':Js(False),'dependencies':Js({'bn.js':Js('^4.4.0'),'brorand':Js('^1.0.1'),'hash.js':Js('^1.0.0'),'hmac-drbg':Js('^1.0.0'),'inherits':Js('^2.0.1'),'minimalistic-assert':Js('^1.0.0'),'minimalistic-crypto-utils':Js('^1.0.0')}),'deprecated':Js(False),'description':Js('EC cryptography'),'devDependencies':Js({'brfs':Js('^1.4.3'),'coveralls':Js('^3.0.8'),'grunt':Js('^1.0.4'),'grunt-browserify':Js('^5.0.0'),'grunt-cli':Js('^1.2.0'),'grunt-contrib-connect':Js('^1.0.0'),'grunt-contrib-copy':Js('^1.0.0'),'grunt-contrib-uglify':Js('^1.0.1'),'grunt-mocha-istanbul':Js('^3.0.1'),'grunt-saucelabs':Js('^9.0.1'),'istanbul':Js('^0.4.2'),'jscs':Js('^3.0.7'),'jshint':Js('^2.10.3'),'mocha':Js('^6.2.2')}),'files':Js([Js('lib')]),'homepage':Js('https://github.com/indutny/elliptic'),'keywords':Js([Js('EC'), Js('Elliptic'), Js('curve'), Js('Cryptography')]),'license':Js('MIT'),'main':Js('lib/elliptic.js'),'name':Js('elliptic'),'repository':Js({'type':Js('git'),'url':Js('git+ssh://git@github.com/indutny/elliptic.git')}),'scripts':Js({'jscs':Js('jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js'),'jshint':Js('jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js'),'lint':Js('npm run jscs && npm run jshint'),'test':Js('npm run lint && npm run unit'),'unit':Js('istanbul test _mocha --reporter=spec test/index.js'),'version':Js('grunt dist && git add dist/')}),'version':Js('6.5.3')}))
        PyJs_LONG_2425_()
    PyJs_anonymous_2424_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2426_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['EventEmitter', 'module', 'arrayClone', 'ProcessEmitWarning', 'defaultMaxListeners', 'ReflectApply', 'R', 'spliceOne', 'ReflectOwnKeys', 'once', '_onceWrap', 'listenerCount', 'require', 'onceWrapper', '_listeners', '_addListener', 'exports', 'NumberIsNaN', 'checkListener', '_getMaxListeners', 'unwrapListeners'])
        @Js
        def PyJsHoisted_ProcessEmitWarning_(warning, this, arguments, var=var):
            var = Scope({'warning':warning, 'this':this, 'arguments':arguments}, var)
            var.registers(['warning'])
            if (var.get('console') and var.get('console').get('warn')):
                var.get('console').callprop('warn', var.get('warning'))
        PyJsHoisted_ProcessEmitWarning_.func_name = 'ProcessEmitWarning'
        var.put('ProcessEmitWarning', PyJsHoisted_ProcessEmitWarning_)
        @Js
        def PyJsHoisted_EventEmitter_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('EventEmitter').get('init').callprop('call', var.get(u"this"))
        PyJsHoisted_EventEmitter_.func_name = 'EventEmitter'
        var.put('EventEmitter', PyJsHoisted_EventEmitter_)
        @Js
        def PyJsHoisted_checkListener_(listener, this, arguments, var=var):
            var = Scope({'listener':listener, 'this':this, 'arguments':arguments}, var)
            var.registers(['listener'])
            if PyJsStrictNeq(var.get('listener',throw=False).typeof(),Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('The "listener" argument must be of type Function. Received type ')+(Js('undefined') if _seq(var.get('listener',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('listener'))))))
                raise PyJsTempException
        PyJsHoisted_checkListener_.func_name = 'checkListener'
        var.put('checkListener', PyJsHoisted_checkListener_)
        @Js
        def PyJsHoisted__getMaxListeners_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments}, var)
            var.registers(['that'])
            if _seq(var.get('that').get('_maxListeners'),var.get('undefined')):
                return var.get('EventEmitter').get('defaultMaxListeners')
            return var.get('that').get('_maxListeners')
        PyJsHoisted__getMaxListeners_.func_name = '_getMaxListeners'
        var.put('_getMaxListeners', PyJsHoisted__getMaxListeners_)
        @Js
        def PyJsHoisted__addListener_(target, type, listener, prepend, this, arguments, var=var):
            var = Scope({'target':target, 'type':type, 'listener':listener, 'prepend':prepend, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 'm', 'prepend', 'target', 'events', 'listener', 'type', 'existing'])
            pass
            pass
            pass
            var.get('checkListener')(var.get('listener'))
            var.put('events', var.get('target').get('_events'))
            if _seq(var.get('events'),var.get('undefined')):
                var.put('events', var.get('target').put('_events', var.get('Object').callprop('create', var.get(u"null"))))
                var.get('target').put('_eventsCount', Js(0.0))
            else:
                if PyJsStrictNeq(var.get('events').get('newListener'),var.get('undefined')):
                    var.get('target').callprop('emit', Js('newListener'), var.get('type'), (var.get('listener').get('listener') if var.get('listener').get('listener') else var.get('listener')))
                    var.put('events', var.get('target').get('_events'))
                var.put('existing', var.get('events').get(var.get('type')))
            if _seq(var.get('existing'),var.get('undefined')):
                var.put('existing', var.get('events').put(var.get('type'), var.get('listener')))
                var.get('target').put('_eventsCount',Js(var.get('target').get('_eventsCount').to_number())+Js(1))
            else:
                if _seq(var.get('existing',throw=False).typeof(),Js('function')):
                    var.put('existing', var.get('events').put(var.get('type'), (Js([var.get('listener'), var.get('existing')]) if var.get('prepend') else Js([var.get('existing'), var.get('listener')]))))
                else:
                    if var.get('prepend'):
                        var.get('existing').callprop('unshift', var.get('listener'))
                    else:
                        var.get('existing').callprop('push', var.get('listener'))
                var.put('m', var.get('_getMaxListeners')(var.get('target')))
                if (((var.get('m')>Js(0.0)) and (var.get('existing').get('length')>var.get('m'))) and var.get('existing').get('warned').neg()):
                    var.get('existing').put('warned', Js(True))
                    var.put('w', var.get('Error').create(((((((Js('Possible EventEmitter memory leak detected. ')+var.get('existing').get('length'))+Js(' '))+var.get('String')(var.get('type')))+Js(' listeners '))+Js('added. Use emitter.setMaxListeners() to '))+Js('increase limit'))))
                    var.get('w').put('name', Js('MaxListenersExceededWarning'))
                    var.get('w').put('emitter', var.get('target'))
                    var.get('w').put('type', var.get('type'))
                    var.get('w').put('count', var.get('existing').get('length'))
                    var.get('ProcessEmitWarning')(var.get('w'))
            return var.get('target')
        PyJsHoisted__addListener_.func_name = '_addListener'
        var.put('_addListener', PyJsHoisted__addListener_)
        @Js
        def PyJsHoisted_onceWrapper_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").get('fired').neg():
                var.get(u"this").get('target').callprop('removeListener', var.get(u"this").get('type'), var.get(u"this").get('wrapFn'))
                var.get(u"this").put('fired', Js(True))
                if _seq(var.get('arguments').get('length'),Js(0.0)):
                    return var.get(u"this").get('listener').callprop('call', var.get(u"this").get('target'))
                return var.get(u"this").get('listener').callprop('apply', var.get(u"this").get('target'), var.get('arguments'))
        PyJsHoisted_onceWrapper_.func_name = 'onceWrapper'
        var.put('onceWrapper', PyJsHoisted_onceWrapper_)
        @Js
        def PyJsHoisted__onceWrap_(target, type, listener, this, arguments, var=var):
            var = Scope({'target':target, 'type':type, 'listener':listener, 'this':this, 'arguments':arguments}, var)
            var.registers(['wrapped', 'state', 'target', 'listener', 'type'])
            var.put('state', Js({'fired':Js(False),'wrapFn':var.get('undefined'),'target':var.get('target'),'type':var.get('type'),'listener':var.get('listener')}))
            var.put('wrapped', var.get('onceWrapper').callprop('bind', var.get('state')))
            var.get('wrapped').put('listener', var.get('listener'))
            var.get('state').put('wrapFn', var.get('wrapped'))
            return var.get('wrapped')
        PyJsHoisted__onceWrap_.func_name = '_onceWrap'
        var.put('_onceWrap', PyJsHoisted__onceWrap_)
        @Js
        def PyJsHoisted__listeners_(target, type, unwrap, this, arguments, var=var):
            var = Scope({'target':target, 'type':type, 'unwrap':unwrap, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'evlistener', 'events', 'unwrap', 'type'])
            var.put('events', var.get('target').get('_events'))
            if _seq(var.get('events'),var.get('undefined')):
                return Js([])
            var.put('evlistener', var.get('events').get(var.get('type')))
            if _seq(var.get('evlistener'),var.get('undefined')):
                return Js([])
            if _seq(var.get('evlistener',throw=False).typeof(),Js('function')):
                return (Js([(var.get('evlistener').get('listener') or var.get('evlistener'))]) if var.get('unwrap') else Js([var.get('evlistener')]))
            return (var.get('unwrapListeners')(var.get('evlistener')) if var.get('unwrap') else var.get('arrayClone')(var.get('evlistener'), var.get('evlistener').get('length')))
        PyJsHoisted__listeners_.func_name = '_listeners'
        var.put('_listeners', PyJsHoisted__listeners_)
        @Js
        def PyJsHoisted_listenerCount_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['evlistener', 'events', 'type'])
            var.put('events', var.get(u"this").get('_events'))
            if PyJsStrictNeq(var.get('events'),var.get('undefined')):
                var.put('evlistener', var.get('events').get(var.get('type')))
                if _seq(var.get('evlistener',throw=False).typeof(),Js('function')):
                    return Js(1.0)
                else:
                    if PyJsStrictNeq(var.get('evlistener'),var.get('undefined')):
                        return var.get('evlistener').get('length')
            return Js(0.0)
        PyJsHoisted_listenerCount_.func_name = 'listenerCount'
        var.put('listenerCount', PyJsHoisted_listenerCount_)
        @Js
        def PyJsHoisted_arrayClone_(arr, n, this, arguments, var=var):
            var = Scope({'arr':arr, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'arr', 'n', 'copy'])
            var.put('copy', var.get('Array').create(var.get('n')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('n')):
                try:
                    var.get('copy').put(var.get('i'), var.get('arr').get(var.get('i')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('copy')
        PyJsHoisted_arrayClone_.func_name = 'arrayClone'
        var.put('arrayClone', PyJsHoisted_arrayClone_)
        @Js
        def PyJsHoisted_spliceOne_(list, index, this, arguments, var=var):
            var = Scope({'list':list, 'index':index, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'list'])
            #for JS loop

            while ((var.get('index')+Js(1.0))<var.get('list').get('length')):
                try:
                    var.get('list').put(var.get('index'), var.get('list').get((var.get('index')+Js(1.0))))
                finally:
                        (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            var.get('list').callprop('pop')
        PyJsHoisted_spliceOne_.func_name = 'spliceOne'
        var.put('spliceOne', PyJsHoisted_spliceOne_)
        @Js
        def PyJsHoisted_unwrapListeners_(arr, this, arguments, var=var):
            var = Scope({'arr':arr, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'ret', 'arr'])
            var.put('ret', var.get('Array').create(var.get('arr').get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('ret').get('length')):
                try:
                    var.get('ret').put(var.get('i'), (var.get('arr').get(var.get('i')).get('listener') or var.get('arr').get(var.get('i'))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('ret')
        PyJsHoisted_unwrapListeners_.func_name = 'unwrapListeners'
        var.put('unwrapListeners', PyJsHoisted_unwrapListeners_)
        @Js
        def PyJsHoisted_once_(emitter, name, this, arguments, var=var):
            var = Scope({'emitter':emitter, 'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'emitter'])
            @Js
            def PyJs_anonymous_2447_(resolve, reject, this, arguments, var=var):
                var = Scope({'resolve':resolve, 'reject':reject, 'this':this, 'arguments':arguments}, var)
                var.registers(['eventListener', 'errorListener', 'resolve', 'reject'])
                @Js
                def PyJsHoisted_eventListener_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    if PyJsStrictNeq(var.get('errorListener'),var.get('undefined')):
                        var.get('emitter').callprop('removeListener', Js('error'), var.get('errorListener'))
                    var.get('resolve')(Js([]).get('slice').callprop('call', var.get('arguments')))
                PyJsHoisted_eventListener_.func_name = 'eventListener'
                var.put('eventListener', PyJsHoisted_eventListener_)
                pass
                pass
                pass
                if PyJsStrictNeq(var.get('name'),Js('error')):
                    @Js
                    def PyJs_errorListener_2448_(err, this, arguments, var=var):
                        var = Scope({'err':err, 'this':this, 'arguments':arguments, 'errorListener':PyJs_errorListener_2448_}, var)
                        var.registers(['err'])
                        var.get('emitter').callprop('removeListener', var.get('name'), var.get('eventListener'))
                        var.get('reject')(var.get('err'))
                    PyJs_errorListener_2448_._set_name('errorListener')
                    var.put('errorListener', PyJs_errorListener_2448_)
                    var.get('emitter').callprop('once', Js('error'), var.get('errorListener'))
                var.get('emitter').callprop('once', var.get('name'), var.get('eventListener'))
            PyJs_anonymous_2447_._set_name('anonymous')
            return var.get('Promise').create(PyJs_anonymous_2447_)
        PyJsHoisted_once_.func_name = 'once'
        var.put('once', PyJsHoisted_once_)
        Js('use strict')
        var.put('R', (var.get('Reflect') if _seq((Js('undefined') if _seq(var.get('Reflect',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('Reflect'))),Js('object')) else var.get(u"null")))
        @Js
        def PyJs_ReflectApply_2427_(target, receiver, args, this, arguments, var=var):
            var = Scope({'target':target, 'receiver':receiver, 'args':args, 'this':this, 'arguments':arguments, 'ReflectApply':PyJs_ReflectApply_2427_}, var)
            var.registers(['target', 'args', 'receiver'])
            return var.get('Function').get('prototype').get('apply').callprop('call', var.get('target'), var.get('receiver'), var.get('args'))
        PyJs_ReflectApply_2427_._set_name('ReflectApply')
        var.put('ReflectApply', (var.get('R').get('apply') if (var.get('R') and _seq(var.get('R').get('apply').typeof(),Js('function'))) else PyJs_ReflectApply_2427_))
        pass
        if (var.get('R') and _seq(var.get('R').get('ownKeys').typeof(),Js('function'))):
            var.put('ReflectOwnKeys', var.get('R').get('ownKeys'))
        else:
            if var.get('Object').get('getOwnPropertySymbols'):
                @Js
                def PyJs_ReflectOwnKeys_2428_(target, this, arguments, var=var):
                    var = Scope({'target':target, 'this':this, 'arguments':arguments, 'ReflectOwnKeys':PyJs_ReflectOwnKeys_2428_}, var)
                    var.registers(['target'])
                    return var.get('Object').callprop('getOwnPropertyNames', var.get('target')).callprop('concat', var.get('Object').callprop('getOwnPropertySymbols', var.get('target')))
                PyJs_ReflectOwnKeys_2428_._set_name('ReflectOwnKeys')
                var.put('ReflectOwnKeys', PyJs_ReflectOwnKeys_2428_)
            else:
                @Js
                def PyJs_ReflectOwnKeys_2429_(target, this, arguments, var=var):
                    var = Scope({'target':target, 'this':this, 'arguments':arguments, 'ReflectOwnKeys':PyJs_ReflectOwnKeys_2429_}, var)
                    var.registers(['target'])
                    return var.get('Object').callprop('getOwnPropertyNames', var.get('target'))
                PyJs_ReflectOwnKeys_2429_._set_name('ReflectOwnKeys')
                var.put('ReflectOwnKeys', PyJs_ReflectOwnKeys_2429_)
        pass
        @Js
        def PyJs_NumberIsNaN_2430_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'NumberIsNaN':PyJs_NumberIsNaN_2430_}, var)
            var.registers(['value'])
            return PyJsStrictNeq(var.get('value'),var.get('value'))
        PyJs_NumberIsNaN_2430_._set_name('NumberIsNaN')
        var.put('NumberIsNaN', (var.get('Number').get('isNaN') or PyJs_NumberIsNaN_2430_))
        pass
        var.get('module').put('exports', var.get('EventEmitter'))
        var.get('module').get('exports').put('once', var.get('once'))
        var.get('EventEmitter').put('EventEmitter', var.get('EventEmitter'))
        var.get('EventEmitter').get('prototype').put('_events', var.get('undefined'))
        var.get('EventEmitter').get('prototype').put('_eventsCount', Js(0.0))
        var.get('EventEmitter').get('prototype').put('_maxListeners', var.get('undefined'))
        var.put('defaultMaxListeners', Js(10.0))
        pass
        @Js
        def PyJs_get_2431_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_2431_}, var)
            var.registers([])
            return var.get('defaultMaxListeners')
        PyJs_get_2431_._set_name('get')
        @Js
        def PyJs_set_2432_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments, 'set':PyJs_set_2432_}, var)
            var.registers(['arg'])
            if ((PyJsStrictNeq(var.get('arg',throw=False).typeof(),Js('number')) or (var.get('arg')<Js(0.0))) or var.get('NumberIsNaN')(var.get('arg'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ')+var.get('arg'))+Js('.'))))
                raise PyJsTempException
            var.put('defaultMaxListeners', var.get('arg'))
        PyJs_set_2432_._set_name('set')
        var.get('Object').callprop('defineProperty', var.get('EventEmitter'), Js('defaultMaxListeners'), Js({'enumerable':Js(True),'get':PyJs_get_2431_,'set':PyJs_set_2432_}))
        @Js
        def PyJs_anonymous_2433_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if (_seq(var.get(u"this").get('_events'),var.get('undefined')) or _seq(var.get(u"this").get('_events'),var.get('Object').callprop('getPrototypeOf', var.get(u"this")).get('_events'))):
                var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                var.get(u"this").put('_eventsCount', Js(0.0))
            var.get(u"this").put('_maxListeners', (var.get(u"this").get('_maxListeners') or var.get('undefined')))
        PyJs_anonymous_2433_._set_name('anonymous')
        var.get('EventEmitter').put('init', PyJs_anonymous_2433_)
        @Js
        def PyJs_setMaxListeners_2434_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, 'setMaxListeners':PyJs_setMaxListeners_2434_}, var)
            var.registers(['n'])
            if ((PyJsStrictNeq(var.get('n',throw=False).typeof(),Js('number')) or (var.get('n')<Js(0.0))) or var.get('NumberIsNaN')(var.get('n'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value of "n" is out of range. It must be a non-negative number. Received ')+var.get('n'))+Js('.'))))
                raise PyJsTempException
            var.get(u"this").put('_maxListeners', var.get('n'))
            return var.get(u"this")
        PyJs_setMaxListeners_2434_._set_name('setMaxListeners')
        var.get('EventEmitter').get('prototype').put('setMaxListeners', PyJs_setMaxListeners_2434_)
        pass
        @Js
        def PyJs_getMaxListeners_2435_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'getMaxListeners':PyJs_getMaxListeners_2435_}, var)
            var.registers([])
            return var.get('_getMaxListeners')(var.get(u"this"))
        PyJs_getMaxListeners_2435_._set_name('getMaxListeners')
        var.get('EventEmitter').get('prototype').put('getMaxListeners', PyJs_getMaxListeners_2435_)
        @Js
        def PyJs_emit_2436_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments, 'emit':PyJs_emit_2436_}, var)
            var.registers(['er', 'i', 'len', 'doError', 'handler', 'err', 'args', 'listeners', 'events', 'type'])
            var.put('args', Js([]))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('arguments').get('length')):
                try:
                    var.get('args').callprop('push', var.get('arguments').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('doError', _seq(var.get('type'),Js('error')))
            var.put('events', var.get(u"this").get('_events'))
            if PyJsStrictNeq(var.get('events'),var.get('undefined')):
                var.put('doError', (var.get('doError') and _seq(var.get('events').get('error'),var.get('undefined'))))
            else:
                if var.get('doError').neg():
                    return Js(False)
            if var.get('doError'):
                pass
                if (var.get('args').get('length')>Js(0.0)):
                    var.put('er', var.get('args').get('0'))
                if var.get('er').instanceof(var.get('Error')):
                    PyJsTempException = JsToPyException(var.get('er'))
                    raise PyJsTempException
                var.put('err', var.get('Error').create((Js('Unhandled error.')+(((Js(' (')+var.get('er').get('message'))+Js(')')) if var.get('er') else Js('')))))
                var.get('err').put('context', var.get('er'))
                PyJsTempException = JsToPyException(var.get('err'))
                raise PyJsTempException
            var.put('handler', var.get('events').get(var.get('type')))
            if _seq(var.get('handler'),var.get('undefined')):
                return Js(False)
            if _seq(var.get('handler',throw=False).typeof(),Js('function')):
                var.get('ReflectApply')(var.get('handler'), var.get(u"this"), var.get('args'))
            else:
                var.put('len', var.get('handler').get('length'))
                var.put('listeners', var.get('arrayClone')(var.get('handler'), var.get('len')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('ReflectApply')(var.get('listeners').get(var.get('i')), var.get(u"this"), var.get('args'))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
            return Js(True)
        PyJs_emit_2436_._set_name('emit')
        var.get('EventEmitter').get('prototype').put('emit', PyJs_emit_2436_)
        pass
        @Js
        def PyJs_addListener_2437_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'addListener':PyJs_addListener_2437_}, var)
            var.registers(['listener', 'type'])
            return var.get('_addListener')(var.get(u"this"), var.get('type'), var.get('listener'), Js(False))
        PyJs_addListener_2437_._set_name('addListener')
        var.get('EventEmitter').get('prototype').put('addListener', PyJs_addListener_2437_)
        var.get('EventEmitter').get('prototype').put('on', var.get('EventEmitter').get('prototype').get('addListener'))
        @Js
        def PyJs_prependListener_2438_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'prependListener':PyJs_prependListener_2438_}, var)
            var.registers(['listener', 'type'])
            return var.get('_addListener')(var.get(u"this"), var.get('type'), var.get('listener'), Js(True))
        PyJs_prependListener_2438_._set_name('prependListener')
        var.get('EventEmitter').get('prototype').put('prependListener', PyJs_prependListener_2438_)
        pass
        pass
        @Js
        def PyJs_once_2439_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'once':PyJs_once_2439_}, var)
            var.registers(['listener', 'type'])
            var.get('checkListener')(var.get('listener'))
            var.get(u"this").callprop('on', var.get('type'), var.get('_onceWrap')(var.get(u"this"), var.get('type'), var.get('listener')))
            return var.get(u"this")
        PyJs_once_2439_._set_name('once')
        var.get('EventEmitter').get('prototype').put('once', PyJs_once_2439_)
        @Js
        def PyJs_prependOnceListener_2440_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'prependOnceListener':PyJs_prependOnceListener_2440_}, var)
            var.registers(['listener', 'type'])
            var.get('checkListener')(var.get('listener'))
            var.get(u"this").callprop('prependListener', var.get('type'), var.get('_onceWrap')(var.get(u"this"), var.get('type'), var.get('listener')))
            return var.get(u"this")
        PyJs_prependOnceListener_2440_._set_name('prependOnceListener')
        var.get('EventEmitter').get('prototype').put('prependOnceListener', PyJs_prependOnceListener_2440_)
        @Js
        def PyJs_removeListener_2441_(type, listener, this, arguments, var=var):
            var = Scope({'type':type, 'listener':listener, 'this':this, 'arguments':arguments, 'removeListener':PyJs_removeListener_2441_}, var)
            var.registers(['i', 'originalListener', 'list', 'events', 'listener', 'position', 'type'])
            pass
            var.get('checkListener')(var.get('listener'))
            var.put('events', var.get(u"this").get('_events'))
            if _seq(var.get('events'),var.get('undefined')):
                return var.get(u"this")
            var.put('list', var.get('events').get(var.get('type')))
            if _seq(var.get('list'),var.get('undefined')):
                return var.get(u"this")
            if (_seq(var.get('list'),var.get('listener')) or _seq(var.get('list').get('listener'),var.get('listener'))):
                if _seq(var.get(u"this").put('_eventsCount',Js(var.get(u"this").get('_eventsCount').to_number())-Js(1)),Js(0.0)):
                    var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                else:
                    var.get('events').delete(var.get('type'))
                    if var.get('events').get('removeListener'):
                        var.get(u"this").callprop('emit', Js('removeListener'), var.get('type'), (var.get('list').get('listener') or var.get('listener')))
            else:
                if PyJsStrictNeq(var.get('list',throw=False).typeof(),Js('function')):
                    var.put('position', (-Js(1.0)))
                    #for JS loop
                    var.put('i', (var.get('list').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            if (_seq(var.get('list').get(var.get('i')),var.get('listener')) or _seq(var.get('list').get(var.get('i')).get('listener'),var.get('listener'))):
                                var.put('originalListener', var.get('list').get(var.get('i')).get('listener'))
                                var.put('position', var.get('i'))
                                break
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                    if (var.get('position')<Js(0.0)):
                        return var.get(u"this")
                    if _seq(var.get('position'),Js(0.0)):
                        var.get('list').callprop('shift')
                    else:
                        var.get('spliceOne')(var.get('list'), var.get('position'))
                    if _seq(var.get('list').get('length'),Js(1.0)):
                        var.get('events').put(var.get('type'), var.get('list').get('0'))
                    if PyJsStrictNeq(var.get('events').get('removeListener'),var.get('undefined')):
                        var.get(u"this").callprop('emit', Js('removeListener'), var.get('type'), (var.get('originalListener') or var.get('listener')))
            return var.get(u"this")
        PyJs_removeListener_2441_._set_name('removeListener')
        var.get('EventEmitter').get('prototype').put('removeListener', PyJs_removeListener_2441_)
        var.get('EventEmitter').get('prototype').put('off', var.get('EventEmitter').get('prototype').get('removeListener'))
        @Js
        def PyJs_removeAllListeners_2442_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments, 'removeAllListeners':PyJs_removeAllListeners_2442_}, var)
            var.registers(['i', 'key', 'listeners', 'events', 'keys', 'type'])
            pass
            var.put('events', var.get(u"this").get('_events'))
            if _seq(var.get('events'),var.get('undefined')):
                return var.get(u"this")
            if _seq(var.get('events').get('removeListener'),var.get('undefined')):
                if _seq(var.get('arguments').get('length'),Js(0.0)):
                    var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                    var.get(u"this").put('_eventsCount', Js(0.0))
                else:
                    if PyJsStrictNeq(var.get('events').get(var.get('type')),var.get('undefined')):
                        if _seq(var.get(u"this").put('_eventsCount',Js(var.get(u"this").get('_eventsCount').to_number())-Js(1)),Js(0.0)):
                            var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                        else:
                            var.get('events').delete(var.get('type'))
                return var.get(u"this")
            if _seq(var.get('arguments').get('length'),Js(0.0)):
                var.put('keys', var.get('Object').callprop('keys', var.get('events')))
                pass
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('keys').get('length')):
                    try:
                        var.put('key', var.get('keys').get(var.get('i')))
                        if _seq(var.get('key'),Js('removeListener')):
                            continue
                        var.get(u"this").callprop('removeAllListeners', var.get('key'))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                var.get(u"this").callprop('removeAllListeners', Js('removeListener'))
                var.get(u"this").put('_events', var.get('Object').callprop('create', var.get(u"null")))
                var.get(u"this").put('_eventsCount', Js(0.0))
                return var.get(u"this")
            var.put('listeners', var.get('events').get(var.get('type')))
            if _seq(var.get('listeners',throw=False).typeof(),Js('function')):
                var.get(u"this").callprop('removeListener', var.get('type'), var.get('listeners'))
            else:
                if PyJsStrictNeq(var.get('listeners'),var.get('undefined')):
                    #for JS loop
                    var.put('i', (var.get('listeners').get('length')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.get(u"this").callprop('removeListener', var.get('type'), var.get('listeners').get(var.get('i')))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            return var.get(u"this")
        PyJs_removeAllListeners_2442_._set_name('removeAllListeners')
        var.get('EventEmitter').get('prototype').put('removeAllListeners', PyJs_removeAllListeners_2442_)
        pass
        @Js
        def PyJs_listeners_2443_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments, 'listeners':PyJs_listeners_2443_}, var)
            var.registers(['type'])
            return var.get('_listeners')(var.get(u"this"), var.get('type'), Js(True))
        PyJs_listeners_2443_._set_name('listeners')
        var.get('EventEmitter').get('prototype').put('listeners', PyJs_listeners_2443_)
        @Js
        def PyJs_rawListeners_2444_(type, this, arguments, var=var):
            var = Scope({'type':type, 'this':this, 'arguments':arguments, 'rawListeners':PyJs_rawListeners_2444_}, var)
            var.registers(['type'])
            return var.get('_listeners')(var.get(u"this"), var.get('type'), Js(False))
        PyJs_rawListeners_2444_._set_name('rawListeners')
        var.get('EventEmitter').get('prototype').put('rawListeners', PyJs_rawListeners_2444_)
        @Js
        def PyJs_anonymous_2445_(emitter, type, this, arguments, var=var):
            var = Scope({'emitter':emitter, 'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['emitter', 'type'])
            if _seq(var.get('emitter').get('listenerCount').typeof(),Js('function')):
                return var.get('emitter').callprop('listenerCount', var.get('type'))
            else:
                return var.get('listenerCount').callprop('call', var.get('emitter'), var.get('type'))
        PyJs_anonymous_2445_._set_name('anonymous')
        var.get('EventEmitter').put('listenerCount', PyJs_anonymous_2445_)
        var.get('EventEmitter').get('prototype').put('listenerCount', var.get('listenerCount'))
        pass
        @Js
        def PyJs_eventNames_2446_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'eventNames':PyJs_eventNames_2446_}, var)
            var.registers([])
            return (var.get('ReflectOwnKeys')(var.get(u"this").get('_events')) if (var.get(u"this").get('_eventsCount')>Js(0.0)) else Js([]))
        PyJs_eventNames_2446_._set_name('eventNames')
        var.get('EventEmitter').get('prototype').put('eventNames', PyJs_eventNames_2446_)
        pass
        pass
        pass
        pass
    PyJs_anonymous_2426_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2449_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'EVP_BytesToKey', 'MD5'])
        @Js
        def PyJsHoisted_EVP_BytesToKey_(password, salt, keyBits, ivLen, this, arguments, var=var):
            var = Scope({'password':password, 'salt':salt, 'keyBits':keyBits, 'ivLen':ivLen, 'this':this, 'arguments':arguments}, var)
            var.registers(['ivStart', 'keyBits', 'hash', 'tmp', 'iv', 'keyStart', 'length', 'password', 'salt', 'key', 'ivLen', 'keyLen', 'used'])
            if var.get('Buffer').callprop('isBuffer', var.get('password')).neg():
                var.put('password', var.get('Buffer').callprop('from', var.get('password'), Js('binary')))
            if var.get('salt'):
                if var.get('Buffer').callprop('isBuffer', var.get('salt')).neg():
                    var.put('salt', var.get('Buffer').callprop('from', var.get('salt'), Js('binary')))
                if PyJsStrictNeq(var.get('salt').get('length'),Js(8.0)):
                    PyJsTempException = JsToPyException(var.get('RangeError').create(Js('salt should be Buffer with 8 byte length')))
                    raise PyJsTempException
            var.put('keyLen', (var.get('keyBits')/Js(8.0)))
            var.put('key', var.get('Buffer').callprop('alloc', var.get('keyLen')))
            var.put('iv', var.get('Buffer').callprop('alloc', (var.get('ivLen') or Js(0.0))))
            var.put('tmp', var.get('Buffer').callprop('alloc', Js(0.0)))
            while ((var.get('keyLen')>Js(0.0)) or (var.get('ivLen')>Js(0.0))):
                var.put('hash', var.get('MD5').create())
                var.get('hash').callprop('update', var.get('tmp'))
                var.get('hash').callprop('update', var.get('password'))
                if var.get('salt'):
                    var.get('hash').callprop('update', var.get('salt'))
                var.put('tmp', var.get('hash').callprop('digest'))
                var.put('used', Js(0.0))
                if (var.get('keyLen')>Js(0.0)):
                    var.put('keyStart', (var.get('key').get('length')-var.get('keyLen')))
                    var.put('used', var.get('Math').callprop('min', var.get('keyLen'), var.get('tmp').get('length')))
                    var.get('tmp').callprop('copy', var.get('key'), var.get('keyStart'), Js(0.0), var.get('used'))
                    var.put('keyLen', var.get('used'), '-')
                if ((var.get('used')<var.get('tmp').get('length')) and (var.get('ivLen')>Js(0.0))):
                    var.put('ivStart', (var.get('iv').get('length')-var.get('ivLen')))
                    var.put('length', var.get('Math').callprop('min', var.get('ivLen'), (var.get('tmp').get('length')-var.get('used'))))
                    var.get('tmp').callprop('copy', var.get('iv'), var.get('ivStart'), var.get('used'), (var.get('used')+var.get('length')))
                    var.put('ivLen', var.get('length'), '-')
            var.get('tmp').callprop('fill', Js(0.0))
            return Js({'key':var.get('key'),'iv':var.get('iv')})
        PyJsHoisted_EVP_BytesToKey_.func_name = 'EVP_BytesToKey'
        var.put('EVP_BytesToKey', PyJsHoisted_EVP_BytesToKey_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('MD5', var.get('require')(Js('md5.js')))
        pass
        var.get('module').put('exports', var.get('EVP_BytesToKey'))
    PyJs_anonymous_2449_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2450_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'Transform', 'inherits', 'HashBase', 'throwIfNotStringOrBuffer'])
        @Js
        def PyJsHoisted_throwIfNotStringOrBuffer_(val, prefix, this, arguments, var=var):
            var = Scope({'val':val, 'prefix':prefix, 'this':this, 'arguments':arguments}, var)
            var.registers(['prefix', 'val'])
            if (var.get('Buffer').callprop('isBuffer', var.get('val')).neg() and PyJsStrictNeq(var.get('val',throw=False).typeof(),Js('string'))):
                PyJsTempException = JsToPyException(var.get('TypeError').create((var.get('prefix')+Js(' must be a string or a buffer'))))
                raise PyJsTempException
        PyJsHoisted_throwIfNotStringOrBuffer_.func_name = 'throwIfNotStringOrBuffer'
        var.put('throwIfNotStringOrBuffer', PyJsHoisted_throwIfNotStringOrBuffer_)
        @Js
        def PyJsHoisted_HashBase_(blockSize, this, arguments, var=var):
            var = Scope({'blockSize':blockSize, 'this':this, 'arguments':arguments}, var)
            var.registers(['blockSize'])
            var.get('Transform').callprop('call', var.get(u"this"))
            var.get(u"this").put('_block', var.get('Buffer').callprop('allocUnsafe', var.get('blockSize')))
            var.get(u"this").put('_blockSize', var.get('blockSize'))
            var.get(u"this").put('_blockOffset', Js(0.0))
            var.get(u"this").put('_length', Js([Js(0.0), Js(0.0), Js(0.0), Js(0.0)]))
            var.get(u"this").put('_finalized', Js(False))
        PyJsHoisted_HashBase_.func_name = 'HashBase'
        var.put('HashBase', PyJsHoisted_HashBase_)
        Js('use strict')
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('Transform', var.get('require')(Js('readable-stream')).get('Transform'))
        var.put('inherits', var.get('require')(Js('inherits')))
        pass
        pass
        var.get('inherits')(var.get('HashBase'), var.get('Transform'))
        @Js
        def PyJs_anonymous_2451_(chunk, encoding, callback, this, arguments, var=var):
            var = Scope({'chunk':chunk, 'encoding':encoding, 'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['chunk', 'encoding', 'error', 'callback'])
            var.put('error', var.get(u"null"))
            try:
                var.get(u"this").callprop('update', var.get('chunk'), var.get('encoding'))
            except PyJsException as PyJsTempException:
                PyJsHolder_657272_74326568 = var.own.get('err')
                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('error', var.get('err'))
                finally:
                    if PyJsHolder_657272_74326568 is not None:
                        var.own['err'] = PyJsHolder_657272_74326568
                    else:
                        del var.own['err']
                    del PyJsHolder_657272_74326568
            var.get('callback')(var.get('error'))
        PyJs_anonymous_2451_._set_name('anonymous')
        var.get('HashBase').get('prototype').put('_transform', PyJs_anonymous_2451_)
        @Js
        def PyJs_anonymous_2452_(callback, this, arguments, var=var):
            var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
            var.registers(['callback', 'error'])
            var.put('error', var.get(u"null"))
            try:
                var.get(u"this").callprop('push', var.get(u"this").callprop('digest'))
            except PyJsException as PyJsTempException:
                PyJsHolder_657272_30289722 = var.own.get('err')
                var.force_own_put('err', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('error', var.get('err'))
                finally:
                    if PyJsHolder_657272_30289722 is not None:
                        var.own['err'] = PyJsHolder_657272_30289722
                    else:
                        del var.own['err']
                    del PyJsHolder_657272_30289722
            var.get('callback')(var.get('error'))
        PyJs_anonymous_2452_._set_name('anonymous')
        var.get('HashBase').get('prototype').put('_flush', PyJs_anonymous_2452_)
        @Js
        def PyJs_anonymous_2453_(data, encoding, this, arguments, var=var):
            var = Scope({'data':data, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['j', 'i', 'encoding', 'data', 'carry', 'block', 'offset'])
            var.get('throwIfNotStringOrBuffer')(var.get('data'), Js('Data'))
            if var.get(u"this").get('_finalized'):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Digest already called')))
                raise PyJsTempException
            if var.get('Buffer').callprop('isBuffer', var.get('data')).neg():
                var.put('data', var.get('Buffer').callprop('from', var.get('data'), var.get('encoding')))
            var.put('block', var.get(u"this").get('_block'))
            var.put('offset', Js(0.0))
            while (((var.get(u"this").get('_blockOffset')+var.get('data').get('length'))-var.get('offset'))>=var.get(u"this").get('_blockSize')):
                #for JS loop
                var.put('i', var.get(u"this").get('_blockOffset'))
                while (var.get('i')<var.get(u"this").get('_blockSize')):
                    var.get('block').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))

                var.get(u"this").callprop('_update')
                var.get(u"this").put('_blockOffset', Js(0.0))
            while (var.get('offset')<var.get('data').get('length')):
                var.get('block').put((var.get(u"this").put('_blockOffset',Js(var.get(u"this").get('_blockOffset').to_number())+Js(1))-Js(1)), var.get('data').get((var.put('offset',Js(var.get('offset').to_number())+Js(1))-Js(1))))
            #for JS loop
            var.put('j', Js(0.0))
            var.put('carry', (var.get('data').get('length')*Js(8.0)))
            while (var.get('carry')>Js(0.0)):
                try:
                    var.get(u"this").get('_length').put(var.get('j'), var.get('carry'), '+')
                    var.put('carry', ((var.get(u"this").get('_length').get(var.get('j'))/Js(4294967296))|Js(0.0)))
                    if (var.get('carry')>Js(0.0)):
                        var.get(u"this").get('_length').put(var.get('j'), (Js(4294967296)*var.get('carry')), '-')
                finally:
                        var.put('j',Js(var.get('j').to_number())+Js(1))
            return var.get(u"this")
        PyJs_anonymous_2453_._set_name('anonymous')
        var.get('HashBase').get('prototype').put('update', PyJs_anonymous_2453_)
        @Js
        def PyJs_anonymous_2454_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('_update is not implemented')))
            raise PyJsTempException
        PyJs_anonymous_2454_._set_name('anonymous')
        var.get('HashBase').get('prototype').put('_update', PyJs_anonymous_2454_)
        @Js
        def PyJs_anonymous_2455_(encoding, this, arguments, var=var):
            var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['digest', 'i', 'encoding'])
            if var.get(u"this").get('_finalized'):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Digest already called')))
                raise PyJsTempException
            var.get(u"this").put('_finalized', Js(True))
            var.put('digest', var.get(u"this").callprop('_digest'))
            if PyJsStrictNeq(var.get('encoding'),var.get('undefined')):
                var.put('digest', var.get('digest').callprop('toString', var.get('encoding')))
            var.get(u"this").get('_block').callprop('fill', Js(0.0))
            var.get(u"this").put('_blockOffset', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(4.0)):
                try:
                    var.get(u"this").get('_length').put(var.get('i'), Js(0.0))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('digest')
        PyJs_anonymous_2455_._set_name('anonymous')
        var.get('HashBase').get('prototype').put('digest', PyJs_anonymous_2455_)
        @Js
        def PyJs_anonymous_2456_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('_digest is not implemented')))
            raise PyJsTempException
        PyJs_anonymous_2456_._set_name('anonymous')
        var.get('HashBase').get('prototype').put('_digest', PyJs_anonymous_2456_)
        var.get('module').put('exports', var.get('HashBase'))
    PyJs_anonymous_2450_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2457_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('49').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2457_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2458_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('50').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2458_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2459_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('51').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2459_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2460_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('52').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2460_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2461_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('53').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2461_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2462_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('54').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2462_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2463_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('55').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2463_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2464_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('56').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2464_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2465_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('57').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2465_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2466_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('58').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2466_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2467_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('59').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2467_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2468_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('60').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2468_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2469_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('61').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2469_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2470_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('62').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2470_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2471_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('63').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2471_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2472_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('64').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2472_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2473_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'hash'])
        var.put('hash', var.get('exports'))
        var.get('hash').put('utils', var.get('require')(Js('./hash/utils')))
        var.get('hash').put('common', var.get('require')(Js('./hash/common')))
        var.get('hash').put('sha', var.get('require')(Js('./hash/sha')))
        var.get('hash').put('ripemd', var.get('require')(Js('./hash/ripemd')))
        var.get('hash').put('hmac', var.get('require')(Js('./hash/hmac')))
        var.get('hash').put('sha1', var.get('hash').get('sha').get('sha1'))
        var.get('hash').put('sha256', var.get('hash').get('sha').get('sha256'))
        var.get('hash').put('sha224', var.get('hash').get('sha').get('sha224'))
        var.get('hash').put('sha384', var.get('hash').get('sha').get('sha384'))
        var.get('hash').put('sha512', var.get('hash').get('sha').get('sha512'))
        var.get('hash').put('ripemd160', var.get('hash').get('ripemd').get('ripemd160'))
    PyJs_anonymous_2473_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2474_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'BlockHash', 'utils', 'assert'])
        @Js
        def PyJsHoisted_BlockHash_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('pending', var.get(u"null"))
            var.get(u"this").put('pendingTotal', Js(0.0))
            var.get(u"this").put('blockSize', var.get(u"this").get('constructor').get('blockSize'))
            var.get(u"this").put('outSize', var.get(u"this").get('constructor').get('outSize'))
            var.get(u"this").put('hmacStrength', var.get(u"this").get('constructor').get('hmacStrength'))
            var.get(u"this").put('padLength', (var.get(u"this").get('constructor').get('padLength')/Js(8.0)))
            var.get(u"this").put('endian', Js('big'))
            var.get(u"this").put('_delta8', (var.get(u"this").get('blockSize')/Js(8.0)))
            var.get(u"this").put('_delta32', (var.get(u"this").get('blockSize')/Js(32.0)))
        PyJsHoisted_BlockHash_.func_name = 'BlockHash'
        var.put('BlockHash', PyJsHoisted_BlockHash_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('./utils')))
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        pass
        var.get('exports').put('BlockHash', var.get('BlockHash'))
        @Js
        def PyJs_update_2475_(msg, enc, this, arguments, var=var):
            var = Scope({'msg':msg, 'enc':enc, 'this':this, 'arguments':arguments, 'update':PyJs_update_2475_}, var)
            var.registers(['i', 'msg', 'r', 'enc'])
            var.put('msg', var.get('utils').callprop('toArray', var.get('msg'), var.get('enc')))
            if var.get(u"this").get('pending').neg():
                var.get(u"this").put('pending', var.get('msg'))
            else:
                var.get(u"this").put('pending', var.get(u"this").get('pending').callprop('concat', var.get('msg')))
            var.get(u"this").put('pendingTotal', var.get('msg').get('length'), '+')
            if (var.get(u"this").get('pending').get('length')>=var.get(u"this").get('_delta8')):
                var.put('msg', var.get(u"this").get('pending'))
                var.put('r', (var.get('msg').get('length')%var.get(u"this").get('_delta8')))
                var.get(u"this").put('pending', var.get('msg').callprop('slice', (var.get('msg').get('length')-var.get('r')), var.get('msg').get('length')))
                if _seq(var.get(u"this").get('pending').get('length'),Js(0.0)):
                    var.get(u"this").put('pending', var.get(u"null"))
                var.put('msg', var.get('utils').callprop('join32', var.get('msg'), Js(0.0), (var.get('msg').get('length')-var.get('r')), var.get(u"this").get('endian')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('msg').get('length')):
                    try:
                        var.get(u"this").callprop('_update', var.get('msg'), var.get('i'), (var.get('i')+var.get(u"this").get('_delta32')))
                    finally:
                            var.put('i', var.get(u"this").get('_delta32'), '+')
            return var.get(u"this")
        PyJs_update_2475_._set_name('update')
        var.get('BlockHash').get('prototype').put('update', PyJs_update_2475_)
        @Js
        def PyJs_digest_2476_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'digest':PyJs_digest_2476_}, var)
            var.registers(['enc'])
            var.get(u"this").callprop('update', var.get(u"this").callprop('_pad'))
            var.get('assert')(_seq(var.get(u"this").get('pending'),var.get(u"null")))
            return var.get(u"this").callprop('_digest', var.get('enc'))
        PyJs_digest_2476_._set_name('digest')
        var.get('BlockHash').get('prototype').put('digest', PyJs_digest_2476_)
        @Js
        def PyJs_pad_2477_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'pad':PyJs_pad_2477_}, var)
            var.registers(['len', 'i', 'k', 'bytes', 't', 'res'])
            var.put('len', var.get(u"this").get('pendingTotal'))
            var.put('bytes', var.get(u"this").get('_delta8'))
            var.put('k', (var.get('bytes')-((var.get('len')+var.get(u"this").get('padLength'))%var.get('bytes'))))
            var.put('res', var.get('Array').create((var.get('k')+var.get(u"this").get('padLength'))))
            var.get('res').put('0', Js(128))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('k')):
                try:
                    var.get('res').put(var.get('i'), Js(0.0))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('len', Js(3.0), '<<')
            if _seq(var.get(u"this").get('endian'),Js('big')):
                #for JS loop
                var.put('t', Js(8.0))
                while (var.get('t')<var.get(u"this").get('padLength')):
                    try:
                        var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                    finally:
                            (var.put('t',Js(var.get('t').to_number())+Js(1))-Js(1))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (PyJsBshift(var.get('len'),Js(24.0))&Js(255)))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (PyJsBshift(var.get('len'),Js(16.0))&Js(255)))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (PyJsBshift(var.get('len'),Js(8.0))&Js(255)))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (var.get('len')&Js(255)))
            else:
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (var.get('len')&Js(255)))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (PyJsBshift(var.get('len'),Js(8.0))&Js(255)))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (PyJsBshift(var.get('len'),Js(16.0))&Js(255)))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), (PyJsBshift(var.get('len'),Js(24.0))&Js(255)))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                #for JS loop
                var.put('t', Js(8.0))
                while (var.get('t')<var.get(u"this").get('padLength')):
                    try:
                        var.get('res').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), Js(0.0))
                    finally:
                            (var.put('t',Js(var.get('t').to_number())+Js(1))-Js(1))
            return var.get('res')
        PyJs_pad_2477_._set_name('pad')
        var.get('BlockHash').get('prototype').put('_pad', PyJs_pad_2477_)
    PyJs_anonymous_2474_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2478_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'utils', 'assert', 'Hmac'])
        @Js
        def PyJsHoisted_Hmac_(hash, key, enc, this, arguments, var=var):
            var = Scope({'hash':hash, 'key':key, 'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'hash', 'enc'])
            if var.get(u"this").instanceof(var.get('Hmac')).neg():
                return var.get('Hmac').create(var.get('hash'), var.get('key'), var.get('enc'))
            var.get(u"this").put('Hash', var.get('hash'))
            var.get(u"this").put('blockSize', (var.get('hash').get('blockSize')/Js(8.0)))
            var.get(u"this").put('outSize', (var.get('hash').get('outSize')/Js(8.0)))
            var.get(u"this").put('inner', var.get(u"null"))
            var.get(u"this").put('outer', var.get(u"null"))
            var.get(u"this").callprop('_init', var.get('utils').callprop('toArray', var.get('key'), var.get('enc')))
        PyJsHoisted_Hmac_.func_name = 'Hmac'
        var.put('Hmac', PyJsHoisted_Hmac_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('./utils')))
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        pass
        var.get('module').put('exports', var.get('Hmac'))
        @Js
        def PyJs_init_2479_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'init':PyJs_init_2479_}, var)
            var.registers(['i', 'key'])
            if (var.get('key').get('length')>var.get(u"this").get('blockSize')):
                var.put('key', var.get(u"this").get('Hash').create().callprop('update', var.get('key')).callprop('digest'))
            var.get('assert')((var.get('key').get('length')<=var.get(u"this").get('blockSize')))
            #for JS loop
            var.put('i', var.get('key').get('length'))
            while (var.get('i')<var.get(u"this").get('blockSize')):
                try:
                    var.get('key').callprop('push', Js(0.0))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('key').get('length')):
                try:
                    var.get('key').put(var.get('i'), Js(54), '^')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get(u"this").put('inner', var.get(u"this").get('Hash').create().callprop('update', var.get('key')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('key').get('length')):
                try:
                    var.get('key').put(var.get('i'), Js(106), '^')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get(u"this").put('outer', var.get(u"this").get('Hash').create().callprop('update', var.get('key')))
        PyJs_init_2479_._set_name('init')
        var.get('Hmac').get('prototype').put('_init', PyJs_init_2479_)
        @Js
        def PyJs_update_2480_(msg, enc, this, arguments, var=var):
            var = Scope({'msg':msg, 'enc':enc, 'this':this, 'arguments':arguments, 'update':PyJs_update_2480_}, var)
            var.registers(['msg', 'enc'])
            var.get(u"this").get('inner').callprop('update', var.get('msg'), var.get('enc'))
            return var.get(u"this")
        PyJs_update_2480_._set_name('update')
        var.get('Hmac').get('prototype').put('update', PyJs_update_2480_)
        @Js
        def PyJs_digest_2481_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'digest':PyJs_digest_2481_}, var)
            var.registers(['enc'])
            var.get(u"this").get('outer').callprop('update', var.get(u"this").get('inner').callprop('digest'))
            return var.get(u"this").get('outer').callprop('digest', var.get('enc'))
        PyJs_digest_2481_._set_name('digest')
        var.get('Hmac').get('prototype').put('digest', PyJs_digest_2481_)
    PyJs_anonymous_2478_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2482_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'r', 'module', 'f', 'sum32_3', 'K', 'Kh', 'utils', 'sh', 'common', 'BlockHash', 'sum32_4', 'sum32', 'rotl32', 'RIPEMD160', 'rh', 's'])
        @Js
        def PyJsHoisted_RIPEMD160_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").instanceof(var.get('RIPEMD160')).neg():
                return var.get('RIPEMD160').create()
            var.get('BlockHash').callprop('call', var.get(u"this"))
            var.get(u"this").put('h', Js([Js(1732584193), Js(4023233417), Js(2562383102), Js(271733878), Js(3285377520)]))
            var.get(u"this").put('endian', Js('little'))
        PyJsHoisted_RIPEMD160_.func_name = 'RIPEMD160'
        var.put('RIPEMD160', PyJsHoisted_RIPEMD160_)
        @Js
        def PyJsHoisted_f_(j, x, y, z, this, arguments, var=var):
            var = Scope({'j':j, 'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'y', 'z', 'j'])
            if (var.get('j')<=Js(15.0)):
                return ((var.get('x')^var.get('y'))^var.get('z'))
            else:
                if (var.get('j')<=Js(31.0)):
                    return ((var.get('x')&var.get('y'))|((~var.get('x'))&var.get('z')))
                else:
                    if (var.get('j')<=Js(47.0)):
                        return ((var.get('x')|(~var.get('y')))^var.get('z'))
                    else:
                        if (var.get('j')<=Js(63.0)):
                            return ((var.get('x')&var.get('z'))|(var.get('y')&(~var.get('z'))))
                        else:
                            return (var.get('x')^(var.get('y')|(~var.get('z'))))
        PyJsHoisted_f_.func_name = 'f'
        var.put('f', PyJsHoisted_f_)
        @Js
        def PyJsHoisted_K_(j, this, arguments, var=var):
            var = Scope({'j':j, 'this':this, 'arguments':arguments}, var)
            var.registers(['j'])
            if (var.get('j')<=Js(15.0)):
                return Js(0)
            else:
                if (var.get('j')<=Js(31.0)):
                    return Js(1518500249)
                else:
                    if (var.get('j')<=Js(47.0)):
                        return Js(1859775393)
                    else:
                        if (var.get('j')<=Js(63.0)):
                            return Js(2400959708)
                        else:
                            return Js(2840853838)
        PyJsHoisted_K_.func_name = 'K'
        var.put('K', PyJsHoisted_K_)
        @Js
        def PyJsHoisted_Kh_(j, this, arguments, var=var):
            var = Scope({'j':j, 'this':this, 'arguments':arguments}, var)
            var.registers(['j'])
            if (var.get('j')<=Js(15.0)):
                return Js(1352829926)
            else:
                if (var.get('j')<=Js(31.0)):
                    return Js(1548603684)
                else:
                    if (var.get('j')<=Js(47.0)):
                        return Js(1836072691)
                    else:
                        if (var.get('j')<=Js(63.0)):
                            return Js(2053994217)
                        else:
                            return Js(0)
        PyJsHoisted_Kh_.func_name = 'Kh'
        var.put('Kh', PyJsHoisted_Kh_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('./utils')))
        var.put('common', var.get('require')(Js('./common')))
        var.put('rotl32', var.get('utils').get('rotl32'))
        var.put('sum32', var.get('utils').get('sum32'))
        var.put('sum32_3', var.get('utils').get('sum32_3'))
        var.put('sum32_4', var.get('utils').get('sum32_4'))
        var.put('BlockHash', var.get('common').get('BlockHash'))
        pass
        var.get('utils').callprop('inherits', var.get('RIPEMD160'), var.get('BlockHash'))
        var.get('exports').put('ripemd160', var.get('RIPEMD160'))
        var.get('RIPEMD160').put('blockSize', Js(512.0))
        var.get('RIPEMD160').put('outSize', Js(160.0))
        var.get('RIPEMD160').put('hmacStrength', Js(192.0))
        var.get('RIPEMD160').put('padLength', Js(64.0))
        @Js
        def PyJs_update_2483_(msg, start, this, arguments, var=var):
            var = Scope({'msg':msg, 'start':start, 'this':this, 'arguments':arguments, 'update':PyJs_update_2483_}, var)
            var.registers(['D', 'Dh', 'C', 'j', 'E', 'msg', 'B', 'Bh', 'Eh', 'start', 'T', 'Ch', 'Ah', 'A'])
            var.put('A', var.get(u"this").get('h').get('0'))
            var.put('B', var.get(u"this").get('h').get('1'))
            var.put('C', var.get(u"this").get('h').get('2'))
            var.put('D', var.get(u"this").get('h').get('3'))
            var.put('E', var.get(u"this").get('h').get('4'))
            var.put('Ah', var.get('A'))
            var.put('Bh', var.get('B'))
            var.put('Ch', var.get('C'))
            var.put('Dh', var.get('D'))
            var.put('Eh', var.get('E'))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<Js(80.0)):
                try:
                    var.put('T', var.get('sum32')(var.get('rotl32')(var.get('sum32_4')(var.get('A'), var.get('f')(var.get('j'), var.get('B'), var.get('C'), var.get('D')), var.get('msg').get((var.get('r').get(var.get('j'))+var.get('start'))), var.get('K')(var.get('j'))), var.get('s').get(var.get('j'))), var.get('E')))
                    var.put('A', var.get('E'))
                    var.put('E', var.get('D'))
                    var.put('D', var.get('rotl32')(var.get('C'), Js(10.0)))
                    var.put('C', var.get('B'))
                    var.put('B', var.get('T'))
                    var.put('T', var.get('sum32')(var.get('rotl32')(var.get('sum32_4')(var.get('Ah'), var.get('f')((Js(79.0)-var.get('j')), var.get('Bh'), var.get('Ch'), var.get('Dh')), var.get('msg').get((var.get('rh').get(var.get('j'))+var.get('start'))), var.get('Kh')(var.get('j'))), var.get('sh').get(var.get('j'))), var.get('Eh')))
                    var.put('Ah', var.get('Eh'))
                    var.put('Eh', var.get('Dh'))
                    var.put('Dh', var.get('rotl32')(var.get('Ch'), Js(10.0)))
                    var.put('Ch', var.get('Bh'))
                    var.put('Bh', var.get('T'))
                finally:
                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
            var.put('T', var.get('sum32_3')(var.get(u"this").get('h').get('1'), var.get('C'), var.get('Dh')))
            var.get(u"this").get('h').put('1', var.get('sum32_3')(var.get(u"this").get('h').get('2'), var.get('D'), var.get('Eh')))
            var.get(u"this").get('h').put('2', var.get('sum32_3')(var.get(u"this").get('h').get('3'), var.get('E'), var.get('Ah')))
            var.get(u"this").get('h').put('3', var.get('sum32_3')(var.get(u"this").get('h').get('4'), var.get('A'), var.get('Bh')))
            var.get(u"this").get('h').put('4', var.get('sum32_3')(var.get(u"this").get('h').get('0'), var.get('B'), var.get('Ch')))
            var.get(u"this").get('h').put('0', var.get('T'))
        PyJs_update_2483_._set_name('update')
        var.get('RIPEMD160').get('prototype').put('_update', PyJs_update_2483_)
        @Js
        def PyJs_digest_2484_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'digest':PyJs_digest_2484_}, var)
            var.registers(['enc'])
            if _seq(var.get('enc'),Js('hex')):
                return var.get('utils').callprop('toHex32', var.get(u"this").get('h'), Js('little'))
            else:
                return var.get('utils').callprop('split32', var.get(u"this").get('h'), Js('little'))
        PyJs_digest_2484_._set_name('digest')
        var.get('RIPEMD160').get('prototype').put('_digest', PyJs_digest_2484_)
        pass
        pass
        pass
        var.put('r', Js([Js(0.0), Js(1.0), Js(2.0), Js(3.0), Js(4.0), Js(5.0), Js(6.0), Js(7.0), Js(8.0), Js(9.0), Js(10.0), Js(11.0), Js(12.0), Js(13.0), Js(14.0), Js(15.0), Js(7.0), Js(4.0), Js(13.0), Js(1.0), Js(10.0), Js(6.0), Js(15.0), Js(3.0), Js(12.0), Js(0.0), Js(9.0), Js(5.0), Js(2.0), Js(14.0), Js(11.0), Js(8.0), Js(3.0), Js(10.0), Js(14.0), Js(4.0), Js(9.0), Js(15.0), Js(8.0), Js(1.0), Js(2.0), Js(7.0), Js(0.0), Js(6.0), Js(13.0), Js(11.0), Js(5.0), Js(12.0), Js(1.0), Js(9.0), Js(11.0), Js(10.0), Js(0.0), Js(8.0), Js(12.0), Js(4.0), Js(13.0), Js(3.0), Js(7.0), Js(15.0), Js(14.0), Js(5.0), Js(6.0), Js(2.0), Js(4.0), Js(0.0), Js(5.0), Js(9.0), Js(7.0), Js(12.0), Js(2.0), Js(10.0), Js(14.0), Js(1.0), Js(3.0), Js(8.0), Js(11.0), Js(6.0), Js(15.0), Js(13.0)]))
        var.put('rh', Js([Js(5.0), Js(14.0), Js(7.0), Js(0.0), Js(9.0), Js(2.0), Js(11.0), Js(4.0), Js(13.0), Js(6.0), Js(15.0), Js(8.0), Js(1.0), Js(10.0), Js(3.0), Js(12.0), Js(6.0), Js(11.0), Js(3.0), Js(7.0), Js(0.0), Js(13.0), Js(5.0), Js(10.0), Js(14.0), Js(15.0), Js(8.0), Js(12.0), Js(4.0), Js(9.0), Js(1.0), Js(2.0), Js(15.0), Js(5.0), Js(1.0), Js(3.0), Js(7.0), Js(14.0), Js(6.0), Js(9.0), Js(11.0), Js(8.0), Js(12.0), Js(2.0), Js(10.0), Js(0.0), Js(4.0), Js(13.0), Js(8.0), Js(6.0), Js(4.0), Js(1.0), Js(3.0), Js(11.0), Js(15.0), Js(0.0), Js(5.0), Js(12.0), Js(2.0), Js(13.0), Js(9.0), Js(7.0), Js(10.0), Js(14.0), Js(12.0), Js(15.0), Js(10.0), Js(4.0), Js(1.0), Js(5.0), Js(8.0), Js(7.0), Js(6.0), Js(2.0), Js(13.0), Js(14.0), Js(0.0), Js(3.0), Js(9.0), Js(11.0)]))
        var.put('s', Js([Js(11.0), Js(14.0), Js(15.0), Js(12.0), Js(5.0), Js(8.0), Js(7.0), Js(9.0), Js(11.0), Js(13.0), Js(14.0), Js(15.0), Js(6.0), Js(7.0), Js(9.0), Js(8.0), Js(7.0), Js(6.0), Js(8.0), Js(13.0), Js(11.0), Js(9.0), Js(7.0), Js(15.0), Js(7.0), Js(12.0), Js(15.0), Js(9.0), Js(11.0), Js(7.0), Js(13.0), Js(12.0), Js(11.0), Js(13.0), Js(6.0), Js(7.0), Js(14.0), Js(9.0), Js(13.0), Js(15.0), Js(14.0), Js(8.0), Js(13.0), Js(6.0), Js(5.0), Js(12.0), Js(7.0), Js(5.0), Js(11.0), Js(12.0), Js(14.0), Js(15.0), Js(14.0), Js(15.0), Js(9.0), Js(8.0), Js(9.0), Js(14.0), Js(5.0), Js(6.0), Js(8.0), Js(6.0), Js(5.0), Js(12.0), Js(9.0), Js(15.0), Js(5.0), Js(11.0), Js(6.0), Js(8.0), Js(13.0), Js(12.0), Js(5.0), Js(12.0), Js(13.0), Js(14.0), Js(11.0), Js(8.0), Js(5.0), Js(6.0)]))
        var.put('sh', Js([Js(8.0), Js(9.0), Js(9.0), Js(11.0), Js(13.0), Js(15.0), Js(15.0), Js(5.0), Js(7.0), Js(7.0), Js(8.0), Js(11.0), Js(14.0), Js(14.0), Js(12.0), Js(6.0), Js(9.0), Js(13.0), Js(15.0), Js(7.0), Js(12.0), Js(8.0), Js(9.0), Js(11.0), Js(7.0), Js(7.0), Js(12.0), Js(7.0), Js(6.0), Js(15.0), Js(13.0), Js(11.0), Js(9.0), Js(7.0), Js(15.0), Js(11.0), Js(8.0), Js(6.0), Js(6.0), Js(14.0), Js(12.0), Js(13.0), Js(5.0), Js(14.0), Js(13.0), Js(13.0), Js(7.0), Js(5.0), Js(15.0), Js(5.0), Js(8.0), Js(11.0), Js(14.0), Js(14.0), Js(6.0), Js(14.0), Js(6.0), Js(9.0), Js(12.0), Js(9.0), Js(12.0), Js(5.0), Js(15.0), Js(8.0), Js(8.0), Js(5.0), Js(12.0), Js(9.0), Js(12.0), Js(5.0), Js(14.0), Js(6.0), Js(8.0), Js(13.0), Js(6.0), Js(5.0), Js(15.0), Js(13.0), Js(11.0), Js(11.0)]))
    PyJs_anonymous_2482_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2485_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        var.get('exports').put('sha1', var.get('require')(Js('./sha/1')))
        var.get('exports').put('sha224', var.get('require')(Js('./sha/224')))
        var.get('exports').put('sha256', var.get('require')(Js('./sha/256')))
        var.get('exports').put('sha384', var.get('require')(Js('./sha/384')))
        var.get('exports').put('sha512', var.get('require')(Js('./sha/512')))
    PyJs_anonymous_2485_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2486_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'sha1_K', 'utils', 'common', 'shaCommon', 'BlockHash', 'sum32', 'sum32_5', 'rotl32', 'ft_1', 'SHA1'])
        @Js
        def PyJsHoisted_SHA1_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").instanceof(var.get('SHA1')).neg():
                return var.get('SHA1').create()
            var.get('BlockHash').callprop('call', var.get(u"this"))
            var.get(u"this").put('h', Js([Js(1732584193), Js(4023233417), Js(2562383102), Js(271733878), Js(3285377520)]))
            var.get(u"this").put('W', var.get('Array').create(Js(80.0)))
        PyJsHoisted_SHA1_.func_name = 'SHA1'
        var.put('SHA1', PyJsHoisted_SHA1_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('common', var.get('require')(Js('../common')))
        var.put('shaCommon', var.get('require')(Js('./common')))
        var.put('rotl32', var.get('utils').get('rotl32'))
        var.put('sum32', var.get('utils').get('sum32'))
        var.put('sum32_5', var.get('utils').get('sum32_5'))
        var.put('ft_1', var.get('shaCommon').get('ft_1'))
        var.put('BlockHash', var.get('common').get('BlockHash'))
        var.put('sha1_K', Js([Js(1518500249), Js(1859775393), Js(2400959708), Js(3395469782)]))
        pass
        var.get('utils').callprop('inherits', var.get('SHA1'), var.get('BlockHash'))
        var.get('module').put('exports', var.get('SHA1'))
        var.get('SHA1').put('blockSize', Js(512.0))
        var.get('SHA1').put('outSize', Js(160.0))
        var.get('SHA1').put('hmacStrength', Js(80.0))
        var.get('SHA1').put('padLength', Js(64.0))
        @Js
        def PyJs__update_2487_(msg, start, this, arguments, var=var):
            var = Scope({'msg':msg, 'start':start, 'this':this, 'arguments':arguments, '_update':PyJs__update_2487_}, var)
            var.registers(['a', 'i', 'c', 'e', 'msg', 'start', 'b', 'W', 't', 'd', 's'])
            var.put('W', var.get(u"this").get('W'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(16.0)):
                try:
                    var.get('W').put(var.get('i'), var.get('msg').get((var.get('start')+var.get('i'))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            #for JS loop

            while (var.get('i')<var.get('W').get('length')):
                try:
                    var.get('W').put(var.get('i'), var.get('rotl32')((((var.get('W').get((var.get('i')-Js(3.0)))^var.get('W').get((var.get('i')-Js(8.0))))^var.get('W').get((var.get('i')-Js(14.0))))^var.get('W').get((var.get('i')-Js(16.0)))), Js(1.0)))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('a', var.get(u"this").get('h').get('0'))
            var.put('b', var.get(u"this").get('h').get('1'))
            var.put('c', var.get(u"this").get('h').get('2'))
            var.put('d', var.get(u"this").get('h').get('3'))
            var.put('e', var.get(u"this").get('h').get('4'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('W').get('length')):
                try:
                    var.put('s', (~(~(var.get('i')/Js(20.0)))))
                    var.put('t', var.get('sum32_5')(var.get('rotl32')(var.get('a'), Js(5.0)), var.get('ft_1')(var.get('s'), var.get('b'), var.get('c'), var.get('d')), var.get('e'), var.get('W').get(var.get('i')), var.get('sha1_K').get(var.get('s'))))
                    var.put('e', var.get('d'))
                    var.put('d', var.get('c'))
                    var.put('c', var.get('rotl32')(var.get('b'), Js(30.0)))
                    var.put('b', var.get('a'))
                    var.put('a', var.get('t'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get(u"this").get('h').put('0', var.get('sum32')(var.get(u"this").get('h').get('0'), var.get('a')))
            var.get(u"this").get('h').put('1', var.get('sum32')(var.get(u"this").get('h').get('1'), var.get('b')))
            var.get(u"this").get('h').put('2', var.get('sum32')(var.get(u"this").get('h').get('2'), var.get('c')))
            var.get(u"this").get('h').put('3', var.get('sum32')(var.get(u"this").get('h').get('3'), var.get('d')))
            var.get(u"this").get('h').put('4', var.get('sum32')(var.get(u"this").get('h').get('4'), var.get('e')))
        PyJs__update_2487_._set_name('_update')
        var.get('SHA1').get('prototype').put('_update', PyJs__update_2487_)
        @Js
        def PyJs_digest_2488_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'digest':PyJs_digest_2488_}, var)
            var.registers(['enc'])
            if _seq(var.get('enc'),Js('hex')):
                return var.get('utils').callprop('toHex32', var.get(u"this").get('h'), Js('big'))
            else:
                return var.get('utils').callprop('split32', var.get(u"this").get('h'), Js('big'))
        PyJs_digest_2488_._set_name('digest')
        var.get('SHA1').get('prototype').put('_digest', PyJs_digest_2488_)
    PyJs_anonymous_2486_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2489_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'SHA256', 'utils', 'SHA224'])
        @Js
        def PyJsHoisted_SHA224_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").instanceof(var.get('SHA224')).neg():
                return var.get('SHA224').create()
            var.get('SHA256').callprop('call', var.get(u"this"))
            var.get(u"this").put('h', Js([Js(3238371032), Js(914150663), Js(812702999), Js(4144912697), Js(4290775857), Js(1750603025), Js(1694076839), Js(3204075428)]))
        PyJsHoisted_SHA224_.func_name = 'SHA224'
        var.put('SHA224', PyJsHoisted_SHA224_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('SHA256', var.get('require')(Js('./256')))
        pass
        var.get('utils').callprop('inherits', var.get('SHA224'), var.get('SHA256'))
        var.get('module').put('exports', var.get('SHA224'))
        var.get('SHA224').put('blockSize', Js(512.0))
        var.get('SHA224').put('outSize', Js(224.0))
        var.get('SHA224').put('hmacStrength', Js(192.0))
        var.get('SHA224').put('padLength', Js(64.0))
        @Js
        def PyJs_digest_2490_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'digest':PyJs_digest_2490_}, var)
            var.registers(['enc'])
            if _seq(var.get('enc'),Js('hex')):
                return var.get('utils').callprop('toHex32', var.get(u"this").get('h').callprop('slice', Js(0.0), Js(7.0)), Js('big'))
            else:
                return var.get('utils').callprop('split32', var.get(u"this").get('h').callprop('slice', Js(0.0), Js(7.0)), Js('big'))
        PyJs_digest_2490_._set_name('digest')
        var.get('SHA224').get('prototype').put('_digest', PyJs_digest_2490_)
    PyJs_anonymous_2489_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2491_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['g1_256', 'module', 's0_256', 'sum32_5', 'ch32', 'utils', 'BlockHash', 'sum32_4', 'require', 'maj32', 'g0_256', 'assert', 'exports', 'common', 'shaCommon', 'SHA256', 'sum32', 's1_256', 'sha256_K'])
        @Js
        def PyJsHoisted_SHA256_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").instanceof(var.get('SHA256')).neg():
                return var.get('SHA256').create()
            var.get('BlockHash').callprop('call', var.get(u"this"))
            var.get(u"this").put('h', Js([Js(1779033703), Js(3144134277), Js(1013904242), Js(2773480762), Js(1359893119), Js(2600822924), Js(528734635), Js(1541459225)]))
            var.get(u"this").put('k', var.get('sha256_K'))
            var.get(u"this").put('W', var.get('Array').create(Js(64.0)))
        PyJsHoisted_SHA256_.func_name = 'SHA256'
        var.put('SHA256', PyJsHoisted_SHA256_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('common', var.get('require')(Js('../common')))
        var.put('shaCommon', var.get('require')(Js('./common')))
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        var.put('sum32', var.get('utils').get('sum32'))
        var.put('sum32_4', var.get('utils').get('sum32_4'))
        var.put('sum32_5', var.get('utils').get('sum32_5'))
        var.put('ch32', var.get('shaCommon').get('ch32'))
        var.put('maj32', var.get('shaCommon').get('maj32'))
        var.put('s0_256', var.get('shaCommon').get('s0_256'))
        var.put('s1_256', var.get('shaCommon').get('s1_256'))
        var.put('g0_256', var.get('shaCommon').get('g0_256'))
        var.put('g1_256', var.get('shaCommon').get('g1_256'))
        var.put('BlockHash', var.get('common').get('BlockHash'))
        var.put('sha256_K', Js([Js(1116352408), Js(1899447441), Js(3049323471), Js(3921009573), Js(961987163), Js(1508970993), Js(2453635748), Js(2870763221), Js(3624381080), Js(310598401), Js(607225278), Js(1426881987), Js(1925078388), Js(2162078206), Js(2614888103), Js(3248222580), Js(3835390401), Js(4022224774), Js(264347078), Js(604807628), Js(770255983), Js(1249150122), Js(1555081692), Js(1996064986), Js(2554220882), Js(2821834349), Js(2952996808), Js(3210313671), Js(3336571891), Js(3584528711), Js(113926993), Js(338241895), Js(666307205), Js(773529912), Js(1294757372), Js(1396182291), Js(1695183700), Js(1986661051), Js(2177026350), Js(2456956037), Js(2730485921), Js(2820302411), Js(3259730800), Js(3345764771), Js(3516065817), Js(3600352804), Js(4094571909), Js(275423344), Js(430227734), Js(506948616), Js(659060556), Js(883997877), Js(958139571), Js(1322822218), Js(1537002063), Js(1747873779), Js(1955562222), Js(2024104815), Js(2227730452), Js(2361852424), Js(2428436474), Js(2756734187), Js(3204031479), Js(3329325298)]))
        pass
        var.get('utils').callprop('inherits', var.get('SHA256'), var.get('BlockHash'))
        var.get('module').put('exports', var.get('SHA256'))
        var.get('SHA256').put('blockSize', Js(512.0))
        var.get('SHA256').put('outSize', Js(256.0))
        var.get('SHA256').put('hmacStrength', Js(192.0))
        var.get('SHA256').put('padLength', Js(64.0))
        @Js
        def PyJs__update_2492_(msg, start, this, arguments, var=var):
            var = Scope({'msg':msg, 'start':start, 'this':this, 'arguments':arguments, '_update':PyJs__update_2492_}, var)
            var.registers(['a', 'f', 'i', 'c', 'e', 'msg', 'h', 'start', 'b', 'g', 'T1', 'W', 'T2', 'd'])
            var.put('W', var.get(u"this").get('W'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(16.0)):
                try:
                    var.get('W').put(var.get('i'), var.get('msg').get((var.get('start')+var.get('i'))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            #for JS loop

            while (var.get('i')<var.get('W').get('length')):
                try:
                    var.get('W').put(var.get('i'), var.get('sum32_4')(var.get('g1_256')(var.get('W').get((var.get('i')-Js(2.0)))), var.get('W').get((var.get('i')-Js(7.0))), var.get('g0_256')(var.get('W').get((var.get('i')-Js(15.0)))), var.get('W').get((var.get('i')-Js(16.0)))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('a', var.get(u"this").get('h').get('0'))
            var.put('b', var.get(u"this").get('h').get('1'))
            var.put('c', var.get(u"this").get('h').get('2'))
            var.put('d', var.get(u"this").get('h').get('3'))
            var.put('e', var.get(u"this").get('h').get('4'))
            var.put('f', var.get(u"this").get('h').get('5'))
            var.put('g', var.get(u"this").get('h').get('6'))
            var.put('h', var.get(u"this").get('h').get('7'))
            var.get('assert')(_seq(var.get(u"this").get('k').get('length'),var.get('W').get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('W').get('length')):
                try:
                    var.put('T1', var.get('sum32_5')(var.get('h'), var.get('s1_256')(var.get('e')), var.get('ch32')(var.get('e'), var.get('f'), var.get('g')), var.get(u"this").get('k').get(var.get('i')), var.get('W').get(var.get('i'))))
                    var.put('T2', var.get('sum32')(var.get('s0_256')(var.get('a')), var.get('maj32')(var.get('a'), var.get('b'), var.get('c'))))
                    var.put('h', var.get('g'))
                    var.put('g', var.get('f'))
                    var.put('f', var.get('e'))
                    var.put('e', var.get('sum32')(var.get('d'), var.get('T1')))
                    var.put('d', var.get('c'))
                    var.put('c', var.get('b'))
                    var.put('b', var.get('a'))
                    var.put('a', var.get('sum32')(var.get('T1'), var.get('T2')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get(u"this").get('h').put('0', var.get('sum32')(var.get(u"this").get('h').get('0'), var.get('a')))
            var.get(u"this").get('h').put('1', var.get('sum32')(var.get(u"this").get('h').get('1'), var.get('b')))
            var.get(u"this").get('h').put('2', var.get('sum32')(var.get(u"this").get('h').get('2'), var.get('c')))
            var.get(u"this").get('h').put('3', var.get('sum32')(var.get(u"this").get('h').get('3'), var.get('d')))
            var.get(u"this").get('h').put('4', var.get('sum32')(var.get(u"this").get('h').get('4'), var.get('e')))
            var.get(u"this").get('h').put('5', var.get('sum32')(var.get(u"this").get('h').get('5'), var.get('f')))
            var.get(u"this").get('h').put('6', var.get('sum32')(var.get(u"this").get('h').get('6'), var.get('g')))
            var.get(u"this").get('h').put('7', var.get('sum32')(var.get(u"this").get('h').get('7'), var.get('h')))
        PyJs__update_2492_._set_name('_update')
        var.get('SHA256').get('prototype').put('_update', PyJs__update_2492_)
        @Js
        def PyJs_digest_2493_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'digest':PyJs_digest_2493_}, var)
            var.registers(['enc'])
            if _seq(var.get('enc'),Js('hex')):
                return var.get('utils').callprop('toHex32', var.get(u"this").get('h'), Js('big'))
            else:
                return var.get('utils').callprop('split32', var.get(u"this").get('h'), Js('big'))
        PyJs_digest_2493_._set_name('digest')
        var.get('SHA256').get('prototype').put('_digest', PyJs_digest_2493_)
    PyJs_anonymous_2491_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2494_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['SHA384', 'exports', 'require', 'SHA512', 'module', 'utils'])
        @Js
        def PyJsHoisted_SHA384_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").instanceof(var.get('SHA384')).neg():
                return var.get('SHA384').create()
            var.get('SHA512').callprop('call', var.get(u"this"))
            var.get(u"this").put('h', Js([Js(3418070365), Js(3238371032), Js(1654270250), Js(914150663), Js(2438529370), Js(812702999), Js(355462360), Js(4144912697), Js(1731405415), Js(4290775857), Js(2394180231), Js(1750603025), Js(3675008525), Js(1694076839), Js(1203062813), Js(3204075428)]))
        PyJsHoisted_SHA384_.func_name = 'SHA384'
        var.put('SHA384', PyJsHoisted_SHA384_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('SHA512', var.get('require')(Js('./512')))
        pass
        var.get('utils').callprop('inherits', var.get('SHA384'), var.get('SHA512'))
        var.get('module').put('exports', var.get('SHA384'))
        var.get('SHA384').put('blockSize', Js(1024.0))
        var.get('SHA384').put('outSize', Js(384.0))
        var.get('SHA384').put('hmacStrength', Js(192.0))
        var.get('SHA384').put('padLength', Js(128.0))
        @Js
        def PyJs_digest_2495_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'digest':PyJs_digest_2495_}, var)
            var.registers(['enc'])
            if _seq(var.get('enc'),Js('hex')):
                return var.get('utils').callprop('toHex32', var.get(u"this").get('h').callprop('slice', Js(0.0), Js(12.0)), Js('big'))
            else:
                return var.get('utils').callprop('split32', var.get(u"this").get('h').callprop('slice', Js(0.0), Js(12.0)), Js('big'))
        PyJs_digest_2495_._set_name('digest')
        var.get('SHA384').get('prototype').put('_digest', PyJs_digest_2495_)
    PyJs_anonymous_2494_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2496_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['sum64_5_lo', 'g0_512_lo', 'module', 'sum64_4_lo', 'ch64_lo', 'sum64_4_hi', 'maj64_lo', 'BlockHash', 's1_512_lo', 'sum64_5_hi', 's0_512_lo', 'sha512_K', 'SHA512', 'require', 'rotr64_lo', 'shr64_lo', 's0_512_hi', 'ch64_hi', 'rotr64_hi', 'maj64_hi', 'assert', 'sum64_hi', 'shr64_hi', 'exports', 'g0_512_hi', 's1_512_hi', 'common', 'sum64_lo', 'sum64', 'g1_512_lo', 'utils', 'g1_512_hi'])
        @Js
        def PyJsHoisted_SHA512_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if var.get(u"this").instanceof(var.get('SHA512')).neg():
                return var.get('SHA512').create()
            var.get('BlockHash').callprop('call', var.get(u"this"))
            var.get(u"this").put('h', Js([Js(1779033703), Js(4089235720), Js(3144134277), Js(2227873595), Js(1013904242), Js(4271175723), Js(2773480762), Js(1595750129), Js(1359893119), Js(2917565137), Js(2600822924), Js(725511199), Js(528734635), Js(4215389547), Js(1541459225), Js(327033209)]))
            var.get(u"this").put('k', var.get('sha512_K'))
            var.get(u"this").put('W', var.get('Array').create(Js(160.0)))
        PyJsHoisted_SHA512_.func_name = 'SHA512'
        var.put('SHA512', PyJsHoisted_SHA512_)
        @Js
        def PyJsHoisted_ch64_hi_(xh, xl, yh, yl, zh, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'yh':yh, 'yl':yl, 'zh':zh, 'this':this, 'arguments':arguments}, var)
            var.registers(['r', 'xl', 'zh', 'yl', 'xh', 'yh'])
            var.put('r', ((var.get('xh')&var.get('yh'))^((~var.get('xh'))&var.get('zh'))))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_ch64_hi_.func_name = 'ch64_hi'
        var.put('ch64_hi', PyJsHoisted_ch64_hi_)
        @Js
        def PyJsHoisted_ch64_lo_(xh, xl, yh, yl, zh, zl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'yh':yh, 'yl':yl, 'zh':zh, 'zl':zl, 'this':this, 'arguments':arguments}, var)
            var.registers(['r', 'xl', 'zl', 'zh', 'yl', 'xh', 'yh'])
            var.put('r', ((var.get('xl')&var.get('yl'))^((~var.get('xl'))&var.get('zl'))))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_ch64_lo_.func_name = 'ch64_lo'
        var.put('ch64_lo', PyJsHoisted_ch64_lo_)
        @Js
        def PyJsHoisted_maj64_hi_(xh, xl, yh, yl, zh, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'yh':yh, 'yl':yl, 'zh':zh, 'this':this, 'arguments':arguments}, var)
            var.registers(['r', 'xl', 'zh', 'yl', 'xh', 'yh'])
            var.put('r', (((var.get('xh')&var.get('yh'))^(var.get('xh')&var.get('zh')))^(var.get('yh')&var.get('zh'))))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_maj64_hi_.func_name = 'maj64_hi'
        var.put('maj64_hi', PyJsHoisted_maj64_hi_)
        @Js
        def PyJsHoisted_maj64_lo_(xh, xl, yh, yl, zh, zl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'yh':yh, 'yl':yl, 'zh':zh, 'zl':zl, 'this':this, 'arguments':arguments}, var)
            var.registers(['r', 'xl', 'zl', 'zh', 'yl', 'xh', 'yh'])
            var.put('r', (((var.get('xl')&var.get('yl'))^(var.get('xl')&var.get('zl')))^(var.get('yl')&var.get('zl'))))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_maj64_lo_.func_name = 'maj64_lo'
        var.put('maj64_lo', PyJsHoisted_maj64_lo_)
        @Js
        def PyJsHoisted_s0_512_hi_(xh, xl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['c2_hi', 'r', 'xl', 'xh', 'c0_hi', 'c1_hi'])
            var.put('c0_hi', var.get('rotr64_hi')(var.get('xh'), var.get('xl'), Js(28.0)))
            var.put('c1_hi', var.get('rotr64_hi')(var.get('xl'), var.get('xh'), Js(2.0)))
            var.put('c2_hi', var.get('rotr64_hi')(var.get('xl'), var.get('xh'), Js(7.0)))
            var.put('r', ((var.get('c0_hi')^var.get('c1_hi'))^var.get('c2_hi')))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_s0_512_hi_.func_name = 's0_512_hi'
        var.put('s0_512_hi', PyJsHoisted_s0_512_hi_)
        @Js
        def PyJsHoisted_s0_512_lo_(xh, xl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['c0_lo', 'c2_lo', 'r', 'xl', 'c1_lo', 'xh'])
            var.put('c0_lo', var.get('rotr64_lo')(var.get('xh'), var.get('xl'), Js(28.0)))
            var.put('c1_lo', var.get('rotr64_lo')(var.get('xl'), var.get('xh'), Js(2.0)))
            var.put('c2_lo', var.get('rotr64_lo')(var.get('xl'), var.get('xh'), Js(7.0)))
            var.put('r', ((var.get('c0_lo')^var.get('c1_lo'))^var.get('c2_lo')))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_s0_512_lo_.func_name = 's0_512_lo'
        var.put('s0_512_lo', PyJsHoisted_s0_512_lo_)
        @Js
        def PyJsHoisted_s1_512_hi_(xh, xl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['c2_hi', 'r', 'xl', 'xh', 'c0_hi', 'c1_hi'])
            var.put('c0_hi', var.get('rotr64_hi')(var.get('xh'), var.get('xl'), Js(14.0)))
            var.put('c1_hi', var.get('rotr64_hi')(var.get('xh'), var.get('xl'), Js(18.0)))
            var.put('c2_hi', var.get('rotr64_hi')(var.get('xl'), var.get('xh'), Js(9.0)))
            var.put('r', ((var.get('c0_hi')^var.get('c1_hi'))^var.get('c2_hi')))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_s1_512_hi_.func_name = 's1_512_hi'
        var.put('s1_512_hi', PyJsHoisted_s1_512_hi_)
        @Js
        def PyJsHoisted_s1_512_lo_(xh, xl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['c0_lo', 'c2_lo', 'r', 'xl', 'c1_lo', 'xh'])
            var.put('c0_lo', var.get('rotr64_lo')(var.get('xh'), var.get('xl'), Js(14.0)))
            var.put('c1_lo', var.get('rotr64_lo')(var.get('xh'), var.get('xl'), Js(18.0)))
            var.put('c2_lo', var.get('rotr64_lo')(var.get('xl'), var.get('xh'), Js(9.0)))
            var.put('r', ((var.get('c0_lo')^var.get('c1_lo'))^var.get('c2_lo')))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_s1_512_lo_.func_name = 's1_512_lo'
        var.put('s1_512_lo', PyJsHoisted_s1_512_lo_)
        @Js
        def PyJsHoisted_g0_512_hi_(xh, xl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['c2_hi', 'r', 'xl', 'xh', 'c0_hi', 'c1_hi'])
            var.put('c0_hi', var.get('rotr64_hi')(var.get('xh'), var.get('xl'), Js(1.0)))
            var.put('c1_hi', var.get('rotr64_hi')(var.get('xh'), var.get('xl'), Js(8.0)))
            var.put('c2_hi', var.get('shr64_hi')(var.get('xh'), var.get('xl'), Js(7.0)))
            var.put('r', ((var.get('c0_hi')^var.get('c1_hi'))^var.get('c2_hi')))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_g0_512_hi_.func_name = 'g0_512_hi'
        var.put('g0_512_hi', PyJsHoisted_g0_512_hi_)
        @Js
        def PyJsHoisted_g0_512_lo_(xh, xl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['c0_lo', 'c2_lo', 'r', 'xl', 'c1_lo', 'xh'])
            var.put('c0_lo', var.get('rotr64_lo')(var.get('xh'), var.get('xl'), Js(1.0)))
            var.put('c1_lo', var.get('rotr64_lo')(var.get('xh'), var.get('xl'), Js(8.0)))
            var.put('c2_lo', var.get('shr64_lo')(var.get('xh'), var.get('xl'), Js(7.0)))
            var.put('r', ((var.get('c0_lo')^var.get('c1_lo'))^var.get('c2_lo')))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_g0_512_lo_.func_name = 'g0_512_lo'
        var.put('g0_512_lo', PyJsHoisted_g0_512_lo_)
        @Js
        def PyJsHoisted_g1_512_hi_(xh, xl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['c2_hi', 'r', 'xl', 'xh', 'c0_hi', 'c1_hi'])
            var.put('c0_hi', var.get('rotr64_hi')(var.get('xh'), var.get('xl'), Js(19.0)))
            var.put('c1_hi', var.get('rotr64_hi')(var.get('xl'), var.get('xh'), Js(29.0)))
            var.put('c2_hi', var.get('shr64_hi')(var.get('xh'), var.get('xl'), Js(6.0)))
            var.put('r', ((var.get('c0_hi')^var.get('c1_hi'))^var.get('c2_hi')))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_g1_512_hi_.func_name = 'g1_512_hi'
        var.put('g1_512_hi', PyJsHoisted_g1_512_hi_)
        @Js
        def PyJsHoisted_g1_512_lo_(xh, xl, this, arguments, var=var):
            var = Scope({'xh':xh, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['c0_lo', 'c2_lo', 'r', 'xl', 'c1_lo', 'xh'])
            var.put('c0_lo', var.get('rotr64_lo')(var.get('xh'), var.get('xl'), Js(19.0)))
            var.put('c1_lo', var.get('rotr64_lo')(var.get('xl'), var.get('xh'), Js(29.0)))
            var.put('c2_lo', var.get('shr64_lo')(var.get('xh'), var.get('xl'), Js(6.0)))
            var.put('r', ((var.get('c0_lo')^var.get('c1_lo'))^var.get('c2_lo')))
            if (var.get('r')<Js(0.0)):
                var.put('r', Js(4294967296), '+')
            return var.get('r')
        PyJsHoisted_g1_512_lo_.func_name = 'g1_512_lo'
        var.put('g1_512_lo', PyJsHoisted_g1_512_lo_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('common', var.get('require')(Js('../common')))
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        var.put('rotr64_hi', var.get('utils').get('rotr64_hi'))
        var.put('rotr64_lo', var.get('utils').get('rotr64_lo'))
        var.put('shr64_hi', var.get('utils').get('shr64_hi'))
        var.put('shr64_lo', var.get('utils').get('shr64_lo'))
        var.put('sum64', var.get('utils').get('sum64'))
        var.put('sum64_hi', var.get('utils').get('sum64_hi'))
        var.put('sum64_lo', var.get('utils').get('sum64_lo'))
        var.put('sum64_4_hi', var.get('utils').get('sum64_4_hi'))
        var.put('sum64_4_lo', var.get('utils').get('sum64_4_lo'))
        var.put('sum64_5_hi', var.get('utils').get('sum64_5_hi'))
        var.put('sum64_5_lo', var.get('utils').get('sum64_5_lo'))
        var.put('BlockHash', var.get('common').get('BlockHash'))
        var.put('sha512_K', Js([Js(1116352408), Js(3609767458), Js(1899447441), Js(602891725), Js(3049323471), Js(3964484399), Js(3921009573), Js(2173295548), Js(961987163), Js(4081628472), Js(1508970993), Js(3053834265), Js(2453635748), Js(2937671579), Js(2870763221), Js(3664609560), Js(3624381080), Js(2734883394), Js(310598401), Js(1164996542), Js(607225278), Js(1323610764), Js(1426881987), Js(3590304994), Js(1925078388), Js(4068182383), Js(2162078206), Js(991336113), Js(2614888103), Js(633803317), Js(3248222580), Js(3479774868), Js(3835390401), Js(2666613458), Js(4022224774), Js(944711139), Js(264347078), Js(2341262773), Js(604807628), Js(2007800933), Js(770255983), Js(1495990901), Js(1249150122), Js(1856431235), Js(1555081692), Js(3175218132), Js(1996064986), Js(2198950837), Js(2554220882), Js(3999719339), Js(2821834349), Js(766784016), Js(2952996808), Js(2566594879), Js(3210313671), Js(3203337956), Js(3336571891), Js(1034457026), Js(3584528711), Js(2466948901), Js(113926993), Js(3758326383), Js(338241895), Js(168717936), Js(666307205), Js(1188179964), Js(773529912), Js(1546045734), Js(1294757372), Js(1522805485), Js(1396182291), Js(2643833823), Js(1695183700), Js(2343527390), Js(1986661051), Js(1014477480), Js(2177026350), Js(1206759142), Js(2456956037), Js(344077627), Js(2730485921), Js(1290863460), Js(2820302411), Js(3158454273), Js(3259730800), Js(3505952657), Js(3345764771), Js(106217008), Js(3516065817), Js(3606008344), Js(3600352804), Js(1432725776), Js(4094571909), Js(1467031594), Js(275423344), Js(851169720), Js(430227734), Js(3100823752), Js(506948616), Js(1363258195), Js(659060556), Js(3750685593), Js(883997877), Js(3785050280), Js(958139571), Js(3318307427), Js(1322822218), Js(3812723403), Js(1537002063), Js(2003034995), Js(1747873779), Js(3602036899), Js(1955562222), Js(1575990012), Js(2024104815), Js(1125592928), Js(2227730452), Js(2716904306), Js(2361852424), Js(442776044), Js(2428436474), Js(593698344), Js(2756734187), Js(3733110249), Js(3204031479), Js(2999351573), Js(3329325298), Js(3815920427), Js(3391569614), Js(3928383900), Js(3515267271), Js(566280711), Js(3940187606), Js(3454069534), Js(4118630271), Js(4000239992), Js(116418474), Js(1914138554), Js(174292421), Js(2731055270), Js(289380356), Js(3203993006), Js(460393269), Js(320620315), Js(685471733), Js(587496836), Js(852142971), Js(1086792851), Js(1017036298), Js(365543100), Js(1126000580), Js(2618297676), Js(1288033470), Js(3409855158), Js(1501505948), Js(4234509866), Js(1607167915), Js(987167468), Js(1816402316), Js(1246189591)]))
        pass
        var.get('utils').callprop('inherits', var.get('SHA512'), var.get('BlockHash'))
        var.get('module').put('exports', var.get('SHA512'))
        var.get('SHA512').put('blockSize', Js(1024.0))
        var.get('SHA512').put('outSize', Js(512.0))
        var.get('SHA512').put('hmacStrength', Js(192.0))
        var.get('SHA512').put('padLength', Js(128.0))
        @Js
        def PyJs__prepareBlock_2497_(msg, start, this, arguments, var=var):
            var = Scope({'msg':msg, 'start':start, 'this':this, 'arguments':arguments, '_prepareBlock':PyJs__prepareBlock_2497_}, var)
            var.registers(['c0_lo', 'c2_lo', 'c2_hi', 'i', 'msg', 'start', 'c1_lo', 'c3_lo', 'W', 'c0_hi', 'c1_hi', 'c3_hi'])
            var.put('W', var.get(u"this").get('W'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(32.0)):
                try:
                    var.get('W').put(var.get('i'), var.get('msg').get((var.get('start')+var.get('i'))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            #for JS loop

            while (var.get('i')<var.get('W').get('length')):
                try:
                    var.put('c0_hi', var.get('g1_512_hi')(var.get('W').get((var.get('i')-Js(4.0))), var.get('W').get((var.get('i')-Js(3.0)))))
                    var.put('c0_lo', var.get('g1_512_lo')(var.get('W').get((var.get('i')-Js(4.0))), var.get('W').get((var.get('i')-Js(3.0)))))
                    var.put('c1_hi', var.get('W').get((var.get('i')-Js(14.0))))
                    var.put('c1_lo', var.get('W').get((var.get('i')-Js(13.0))))
                    var.put('c2_hi', var.get('g0_512_hi')(var.get('W').get((var.get('i')-Js(30.0))), var.get('W').get((var.get('i')-Js(29.0)))))
                    var.put('c2_lo', var.get('g0_512_lo')(var.get('W').get((var.get('i')-Js(30.0))), var.get('W').get((var.get('i')-Js(29.0)))))
                    var.put('c3_hi', var.get('W').get((var.get('i')-Js(32.0))))
                    var.put('c3_lo', var.get('W').get((var.get('i')-Js(31.0))))
                    var.get('W').put(var.get('i'), var.get('sum64_4_hi')(var.get('c0_hi'), var.get('c0_lo'), var.get('c1_hi'), var.get('c1_lo'), var.get('c2_hi'), var.get('c2_lo'), var.get('c3_hi'), var.get('c3_lo')))
                    var.get('W').put((var.get('i')+Js(1.0)), var.get('sum64_4_lo')(var.get('c0_hi'), var.get('c0_lo'), var.get('c1_hi'), var.get('c1_lo'), var.get('c2_hi'), var.get('c2_lo'), var.get('c3_hi'), var.get('c3_lo')))
                finally:
                        var.put('i', Js(2.0), '+')
        PyJs__prepareBlock_2497_._set_name('_prepareBlock')
        var.get('SHA512').get('prototype').put('_prepareBlock', PyJs__prepareBlock_2497_)
        @Js
        def PyJs__update_2498_(msg, start, this, arguments, var=var):
            var = Scope({'msg':msg, 'start':start, 'this':this, 'arguments':arguments, '_update':PyJs__update_2498_}, var)
            var.registers(['bl', 'c3_lo', 'c0_hi', 'c0_lo', 'c2_lo', 'c2_hi', 'i', 'hl', 'ch', 'hh', 'c1_lo', 'T1_hi', 'el', 'T2_lo', 'fh', 'c1_hi', 'c4_lo', 'T1_lo', 'dh', 'msg', 'eh', 'gl', 'bh', 'T2_hi', 'gh', 'c3_hi', 'c4_hi', 'al', 'start', 'dl', 'W', 'fl', 'ah', 'cl'])
            var.get(u"this").callprop('_prepareBlock', var.get('msg'), var.get('start'))
            var.put('W', var.get(u"this").get('W'))
            var.put('ah', var.get(u"this").get('h').get('0'))
            var.put('al', var.get(u"this").get('h').get('1'))
            var.put('bh', var.get(u"this").get('h').get('2'))
            var.put('bl', var.get(u"this").get('h').get('3'))
            var.put('ch', var.get(u"this").get('h').get('4'))
            var.put('cl', var.get(u"this").get('h').get('5'))
            var.put('dh', var.get(u"this").get('h').get('6'))
            var.put('dl', var.get(u"this").get('h').get('7'))
            var.put('eh', var.get(u"this").get('h').get('8'))
            var.put('el', var.get(u"this").get('h').get('9'))
            var.put('fh', var.get(u"this").get('h').get('10'))
            var.put('fl', var.get(u"this").get('h').get('11'))
            var.put('gh', var.get(u"this").get('h').get('12'))
            var.put('gl', var.get(u"this").get('h').get('13'))
            var.put('hh', var.get(u"this").get('h').get('14'))
            var.put('hl', var.get(u"this").get('h').get('15'))
            var.get('assert')(_seq(var.get(u"this").get('k').get('length'),var.get('W').get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('W').get('length')):
                try:
                    var.put('c0_hi', var.get('hh'))
                    var.put('c0_lo', var.get('hl'))
                    var.put('c1_hi', var.get('s1_512_hi')(var.get('eh'), var.get('el')))
                    var.put('c1_lo', var.get('s1_512_lo')(var.get('eh'), var.get('el')))
                    var.put('c2_hi', var.get('ch64_hi')(var.get('eh'), var.get('el'), var.get('fh'), var.get('fl'), var.get('gh'), var.get('gl')))
                    var.put('c2_lo', var.get('ch64_lo')(var.get('eh'), var.get('el'), var.get('fh'), var.get('fl'), var.get('gh'), var.get('gl')))
                    var.put('c3_hi', var.get(u"this").get('k').get(var.get('i')))
                    var.put('c3_lo', var.get(u"this").get('k').get((var.get('i')+Js(1.0))))
                    var.put('c4_hi', var.get('W').get(var.get('i')))
                    var.put('c4_lo', var.get('W').get((var.get('i')+Js(1.0))))
                    var.put('T1_hi', var.get('sum64_5_hi')(var.get('c0_hi'), var.get('c0_lo'), var.get('c1_hi'), var.get('c1_lo'), var.get('c2_hi'), var.get('c2_lo'), var.get('c3_hi'), var.get('c3_lo'), var.get('c4_hi'), var.get('c4_lo')))
                    var.put('T1_lo', var.get('sum64_5_lo')(var.get('c0_hi'), var.get('c0_lo'), var.get('c1_hi'), var.get('c1_lo'), var.get('c2_hi'), var.get('c2_lo'), var.get('c3_hi'), var.get('c3_lo'), var.get('c4_hi'), var.get('c4_lo')))
                    var.put('c0_hi', var.get('s0_512_hi')(var.get('ah'), var.get('al')))
                    var.put('c0_lo', var.get('s0_512_lo')(var.get('ah'), var.get('al')))
                    var.put('c1_hi', var.get('maj64_hi')(var.get('ah'), var.get('al'), var.get('bh'), var.get('bl'), var.get('ch'), var.get('cl')))
                    var.put('c1_lo', var.get('maj64_lo')(var.get('ah'), var.get('al'), var.get('bh'), var.get('bl'), var.get('ch'), var.get('cl')))
                    var.put('T2_hi', var.get('sum64_hi')(var.get('c0_hi'), var.get('c0_lo'), var.get('c1_hi'), var.get('c1_lo')))
                    var.put('T2_lo', var.get('sum64_lo')(var.get('c0_hi'), var.get('c0_lo'), var.get('c1_hi'), var.get('c1_lo')))
                    var.put('hh', var.get('gh'))
                    var.put('hl', var.get('gl'))
                    var.put('gh', var.get('fh'))
                    var.put('gl', var.get('fl'))
                    var.put('fh', var.get('eh'))
                    var.put('fl', var.get('el'))
                    var.put('eh', var.get('sum64_hi')(var.get('dh'), var.get('dl'), var.get('T1_hi'), var.get('T1_lo')))
                    var.put('el', var.get('sum64_lo')(var.get('dl'), var.get('dl'), var.get('T1_hi'), var.get('T1_lo')))
                    var.put('dh', var.get('ch'))
                    var.put('dl', var.get('cl'))
                    var.put('ch', var.get('bh'))
                    var.put('cl', var.get('bl'))
                    var.put('bh', var.get('ah'))
                    var.put('bl', var.get('al'))
                    var.put('ah', var.get('sum64_hi')(var.get('T1_hi'), var.get('T1_lo'), var.get('T2_hi'), var.get('T2_lo')))
                    var.put('al', var.get('sum64_lo')(var.get('T1_hi'), var.get('T1_lo'), var.get('T2_hi'), var.get('T2_lo')))
                finally:
                        var.put('i', Js(2.0), '+')
            var.get('sum64')(var.get(u"this").get('h'), Js(0.0), var.get('ah'), var.get('al'))
            var.get('sum64')(var.get(u"this").get('h'), Js(2.0), var.get('bh'), var.get('bl'))
            var.get('sum64')(var.get(u"this").get('h'), Js(4.0), var.get('ch'), var.get('cl'))
            var.get('sum64')(var.get(u"this").get('h'), Js(6.0), var.get('dh'), var.get('dl'))
            var.get('sum64')(var.get(u"this").get('h'), Js(8.0), var.get('eh'), var.get('el'))
            var.get('sum64')(var.get(u"this").get('h'), Js(10.0), var.get('fh'), var.get('fl'))
            var.get('sum64')(var.get(u"this").get('h'), Js(12.0), var.get('gh'), var.get('gl'))
            var.get('sum64')(var.get(u"this").get('h'), Js(14.0), var.get('hh'), var.get('hl'))
        PyJs__update_2498_._set_name('_update')
        var.get('SHA512').get('prototype').put('_update', PyJs__update_2498_)
        @Js
        def PyJs_digest_2499_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments, 'digest':PyJs_digest_2499_}, var)
            var.registers(['enc'])
            if _seq(var.get('enc'),Js('hex')):
                return var.get('utils').callprop('toHex32', var.get(u"this").get('h'), Js('big'))
            else:
                return var.get('utils').callprop('split32', var.get(u"this").get('h'), Js('big'))
        PyJs_digest_2499_._set_name('digest')
        var.get('SHA512').get('prototype').put('_digest', PyJs_digest_2499_)
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_2496_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2500_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'g1_256', 'require', 'module', 'maj32', 'g0_256', 'ch32', 'rotr32', 's0_256', 's1_256', 'utils', 'ft_1', 'p32'])
        @Js
        def PyJsHoisted_ft_1_(s, x, y, z, this, arguments, var=var):
            var = Scope({'s':s, 'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'y', 'z', 's'])
            if _seq(var.get('s'),Js(0.0)):
                return var.get('ch32')(var.get('x'), var.get('y'), var.get('z'))
            if (_seq(var.get('s'),Js(1.0)) or _seq(var.get('s'),Js(3.0))):
                return var.get('p32')(var.get('x'), var.get('y'), var.get('z'))
            if _seq(var.get('s'),Js(2.0)):
                return var.get('maj32')(var.get('x'), var.get('y'), var.get('z'))
        PyJsHoisted_ft_1_.func_name = 'ft_1'
        var.put('ft_1', PyJsHoisted_ft_1_)
        @Js
        def PyJsHoisted_ch32_(x, y, z, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'z', 'y'])
            return ((var.get('x')&var.get('y'))^((~var.get('x'))&var.get('z')))
        PyJsHoisted_ch32_.func_name = 'ch32'
        var.put('ch32', PyJsHoisted_ch32_)
        @Js
        def PyJsHoisted_maj32_(x, y, z, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'z', 'y'])
            return (((var.get('x')&var.get('y'))^(var.get('x')&var.get('z')))^(var.get('y')&var.get('z')))
        PyJsHoisted_maj32_.func_name = 'maj32'
        var.put('maj32', PyJsHoisted_maj32_)
        @Js
        def PyJsHoisted_p32_(x, y, z, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'z', 'y'])
            return ((var.get('x')^var.get('y'))^var.get('z'))
        PyJsHoisted_p32_.func_name = 'p32'
        var.put('p32', PyJsHoisted_p32_)
        @Js
        def PyJsHoisted_s0_256_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return ((var.get('rotr32')(var.get('x'), Js(2.0))^var.get('rotr32')(var.get('x'), Js(13.0)))^var.get('rotr32')(var.get('x'), Js(22.0)))
        PyJsHoisted_s0_256_.func_name = 's0_256'
        var.put('s0_256', PyJsHoisted_s0_256_)
        @Js
        def PyJsHoisted_s1_256_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return ((var.get('rotr32')(var.get('x'), Js(6.0))^var.get('rotr32')(var.get('x'), Js(11.0)))^var.get('rotr32')(var.get('x'), Js(25.0)))
        PyJsHoisted_s1_256_.func_name = 's1_256'
        var.put('s1_256', PyJsHoisted_s1_256_)
        @Js
        def PyJsHoisted_g0_256_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return ((var.get('rotr32')(var.get('x'), Js(7.0))^var.get('rotr32')(var.get('x'), Js(18.0)))^PyJsBshift(var.get('x'),Js(3.0)))
        PyJsHoisted_g0_256_.func_name = 'g0_256'
        var.put('g0_256', PyJsHoisted_g0_256_)
        @Js
        def PyJsHoisted_g1_256_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return ((var.get('rotr32')(var.get('x'), Js(17.0))^var.get('rotr32')(var.get('x'), Js(19.0)))^PyJsBshift(var.get('x'),Js(10.0)))
        PyJsHoisted_g1_256_.func_name = 'g1_256'
        var.put('g1_256', PyJsHoisted_g1_256_)
        Js('use strict')
        var.put('utils', var.get('require')(Js('../utils')))
        var.put('rotr32', var.get('utils').get('rotr32'))
        pass
        var.get('exports').put('ft_1', var.get('ft_1'))
        pass
        var.get('exports').put('ch32', var.get('ch32'))
        pass
        var.get('exports').put('maj32', var.get('maj32'))
        pass
        var.get('exports').put('p32', var.get('p32'))
        pass
        var.get('exports').put('s0_256', var.get('s0_256'))
        pass
        var.get('exports').put('s1_256', var.get('s1_256'))
        pass
        var.get('exports').put('g0_256', var.get('g0_256'))
        pass
        var.get('exports').put('g1_256', var.get('g1_256'))
    PyJs_anonymous_2500_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2501_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['toHex32', 'sum64_5_lo', 'module', 'htonl', 'sum64_4_lo', 'zero8', 'split32', 'sum32_5', 'toArray', 'sum64_4_hi', 'sum32_4', 'sum64_5_hi', 'inherits', 'rotl32', 'toHex', 'require', 'isSurrogatePair', 'sum32_3', 'rotr64_lo', 'shr64_lo', 'join32', 'rotr32', 'rotr64_hi', 'assert', 'zero2', 'sum64_hi', 'shr64_hi', 'exports', 'sum64_lo', 'sum64', 'sum32'])
        @Js
        def PyJsHoisted_isSurrogatePair_(msg, i, this, arguments, var=var):
            var = Scope({'msg':msg, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'msg'])
            if PyJsStrictNeq((var.get('msg').callprop('charCodeAt', var.get('i'))&Js(64512)),Js(55296)):
                return Js(False)
            if ((var.get('i')<Js(0.0)) or ((var.get('i')+Js(1.0))>=var.get('msg').get('length'))):
                return Js(False)
            return _seq((var.get('msg').callprop('charCodeAt', (var.get('i')+Js(1.0)))&Js(64512)),Js(56320))
        PyJsHoisted_isSurrogatePair_.func_name = 'isSurrogatePair'
        var.put('isSurrogatePair', PyJsHoisted_isSurrogatePair_)
        @Js
        def PyJsHoisted_toArray_(msg, enc, this, arguments, var=var):
            var = Scope({'msg':msg, 'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'c', 'msg', 'p', 'enc', 'res'])
            if var.get('Array').callprop('isArray', var.get('msg')):
                return var.get('msg').callprop('slice')
            if var.get('msg').neg():
                return Js([])
            var.put('res', Js([]))
            if _seq(var.get('msg',throw=False).typeof(),Js('string')):
                if var.get('enc').neg():
                    var.put('p', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('msg').get('length')):
                        try:
                            var.put('c', var.get('msg').callprop('charCodeAt', var.get('i')))
                            if (var.get('c')<Js(128.0)):
                                var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), var.get('c'))
                            else:
                                if (var.get('c')<Js(2048.0)):
                                    var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), ((var.get('c')>>Js(6.0))|Js(192.0)))
                                    var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), ((var.get('c')&Js(63.0))|Js(128.0)))
                                else:
                                    if var.get('isSurrogatePair')(var.get('msg'), var.get('i')):
                                        var.put('c', ((Js(65536)+((var.get('c')&Js(1023))<<Js(10.0)))+(var.get('msg').callprop('charCodeAt', var.put('i',Js(var.get('i').to_number())+Js(1)))&Js(1023))))
                                        var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), ((var.get('c')>>Js(18.0))|Js(240.0)))
                                        var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), (((var.get('c')>>Js(12.0))&Js(63.0))|Js(128.0)))
                                        var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), (((var.get('c')>>Js(6.0))&Js(63.0))|Js(128.0)))
                                        var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), ((var.get('c')&Js(63.0))|Js(128.0)))
                                    else:
                                        var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), ((var.get('c')>>Js(12.0))|Js(224.0)))
                                        var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), (((var.get('c')>>Js(6.0))&Js(63.0))|Js(128.0)))
                                        var.get('res').put((var.put('p',Js(var.get('p').to_number())+Js(1))-Js(1)), ((var.get('c')&Js(63.0))|Js(128.0)))
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                else:
                    if _seq(var.get('enc'),Js('hex')):
                        var.put('msg', var.get('msg').callprop('replace', JsRegExp('/[^a-z0-9]+/ig'), Js('')))
                        if PyJsStrictNeq((var.get('msg').get('length')%Js(2.0)),Js(0.0)):
                            var.put('msg', (Js('0')+var.get('msg')))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('msg').get('length')):
                            try:
                                var.get('res').callprop('push', var.get('parseInt')((var.get('msg').get(var.get('i'))+var.get('msg').get((var.get('i')+Js(1.0)))), Js(16.0)))
                            finally:
                                    var.put('i', Js(2.0), '+')
            else:
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('msg').get('length')):
                    try:
                        var.get('res').put(var.get('i'), (var.get('msg').get(var.get('i'))|Js(0.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('res')
        PyJsHoisted_toArray_.func_name = 'toArray'
        var.put('toArray', PyJsHoisted_toArray_)
        @Js
        def PyJsHoisted_toHex_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'msg', 'res'])
            var.put('res', Js(''))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('msg').get('length')):
                try:
                    var.put('res', var.get('zero2')(var.get('msg').get(var.get('i')).callprop('toString', Js(16.0))), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('res')
        PyJsHoisted_toHex_.func_name = 'toHex'
        var.put('toHex', PyJsHoisted_toHex_)
        @Js
        def PyJsHoisted_htonl_(w, this, arguments, var=var):
            var = Scope({'w':w, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 'res'])
            var.put('res', (((PyJsBshift(var.get('w'),Js(24.0))|(PyJsBshift(var.get('w'),Js(8.0))&Js(65280)))|((var.get('w')<<Js(8.0))&Js(16711680)))|((var.get('w')&Js(255))<<Js(24.0))))
            return PyJsBshift(var.get('res'),Js(0.0))
        PyJsHoisted_htonl_.func_name = 'htonl'
        var.put('htonl', PyJsHoisted_htonl_)
        @Js
        def PyJsHoisted_toHex32_(msg, endian, this, arguments, var=var):
            var = Scope({'msg':msg, 'endian':endian, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 'i', 'msg', 'endian', 'res'])
            var.put('res', Js(''))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('msg').get('length')):
                try:
                    var.put('w', var.get('msg').get(var.get('i')))
                    if _seq(var.get('endian'),Js('little')):
                        var.put('w', var.get('htonl')(var.get('w')))
                    var.put('res', var.get('zero8')(var.get('w').callprop('toString', Js(16.0))), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('res')
        PyJsHoisted_toHex32_.func_name = 'toHex32'
        var.put('toHex32', PyJsHoisted_toHex32_)
        @Js
        def PyJsHoisted_zero2_(word, this, arguments, var=var):
            var = Scope({'word':word, 'this':this, 'arguments':arguments}, var)
            var.registers(['word'])
            if _seq(var.get('word').get('length'),Js(1.0)):
                return (Js('0')+var.get('word'))
            else:
                return var.get('word')
        PyJsHoisted_zero2_.func_name = 'zero2'
        var.put('zero2', PyJsHoisted_zero2_)
        @Js
        def PyJsHoisted_zero8_(word, this, arguments, var=var):
            var = Scope({'word':word, 'this':this, 'arguments':arguments}, var)
            var.registers(['word'])
            if _seq(var.get('word').get('length'),Js(7.0)):
                return (Js('0')+var.get('word'))
            else:
                if _seq(var.get('word').get('length'),Js(6.0)):
                    return (Js('00')+var.get('word'))
                else:
                    if _seq(var.get('word').get('length'),Js(5.0)):
                        return (Js('000')+var.get('word'))
                    else:
                        if _seq(var.get('word').get('length'),Js(4.0)):
                            return (Js('0000')+var.get('word'))
                        else:
                            if _seq(var.get('word').get('length'),Js(3.0)):
                                return (Js('00000')+var.get('word'))
                            else:
                                if _seq(var.get('word').get('length'),Js(2.0)):
                                    return (Js('000000')+var.get('word'))
                                else:
                                    if _seq(var.get('word').get('length'),Js(1.0)):
                                        return (Js('0000000')+var.get('word'))
                                    else:
                                        return var.get('word')
        PyJsHoisted_zero8_.func_name = 'zero8'
        var.put('zero8', PyJsHoisted_zero8_)
        @Js
        def PyJsHoisted_join32_(msg, start, end, endian, this, arguments, var=var):
            var = Scope({'msg':msg, 'start':start, 'end':end, 'endian':endian, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 'len', 'i', 'msg', 'start', 'k', 'end', 'endian', 'res'])
            var.put('len', (var.get('end')-var.get('start')))
            var.get('assert')(_seq((var.get('len')%Js(4.0)),Js(0.0)))
            var.put('res', var.get('Array').create((var.get('len')/Js(4.0))))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('k', var.get('start'))
            while (var.get('i')<var.get('res').get('length')):
                try:
                    pass
                    if _seq(var.get('endian'),Js('big')):
                        var.put('w', ((((var.get('msg').get(var.get('k'))<<Js(24.0))|(var.get('msg').get((var.get('k')+Js(1.0)))<<Js(16.0)))|(var.get('msg').get((var.get('k')+Js(2.0)))<<Js(8.0)))|var.get('msg').get((var.get('k')+Js(3.0)))))
                    else:
                        var.put('w', ((((var.get('msg').get((var.get('k')+Js(3.0)))<<Js(24.0))|(var.get('msg').get((var.get('k')+Js(2.0)))<<Js(16.0)))|(var.get('msg').get((var.get('k')+Js(1.0)))<<Js(8.0)))|var.get('msg').get(var.get('k'))))
                    var.get('res').put(var.get('i'), PyJsBshift(var.get('w'),Js(0.0)))
                finally:
                        PyJsComma((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)),var.put('k', Js(4.0), '+'))
            return var.get('res')
        PyJsHoisted_join32_.func_name = 'join32'
        var.put('join32', PyJsHoisted_join32_)
        @Js
        def PyJsHoisted_split32_(msg, endian, this, arguments, var=var):
            var = Scope({'msg':msg, 'endian':endian, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'msg', 'k', 'm', 'endian', 'res'])
            var.put('res', var.get('Array').create((var.get('msg').get('length')*Js(4.0))))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('k', Js(0.0))
            while (var.get('i')<var.get('msg').get('length')):
                try:
                    var.put('m', var.get('msg').get(var.get('i')))
                    if _seq(var.get('endian'),Js('big')):
                        var.get('res').put(var.get('k'), PyJsBshift(var.get('m'),Js(24.0)))
                        var.get('res').put((var.get('k')+Js(1.0)), (PyJsBshift(var.get('m'),Js(16.0))&Js(255)))
                        var.get('res').put((var.get('k')+Js(2.0)), (PyJsBshift(var.get('m'),Js(8.0))&Js(255)))
                        var.get('res').put((var.get('k')+Js(3.0)), (var.get('m')&Js(255)))
                    else:
                        var.get('res').put((var.get('k')+Js(3.0)), PyJsBshift(var.get('m'),Js(24.0)))
                        var.get('res').put((var.get('k')+Js(2.0)), (PyJsBshift(var.get('m'),Js(16.0))&Js(255)))
                        var.get('res').put((var.get('k')+Js(1.0)), (PyJsBshift(var.get('m'),Js(8.0))&Js(255)))
                        var.get('res').put(var.get('k'), (var.get('m')&Js(255)))
                finally:
                        PyJsComma((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)),var.put('k', Js(4.0), '+'))
            return var.get('res')
        PyJsHoisted_split32_.func_name = 'split32'
        var.put('split32', PyJsHoisted_split32_)
        @Js
        def PyJsHoisted_rotr32_(w, b, this, arguments, var=var):
            var = Scope({'w':w, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 'b'])
            return (PyJsBshift(var.get('w'),var.get('b'))|(var.get('w')<<(Js(32.0)-var.get('b'))))
        PyJsHoisted_rotr32_.func_name = 'rotr32'
        var.put('rotr32', PyJsHoisted_rotr32_)
        @Js
        def PyJsHoisted_rotl32_(w, b, this, arguments, var=var):
            var = Scope({'w':w, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 'b'])
            return ((var.get('w')<<var.get('b'))|PyJsBshift(var.get('w'),(Js(32.0)-var.get('b'))))
        PyJsHoisted_rotl32_.func_name = 'rotl32'
        var.put('rotl32', PyJsHoisted_rotl32_)
        @Js
        def PyJsHoisted_sum32_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return PyJsBshift((var.get('a')+var.get('b')),Js(0.0))
        PyJsHoisted_sum32_.func_name = 'sum32'
        var.put('sum32', PyJsHoisted_sum32_)
        @Js
        def PyJsHoisted_sum32_3_(a, b, c, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'this':this, 'arguments':arguments}, var)
            var.registers(['c', 'a', 'b'])
            return PyJsBshift(((var.get('a')+var.get('b'))+var.get('c')),Js(0.0))
        PyJsHoisted_sum32_3_.func_name = 'sum32_3'
        var.put('sum32_3', PyJsHoisted_sum32_3_)
        @Js
        def PyJsHoisted_sum32_4_(a, b, c, d, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'this':this, 'arguments':arguments}, var)
            var.registers(['c', 'a', 'd', 'b'])
            return PyJsBshift((((var.get('a')+var.get('b'))+var.get('c'))+var.get('d')),Js(0.0))
        PyJsHoisted_sum32_4_.func_name = 'sum32_4'
        var.put('sum32_4', PyJsHoisted_sum32_4_)
        @Js
        def PyJsHoisted_sum32_5_(a, b, c, d, e, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'e':e, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'e', 'c', 'b', 'd'])
            return PyJsBshift(((((var.get('a')+var.get('b'))+var.get('c'))+var.get('d'))+var.get('e')),Js(0.0))
        PyJsHoisted_sum32_5_.func_name = 'sum32_5'
        var.put('sum32_5', PyJsHoisted_sum32_5_)
        @Js
        def PyJsHoisted_sum64_(buf, pos, ah, al, this, arguments, var=var):
            var = Scope({'buf':buf, 'pos':pos, 'ah':ah, 'al':al, 'this':this, 'arguments':arguments}, var)
            var.registers(['bl', 'al', 'buf', 'hi', 'lo', 'pos', 'bh', 'ah'])
            var.put('bh', var.get('buf').get(var.get('pos')))
            var.put('bl', var.get('buf').get((var.get('pos')+Js(1.0))))
            var.put('lo', PyJsBshift((var.get('al')+var.get('bl')),Js(0.0)))
            var.put('hi', (((Js(1.0) if (var.get('lo')<var.get('al')) else Js(0.0))+var.get('ah'))+var.get('bh')))
            var.get('buf').put(var.get('pos'), PyJsBshift(var.get('hi'),Js(0.0)))
            var.get('buf').put((var.get('pos')+Js(1.0)), var.get('lo'))
        PyJsHoisted_sum64_.func_name = 'sum64'
        var.put('sum64', PyJsHoisted_sum64_)
        @Js
        def PyJsHoisted_sum64_hi_(ah, al, bh, bl, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'bh':bh, 'bl':bl, 'this':this, 'arguments':arguments}, var)
            var.registers(['al', 'bl', 'hi', 'lo', 'bh', 'ah'])
            var.put('lo', PyJsBshift((var.get('al')+var.get('bl')),Js(0.0)))
            var.put('hi', (((Js(1.0) if (var.get('lo')<var.get('al')) else Js(0.0))+var.get('ah'))+var.get('bh')))
            return PyJsBshift(var.get('hi'),Js(0.0))
        PyJsHoisted_sum64_hi_.func_name = 'sum64_hi'
        var.put('sum64_hi', PyJsHoisted_sum64_hi_)
        @Js
        def PyJsHoisted_sum64_lo_(ah, al, bh, bl, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'bh':bh, 'bl':bl, 'this':this, 'arguments':arguments}, var)
            var.registers(['al', 'bl', 'lo', 'bh', 'ah'])
            var.put('lo', (var.get('al')+var.get('bl')))
            return PyJsBshift(var.get('lo'),Js(0.0))
        PyJsHoisted_sum64_lo_.func_name = 'sum64_lo'
        var.put('sum64_lo', PyJsHoisted_sum64_lo_)
        @Js
        def PyJsHoisted_sum64_4_hi_(ah, al, bh, bl, ch, cl, dh, dl, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'bh':bh, 'bl':bl, 'ch':ch, 'cl':cl, 'dh':dh, 'dl':dl, 'this':this, 'arguments':arguments}, var)
            var.registers(['dh', 'al', 'bl', 'ch', 'hi', 'lo', 'dl', 'bh', 'ah', 'carry', 'cl'])
            var.put('carry', Js(0.0))
            var.put('lo', var.get('al'))
            var.put('lo', PyJsBshift((var.get('lo')+var.get('bl')),Js(0.0)))
            var.put('carry', (Js(1.0) if (var.get('lo')<var.get('al')) else Js(0.0)), '+')
            var.put('lo', PyJsBshift((var.get('lo')+var.get('cl')),Js(0.0)))
            var.put('carry', (Js(1.0) if (var.get('lo')<var.get('cl')) else Js(0.0)), '+')
            var.put('lo', PyJsBshift((var.get('lo')+var.get('dl')),Js(0.0)))
            var.put('carry', (Js(1.0) if (var.get('lo')<var.get('dl')) else Js(0.0)), '+')
            var.put('hi', ((((var.get('ah')+var.get('bh'))+var.get('ch'))+var.get('dh'))+var.get('carry')))
            return PyJsBshift(var.get('hi'),Js(0.0))
        PyJsHoisted_sum64_4_hi_.func_name = 'sum64_4_hi'
        var.put('sum64_4_hi', PyJsHoisted_sum64_4_hi_)
        @Js
        def PyJsHoisted_sum64_4_lo_(ah, al, bh, bl, ch, cl, dh, dl, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'bh':bh, 'bl':bl, 'ch':ch, 'cl':cl, 'dh':dh, 'dl':dl, 'this':this, 'arguments':arguments}, var)
            var.registers(['dh', 'al', 'bl', 'ch', 'lo', 'dl', 'bh', 'ah', 'cl'])
            var.put('lo', (((var.get('al')+var.get('bl'))+var.get('cl'))+var.get('dl')))
            return PyJsBshift(var.get('lo'),Js(0.0))
        PyJsHoisted_sum64_4_lo_.func_name = 'sum64_4_lo'
        var.put('sum64_4_lo', PyJsHoisted_sum64_4_lo_)
        @Js
        def PyJsHoisted_sum64_5_hi_(ah, al, bh, bl, ch, cl, dh, dl, eh, el, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'bh':bh, 'bl':bl, 'ch':ch, 'cl':cl, 'dh':dh, 'dl':dl, 'eh':eh, 'el':el, 'this':this, 'arguments':arguments}, var)
            var.registers(['dh', 'al', 'bl', 'ch', 'eh', 'hi', 'lo', 'dl', 'bh', 'el', 'ah', 'carry', 'cl'])
            var.put('carry', Js(0.0))
            var.put('lo', var.get('al'))
            var.put('lo', PyJsBshift((var.get('lo')+var.get('bl')),Js(0.0)))
            var.put('carry', (Js(1.0) if (var.get('lo')<var.get('al')) else Js(0.0)), '+')
            var.put('lo', PyJsBshift((var.get('lo')+var.get('cl')),Js(0.0)))
            var.put('carry', (Js(1.0) if (var.get('lo')<var.get('cl')) else Js(0.0)), '+')
            var.put('lo', PyJsBshift((var.get('lo')+var.get('dl')),Js(0.0)))
            var.put('carry', (Js(1.0) if (var.get('lo')<var.get('dl')) else Js(0.0)), '+')
            var.put('lo', PyJsBshift((var.get('lo')+var.get('el')),Js(0.0)))
            var.put('carry', (Js(1.0) if (var.get('lo')<var.get('el')) else Js(0.0)), '+')
            var.put('hi', (((((var.get('ah')+var.get('bh'))+var.get('ch'))+var.get('dh'))+var.get('eh'))+var.get('carry')))
            return PyJsBshift(var.get('hi'),Js(0.0))
        PyJsHoisted_sum64_5_hi_.func_name = 'sum64_5_hi'
        var.put('sum64_5_hi', PyJsHoisted_sum64_5_hi_)
        @Js
        def PyJsHoisted_sum64_5_lo_(ah, al, bh, bl, ch, cl, dh, dl, eh, el, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'bh':bh, 'bl':bl, 'ch':ch, 'cl':cl, 'dh':dh, 'dl':dl, 'eh':eh, 'el':el, 'this':this, 'arguments':arguments}, var)
            var.registers(['dh', 'al', 'bl', 'ch', 'eh', 'lo', 'dl', 'bh', 'el', 'ah', 'cl'])
            var.put('lo', ((((var.get('al')+var.get('bl'))+var.get('cl'))+var.get('dl'))+var.get('el')))
            return PyJsBshift(var.get('lo'),Js(0.0))
        PyJsHoisted_sum64_5_lo_.func_name = 'sum64_5_lo'
        var.put('sum64_5_lo', PyJsHoisted_sum64_5_lo_)
        @Js
        def PyJsHoisted_rotr64_hi_(ah, al, num, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['al', 'ah', 'r', 'num'])
            var.put('r', ((var.get('al')<<(Js(32.0)-var.get('num')))|PyJsBshift(var.get('ah'),var.get('num'))))
            return PyJsBshift(var.get('r'),Js(0.0))
        PyJsHoisted_rotr64_hi_.func_name = 'rotr64_hi'
        var.put('rotr64_hi', PyJsHoisted_rotr64_hi_)
        @Js
        def PyJsHoisted_rotr64_lo_(ah, al, num, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['al', 'ah', 'r', 'num'])
            var.put('r', ((var.get('ah')<<(Js(32.0)-var.get('num')))|PyJsBshift(var.get('al'),var.get('num'))))
            return PyJsBshift(var.get('r'),Js(0.0))
        PyJsHoisted_rotr64_lo_.func_name = 'rotr64_lo'
        var.put('rotr64_lo', PyJsHoisted_rotr64_lo_)
        @Js
        def PyJsHoisted_shr64_hi_(ah, al, num, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['al', 'ah', 'num'])
            return PyJsBshift(var.get('ah'),var.get('num'))
        PyJsHoisted_shr64_hi_.func_name = 'shr64_hi'
        var.put('shr64_hi', PyJsHoisted_shr64_hi_)
        @Js
        def PyJsHoisted_shr64_lo_(ah, al, num, this, arguments, var=var):
            var = Scope({'ah':ah, 'al':al, 'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['al', 'ah', 'r', 'num'])
            var.put('r', ((var.get('ah')<<(Js(32.0)-var.get('num')))|PyJsBshift(var.get('al'),var.get('num'))))
            return PyJsBshift(var.get('r'),Js(0.0))
        PyJsHoisted_shr64_lo_.func_name = 'shr64_lo'
        var.put('shr64_lo', PyJsHoisted_shr64_lo_)
        Js('use strict')
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.get('exports').put('inherits', var.get('inherits'))
        pass
        pass
        var.get('exports').put('toArray', var.get('toArray'))
        pass
        var.get('exports').put('toHex', var.get('toHex'))
        pass
        var.get('exports').put('htonl', var.get('htonl'))
        pass
        var.get('exports').put('toHex32', var.get('toHex32'))
        pass
        var.get('exports').put('zero2', var.get('zero2'))
        pass
        var.get('exports').put('zero8', var.get('zero8'))
        pass
        var.get('exports').put('join32', var.get('join32'))
        pass
        var.get('exports').put('split32', var.get('split32'))
        pass
        var.get('exports').put('rotr32', var.get('rotr32'))
        pass
        var.get('exports').put('rotl32', var.get('rotl32'))
        pass
        var.get('exports').put('sum32', var.get('sum32'))
        pass
        var.get('exports').put('sum32_3', var.get('sum32_3'))
        pass
        var.get('exports').put('sum32_4', var.get('sum32_4'))
        pass
        var.get('exports').put('sum32_5', var.get('sum32_5'))
        pass
        var.get('exports').put('sum64', var.get('sum64'))
        pass
        var.get('exports').put('sum64_hi', var.get('sum64_hi'))
        pass
        var.get('exports').put('sum64_lo', var.get('sum64_lo'))
        pass
        var.get('exports').put('sum64_4_hi', var.get('sum64_4_hi'))
        pass
        var.get('exports').put('sum64_4_lo', var.get('sum64_4_lo'))
        pass
        var.get('exports').put('sum64_5_hi', var.get('sum64_5_hi'))
        pass
        var.get('exports').put('sum64_5_lo', var.get('sum64_5_lo'))
        pass
        var.get('exports').put('rotr64_hi', var.get('rotr64_hi'))
        pass
        var.get('exports').put('rotr64_lo', var.get('rotr64_lo'))
        pass
        var.get('exports').put('shr64_hi', var.get('shr64_hi'))
        pass
        var.get('exports').put('shr64_lo', var.get('shr64_lo'))
    PyJs_anonymous_2501_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2502_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'hash', 'utils', 'assert', 'HmacDRBG'])
        @Js
        def PyJsHoisted_HmacDRBG_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['pers', 'entropy', 'options', 'nonce'])
            if var.get(u"this").instanceof(var.get('HmacDRBG')).neg():
                return var.get('HmacDRBG').create(var.get('options'))
            var.get(u"this").put('hash', var.get('options').get('hash'))
            var.get(u"this").put('predResist', var.get('options').get('predResist').neg().neg())
            var.get(u"this").put('outLen', var.get(u"this").get('hash').get('outSize'))
            var.get(u"this").put('minEntropy', (var.get('options').get('minEntropy') or var.get(u"this").get('hash').get('hmacStrength')))
            var.get(u"this").put('_reseed', var.get(u"null"))
            var.get(u"this").put('reseedInterval', var.get(u"null"))
            var.get(u"this").put('K', var.get(u"null"))
            var.get(u"this").put('V', var.get(u"null"))
            var.put('entropy', var.get('utils').callprop('toArray', var.get('options').get('entropy'), (var.get('options').get('entropyEnc') or Js('hex'))))
            var.put('nonce', var.get('utils').callprop('toArray', var.get('options').get('nonce'), (var.get('options').get('nonceEnc') or Js('hex'))))
            var.put('pers', var.get('utils').callprop('toArray', var.get('options').get('pers'), (var.get('options').get('persEnc') or Js('hex'))))
            var.get('assert')((var.get('entropy').get('length')>=(var.get(u"this").get('minEntropy')/Js(8.0))), ((Js('Not enough entropy. Minimum is: ')+var.get(u"this").get('minEntropy'))+Js(' bits')))
            var.get(u"this").callprop('_init', var.get('entropy'), var.get('nonce'), var.get('pers'))
        PyJsHoisted_HmacDRBG_.func_name = 'HmacDRBG'
        var.put('HmacDRBG', PyJsHoisted_HmacDRBG_)
        Js('use strict')
        var.put('hash', var.get('require')(Js('hash.js')))
        var.put('utils', var.get('require')(Js('minimalistic-crypto-utils')))
        var.put('assert', var.get('require')(Js('minimalistic-assert')))
        pass
        var.get('module').put('exports', var.get('HmacDRBG'))
        @Js
        def PyJs_init_2503_(entropy, nonce, pers, this, arguments, var=var):
            var = Scope({'entropy':entropy, 'nonce':nonce, 'pers':pers, 'this':this, 'arguments':arguments, 'init':PyJs_init_2503_}, var)
            var.registers(['i', 'pers', 'entropy', 'seed', 'nonce'])
            var.put('seed', var.get('entropy').callprop('concat', var.get('nonce')).callprop('concat', var.get('pers')))
            var.get(u"this").put('K', var.get('Array').create((var.get(u"this").get('outLen')/Js(8.0))))
            var.get(u"this").put('V', var.get('Array').create((var.get(u"this").get('outLen')/Js(8.0))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get(u"this").get('V').get('length')):
                try:
                    var.get(u"this").get('K').put(var.get('i'), Js(0))
                    var.get(u"this").get('V').put(var.get('i'), Js(1))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get(u"this").callprop('_update', var.get('seed'))
            var.get(u"this").put('_reseed', Js(1.0))
            var.get(u"this").put('reseedInterval', Js(281474976710656))
        PyJs_init_2503_._set_name('init')
        var.get('HmacDRBG').get('prototype').put('_init', PyJs_init_2503_)
        @Js
        def PyJs_hmac_2504_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'hmac':PyJs_hmac_2504_}, var)
            var.registers([])
            return var.get('hash').get('hmac').create(var.get(u"this").get('hash'), var.get(u"this").get('K'))
        PyJs_hmac_2504_._set_name('hmac')
        var.get('HmacDRBG').get('prototype').put('_hmac', PyJs_hmac_2504_)
        @Js
        def PyJs_update_2505_(seed, this, arguments, var=var):
            var = Scope({'seed':seed, 'this':this, 'arguments':arguments, 'update':PyJs_update_2505_}, var)
            var.registers(['kmac', 'seed'])
            var.put('kmac', var.get(u"this").callprop('_hmac').callprop('update', var.get(u"this").get('V')).callprop('update', Js([Js(0)])))
            if var.get('seed'):
                var.put('kmac', var.get('kmac').callprop('update', var.get('seed')))
            var.get(u"this").put('K', var.get('kmac').callprop('digest'))
            var.get(u"this").put('V', var.get(u"this").callprop('_hmac').callprop('update', var.get(u"this").get('V')).callprop('digest'))
            if var.get('seed').neg():
                return var.get('undefined')
            var.get(u"this").put('K', var.get(u"this").callprop('_hmac').callprop('update', var.get(u"this").get('V')).callprop('update', Js([Js(1)])).callprop('update', var.get('seed')).callprop('digest'))
            var.get(u"this").put('V', var.get(u"this").callprop('_hmac').callprop('update', var.get(u"this").get('V')).callprop('digest'))
        PyJs_update_2505_._set_name('update')
        var.get('HmacDRBG').get('prototype').put('_update', PyJs_update_2505_)
        @Js
        def PyJs_reseed_2506_(entropy, entropyEnc, add, addEnc, this, arguments, var=var):
            var = Scope({'entropy':entropy, 'entropyEnc':entropyEnc, 'add':add, 'addEnc':addEnc, 'this':this, 'arguments':arguments, 'reseed':PyJs_reseed_2506_}, var)
            var.registers(['addEnc', 'entropy', 'entropyEnc', 'add'])
            if PyJsStrictNeq(var.get('entropyEnc',throw=False).typeof(),Js('string')):
                var.put('addEnc', var.get('add'))
                var.put('add', var.get('entropyEnc'))
                var.put('entropyEnc', var.get(u"null"))
            var.put('entropy', var.get('utils').callprop('toArray', var.get('entropy'), var.get('entropyEnc')))
            var.put('add', var.get('utils').callprop('toArray', var.get('add'), var.get('addEnc')))
            var.get('assert')((var.get('entropy').get('length')>=(var.get(u"this").get('minEntropy')/Js(8.0))), ((Js('Not enough entropy. Minimum is: ')+var.get(u"this").get('minEntropy'))+Js(' bits')))
            var.get(u"this").callprop('_update', var.get('entropy').callprop('concat', (var.get('add') or Js([]))))
            var.get(u"this").put('_reseed', Js(1.0))
        PyJs_reseed_2506_._set_name('reseed')
        var.get('HmacDRBG').get('prototype').put('reseed', PyJs_reseed_2506_)
        @Js
        def PyJs_generate_2507_(len, enc, add, addEnc, this, arguments, var=var):
            var = Scope({'len':len, 'enc':enc, 'add':add, 'addEnc':addEnc, 'this':this, 'arguments':arguments, 'generate':PyJs_generate_2507_}, var)
            var.registers(['addEnc', 'add', 'len', 'temp', 'res', 'enc'])
            if (var.get(u"this").get('_reseed')>var.get(u"this").get('reseedInterval')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Reseed is required')))
                raise PyJsTempException
            if PyJsStrictNeq(var.get('enc',throw=False).typeof(),Js('string')):
                var.put('addEnc', var.get('add'))
                var.put('add', var.get('enc'))
                var.put('enc', var.get(u"null"))
            if var.get('add'):
                var.put('add', var.get('utils').callprop('toArray', var.get('add'), (var.get('addEnc') or Js('hex'))))
                var.get(u"this").callprop('_update', var.get('add'))
            var.put('temp', Js([]))
            while (var.get('temp').get('length')<var.get('len')):
                var.get(u"this").put('V', var.get(u"this").callprop('_hmac').callprop('update', var.get(u"this").get('V')).callprop('digest'))
                var.put('temp', var.get('temp').callprop('concat', var.get(u"this").get('V')))
            var.put('res', var.get('temp').callprop('slice', Js(0.0), var.get('len')))
            var.get(u"this").callprop('_update', var.get('add'))
            (var.get(u"this").put('_reseed',Js(var.get(u"this").get('_reseed').to_number())+Js(1))-Js(1))
            return var.get('utils').callprop('encode', var.get('res'), var.get('enc'))
        PyJs_generate_2507_._set_name('generate')
        var.get('HmacDRBG').get('prototype').put('generate', PyJs_generate_2507_)
    PyJs_anonymous_2502_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2508_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_2509_(buffer, offset, isLE, mLen, nBytes, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'offset':offset, 'isLE':isLE, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer', 'isLE', 'i', 'e', 'eBias', 'm', 'offset', 'mLen', 'nBits', 'eLen', 'd', 'nBytes', 'eMax', 's'])
            pass
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('nBits', (-Js(7.0)))
            var.put('i', ((var.get('nBytes')-Js(1.0)) if var.get('isLE') else Js(0.0)))
            var.put('d', ((-Js(1.0)) if var.get('isLE') else Js(1.0)))
            var.put('s', var.get('buffer').get((var.get('offset')+var.get('i'))))
            var.put('i', var.get('d'), '+')
            var.put('e', (var.get('s')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
            var.put('s', (-var.get('nBits')), '>>')
            var.put('nBits', var.get('eLen'), '+')
            #for JS loop

            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('e', ((var.get('e')*Js(256.0))+var.get('buffer').get((var.get('offset')+var.get('i'))))),var.put('i', var.get('d'), '+')),var.put('nBits', Js(8.0), '-'))
            var.put('m', (var.get('e')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
            var.put('e', (-var.get('nBits')), '>>')
            var.put('nBits', var.get('mLen'), '+')
            #for JS loop

            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('m', ((var.get('m')*Js(256.0))+var.get('buffer').get((var.get('offset')+var.get('i'))))),var.put('i', var.get('d'), '+')),var.put('nBits', Js(8.0), '-'))
            if _seq(var.get('e'),Js(0.0)):
                var.put('e', (Js(1.0)-var.get('eBias')))
            else:
                if _seq(var.get('e'),var.get('eMax')):
                    return (var.get('NaN') if var.get('m') else (((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('Infinity')))
                else:
                    var.put('m', (var.get('m')+var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                    var.put('e', (var.get('e')-var.get('eBias')))
            return ((((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('m'))*var.get('Math').callprop('pow', Js(2.0), (var.get('e')-var.get('mLen'))))
        PyJs_anonymous_2509_._set_name('anonymous')
        var.get('exports').put('read', PyJs_anonymous_2509_)
        @Js
        def PyJs_anonymous_2510_(buffer, value, offset, isLE, mLen, nBytes, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'value':value, 'offset':offset, 'isLE':isLE, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer', 'isLE', 'i', 'e', 'c', 'm', 'eBias', 'mLen', 'd', 'value', 'offset', 'eLen', 'rt', 'nBytes', 'eMax', 's'])
            pass
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('rt', ((var.get('Math').callprop('pow', Js(2.0), (-Js(24.0)))-var.get('Math').callprop('pow', Js(2.0), (-Js(77.0)))) if _seq(var.get('mLen'),Js(23.0)) else Js(0.0)))
            var.put('i', (Js(0.0) if var.get('isLE') else (var.get('nBytes')-Js(1.0))))
            var.put('d', (Js(1.0) if var.get('isLE') else (-Js(1.0))))
            var.put('s', (Js(1.0) if ((var.get('value')<Js(0.0)) or (_seq(var.get('value'),Js(0.0)) and ((Js(1.0)/var.get('value'))<Js(0.0)))) else Js(0.0)))
            var.put('value', var.get('Math').callprop('abs', var.get('value')))
            if (var.get('isNaN')(var.get('value')) or _seq(var.get('value'),var.get('Infinity'))):
                var.put('m', (Js(1.0) if var.get('isNaN')(var.get('value')) else Js(0.0)))
                var.put('e', var.get('eMax'))
            else:
                var.put('e', var.get('Math').callprop('floor', (var.get('Math').callprop('log', var.get('value'))/var.get('Math').get('LN2'))))
                if ((var.get('value')*var.put('c', var.get('Math').callprop('pow', Js(2.0), (-var.get('e')))))<Js(1.0)):
                    (var.put('e',Js(var.get('e').to_number())-Js(1))+Js(1))
                    var.put('c', Js(2.0), '*')
                if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                    var.put('value', (var.get('rt')/var.get('c')), '+')
                else:
                    var.put('value', (var.get('rt')*var.get('Math').callprop('pow', Js(2.0), (Js(1.0)-var.get('eBias')))), '+')
                if ((var.get('value')*var.get('c'))>=Js(2.0)):
                    (var.put('e',Js(var.get('e').to_number())+Js(1))-Js(1))
                    var.put('c', Js(2.0), '/')
                if ((var.get('e')+var.get('eBias'))>=var.get('eMax')):
                    var.put('m', Js(0.0))
                    var.put('e', var.get('eMax'))
                else:
                    if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                        var.put('m', (((var.get('value')*var.get('c'))-Js(1.0))*var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                        var.put('e', (var.get('e')+var.get('eBias')))
                    else:
                        var.put('m', ((var.get('value')*var.get('Math').callprop('pow', Js(2.0), (var.get('eBias')-Js(1.0))))*var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                        var.put('e', Js(0.0))
            #for JS loop

            while (var.get('mLen')>=Js(8.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(PyJsComma(var.get('buffer').put((var.get('offset')+var.get('i')), (var.get('m')&Js(255))),var.put('i', var.get('d'), '+')),var.put('m', Js(256.0), '/')),var.put('mLen', Js(8.0), '-'))
            var.put('e', ((var.get('e')<<var.get('mLen'))|var.get('m')))
            var.put('eLen', var.get('mLen'), '+')
            #for JS loop

            while (var.get('eLen')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(PyJsComma(var.get('buffer').put((var.get('offset')+var.get('i')), (var.get('e')&Js(255))),var.put('i', var.get('d'), '+')),var.put('e', Js(256.0), '/')),var.put('eLen', Js(8.0), '-'))
            var.get('buffer').put(((var.get('offset')+var.get('i'))-var.get('d')), (var.get('s')*Js(128.0)), '|')
        PyJs_anonymous_2510_._set_name('anonymous')
        var.get('exports').put('write', PyJs_anonymous_2510_)
    PyJs_anonymous_2508_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2511_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        if _seq(var.get('Object').get('create').typeof(),Js('function')):
            @Js
            def PyJs_inherits_2512_(ctor, superCtor, this, arguments, var=var):
                var = Scope({'ctor':ctor, 'superCtor':superCtor, 'this':this, 'arguments':arguments, 'inherits':PyJs_inherits_2512_}, var)
                var.registers(['ctor', 'superCtor'])
                if var.get('superCtor'):
                    var.get('ctor').put('super_', var.get('superCtor'))
                    var.get('ctor').put('prototype', var.get('Object').callprop('create', var.get('superCtor').get('prototype'), Js({'constructor':Js({'value':var.get('ctor'),'enumerable':Js(False),'writable':Js(True),'configurable':Js(True)})})))
            PyJs_inherits_2512_._set_name('inherits')
            var.get('module').put('exports', PyJs_inherits_2512_)
        else:
            @Js
            def PyJs_inherits_2513_(ctor, superCtor, this, arguments, var=var):
                var = Scope({'ctor':ctor, 'superCtor':superCtor, 'this':this, 'arguments':arguments, 'inherits':PyJs_inherits_2513_}, var)
                var.registers(['ctor', 'TempCtor', 'superCtor'])
                if var.get('superCtor'):
                    var.get('ctor').put('super_', var.get('superCtor'))
                    @Js
                    def PyJs_TempCtor_2514_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'TempCtor':PyJs_TempCtor_2514_}, var)
                        var.registers([])
                        pass
                    PyJs_TempCtor_2514_._set_name('TempCtor')
                    var.put('TempCtor', PyJs_TempCtor_2514_)
                    var.get('TempCtor').put('prototype', var.get('superCtor').get('prototype'))
                    var.get('ctor').put('prototype', var.get('TempCtor').create())
                    var.get('ctor').get('prototype').put('constructor', var.get('ctor'))
            PyJs_inherits_2513_._set_name('inherits')
            var.get('module').put('exports', PyJs_inherits_2513_)
    PyJs_anonymous_2511_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2515_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['fnI', 'fnH', 'exports', 'require', 'Buffer', 'module', 'rotl', 'fnF', 'ARRAY16', 'fnG', 'inherits', 'HashBase', 'MD5'])
        @Js
        def PyJsHoisted_MD5_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('HashBase').callprop('call', var.get(u"this"), Js(64.0))
            var.get(u"this").put('_a', Js(1732584193))
            var.get(u"this").put('_b', Js(4023233417))
            var.get(u"this").put('_c', Js(2562383102))
            var.get(u"this").put('_d', Js(271733878))
        PyJsHoisted_MD5_.func_name = 'MD5'
        var.put('MD5', PyJsHoisted_MD5_)
        @Js
        def PyJsHoisted_rotl_(x, n, this, arguments, var=var):
            var = Scope({'x':x, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'n'])
            return ((var.get('x')<<var.get('n'))|PyJsBshift(var.get('x'),(Js(32.0)-var.get('n'))))
        PyJsHoisted_rotl_.func_name = 'rotl'
        var.put('rotl', PyJsHoisted_rotl_)
        @Js
        def PyJsHoisted_fnF_(a, b, c, d, m, k, s, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'm':m, 'k':k, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'c', 'm', 'k', 'b', 'd', 's'])
            return ((var.get('rotl')(((((var.get('a')+((var.get('b')&var.get('c'))|((~var.get('b'))&var.get('d'))))+var.get('m'))+var.get('k'))|Js(0.0)), var.get('s'))+var.get('b'))|Js(0.0))
        PyJsHoisted_fnF_.func_name = 'fnF'
        var.put('fnF', PyJsHoisted_fnF_)
        @Js
        def PyJsHoisted_fnG_(a, b, c, d, m, k, s, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'm':m, 'k':k, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'c', 'm', 'k', 'b', 'd', 's'])
            return ((var.get('rotl')(((((var.get('a')+((var.get('b')&var.get('d'))|(var.get('c')&(~var.get('d')))))+var.get('m'))+var.get('k'))|Js(0.0)), var.get('s'))+var.get('b'))|Js(0.0))
        PyJsHoisted_fnG_.func_name = 'fnG'
        var.put('fnG', PyJsHoisted_fnG_)
        @Js
        def PyJsHoisted_fnH_(a, b, c, d, m, k, s, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'm':m, 'k':k, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'c', 'm', 'k', 'b', 'd', 's'])
            return ((var.get('rotl')(((((var.get('a')+((var.get('b')^var.get('c'))^var.get('d')))+var.get('m'))+var.get('k'))|Js(0.0)), var.get('s'))+var.get('b'))|Js(0.0))
        PyJsHoisted_fnH_.func_name = 'fnH'
        var.put('fnH', PyJsHoisted_fnH_)
        @Js
        def PyJsHoisted_fnI_(a, b, c, d, m, k, s, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'm':m, 'k':k, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'c', 'm', 'k', 'b', 'd', 's'])
            return ((var.get('rotl')(((((var.get('a')+(var.get('c')^(var.get('b')|(~var.get('d')))))+var.get('m'))+var.get('k'))|Js(0.0)), var.get('s'))+var.get('b'))|Js(0.0))
        PyJsHoisted_fnI_.func_name = 'fnI'
        var.put('fnI', PyJsHoisted_fnI_)
        Js('use strict')
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('HashBase', var.get('require')(Js('hash-base')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('ARRAY16', var.get('Array').create(Js(16.0)))
        pass
        var.get('inherits')(var.get('MD5'), var.get('HashBase'))
        @Js
        def PyJs_anonymous_2516_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'M', 'c', 'i', 'b', 'd'])
            var.put('M', var.get('ARRAY16'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(16.0)):
                try:
                    var.get('M').put(var.get('i'), var.get(u"this").get('_block').callprop('readInt32LE', (var.get('i')*Js(4.0))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.put('a', var.get(u"this").get('_a'))
            var.put('b', var.get(u"this").get('_b'))
            var.put('c', var.get(u"this").get('_c'))
            var.put('d', var.get(u"this").get('_d'))
            var.put('a', var.get('fnF')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('0'), Js(3614090360), Js(7.0)))
            var.put('d', var.get('fnF')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('1'), Js(3905402710), Js(12.0)))
            var.put('c', var.get('fnF')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('2'), Js(606105819), Js(17.0)))
            var.put('b', var.get('fnF')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('3'), Js(3250441966), Js(22.0)))
            var.put('a', var.get('fnF')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('4'), Js(4118548399), Js(7.0)))
            var.put('d', var.get('fnF')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('5'), Js(1200080426), Js(12.0)))
            var.put('c', var.get('fnF')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('6'), Js(2821735955), Js(17.0)))
            var.put('b', var.get('fnF')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('7'), Js(4249261313), Js(22.0)))
            var.put('a', var.get('fnF')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('8'), Js(1770035416), Js(7.0)))
            var.put('d', var.get('fnF')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('9'), Js(2336552879), Js(12.0)))
            var.put('c', var.get('fnF')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('10'), Js(4294925233), Js(17.0)))
            var.put('b', var.get('fnF')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('11'), Js(2304563134), Js(22.0)))
            var.put('a', var.get('fnF')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('12'), Js(1804603682), Js(7.0)))
            var.put('d', var.get('fnF')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('13'), Js(4254626195), Js(12.0)))
            var.put('c', var.get('fnF')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('14'), Js(2792965006), Js(17.0)))
            var.put('b', var.get('fnF')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('15'), Js(1236535329), Js(22.0)))
            var.put('a', var.get('fnG')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('1'), Js(4129170786), Js(5.0)))
            var.put('d', var.get('fnG')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('6'), Js(3225465664), Js(9.0)))
            var.put('c', var.get('fnG')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('11'), Js(643717713), Js(14.0)))
            var.put('b', var.get('fnG')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('0'), Js(3921069994), Js(20.0)))
            var.put('a', var.get('fnG')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('5'), Js(3593408605), Js(5.0)))
            var.put('d', var.get('fnG')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('10'), Js(38016083), Js(9.0)))
            var.put('c', var.get('fnG')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('15'), Js(3634488961), Js(14.0)))
            var.put('b', var.get('fnG')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('4'), Js(3889429448), Js(20.0)))
            var.put('a', var.get('fnG')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('9'), Js(568446438), Js(5.0)))
            var.put('d', var.get('fnG')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('14'), Js(3275163606), Js(9.0)))
            var.put('c', var.get('fnG')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('3'), Js(4107603335), Js(14.0)))
            var.put('b', var.get('fnG')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('8'), Js(1163531501), Js(20.0)))
            var.put('a', var.get('fnG')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('13'), Js(2850285829), Js(5.0)))
            var.put('d', var.get('fnG')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('2'), Js(4243563512), Js(9.0)))
            var.put('c', var.get('fnG')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('7'), Js(1735328473), Js(14.0)))
            var.put('b', var.get('fnG')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('12'), Js(2368359562), Js(20.0)))
            var.put('a', var.get('fnH')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('5'), Js(4294588738), Js(4.0)))
            var.put('d', var.get('fnH')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('8'), Js(2272392833), Js(11.0)))
            var.put('c', var.get('fnH')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('11'), Js(1839030562), Js(16.0)))
            var.put('b', var.get('fnH')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('14'), Js(4259657740), Js(23.0)))
            var.put('a', var.get('fnH')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('1'), Js(2763975236), Js(4.0)))
            var.put('d', var.get('fnH')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('4'), Js(1272893353), Js(11.0)))
            var.put('c', var.get('fnH')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('7'), Js(4139469664), Js(16.0)))
            var.put('b', var.get('fnH')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('10'), Js(3200236656), Js(23.0)))
            var.put('a', var.get('fnH')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('13'), Js(681279174), Js(4.0)))
            var.put('d', var.get('fnH')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('0'), Js(3936430074), Js(11.0)))
            var.put('c', var.get('fnH')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('3'), Js(3572445317), Js(16.0)))
            var.put('b', var.get('fnH')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('6'), Js(76029189), Js(23.0)))
            var.put('a', var.get('fnH')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('9'), Js(3654602809), Js(4.0)))
            var.put('d', var.get('fnH')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('12'), Js(3873151461), Js(11.0)))
            var.put('c', var.get('fnH')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('15'), Js(530742520), Js(16.0)))
            var.put('b', var.get('fnH')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('2'), Js(3299628645), Js(23.0)))
            var.put('a', var.get('fnI')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('0'), Js(4096336452), Js(6.0)))
            var.put('d', var.get('fnI')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('7'), Js(1126891415), Js(10.0)))
            var.put('c', var.get('fnI')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('14'), Js(2878612391), Js(15.0)))
            var.put('b', var.get('fnI')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('5'), Js(4237533241), Js(21.0)))
            var.put('a', var.get('fnI')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('12'), Js(1700485571), Js(6.0)))
            var.put('d', var.get('fnI')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('3'), Js(2399980690), Js(10.0)))
            var.put('c', var.get('fnI')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('10'), Js(4293915773), Js(15.0)))
            var.put('b', var.get('fnI')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('1'), Js(2240044497), Js(21.0)))
            var.put('a', var.get('fnI')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('8'), Js(1873313359), Js(6.0)))
            var.put('d', var.get('fnI')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('15'), Js(4264355552), Js(10.0)))
            var.put('c', var.get('fnI')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('6'), Js(2734768916), Js(15.0)))
            var.put('b', var.get('fnI')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('13'), Js(1309151649), Js(21.0)))
            var.put('a', var.get('fnI')(var.get('a'), var.get('b'), var.get('c'), var.get('d'), var.get('M').get('4'), Js(4149444226), Js(6.0)))
            var.put('d', var.get('fnI')(var.get('d'), var.get('a'), var.get('b'), var.get('c'), var.get('M').get('11'), Js(3174756917), Js(10.0)))
            var.put('c', var.get('fnI')(var.get('c'), var.get('d'), var.get('a'), var.get('b'), var.get('M').get('2'), Js(718787259), Js(15.0)))
            var.put('b', var.get('fnI')(var.get('b'), var.get('c'), var.get('d'), var.get('a'), var.get('M').get('9'), Js(3951481745), Js(21.0)))
            var.get(u"this").put('_a', ((var.get(u"this").get('_a')+var.get('a'))|Js(0.0)))
            var.get(u"this").put('_b', ((var.get(u"this").get('_b')+var.get('b'))|Js(0.0)))
            var.get(u"this").put('_c', ((var.get(u"this").get('_c')+var.get('c'))|Js(0.0)))
            var.get(u"this").put('_d', ((var.get(u"this").get('_d')+var.get('d'))|Js(0.0)))
        PyJs_anonymous_2516_._set_name('anonymous')
        var.get('MD5').get('prototype').put('_update', PyJs_anonymous_2516_)
        @Js
        def PyJs_anonymous_2517_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['buffer'])
            var.get(u"this").get('_block').put((var.get(u"this").put('_blockOffset',Js(var.get(u"this").get('_blockOffset').to_number())+Js(1))-Js(1)), Js(128))
            if (var.get(u"this").get('_blockOffset')>Js(56.0)):
                var.get(u"this").get('_block').callprop('fill', Js(0.0), var.get(u"this").get('_blockOffset'), Js(64.0))
                var.get(u"this").callprop('_update')
                var.get(u"this").put('_blockOffset', Js(0.0))
            var.get(u"this").get('_block').callprop('fill', Js(0.0), var.get(u"this").get('_blockOffset'), Js(56.0))
            var.get(u"this").get('_block').callprop('writeUInt32LE', var.get(u"this").get('_length').get('0'), Js(56.0))
            var.get(u"this").get('_block').callprop('writeUInt32LE', var.get(u"this").get('_length').get('1'), Js(60.0))
            var.get(u"this").callprop('_update')
            var.put('buffer', var.get('Buffer').callprop('allocUnsafe', Js(16.0)))
            var.get('buffer').callprop('writeInt32LE', var.get(u"this").get('_a'), Js(0.0))
            var.get('buffer').callprop('writeInt32LE', var.get(u"this").get('_b'), Js(4.0))
            var.get('buffer').callprop('writeInt32LE', var.get(u"this").get('_c'), Js(8.0))
            var.get('buffer').callprop('writeInt32LE', var.get(u"this").get('_d'), Js(12.0))
            return var.get('buffer')
        PyJs_anonymous_2517_._set_name('anonymous')
        var.get('MD5').get('prototype').put('_digest', PyJs_anonymous_2517_)
        pass
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('MD5'))
    PyJs_anonymous_2515_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2518_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'bn', 'brorand', 'MillerRabin'])
        @Js
        def PyJsHoisted_MillerRabin_(rand, this, arguments, var=var):
            var = Scope({'rand':rand, 'this':this, 'arguments':arguments}, var)
            var.registers(['rand'])
            var.get(u"this").put('rand', (var.get('rand') or var.get('brorand').get('Rand').create()))
        PyJsHoisted_MillerRabin_.func_name = 'MillerRabin'
        var.put('MillerRabin', PyJsHoisted_MillerRabin_)
        var.put('bn', var.get('require')(Js('bn.js')))
        var.put('brorand', var.get('require')(Js('brorand')))
        pass
        var.get('module').put('exports', var.get('MillerRabin'))
        @Js
        def PyJs_create_2519_(rand, this, arguments, var=var):
            var = Scope({'rand':rand, 'this':this, 'arguments':arguments, 'create':PyJs_create_2519_}, var)
            var.registers(['rand'])
            return var.get('MillerRabin').create(var.get('rand'))
        PyJs_create_2519_._set_name('create')
        var.get('MillerRabin').put('create', PyJs_create_2519_)
        @Js
        def PyJs__randbelow_2520_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, '_randbelow':PyJs__randbelow_2520_}, var)
            var.registers(['len', 'min_bytes', 'a', 'n'])
            var.put('len', var.get('n').callprop('bitLength'))
            var.put('min_bytes', var.get('Math').callprop('ceil', (var.get('len')/Js(8.0))))
            while 1:
                var.put('a', var.get('bn').create(var.get(u"this").get('rand').callprop('generate', var.get('min_bytes'))))
                if not (var.get('a').callprop('cmp', var.get('n'))>=Js(0.0)):
                    break
            return var.get('a')
        PyJs__randbelow_2520_._set_name('_randbelow')
        var.get('MillerRabin').get('prototype').put('_randbelow', PyJs__randbelow_2520_)
        @Js
        def PyJs__randrange_2521_(start, stop, this, arguments, var=var):
            var = Scope({'start':start, 'stop':stop, 'this':this, 'arguments':arguments, '_randrange':PyJs__randrange_2521_}, var)
            var.registers(['stop', 'size', 'start'])
            var.put('size', var.get('stop').callprop('sub', var.get('start')))
            return var.get('start').callprop('add', var.get(u"this").callprop('_randbelow', var.get('size')))
        PyJs__randrange_2521_._set_name('_randrange')
        var.get('MillerRabin').get('prototype').put('_randrange', PyJs__randrange_2521_)
        @Js
        def PyJs_test_2522_(n, k, cb, this, arguments, var=var):
            var = Scope({'n':n, 'k':k, 'cb':cb, 'this':this, 'arguments':arguments, 'test':PyJs_test_2522_}, var)
            var.registers(['a', 'cb', 'len', 'rone', 'n1', 'x', 'i', 'n', 'k', 'rn1', 'prime', 'red', 'd', 's'])
            var.put('len', var.get('n').callprop('bitLength'))
            var.put('red', var.get('bn').callprop('mont', var.get('n')))
            var.put('rone', var.get('bn').create(Js(1.0)).callprop('toRed', var.get('red')))
            if var.get('k').neg():
                var.put('k', var.get('Math').callprop('max', Js(1.0), ((var.get('len')/Js(48.0))|Js(0.0))))
            var.put('n1', var.get('n').callprop('subn', Js(1.0)))
            #for JS loop
            var.put('s', Js(0.0))
            while var.get('n1').callprop('testn', var.get('s')).neg():
                try:
                    pass
                finally:
                        (var.put('s',Js(var.get('s').to_number())+Js(1))-Js(1))
            var.put('d', var.get('n').callprop('shrn', var.get('s')))
            var.put('rn1', var.get('n1').callprop('toRed', var.get('red')))
            var.put('prime', Js(True))
            #for JS loop

            while (var.get('k')>Js(0.0)):
                try:
                    var.put('a', var.get(u"this").callprop('_randrange', var.get('bn').create(Js(2.0)), var.get('n1')))
                    if var.get('cb'):
                        var.get('cb')(var.get('a'))
                    var.put('x', var.get('a').callprop('toRed', var.get('red')).callprop('redPow', var.get('d')))
                    if (_seq(var.get('x').callprop('cmp', var.get('rone')),Js(0.0)) or _seq(var.get('x').callprop('cmp', var.get('rn1')),Js(0.0))):
                        continue
                    #for JS loop
                    var.put('i', Js(1.0))
                    while (var.get('i')<var.get('s')):
                        try:
                            var.put('x', var.get('x').callprop('redSqr'))
                            if _seq(var.get('x').callprop('cmp', var.get('rone')),Js(0.0)):
                                return Js(False)
                            if _seq(var.get('x').callprop('cmp', var.get('rn1')),Js(0.0)):
                                break
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    if _seq(var.get('i'),var.get('s')):
                        return Js(False)
                finally:
                        (var.put('k',Js(var.get('k').to_number())-Js(1))+Js(1))
            return var.get('prime')
        PyJs_test_2522_._set_name('test')
        var.get('MillerRabin').get('prototype').put('test', PyJs_test_2522_)
        @Js
        def PyJs_getDivisor_2523_(n, k, this, arguments, var=var):
            var = Scope({'n':n, 'k':k, 'this':this, 'arguments':arguments, 'getDivisor':PyJs_getDivisor_2523_}, var)
            var.registers(['a', 'len', 'rone', 'n1', 'x', 'i', 'n', 'k', 'g', 'rn1', 'red', 'd', 's'])
            var.put('len', var.get('n').callprop('bitLength'))
            var.put('red', var.get('bn').callprop('mont', var.get('n')))
            var.put('rone', var.get('bn').create(Js(1.0)).callprop('toRed', var.get('red')))
            if var.get('k').neg():
                var.put('k', var.get('Math').callprop('max', Js(1.0), ((var.get('len')/Js(48.0))|Js(0.0))))
            var.put('n1', var.get('n').callprop('subn', Js(1.0)))
            #for JS loop
            var.put('s', Js(0.0))
            while var.get('n1').callprop('testn', var.get('s')).neg():
                try:
                    pass
                finally:
                        (var.put('s',Js(var.get('s').to_number())+Js(1))-Js(1))
            var.put('d', var.get('n').callprop('shrn', var.get('s')))
            var.put('rn1', var.get('n1').callprop('toRed', var.get('red')))
            #for JS loop

            while (var.get('k')>Js(0.0)):
                try:
                    var.put('a', var.get(u"this").callprop('_randrange', var.get('bn').create(Js(2.0)), var.get('n1')))
                    var.put('g', var.get('n').callprop('gcd', var.get('a')))
                    if PyJsStrictNeq(var.get('g').callprop('cmpn', Js(1.0)),Js(0.0)):
                        return var.get('g')
                    var.put('x', var.get('a').callprop('toRed', var.get('red')).callprop('redPow', var.get('d')))
                    if (_seq(var.get('x').callprop('cmp', var.get('rone')),Js(0.0)) or _seq(var.get('x').callprop('cmp', var.get('rn1')),Js(0.0))):
                        continue
                    #for JS loop
                    var.put('i', Js(1.0))
                    while (var.get('i')<var.get('s')):
                        try:
                            var.put('x', var.get('x').callprop('redSqr'))
                            if _seq(var.get('x').callprop('cmp', var.get('rone')),Js(0.0)):
                                return var.get('x').callprop('fromRed').callprop('subn', Js(1.0)).callprop('gcd', var.get('n'))
                            if _seq(var.get('x').callprop('cmp', var.get('rn1')),Js(0.0)):
                                break
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    if _seq(var.get('i'),var.get('s')):
                        var.put('x', var.get('x').callprop('redSqr'))
                        return var.get('x').callprop('fromRed').callprop('subn', Js(1.0)).callprop('gcd', var.get('n'))
                finally:
                        (var.put('k',Js(var.get('k').to_number())-Js(1))+Js(1))
            return Js(False)
        PyJs_getDivisor_2523_._set_name('getDivisor')
        var.get('MillerRabin').get('prototype').put('getDivisor', PyJs_getDivisor_2523_)
    PyJs_anonymous_2518_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2524_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('15').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2524_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2525_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['assert', 'require', 'exports', 'module'])
        @Js
        def PyJsHoisted_assert_(val, msg, this, arguments, var=var):
            var = Scope({'val':val, 'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['msg', 'val'])
            if var.get('val').neg():
                PyJsTempException = JsToPyException(var.get('Error').create((var.get('msg') or Js('Assertion failed'))))
                raise PyJsTempException
        PyJsHoisted_assert_.func_name = 'assert'
        var.put('assert', PyJsHoisted_assert_)
        var.get('module').put('exports', var.get('assert'))
        pass
        @Js
        def PyJs_assertEqual_2526_(l, r, msg, this, arguments, var=var):
            var = Scope({'l':l, 'r':r, 'msg':msg, 'this':this, 'arguments':arguments, 'assertEqual':PyJs_assertEqual_2526_}, var)
            var.registers(['msg', 'l', 'r'])
            if (var.get('l')!=var.get('r')):
                PyJsTempException = JsToPyException(var.get('Error').create((var.get('msg') or (((Js('Assertion failed: ')+var.get('l'))+Js(' != '))+var.get('r')))))
                raise PyJsTempException
        PyJs_assertEqual_2526_._set_name('assertEqual')
        var.get('assert').put('equal', PyJs_assertEqual_2526_)
    PyJs_anonymous_2525_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2527_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'toHex', 'require', 'module', 'toArray', 'utils', 'zero2'])
        @Js
        def PyJsHoisted_toArray_(msg, enc, this, arguments, var=var):
            var = Scope({'msg':msg, 'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'c', 'msg', 'lo', 'hi', 'enc', 'res'])
            if var.get('Array').callprop('isArray', var.get('msg')):
                return var.get('msg').callprop('slice')
            if var.get('msg').neg():
                return Js([])
            var.put('res', Js([]))
            if PyJsStrictNeq(var.get('msg',throw=False).typeof(),Js('string')):
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('msg').get('length')):
                    try:
                        var.get('res').put(var.get('i'), (var.get('msg').get(var.get('i'))|Js(0.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('res')
            if _seq(var.get('enc'),Js('hex')):
                var.put('msg', var.get('msg').callprop('replace', JsRegExp('/[^a-z0-9]+/ig'), Js('')))
                if PyJsStrictNeq((var.get('msg').get('length')%Js(2.0)),Js(0.0)):
                    var.put('msg', (Js('0')+var.get('msg')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('msg').get('length')):
                    try:
                        var.get('res').callprop('push', var.get('parseInt')((var.get('msg').get(var.get('i'))+var.get('msg').get((var.get('i')+Js(1.0)))), Js(16.0)))
                    finally:
                            var.put('i', Js(2.0), '+')
            else:
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('msg').get('length')):
                    try:
                        var.put('c', var.get('msg').callprop('charCodeAt', var.get('i')))
                        var.put('hi', (var.get('c')>>Js(8.0)))
                        var.put('lo', (var.get('c')&Js(255)))
                        if var.get('hi'):
                            var.get('res').callprop('push', var.get('hi'), var.get('lo'))
                        else:
                            var.get('res').callprop('push', var.get('lo'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('res')
        PyJsHoisted_toArray_.func_name = 'toArray'
        var.put('toArray', PyJsHoisted_toArray_)
        @Js
        def PyJsHoisted_zero2_(word, this, arguments, var=var):
            var = Scope({'word':word, 'this':this, 'arguments':arguments}, var)
            var.registers(['word'])
            if _seq(var.get('word').get('length'),Js(1.0)):
                return (Js('0')+var.get('word'))
            else:
                return var.get('word')
        PyJsHoisted_zero2_.func_name = 'zero2'
        var.put('zero2', PyJsHoisted_zero2_)
        @Js
        def PyJsHoisted_toHex_(msg, this, arguments, var=var):
            var = Scope({'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'msg', 'res'])
            var.put('res', Js(''))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('msg').get('length')):
                try:
                    var.put('res', var.get('zero2')(var.get('msg').get(var.get('i')).callprop('toString', Js(16.0))), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('res')
        PyJsHoisted_toHex_.func_name = 'toHex'
        var.put('toHex', PyJsHoisted_toHex_)
        Js('use strict')
        var.put('utils', var.get('exports'))
        pass
        var.get('utils').put('toArray', var.get('toArray'))
        pass
        var.get('utils').put('zero2', var.get('zero2'))
        pass
        var.get('utils').put('toHex', var.get('toHex'))
        @Js
        def PyJs_encode_2528_(arr, enc, this, arguments, var=var):
            var = Scope({'arr':arr, 'enc':enc, 'this':this, 'arguments':arguments, 'encode':PyJs_encode_2528_}, var)
            var.registers(['arr', 'enc'])
            if _seq(var.get('enc'),Js('hex')):
                return var.get('toHex')(var.get('arr'))
            else:
                return var.get('arr')
        PyJs_encode_2528_._set_name('encode')
        var.get('utils').put('encode', PyJs_encode_2528_)
    PyJs_anonymous_2527_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2529_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        def PyJs_LONG_2530_(var=var):
            return var.get('module').put('exports', Js({'2.16.840.1.101.3.4.1.1':Js('aes-128-ecb'),'2.16.840.1.101.3.4.1.2':Js('aes-128-cbc'),'2.16.840.1.101.3.4.1.3':Js('aes-128-ofb'),'2.16.840.1.101.3.4.1.4':Js('aes-128-cfb'),'2.16.840.1.101.3.4.1.21':Js('aes-192-ecb'),'2.16.840.1.101.3.4.1.22':Js('aes-192-cbc'),'2.16.840.1.101.3.4.1.23':Js('aes-192-ofb'),'2.16.840.1.101.3.4.1.24':Js('aes-192-cfb'),'2.16.840.1.101.3.4.1.41':Js('aes-256-ecb'),'2.16.840.1.101.3.4.1.42':Js('aes-256-cbc'),'2.16.840.1.101.3.4.1.43':Js('aes-256-ofb'),'2.16.840.1.101.3.4.1.44':Js('aes-256-cfb')}))
        PyJs_LONG_2530_()
    PyJs_anonymous_2529_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2531_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['EncryptedPrivateKeyInfo', 'AlgorithmIdentifier', 'exports', 'RSAPrivateKey', 'ECPrivateKey', 'require', 'module', 'PublicKey', 'ECParameters', 'PrivateKeyInfo', 'RSAPublicKey', 'asn1', 'DSAPrivateKey'])
        Js('use strict')
        var.put('asn1', var.get('require')(Js('asn1.js')))
        var.get('exports').put('certificate', var.get('require')(Js('./certificate')))
        @Js
        def PyJs_anonymous_2532_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            def PyJs_LONG_2533_(var=var):
                return var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('version')).callprop('int'), var.get(u"this").callprop('key', Js('modulus')).callprop('int'), var.get(u"this").callprop('key', Js('publicExponent')).callprop('int'), var.get(u"this").callprop('key', Js('privateExponent')).callprop('int'), var.get(u"this").callprop('key', Js('prime1')).callprop('int'), var.get(u"this").callprop('key', Js('prime2')).callprop('int'), var.get(u"this").callprop('key', Js('exponent1')).callprop('int'), var.get(u"this").callprop('key', Js('exponent2')).callprop('int'), var.get(u"this").callprop('key', Js('coefficient')).callprop('int'))
            PyJs_LONG_2533_()
        PyJs_anonymous_2532_._set_name('anonymous')
        var.put('RSAPrivateKey', var.get('asn1').callprop('define', Js('RSAPrivateKey'), PyJs_anonymous_2532_))
        var.get('exports').put('RSAPrivateKey', var.get('RSAPrivateKey'))
        @Js
        def PyJs_anonymous_2534_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('modulus')).callprop('int'), var.get(u"this").callprop('key', Js('publicExponent')).callprop('int'))
        PyJs_anonymous_2534_._set_name('anonymous')
        var.put('RSAPublicKey', var.get('asn1').callprop('define', Js('RSAPublicKey'), PyJs_anonymous_2534_))
        var.get('exports').put('RSAPublicKey', var.get('RSAPublicKey'))
        @Js
        def PyJs_anonymous_2535_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('algorithm')).callprop('use', var.get('AlgorithmIdentifier')), var.get(u"this").callprop('key', Js('subjectPublicKey')).callprop('bitstr'))
        PyJs_anonymous_2535_._set_name('anonymous')
        var.put('PublicKey', var.get('asn1').callprop('define', Js('SubjectPublicKeyInfo'), PyJs_anonymous_2535_))
        var.get('exports').put('PublicKey', var.get('PublicKey'))
        @Js
        def PyJs_anonymous_2536_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            def PyJs_LONG_2537_(var=var):
                return var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('algorithm')).callprop('objid'), var.get(u"this").callprop('key', Js('none')).callprop('null_').callprop('optional'), var.get(u"this").callprop('key', Js('curve')).callprop('objid').callprop('optional'), var.get(u"this").callprop('key', Js('params')).callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('p')).callprop('int'), var.get(u"this").callprop('key', Js('q')).callprop('int'), var.get(u"this").callprop('key', Js('g')).callprop('int')).callprop('optional'))
            PyJs_LONG_2537_()
        PyJs_anonymous_2536_._set_name('anonymous')
        var.put('AlgorithmIdentifier', var.get('asn1').callprop('define', Js('AlgorithmIdentifier'), PyJs_anonymous_2536_))
        @Js
        def PyJs_anonymous_2538_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('version')).callprop('int'), var.get(u"this").callprop('key', Js('algorithm')).callprop('use', var.get('AlgorithmIdentifier')), var.get(u"this").callprop('key', Js('subjectPrivateKey')).callprop('octstr'))
        PyJs_anonymous_2538_._set_name('anonymous')
        var.put('PrivateKeyInfo', var.get('asn1').callprop('define', Js('PrivateKeyInfo'), PyJs_anonymous_2538_))
        var.get('exports').put('PrivateKey', var.get('PrivateKeyInfo'))
        @Js
        def PyJs_anonymous_2539_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            def PyJs_LONG_2540_(var=var):
                return var.get(u"this").callprop('key', Js('decrypt')).callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('kde')).callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('id')).callprop('objid'), var.get(u"this").callprop('key', Js('kdeparams')).callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('salt')).callprop('octstr'), var.get(u"this").callprop('key', Js('iters')).callprop('int'))), var.get(u"this").callprop('key', Js('cipher')).callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('algo')).callprop('objid'), var.get(u"this").callprop('key', Js('iv')).callprop('octstr')))
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('algorithm')).callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('id')).callprop('objid'), PyJs_LONG_2540_()), var.get(u"this").callprop('key', Js('subjectPrivateKey')).callprop('octstr'))
        PyJs_anonymous_2539_._set_name('anonymous')
        var.put('EncryptedPrivateKeyInfo', var.get('asn1').callprop('define', Js('EncryptedPrivateKeyInfo'), PyJs_anonymous_2539_))
        var.get('exports').put('EncryptedPrivateKey', var.get('EncryptedPrivateKeyInfo'))
        @Js
        def PyJs_anonymous_2541_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            def PyJs_LONG_2542_(var=var):
                return var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('version')).callprop('int'), var.get(u"this").callprop('key', Js('p')).callprop('int'), var.get(u"this").callprop('key', Js('q')).callprop('int'), var.get(u"this").callprop('key', Js('g')).callprop('int'), var.get(u"this").callprop('key', Js('pub_key')).callprop('int'), var.get(u"this").callprop('key', Js('priv_key')).callprop('int'))
            PyJs_LONG_2542_()
        PyJs_anonymous_2541_._set_name('anonymous')
        var.put('DSAPrivateKey', var.get('asn1').callprop('define', Js('DSAPrivateKey'), PyJs_anonymous_2541_))
        var.get('exports').put('DSAPrivateKey', var.get('DSAPrivateKey'))
        @Js
        def PyJs_anonymous_2543_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('int')
        PyJs_anonymous_2543_._set_name('anonymous')
        var.get('exports').put('DSAparam', var.get('asn1').callprop('define', Js('DSAparam'), PyJs_anonymous_2543_))
        @Js
        def PyJs_anonymous_2544_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            def PyJs_LONG_2545_(var=var):
                return var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('version')).callprop('int'), var.get(u"this").callprop('key', Js('privateKey')).callprop('octstr'), var.get(u"this").callprop('key', Js('parameters')).callprop('optional').callprop('explicit', Js(0.0)).callprop('use', var.get('ECParameters')), var.get(u"this").callprop('key', Js('publicKey')).callprop('optional').callprop('explicit', Js(1.0)).callprop('bitstr'))
            PyJs_LONG_2545_()
        PyJs_anonymous_2544_._set_name('anonymous')
        var.put('ECPrivateKey', var.get('asn1').callprop('define', Js('ECPrivateKey'), PyJs_anonymous_2544_))
        var.get('exports').put('ECPrivateKey', var.get('ECPrivateKey'))
        @Js
        def PyJs_anonymous_2546_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('choice', Js({'namedCurve':var.get(u"this").callprop('objid')}))
        PyJs_anonymous_2546_._set_name('anonymous')
        var.put('ECParameters', var.get('asn1').callprop('define', Js('ECParameters'), PyJs_anonymous_2546_))
        @Js
        def PyJs_anonymous_2547_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('r')).callprop('int'), var.get(u"this").callprop('key', Js('s')).callprop('int'))
        PyJs_anonymous_2547_._set_name('anonymous')
        var.get('exports').put('signature', var.get('asn1').callprop('define', Js('signature'), PyJs_anonymous_2547_))
    PyJs_anonymous_2531_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2548_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'AlgorithmIdentifier', 'Name', 'require', 'RelativeDistinguishedName', 'TBSCertificate', 'module', 'RDNSequence', 'Extension', 'Time', 'X509Certificate', 'SubjectPublicKeyInfo', 'AttributeTypeValue', 'asn', 'Validity'])
        Js('use strict')
        var.put('asn', var.get('require')(Js('asn1.js')))
        @Js
        def PyJs_anonymous_2549_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('choice', Js({'utcTime':var.get(u"this").callprop('utctime'),'generalTime':var.get(u"this").callprop('gentime')}))
        PyJs_anonymous_2549_._set_name('anonymous')
        var.put('Time', var.get('asn').callprop('define', Js('Time'), PyJs_anonymous_2549_))
        @Js
        def PyJs_anonymous_2550_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('type')).callprop('objid'), var.get(u"this").callprop('key', Js('value')).callprop('any'))
        PyJs_anonymous_2550_._set_name('anonymous')
        var.put('AttributeTypeValue', var.get('asn').callprop('define', Js('AttributeTypeValue'), PyJs_anonymous_2550_))
        @Js
        def PyJs_anonymous_2551_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('algorithm')).callprop('objid'), var.get(u"this").callprop('key', Js('parameters')).callprop('optional'), var.get(u"this").callprop('key', Js('curve')).callprop('objid').callprop('optional'))
        PyJs_anonymous_2551_._set_name('anonymous')
        var.put('AlgorithmIdentifier', var.get('asn').callprop('define', Js('AlgorithmIdentifier'), PyJs_anonymous_2551_))
        @Js
        def PyJs_anonymous_2552_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('algorithm')).callprop('use', var.get('AlgorithmIdentifier')), var.get(u"this").callprop('key', Js('subjectPublicKey')).callprop('bitstr'))
        PyJs_anonymous_2552_._set_name('anonymous')
        var.put('SubjectPublicKeyInfo', var.get('asn').callprop('define', Js('SubjectPublicKeyInfo'), PyJs_anonymous_2552_))
        @Js
        def PyJs_anonymous_2553_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('setof', var.get('AttributeTypeValue'))
        PyJs_anonymous_2553_._set_name('anonymous')
        var.put('RelativeDistinguishedName', var.get('asn').callprop('define', Js('RelativeDistinguishedName'), PyJs_anonymous_2553_))
        @Js
        def PyJs_anonymous_2554_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seqof', var.get('RelativeDistinguishedName'))
        PyJs_anonymous_2554_._set_name('anonymous')
        var.put('RDNSequence', var.get('asn').callprop('define', Js('RDNSequence'), PyJs_anonymous_2554_))
        @Js
        def PyJs_anonymous_2555_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('choice', Js({'rdnSequence':var.get(u"this").callprop('use', var.get('RDNSequence'))}))
        PyJs_anonymous_2555_._set_name('anonymous')
        var.put('Name', var.get('asn').callprop('define', Js('Name'), PyJs_anonymous_2555_))
        @Js
        def PyJs_anonymous_2556_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('notBefore')).callprop('use', var.get('Time')), var.get(u"this").callprop('key', Js('notAfter')).callprop('use', var.get('Time')))
        PyJs_anonymous_2556_._set_name('anonymous')
        var.put('Validity', var.get('asn').callprop('define', Js('Validity'), PyJs_anonymous_2556_))
        @Js
        def PyJs_anonymous_2557_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('extnID')).callprop('objid'), var.get(u"this").callprop('key', Js('critical')).callprop('bool').callprop('def', Js(False)), var.get(u"this").callprop('key', Js('extnValue')).callprop('octstr'))
        PyJs_anonymous_2557_._set_name('anonymous')
        var.put('Extension', var.get('asn').callprop('define', Js('Extension'), PyJs_anonymous_2557_))
        @Js
        def PyJs_anonymous_2558_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            def PyJs_LONG_2559_(var=var):
                return var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('version')).callprop('explicit', Js(0.0)).callprop('int').callprop('optional'), var.get(u"this").callprop('key', Js('serialNumber')).callprop('int'), var.get(u"this").callprop('key', Js('signature')).callprop('use', var.get('AlgorithmIdentifier')), var.get(u"this").callprop('key', Js('issuer')).callprop('use', var.get('Name')), var.get(u"this").callprop('key', Js('validity')).callprop('use', var.get('Validity')), var.get(u"this").callprop('key', Js('subject')).callprop('use', var.get('Name')), var.get(u"this").callprop('key', Js('subjectPublicKeyInfo')).callprop('use', var.get('SubjectPublicKeyInfo')), var.get(u"this").callprop('key', Js('issuerUniqueID')).callprop('implicit', Js(1.0)).callprop('bitstr').callprop('optional'), var.get(u"this").callprop('key', Js('subjectUniqueID')).callprop('implicit', Js(2.0)).callprop('bitstr').callprop('optional'), var.get(u"this").callprop('key', Js('extensions')).callprop('explicit', Js(3.0)).callprop('seqof', var.get('Extension')).callprop('optional'))
            PyJs_LONG_2559_()
        PyJs_anonymous_2558_._set_name('anonymous')
        var.put('TBSCertificate', var.get('asn').callprop('define', Js('TBSCertificate'), PyJs_anonymous_2558_))
        @Js
        def PyJs_anonymous_2560_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('seq').callprop('obj', var.get(u"this").callprop('key', Js('tbsCertificate')).callprop('use', var.get('TBSCertificate')), var.get(u"this").callprop('key', Js('signatureAlgorithm')).callprop('use', var.get('AlgorithmIdentifier')), var.get(u"this").callprop('key', Js('signatureValue')).callprop('bitstr'))
        PyJs_anonymous_2560_._set_name('anonymous')
        var.put('X509Certificate', var.get('asn').callprop('define', Js('X509Certificate'), PyJs_anonymous_2560_))
        var.get('module').put('exports', var.get('X509Certificate'))
    PyJs_anonymous_2548_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2561_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'ciphers', 'fullRegex', 'findProc', 'startRegex', 'evp'])
        var.put('findProc', JsRegExp('/Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r+/=]+)[\\n\\r]+/m'))
        var.put('startRegex', JsRegExp('/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m'))
        var.put('fullRegex', JsRegExp('/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r+/=]+)-----END \\1-----$/m'))
        var.put('evp', var.get('require')(Js('evp_bytestokey')))
        var.put('ciphers', var.get('require')(Js('browserify-aes')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        @Js
        def PyJs_anonymous_2562_(okey, password, this, arguments, var=var):
            var = Scope({'okey':okey, 'password':password, 'this':this, 'arguments':arguments}, var)
            var.registers(['iv', 'password', 'out', 'cipherKey', 'tag', 'cipherText', 'match', 'key', 'suite', 'match2', 'okey', 'decrypted', 'cipher'])
            var.put('key', var.get('okey').callprop('toString'))
            var.put('match', var.get('key').callprop('match', var.get('findProc')))
            pass
            if var.get('match').neg():
                var.put('match2', var.get('key').callprop('match', var.get('fullRegex')))
                var.put('decrypted', var.get('Buffer').callprop('from', var.get('match2').get('2').callprop('replace', JsRegExp('/[\\r\\n]/g'), Js('')), Js('base64')))
            else:
                var.put('suite', (Js('aes')+var.get('match').get('1')))
                var.put('iv', var.get('Buffer').callprop('from', var.get('match').get('2'), Js('hex')))
                var.put('cipherText', var.get('Buffer').callprop('from', var.get('match').get('3').callprop('replace', JsRegExp('/[\\r\\n]/g'), Js('')), Js('base64')))
                var.put('cipherKey', var.get('evp')(var.get('password'), var.get('iv').callprop('slice', Js(0.0), Js(8.0)), var.get('parseInt')(var.get('match').get('1'), Js(10.0))).get('key'))
                var.put('out', Js([]))
                var.put('cipher', var.get('ciphers').callprop('createDecipheriv', var.get('suite'), var.get('cipherKey'), var.get('iv')))
                var.get('out').callprop('push', var.get('cipher').callprop('update', var.get('cipherText')))
                var.get('out').callprop('push', var.get('cipher').callprop('final'))
                var.put('decrypted', var.get('Buffer').callprop('concat', var.get('out')))
            var.put('tag', var.get('key').callprop('match', var.get('startRegex')).get('1'))
            return Js({'tag':var.get('tag'),'data':var.get('decrypted')})
        PyJs_anonymous_2562_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_2562_)
    PyJs_anonymous_2561_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2563_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'aesid', 'Buffer', 'require', 'ciphers', 'module', 'parseKeys', 'compat', 'decrypt', 'asn1', 'fixProc'])
        @Js
        def PyJsHoisted_parseKeys_(buffer, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['buffer', 'subtype', 'password', 'ndata', 'stripped', 'data', 'type'])
            pass
            if (_seq((Js('undefined') if _seq(var.get('buffer',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('buffer'))),Js('object')) and var.get('Buffer').callprop('isBuffer', var.get('buffer')).neg()):
                var.put('password', var.get('buffer').get('passphrase'))
                var.put('buffer', var.get('buffer').get('key'))
            if _seq(var.get('buffer',throw=False).typeof(),Js('string')):
                var.put('buffer', var.get('Buffer').callprop('from', var.get('buffer')))
            var.put('stripped', var.get('fixProc')(var.get('buffer'), var.get('password')))
            var.put('type', var.get('stripped').get('tag'))
            var.put('data', var.get('stripped').get('data'))
            pass
            while 1:
                SWITCHED = False
                CONDITION = (var.get('type'))
                if SWITCHED or _seq(CONDITION, Js('CERTIFICATE')):
                    SWITCHED = True
                    var.put('ndata', var.get('asn1').get('certificate').callprop('decode', var.get('data'), Js('der')).get('tbsCertificate').get('subjectPublicKeyInfo'))
                if SWITCHED or _seq(CONDITION, Js('PUBLIC KEY')):
                    SWITCHED = True
                    if var.get('ndata').neg():
                        var.put('ndata', var.get('asn1').get('PublicKey').callprop('decode', var.get('data'), Js('der')))
                    var.put('subtype', var.get('ndata').get('algorithm').get('algorithm').callprop('join', Js('.')))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('subtype'))
                        if SWITCHED or _seq(CONDITION, Js('1.2.840.113549.1.1.1')):
                            SWITCHED = True
                            return var.get('asn1').get('RSAPublicKey').callprop('decode', var.get('ndata').get('subjectPublicKey').get('data'), Js('der'))
                        if SWITCHED or _seq(CONDITION, Js('1.2.840.10045.2.1')):
                            SWITCHED = True
                            var.get('ndata').put('subjectPrivateKey', var.get('ndata').get('subjectPublicKey'))
                            return Js({'type':Js('ec'),'data':var.get('ndata')})
                        if SWITCHED or _seq(CONDITION, Js('1.2.840.10040.4.1')):
                            SWITCHED = True
                            var.get('ndata').get('algorithm').get('params').put('pub_key', var.get('asn1').get('DSAparam').callprop('decode', var.get('ndata').get('subjectPublicKey').get('data'), Js('der')))
                            return Js({'type':Js('dsa'),'data':var.get('ndata').get('algorithm').get('params')})
                        if True:
                            SWITCHED = True
                            PyJsTempException = JsToPyException(var.get('Error').create((Js('unknown key id ')+var.get('subtype'))))
                            raise PyJsTempException
                        SWITCHED = True
                        break
                if SWITCHED or _seq(CONDITION, Js('ENCRYPTED PRIVATE KEY')):
                    SWITCHED = True
                    var.put('data', var.get('asn1').get('EncryptedPrivateKey').callprop('decode', var.get('data'), Js('der')))
                    var.put('data', var.get('decrypt')(var.get('data'), var.get('password')))
                if SWITCHED or _seq(CONDITION, Js('PRIVATE KEY')):
                    SWITCHED = True
                    var.put('ndata', var.get('asn1').get('PrivateKey').callprop('decode', var.get('data'), Js('der')))
                    var.put('subtype', var.get('ndata').get('algorithm').get('algorithm').callprop('join', Js('.')))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('subtype'))
                        if SWITCHED or _seq(CONDITION, Js('1.2.840.113549.1.1.1')):
                            SWITCHED = True
                            return var.get('asn1').get('RSAPrivateKey').callprop('decode', var.get('ndata').get('subjectPrivateKey'), Js('der'))
                        if SWITCHED or _seq(CONDITION, Js('1.2.840.10045.2.1')):
                            SWITCHED = True
                            return Js({'curve':var.get('ndata').get('algorithm').get('curve'),'privateKey':var.get('asn1').get('ECPrivateKey').callprop('decode', var.get('ndata').get('subjectPrivateKey'), Js('der')).get('privateKey')})
                        if SWITCHED or _seq(CONDITION, Js('1.2.840.10040.4.1')):
                            SWITCHED = True
                            var.get('ndata').get('algorithm').get('params').put('priv_key', var.get('asn1').get('DSAparam').callprop('decode', var.get('ndata').get('subjectPrivateKey'), Js('der')))
                            return Js({'type':Js('dsa'),'params':var.get('ndata').get('algorithm').get('params')})
                        if True:
                            SWITCHED = True
                            PyJsTempException = JsToPyException(var.get('Error').create((Js('unknown key id ')+var.get('subtype'))))
                            raise PyJsTempException
                        SWITCHED = True
                        break
                if SWITCHED or _seq(CONDITION, Js('RSA PUBLIC KEY')):
                    SWITCHED = True
                    return var.get('asn1').get('RSAPublicKey').callprop('decode', var.get('data'), Js('der'))
                if SWITCHED or _seq(CONDITION, Js('RSA PRIVATE KEY')):
                    SWITCHED = True
                    return var.get('asn1').get('RSAPrivateKey').callprop('decode', var.get('data'), Js('der'))
                if SWITCHED or _seq(CONDITION, Js('DSA PRIVATE KEY')):
                    SWITCHED = True
                    return Js({'type':Js('dsa'),'params':var.get('asn1').get('DSAPrivateKey').callprop('decode', var.get('data'), Js('der'))})
                if SWITCHED or _seq(CONDITION, Js('EC PRIVATE KEY')):
                    SWITCHED = True
                    var.put('data', var.get('asn1').get('ECPrivateKey').callprop('decode', var.get('data'), Js('der')))
                    return Js({'curve':var.get('data').get('parameters').get('value'),'privateKey':var.get('data').get('privateKey')})
                if True:
                    SWITCHED = True
                    PyJsTempException = JsToPyException(var.get('Error').create((Js('unknown key type ')+var.get('type'))))
                    raise PyJsTempException
                SWITCHED = True
                break
        PyJsHoisted_parseKeys_.func_name = 'parseKeys'
        var.put('parseKeys', PyJsHoisted_parseKeys_)
        @Js
        def PyJsHoisted_decrypt_(data, password, this, arguments, var=var):
            var = Scope({'data':data, 'password':password, 'this':this, 'arguments':arguments}, var)
            var.registers(['cipher', 'iters', 'iv', 'password', 'out', 'cipherText', 'salt', 'key', 'keylen', 'data', 'algo'])
            var.put('salt', var.get('data').get('algorithm').get('decrypt').get('kde').get('kdeparams').get('salt'))
            var.put('iters', var.get('parseInt')(var.get('data').get('algorithm').get('decrypt').get('kde').get('kdeparams').get('iters').callprop('toString'), Js(10.0)))
            var.put('algo', var.get('aesid').get(var.get('data').get('algorithm').get('decrypt').get('cipher').get('algo').callprop('join', Js('.'))))
            var.put('iv', var.get('data').get('algorithm').get('decrypt').get('cipher').get('iv'))
            var.put('cipherText', var.get('data').get('subjectPrivateKey'))
            var.put('keylen', (var.get('parseInt')(var.get('algo').callprop('split', Js('-')).get('1'), Js(10.0))/Js(8.0)))
            var.put('key', var.get('compat').callprop('pbkdf2Sync', var.get('password'), var.get('salt'), var.get('iters'), var.get('keylen'), Js('sha1')))
            var.put('cipher', var.get('ciphers').callprop('createDecipheriv', var.get('algo'), var.get('key'), var.get('iv')))
            var.put('out', Js([]))
            var.get('out').callprop('push', var.get('cipher').callprop('update', var.get('cipherText')))
            var.get('out').callprop('push', var.get('cipher').callprop('final'))
            return var.get('Buffer').callprop('concat', var.get('out'))
        PyJsHoisted_decrypt_.func_name = 'decrypt'
        var.put('decrypt', PyJsHoisted_decrypt_)
        var.put('asn1', var.get('require')(Js('./asn1')))
        var.put('aesid', var.get('require')(Js('./aesid.json')))
        var.put('fixProc', var.get('require')(Js('./fixProc')))
        var.put('ciphers', var.get('require')(Js('browserify-aes')))
        var.put('compat', var.get('require')(Js('pbkdf2')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.get('module').put('exports', var.get('parseKeys'))
        pass
        var.get('parseKeys').put('signature', var.get('asn1').get('signature'))
        pass
    PyJs_anonymous_2563_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2564_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('exports').put('pbkdf2', var.get('require')(Js('./lib/async')))
        var.get('exports').put('pbkdf2Sync', var.get('require')(Js('./lib/sync')))
    PyJs_anonymous_2564_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2565_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_2566_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global', 'process'])
            @Js
            def PyJs_anonymous_2567_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['toBrowser', 'Buffer', 'toBuffer', 'checks', 'resolvePromise', 'browserPbkdf2', 'ZERO_BUF', 'subtle', 'defaultEncoding', 'sync', 'checkParameters', 'checkNative'])
                @Js
                def PyJsHoisted_checkNative_(algo, this, arguments, var=var):
                    var = Scope({'algo':algo, 'this':this, 'arguments':arguments}, var)
                    var.registers(['prom', 'algo'])
                    if (var.get('global').get('process') and var.get('global').get('process').get('browser').neg()):
                        return var.get('Promise').callprop('resolve', Js(False))
                    if ((var.get('subtle').neg() or var.get('subtle').get('importKey').neg()) or var.get('subtle').get('deriveBits').neg()):
                        return var.get('Promise').callprop('resolve', Js(False))
                    if PyJsStrictNeq(var.get('checks').get(var.get('algo')),var.get('undefined')):
                        return var.get('checks').get(var.get('algo'))
                    var.put('ZERO_BUF', (var.get('ZERO_BUF') or var.get('Buffer').callprop('alloc', Js(8.0))))
                    @Js
                    def PyJs_anonymous_2568_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js(False)
                    PyJs_anonymous_2568_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_2569_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js(True)
                    PyJs_anonymous_2569_._set_name('anonymous')
                    var.put('prom', var.get('browserPbkdf2')(var.get('ZERO_BUF'), var.get('ZERO_BUF'), Js(10.0), Js(128.0), var.get('algo')).callprop('then', PyJs_anonymous_2569_).callprop('catch', PyJs_anonymous_2568_))
                    var.get('checks').put(var.get('algo'), var.get('prom'))
                    return var.get('prom')
                PyJsHoisted_checkNative_.func_name = 'checkNative'
                var.put('checkNative', PyJsHoisted_checkNative_)
                @Js
                def PyJsHoisted_browserPbkdf2_(password, salt, iterations, length, algo, this, arguments, var=var):
                    var = Scope({'password':password, 'salt':salt, 'iterations':iterations, 'length':length, 'algo':algo, 'this':this, 'arguments':arguments}, var)
                    var.registers(['password', 'length', 'salt', 'algo', 'iterations'])
                    @Js
                    def PyJs_anonymous_2570_(res, this, arguments, var=var):
                        var = Scope({'res':res, 'this':this, 'arguments':arguments}, var)
                        var.registers(['res'])
                        return var.get('Buffer').callprop('from', var.get('res'))
                    PyJs_anonymous_2570_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_2571_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get('subtle').callprop('deriveBits', Js({'name':Js('PBKDF2'),'salt':var.get('salt'),'iterations':var.get('iterations'),'hash':Js({'name':var.get('algo')})}), var.get('key'), (var.get('length')<<Js(3.0)))
                    PyJs_anonymous_2571_._set_name('anonymous')
                    return var.get('subtle').callprop('importKey', Js('raw'), var.get('password'), Js({'name':Js('PBKDF2')}), Js(False), Js([Js('deriveBits')])).callprop('then', PyJs_anonymous_2571_).callprop('then', PyJs_anonymous_2570_)
                PyJsHoisted_browserPbkdf2_.func_name = 'browserPbkdf2'
                var.put('browserPbkdf2', PyJsHoisted_browserPbkdf2_)
                @Js
                def PyJsHoisted_resolvePromise_(promise, callback, this, arguments, var=var):
                    var = Scope({'promise':promise, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['promise', 'callback'])
                    @Js
                    def PyJs_anonymous_2572_(out, this, arguments, var=var):
                        var = Scope({'out':out, 'this':this, 'arguments':arguments}, var)
                        var.registers(['out'])
                        @Js
                        def PyJs_anonymous_2573_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.get('callback')(var.get(u"null"), var.get('out'))
                        PyJs_anonymous_2573_._set_name('anonymous')
                        var.get('process').callprop('nextTick', PyJs_anonymous_2573_)
                    PyJs_anonymous_2572_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_2574_(e, this, arguments, var=var):
                        var = Scope({'e':e, 'this':this, 'arguments':arguments}, var)
                        var.registers(['e'])
                        @Js
                        def PyJs_anonymous_2575_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.get('callback')(var.get('e'))
                        PyJs_anonymous_2575_._set_name('anonymous')
                        var.get('process').callprop('nextTick', PyJs_anonymous_2575_)
                    PyJs_anonymous_2574_._set_name('anonymous')
                    var.get('promise').callprop('then', PyJs_anonymous_2572_, PyJs_anonymous_2574_)
                PyJsHoisted_resolvePromise_.func_name = 'resolvePromise'
                var.put('resolvePromise', PyJsHoisted_resolvePromise_)
                var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
                var.put('checkParameters', var.get('require')(Js('./precondition')))
                var.put('defaultEncoding', var.get('require')(Js('./default-encoding')))
                var.put('sync', var.get('require')(Js('./sync')))
                var.put('toBuffer', var.get('require')(Js('./to-buffer')))
                pass
                var.put('subtle', (var.get('global').get('crypto') and var.get('global').get('crypto').get('subtle')))
                var.put('toBrowser', Js({'sha':Js('SHA-1'),'sha-1':Js('SHA-1'),'sha1':Js('SHA-1'),'sha256':Js('SHA-256'),'sha-256':Js('SHA-256'),'sha384':Js('SHA-384'),'sha-384':Js('SHA-384'),'sha-512':Js('SHA-512'),'sha512':Js('SHA-512')}))
                var.put('checks', Js([]))
                pass
                pass
                pass
                @Js
                def PyJs_anonymous_2576_(password, salt, iterations, keylen, digest, callback, this, arguments, var=var):
                    var = Scope({'password':password, 'salt':salt, 'iterations':iterations, 'keylen':keylen, 'digest':digest, 'callback':callback, 'this':this, 'arguments':arguments}, var)
                    var.registers(['digest', 'callback', 'password', 'salt', 'keylen', 'algo', 'iterations'])
                    if _seq(var.get('digest',throw=False).typeof(),Js('function')):
                        var.put('callback', var.get('digest'))
                        var.put('digest', var.get('undefined'))
                    var.put('digest', (var.get('digest') or Js('sha1')))
                    var.put('algo', var.get('toBrowser').get(var.get('digest').callprop('toLowerCase')))
                    if (var.get('algo').neg() or PyJsStrictNeq(var.get('global').get('Promise').typeof(),Js('function'))):
                        @Js
                        def PyJs_anonymous_2577_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['out'])
                            pass
                            try:
                                var.put('out', var.get('sync')(var.get('password'), var.get('salt'), var.get('iterations'), var.get('keylen'), var.get('digest')))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_31709208 = var.own.get('e')
                                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                try:
                                    return var.get('callback')(var.get('e'))
                                finally:
                                    if PyJsHolder_65_31709208 is not None:
                                        var.own['e'] = PyJsHolder_65_31709208
                                    else:
                                        del var.own['e']
                                    del PyJsHolder_65_31709208
                            var.get('callback')(var.get(u"null"), var.get('out'))
                        PyJs_anonymous_2577_._set_name('anonymous')
                        return var.get('process').callprop('nextTick', PyJs_anonymous_2577_)
                    var.get('checkParameters')(var.get('iterations'), var.get('keylen'))
                    var.put('password', var.get('toBuffer')(var.get('password'), var.get('defaultEncoding'), Js('Password')))
                    var.put('salt', var.get('toBuffer')(var.get('salt'), var.get('defaultEncoding'), Js('Salt')))
                    if PyJsStrictNeq(var.get('callback',throw=False).typeof(),Js('function')):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('No callback provided to pbkdf2')))
                        raise PyJsTempException
                    @Js
                    def PyJs_anonymous_2578_(resp, this, arguments, var=var):
                        var = Scope({'resp':resp, 'this':this, 'arguments':arguments}, var)
                        var.registers(['resp'])
                        if var.get('resp'):
                            return var.get('browserPbkdf2')(var.get('password'), var.get('salt'), var.get('iterations'), var.get('keylen'), var.get('algo'))
                        return var.get('sync')(var.get('password'), var.get('salt'), var.get('iterations'), var.get('keylen'), var.get('digest'))
                    PyJs_anonymous_2578_._set_name('anonymous')
                    var.get('resolvePromise')(var.get('checkNative')(var.get('algo')).callprop('then', PyJs_anonymous_2578_), var.get('callback'))
                PyJs_anonymous_2576_._set_name('anonymous')
                var.get('module').put('exports', PyJs_anonymous_2576_)
            PyJs_anonymous_2567_._set_name('anonymous')
            PyJs_anonymous_2567_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2566_._set_name('anonymous')
        PyJs_anonymous_2566_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_2565_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2579_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_2580_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_2581_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['defaultEncoding', 'pVersionMajor'])
                pass
                if var.get('process').get('browser'):
                    var.put('defaultEncoding', Js('utf-8'))
                else:
                    if var.get('process').get('version'):
                        var.put('pVersionMajor', var.get('parseInt')(var.get('process').get('version').callprop('split', Js('.')).get('0').callprop('slice', Js(1.0)), Js(10.0)))
                        var.put('defaultEncoding', (Js('utf-8') if (var.get('pVersionMajor')>=Js(6.0)) else Js('binary')))
                    else:
                        var.put('defaultEncoding', Js('utf-8'))
                var.get('module').put('exports', var.get('defaultEncoding'))
            PyJs_anonymous_2581_._set_name('anonymous')
            PyJs_anonymous_2581_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2580_._set_name('anonymous')
        PyJs_anonymous_2580_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_2579_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2582_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'MAX_ALLOC', 'module'])
        var.put('MAX_ALLOC', (var.get('Math').callprop('pow', Js(2.0), Js(30.0))-Js(1.0)))
        @Js
        def PyJs_anonymous_2583_(iterations, keylen, this, arguments, var=var):
            var = Scope({'iterations':iterations, 'keylen':keylen, 'this':this, 'arguments':arguments}, var)
            var.registers(['keylen', 'iterations'])
            if PyJsStrictNeq(var.get('iterations',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Iterations not a number')))
                raise PyJsTempException
            if (var.get('iterations')<Js(0.0)):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Bad iterations')))
                raise PyJsTempException
            if PyJsStrictNeq(var.get('keylen',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Key length not a number')))
                raise PyJsTempException
            if (((var.get('keylen')<Js(0.0)) or (var.get('keylen')>var.get('MAX_ALLOC'))) or PyJsStrictNeq(var.get('keylen'),var.get('keylen'))):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Bad key length')))
                raise PyJsTempException
        PyJs_anonymous_2583_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_2583_)
    PyJs_anonymous_2582_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2584_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'getDigest', 'ZEROS', 'Buffer', 'require', 'sizes', 'module', 'md5', 'sha', 'toBuffer', 'defaultEncoding', 'Hmac', 'RIPEMD160', 'checkParameters', 'pbkdf2'])
        @Js
        def PyJsHoisted_Hmac_(alg, key, saltLen, this, arguments, var=var):
            var = Scope({'alg':alg, 'key':key, 'saltLen':saltLen, 'this':this, 'arguments':arguments}, var)
            var.registers(['ipad', 'blocksize', 'hash', 'i', 'alg', 'saltLen', 'key', 'opad', 'ipad1'])
            var.put('hash', var.get('getDigest')(var.get('alg')))
            var.put('blocksize', (Js(128.0) if (_seq(var.get('alg'),Js('sha512')) or _seq(var.get('alg'),Js('sha384'))) else Js(64.0)))
            if (var.get('key').get('length')>var.get('blocksize')):
                var.put('key', var.get('hash')(var.get('key')))
            else:
                if (var.get('key').get('length')<var.get('blocksize')):
                    var.put('key', var.get('Buffer').callprop('concat', Js([var.get('key'), var.get('ZEROS')]), var.get('blocksize')))
            var.put('ipad', var.get('Buffer').callprop('allocUnsafe', (var.get('blocksize')+var.get('sizes').get(var.get('alg')))))
            var.put('opad', var.get('Buffer').callprop('allocUnsafe', (var.get('blocksize')+var.get('sizes').get(var.get('alg')))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('blocksize')):
                try:
                    var.get('ipad').put(var.get('i'), (var.get('key').get(var.get('i'))^Js(54)))
                    var.get('opad').put(var.get('i'), (var.get('key').get(var.get('i'))^Js(92)))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('ipad1', var.get('Buffer').callprop('allocUnsafe', ((var.get('blocksize')+var.get('saltLen'))+Js(4.0))))
            var.get('ipad').callprop('copy', var.get('ipad1'), Js(0.0), Js(0.0), var.get('blocksize'))
            var.get(u"this").put('ipad1', var.get('ipad1'))
            var.get(u"this").put('ipad2', var.get('ipad'))
            var.get(u"this").put('opad', var.get('opad'))
            var.get(u"this").put('alg', var.get('alg'))
            var.get(u"this").put('blocksize', var.get('blocksize'))
            var.get(u"this").put('hash', var.get('hash'))
            var.get(u"this").put('size', var.get('sizes').get(var.get('alg')))
        PyJsHoisted_Hmac_.func_name = 'Hmac'
        var.put('Hmac', PyJsHoisted_Hmac_)
        @Js
        def PyJsHoisted_getDigest_(alg, this, arguments, var=var):
            var = Scope({'alg':alg, 'this':this, 'arguments':arguments}, var)
            var.registers(['alg', 'rmd160Func', 'shaFunc'])
            @Js
            def PyJsHoisted_shaFunc_(data, this, arguments, var=var):
                var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                var.registers(['data'])
                return var.get('sha')(var.get('alg')).callprop('update', var.get('data')).callprop('digest')
            PyJsHoisted_shaFunc_.func_name = 'shaFunc'
            var.put('shaFunc', PyJsHoisted_shaFunc_)
            @Js
            def PyJsHoisted_rmd160Func_(data, this, arguments, var=var):
                var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
                var.registers(['data'])
                return var.get('RIPEMD160').create().callprop('update', var.get('data')).callprop('digest')
            PyJsHoisted_rmd160Func_.func_name = 'rmd160Func'
            var.put('rmd160Func', PyJsHoisted_rmd160Func_)
            pass
            pass
            if (_seq(var.get('alg'),Js('rmd160')) or _seq(var.get('alg'),Js('ripemd160'))):
                return var.get('rmd160Func')
            if _seq(var.get('alg'),Js('md5')):
                return var.get('md5')
            return var.get('shaFunc')
        PyJsHoisted_getDigest_.func_name = 'getDigest'
        var.put('getDigest', PyJsHoisted_getDigest_)
        @Js
        def PyJsHoisted_pbkdf2_(password, salt, iterations, keylen, digest, this, arguments, var=var):
            var = Scope({'password':password, 'salt':salt, 'iterations':iterations, 'keylen':keylen, 'digest':digest, 'this':this, 'arguments':arguments}, var)
            var.registers(['digest', 'hmac', 'U', 'i', 'j', 'destPos', 'l', 'password', 'k', 'DK', 'salt', 'T', 'keylen', 'block1', 'hLen', 'iterations'])
            var.get('checkParameters')(var.get('iterations'), var.get('keylen'))
            var.put('password', var.get('toBuffer')(var.get('password'), var.get('defaultEncoding'), Js('Password')))
            var.put('salt', var.get('toBuffer')(var.get('salt'), var.get('defaultEncoding'), Js('Salt')))
            var.put('digest', (var.get('digest') or Js('sha1')))
            var.put('hmac', var.get('Hmac').create(var.get('digest'), var.get('password'), var.get('salt').get('length')))
            var.put('DK', var.get('Buffer').callprop('allocUnsafe', var.get('keylen')))
            var.put('block1', var.get('Buffer').callprop('allocUnsafe', (var.get('salt').get('length')+Js(4.0))))
            var.get('salt').callprop('copy', var.get('block1'), Js(0.0), Js(0.0), var.get('salt').get('length'))
            var.put('destPos', Js(0.0))
            var.put('hLen', var.get('sizes').get(var.get('digest')))
            var.put('l', var.get('Math').callprop('ceil', (var.get('keylen')/var.get('hLen'))))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<=var.get('l')):
                try:
                    var.get('block1').callprop('writeUInt32BE', var.get('i'), var.get('salt').get('length'))
                    var.put('T', var.get('hmac').callprop('run', var.get('block1'), var.get('hmac').get('ipad1')))
                    var.put('U', var.get('T'))
                    #for JS loop
                    var.put('j', Js(1.0))
                    while (var.get('j')<var.get('iterations')):
                        try:
                            var.put('U', var.get('hmac').callprop('run', var.get('U'), var.get('hmac').get('ipad2')))
                            #for JS loop
                            var.put('k', Js(0.0))
                            while (var.get('k')<var.get('hLen')):
                                try:
                                    var.get('T').put(var.get('k'), var.get('U').get(var.get('k')), '^')
                                finally:
                                        (var.put('k',Js(var.get('k').to_number())+Js(1))-Js(1))
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    var.get('T').callprop('copy', var.get('DK'), var.get('destPos'))
                    var.put('destPos', var.get('hLen'), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('DK')
        PyJsHoisted_pbkdf2_.func_name = 'pbkdf2'
        var.put('pbkdf2', PyJsHoisted_pbkdf2_)
        var.put('md5', var.get('require')(Js('create-hash/md5')))
        var.put('RIPEMD160', var.get('require')(Js('ripemd160')))
        var.put('sha', var.get('require')(Js('sha.js')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('checkParameters', var.get('require')(Js('./precondition')))
        var.put('defaultEncoding', var.get('require')(Js('./default-encoding')))
        var.put('toBuffer', var.get('require')(Js('./to-buffer')))
        var.put('ZEROS', var.get('Buffer').callprop('alloc', Js(128.0)))
        var.put('sizes', Js({'md5':Js(16.0),'sha1':Js(20.0),'sha224':Js(28.0),'sha256':Js(32.0),'sha384':Js(48.0),'sha512':Js(64.0),'rmd160':Js(20.0),'ripemd160':Js(20.0)}))
        pass
        @Js
        def PyJs_anonymous_2585_(data, ipad, this, arguments, var=var):
            var = Scope({'data':data, 'ipad':ipad, 'this':this, 'arguments':arguments}, var)
            var.registers(['ipad', 'data', 'h'])
            var.get('data').callprop('copy', var.get('ipad'), var.get(u"this").get('blocksize'))
            var.put('h', var.get(u"this").callprop('hash', var.get('ipad')))
            var.get('h').callprop('copy', var.get(u"this").get('opad'), var.get(u"this").get('blocksize'))
            return var.get(u"this").callprop('hash', var.get(u"this").get('opad'))
        PyJs_anonymous_2585_._set_name('anonymous')
        var.get('Hmac').get('prototype').put('run', PyJs_anonymous_2585_)
        pass
        pass
        var.get('module').put('exports', var.get('pbkdf2'))
    PyJs_anonymous_2584_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2586_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module'])
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        @Js
        def PyJs_anonymous_2587_(thing, encoding, name, this, arguments, var=var):
            var = Scope({'thing':thing, 'encoding':encoding, 'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'thing', 'encoding'])
            if var.get('Buffer').callprop('isBuffer', var.get('thing')):
                return var.get('thing')
            else:
                if _seq(var.get('thing',throw=False).typeof(),Js('string')):
                    return var.get('Buffer').callprop('from', var.get('thing'), var.get('encoding'))
                else:
                    if var.get('ArrayBuffer').callprop('isView', var.get('thing')):
                        return var.get('Buffer').callprop('from', var.get('thing').get('buffer'))
                    else:
                        PyJsTempException = JsToPyException(var.get('TypeError').create((var.get('name')+Js(' must be a string, a Buffer, a typed array or a DataView'))))
                        raise PyJsTempException
        PyJs_anonymous_2587_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_2587_)
    PyJs_anonymous_2586_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2588_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cachedClearTimeout', 'runTimeout', 'defaultClearTimeout', 'queue', 'drainQueue', 'noop', 'currentQueue', 'require', 'module', 'exports', 'process', 'runClearTimeout', 'draining', 'queueIndex', 'Item', 'defaultSetTimout', 'cachedSetTimeout', 'cleanUpNextTick'])
        @Js
        def PyJsHoisted_defaultSetTimout_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('setTimeout has not been defined')))
            raise PyJsTempException
        PyJsHoisted_defaultSetTimout_.func_name = 'defaultSetTimout'
        var.put('defaultSetTimout', PyJsHoisted_defaultSetTimout_)
        @Js
        def PyJsHoisted_defaultClearTimeout_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('clearTimeout has not been defined')))
            raise PyJsTempException
        PyJsHoisted_defaultClearTimeout_.func_name = 'defaultClearTimeout'
        var.put('defaultClearTimeout', PyJsHoisted_defaultClearTimeout_)
        @Js
        def PyJsHoisted_runTimeout_(fun, this, arguments, var=var):
            var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
            var.registers(['fun'])
            if _seq(var.get('cachedSetTimeout'),var.get('setTimeout')):
                return var.get('setTimeout')(var.get('fun'), Js(0.0))
            if ((_seq(var.get('cachedSetTimeout'),var.get('defaultSetTimout')) or var.get('cachedSetTimeout').neg()) and var.get('setTimeout')):
                var.put('cachedSetTimeout', var.get('setTimeout'))
                return var.get('setTimeout')(var.get('fun'), Js(0.0))
            try:
                return var.get('cachedSetTimeout')(var.get('fun'), Js(0.0))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_56494128 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        return var.get('cachedSetTimeout').callprop('call', var.get(u"null"), var.get('fun'), Js(0.0))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_37977853 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get('cachedSetTimeout').callprop('call', var.get(u"this"), var.get('fun'), Js(0.0))
                        finally:
                            if PyJsHolder_65_37977853 is not None:
                                var.own['e'] = PyJsHolder_65_37977853
                            else:
                                del var.own['e']
                            del PyJsHolder_65_37977853
                finally:
                    if PyJsHolder_65_56494128 is not None:
                        var.own['e'] = PyJsHolder_65_56494128
                    else:
                        del var.own['e']
                    del PyJsHolder_65_56494128
        PyJsHoisted_runTimeout_.func_name = 'runTimeout'
        var.put('runTimeout', PyJsHoisted_runTimeout_)
        @Js
        def PyJsHoisted_runClearTimeout_(marker, this, arguments, var=var):
            var = Scope({'marker':marker, 'this':this, 'arguments':arguments}, var)
            var.registers(['marker'])
            if _seq(var.get('cachedClearTimeout'),var.get('clearTimeout')):
                return var.get('clearTimeout')(var.get('marker'))
            if ((_seq(var.get('cachedClearTimeout'),var.get('defaultClearTimeout')) or var.get('cachedClearTimeout').neg()) and var.get('clearTimeout')):
                var.put('cachedClearTimeout', var.get('clearTimeout'))
                return var.get('clearTimeout')(var.get('marker'))
            try:
                return var.get('cachedClearTimeout')(var.get('marker'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_21732915 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        return var.get('cachedClearTimeout').callprop('call', var.get(u"null"), var.get('marker'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_53084101 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get('cachedClearTimeout').callprop('call', var.get(u"this"), var.get('marker'))
                        finally:
                            if PyJsHolder_65_53084101 is not None:
                                var.own['e'] = PyJsHolder_65_53084101
                            else:
                                del var.own['e']
                            del PyJsHolder_65_53084101
                finally:
                    if PyJsHolder_65_21732915 is not None:
                        var.own['e'] = PyJsHolder_65_21732915
                    else:
                        del var.own['e']
                    del PyJsHolder_65_21732915
        PyJsHoisted_runClearTimeout_.func_name = 'runClearTimeout'
        var.put('runClearTimeout', PyJsHoisted_runClearTimeout_)
        @Js
        def PyJsHoisted_cleanUpNextTick_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if (var.get('draining').neg() or var.get('currentQueue').neg()):
                return var.get('undefined')
            var.put('draining', Js(False))
            if var.get('currentQueue').get('length'):
                var.put('queue', var.get('currentQueue').callprop('concat', var.get('queue')))
            else:
                var.put('queueIndex', (-Js(1.0)))
            if var.get('queue').get('length'):
                var.get('drainQueue')()
        PyJsHoisted_cleanUpNextTick_.func_name = 'cleanUpNextTick'
        var.put('cleanUpNextTick', PyJsHoisted_cleanUpNextTick_)
        @Js
        def PyJsHoisted_drainQueue_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'timeout'])
            if var.get('draining'):
                return var.get('undefined')
            var.put('timeout', var.get('runTimeout')(var.get('cleanUpNextTick')))
            var.put('draining', Js(True))
            var.put('len', var.get('queue').get('length'))
            while var.get('len'):
                var.put('currentQueue', var.get('queue'))
                var.put('queue', Js([]))
                while (var.put('queueIndex',Js(var.get('queueIndex').to_number())+Js(1))<var.get('len')):
                    if var.get('currentQueue'):
                        var.get('currentQueue').get(var.get('queueIndex')).callprop('run')
                var.put('queueIndex', (-Js(1.0)))
                var.put('len', var.get('queue').get('length'))
            var.put('currentQueue', var.get(u"null"))
            var.put('draining', Js(False))
            var.get('runClearTimeout')(var.get('timeout'))
        PyJsHoisted_drainQueue_.func_name = 'drainQueue'
        var.put('drainQueue', PyJsHoisted_drainQueue_)
        @Js
        def PyJsHoisted_Item_(fun, array, this, arguments, var=var):
            var = Scope({'fun':fun, 'array':array, 'this':this, 'arguments':arguments}, var)
            var.registers(['fun', 'array'])
            var.get(u"this").put('fun', var.get('fun'))
            var.get(u"this").put('array', var.get('array'))
        PyJsHoisted_Item_.func_name = 'Item'
        var.put('Item', PyJsHoisted_Item_)
        @Js
        def PyJsHoisted_noop_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_noop_.func_name = 'noop'
        var.put('noop', PyJsHoisted_noop_)
        var.put('process', var.get('module').put('exports', Js({})))
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_2589_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            try:
                if _seq(var.get('setTimeout',throw=False).typeof(),Js('function')):
                    var.put('cachedSetTimeout', var.get('setTimeout'))
                else:
                    var.put('cachedSetTimeout', var.get('defaultSetTimout'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_14515399 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('cachedSetTimeout', var.get('defaultSetTimout'))
                finally:
                    if PyJsHolder_65_14515399 is not None:
                        var.own['e'] = PyJsHolder_65_14515399
                    else:
                        del var.own['e']
                    del PyJsHolder_65_14515399
            try:
                if _seq(var.get('clearTimeout',throw=False).typeof(),Js('function')):
                    var.put('cachedClearTimeout', var.get('clearTimeout'))
                else:
                    var.put('cachedClearTimeout', var.get('defaultClearTimeout'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_75381076 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('cachedClearTimeout', var.get('defaultClearTimeout'))
                finally:
                    if PyJsHolder_65_75381076 is not None:
                        var.own['e'] = PyJsHolder_65_75381076
                    else:
                        del var.own['e']
                    del PyJsHolder_65_75381076
        PyJs_anonymous_2589_._set_name('anonymous')
        PyJs_anonymous_2589_()
        pass
        pass
        var.put('queue', Js([]))
        var.put('draining', Js(False))
        pass
        var.put('queueIndex', (-Js(1.0)))
        pass
        pass
        @Js
        def PyJs_anonymous_2590_(fun, this, arguments, var=var):
            var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'fun', 'args'])
            var.put('args', var.get('Array').create((var.get('arguments').get('length')-Js(1.0))))
            if (var.get('arguments').get('length')>Js(1.0)):
                #for JS loop
                var.put('i', Js(1.0))
                while (var.get('i')<var.get('arguments').get('length')):
                    try:
                        var.get('args').put((var.get('i')-Js(1.0)), var.get('arguments').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get('queue').callprop('push', var.get('Item').create(var.get('fun'), var.get('args')))
            if (_seq(var.get('queue').get('length'),Js(1.0)) and var.get('draining').neg()):
                var.get('runTimeout')(var.get('drainQueue'))
        PyJs_anonymous_2590_._set_name('anonymous')
        var.get('process').put('nextTick', PyJs_anonymous_2590_)
        pass
        @Js
        def PyJs_anonymous_2591_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").get('fun').callprop('apply', var.get(u"null"), var.get(u"this").get('array'))
        PyJs_anonymous_2591_._set_name('anonymous')
        var.get('Item').get('prototype').put('run', PyJs_anonymous_2591_)
        var.get('process').put('title', Js('browser'))
        var.get('process').put('browser', Js(True))
        var.get('process').put('env', Js({}))
        var.get('process').put('argv', Js([]))
        var.get('process').put('version', Js(''))
        var.get('process').put('versions', Js({}))
        pass
        var.get('process').put('on', var.get('noop'))
        var.get('process').put('addListener', var.get('noop'))
        var.get('process').put('once', var.get('noop'))
        var.get('process').put('off', var.get('noop'))
        var.get('process').put('removeListener', var.get('noop'))
        var.get('process').put('removeAllListeners', var.get('noop'))
        var.get('process').put('emit', var.get('noop'))
        var.get('process').put('prependListener', var.get('noop'))
        var.get('process').put('prependOnceListener', var.get('noop'))
        @Js
        def PyJs_anonymous_2592_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return Js([])
        PyJs_anonymous_2592_._set_name('anonymous')
        var.get('process').put('listeners', PyJs_anonymous_2592_)
        @Js
        def PyJs_anonymous_2593_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('process.binding is not supported')))
            raise PyJsTempException
        PyJs_anonymous_2593_._set_name('anonymous')
        var.get('process').put('binding', PyJs_anonymous_2593_)
        @Js
        def PyJs_anonymous_2594_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('/')
        PyJs_anonymous_2594_._set_name('anonymous')
        var.get('process').put('cwd', PyJs_anonymous_2594_)
        @Js
        def PyJs_anonymous_2595_(dir, this, arguments, var=var):
            var = Scope({'dir':dir, 'this':this, 'arguments':arguments}, var)
            var.registers(['dir'])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('process.chdir is not supported')))
            raise PyJsTempException
        PyJs_anonymous_2595_._set_name('anonymous')
        var.get('process').put('chdir', PyJs_anonymous_2595_)
        @Js
        def PyJs_anonymous_2596_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(0.0)
        PyJs_anonymous_2596_._set_name('anonymous')
        var.get('process').put('umask', PyJs_anonymous_2596_)
    PyJs_anonymous_2588_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2597_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('exports').put('publicEncrypt', var.get('require')(Js('./publicEncrypt')))
        var.get('exports').put('privateDecrypt', var.get('require')(Js('./privateDecrypt')))
        @Js
        def PyJs_privateEncrypt_2598_(key, buf, this, arguments, var=var):
            var = Scope({'key':key, 'buf':buf, 'this':this, 'arguments':arguments, 'privateEncrypt':PyJs_privateEncrypt_2598_}, var)
            var.registers(['buf', 'key'])
            return var.get('exports').callprop('publicEncrypt', var.get('key'), var.get('buf'), Js(True))
        PyJs_privateEncrypt_2598_._set_name('privateEncrypt')
        var.get('exports').put('privateEncrypt', PyJs_privateEncrypt_2598_)
        @Js
        def PyJs_publicDecrypt_2599_(key, buf, this, arguments, var=var):
            var = Scope({'key':key, 'buf':buf, 'this':this, 'arguments':arguments, 'publicDecrypt':PyJs_publicDecrypt_2599_}, var)
            var.registers(['buf', 'key'])
            return var.get('exports').callprop('privateDecrypt', var.get('key'), var.get('buf'), Js(True))
        PyJs_publicDecrypt_2599_._set_name('publicDecrypt')
        var.get('exports').put('publicDecrypt', PyJs_publicDecrypt_2599_)
    PyJs_anonymous_2597_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2600_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'createHash', 'i2ops'])
        @Js
        def PyJsHoisted_i2ops_(c, this, arguments, var=var):
            var = Scope({'c':c, 'this':this, 'arguments':arguments}, var)
            var.registers(['c', 'out'])
            var.put('out', var.get('Buffer').callprop('allocUnsafe', Js(4.0)))
            var.get('out').callprop('writeUInt32BE', var.get('c'), Js(0.0))
            return var.get('out')
        PyJsHoisted_i2ops_.func_name = 'i2ops'
        var.put('i2ops', PyJsHoisted_i2ops_)
        var.put('createHash', var.get('require')(Js('create-hash')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        @Js
        def PyJs_anonymous_2601_(seed, len, this, arguments, var=var):
            var = Scope({'seed':seed, 'len':len, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'c', 'len', 't', 'seed'])
            var.put('t', var.get('Buffer').callprop('alloc', Js(0.0)))
            var.put('i', Js(0.0))
            pass
            while (var.get('t').get('length')<var.get('len')):
                var.put('c', var.get('i2ops')((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                var.put('t', var.get('Buffer').callprop('concat', Js([var.get('t'), var.get('createHash')(Js('sha1')).callprop('update', var.get('seed')).callprop('update', var.get('c')).callprop('digest')])))
            return var.get('t').callprop('slice', Js(0.0), var.get('len'))
        PyJs_anonymous_2601_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_2601_)
        pass
    PyJs_anonymous_2600_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2602_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('15').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2602_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2603_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'BN', 'crt', 'compare', 'parseKeys', 'createHash', 'mgf', 'oaep', 'withPublic', 'pkcs1', 'xor'])
        @Js
        def PyJsHoisted_oaep_(key, msg, this, arguments, var=var):
            var = Scope({'key':key, 'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['seed', 'i', 'msg', 'maskedSeed', 'k', 'key', 'iHash', 'maskedDb', 'db', 'hLen'])
            var.put('k', var.get('key').get('modulus').callprop('byteLength'))
            var.put('iHash', var.get('createHash')(Js('sha1')).callprop('update', var.get('Buffer').callprop('alloc', Js(0.0))).callprop('digest'))
            var.put('hLen', var.get('iHash').get('length'))
            if PyJsStrictNeq(var.get('msg').get('0'),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('decryption error')))
                raise PyJsTempException
            var.put('maskedSeed', var.get('msg').callprop('slice', Js(1.0), (var.get('hLen')+Js(1.0))))
            var.put('maskedDb', var.get('msg').callprop('slice', (var.get('hLen')+Js(1.0))))
            var.put('seed', var.get('xor')(var.get('maskedSeed'), var.get('mgf')(var.get('maskedDb'), var.get('hLen'))))
            var.put('db', var.get('xor')(var.get('maskedDb'), var.get('mgf')(var.get('seed'), ((var.get('k')-var.get('hLen'))-Js(1.0)))))
            if var.get('compare')(var.get('iHash'), var.get('db').callprop('slice', Js(0.0), var.get('hLen'))):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('decryption error')))
                raise PyJsTempException
            var.put('i', var.get('hLen'))
            while _seq(var.get('db').get(var.get('i')),Js(0.0)):
                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if PyJsStrictNeq(var.get('db').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))),Js(1.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('decryption error')))
                raise PyJsTempException
            return var.get('db').callprop('slice', var.get('i'))
        PyJsHoisted_oaep_.func_name = 'oaep'
        var.put('oaep', PyJsHoisted_oaep_)
        @Js
        def PyJsHoisted_pkcs1_(key, msg, reverse, this, arguments, var=var):
            var = Scope({'key':key, 'msg':msg, 'reverse':reverse, 'this':this, 'arguments':arguments}, var)
            var.registers(['reverse', 'i', 'msg', 'key', 'status', 'p1', 'ps'])
            var.put('p1', var.get('msg').callprop('slice', Js(0.0), Js(2.0)))
            var.put('i', Js(2.0))
            var.put('status', Js(0.0))
            while PyJsStrictNeq(var.get('msg').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))),Js(0.0)):
                if (var.get('i')>=var.get('msg').get('length')):
                    (var.put('status',Js(var.get('status').to_number())+Js(1))-Js(1))
                    break
            var.put('ps', var.get('msg').callprop('slice', Js(2.0), (var.get('i')-Js(1.0))))
            if ((PyJsStrictNeq(var.get('p1').callprop('toString', Js('hex')),Js('0002')) and var.get('reverse').neg()) or (PyJsStrictNeq(var.get('p1').callprop('toString', Js('hex')),Js('0001')) and var.get('reverse'))):
                (var.put('status',Js(var.get('status').to_number())+Js(1))-Js(1))
            if (var.get('ps').get('length')<Js(8.0)):
                (var.put('status',Js(var.get('status').to_number())+Js(1))-Js(1))
            if var.get('status'):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('decryption error')))
                raise PyJsTempException
            return var.get('msg').callprop('slice', var.get('i'))
        PyJsHoisted_pkcs1_.func_name = 'pkcs1'
        var.put('pkcs1', PyJsHoisted_pkcs1_)
        @Js
        def PyJsHoisted_compare_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'len', 'i', 'b', 'dif'])
            var.put('a', var.get('Buffer').callprop('from', var.get('a')))
            var.put('b', var.get('Buffer').callprop('from', var.get('b')))
            var.put('dif', Js(0.0))
            var.put('len', var.get('a').get('length'))
            if PyJsStrictNeq(var.get('a').get('length'),var.get('b').get('length')):
                (var.put('dif',Js(var.get('dif').to_number())+Js(1))-Js(1))
                var.put('len', var.get('Math').callprop('min', var.get('a').get('length'), var.get('b').get('length')))
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('len')):
                var.put('dif', (var.get('a').get(var.get('i'))^var.get('b').get(var.get('i'))), '+')
            return var.get('dif')
        PyJsHoisted_compare_.func_name = 'compare'
        var.put('compare', PyJsHoisted_compare_)
        var.put('parseKeys', var.get('require')(Js('parse-asn1')))
        var.put('mgf', var.get('require')(Js('./mgf')))
        var.put('xor', var.get('require')(Js('./xor')))
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('crt', var.get('require')(Js('browserify-rsa')))
        var.put('createHash', var.get('require')(Js('create-hash')))
        var.put('withPublic', var.get('require')(Js('./withPublic')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        @Js
        def PyJs_privateDecrypt_2604_(privateKey, enc, reverse, this, arguments, var=var):
            var = Scope({'privateKey':privateKey, 'enc':enc, 'reverse':reverse, 'this':this, 'arguments':arguments, 'privateDecrypt':PyJs_privateDecrypt_2604_}, var)
            var.registers(['reverse', 'msg', 'k', 'padding', 'zBuffer', 'key', 'privateKey', 'enc'])
            pass
            if var.get('privateKey').get('padding'):
                var.put('padding', var.get('privateKey').get('padding'))
            else:
                if var.get('reverse'):
                    var.put('padding', Js(1.0))
                else:
                    var.put('padding', Js(4.0))
            var.put('key', var.get('parseKeys')(var.get('privateKey')))
            var.put('k', var.get('key').get('modulus').callprop('byteLength'))
            if ((var.get('enc').get('length')>var.get('k')) or (var.get('BN').create(var.get('enc')).callprop('cmp', var.get('key').get('modulus'))>=Js(0.0))):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('decryption error')))
                raise PyJsTempException
            pass
            if var.get('reverse'):
                var.put('msg', var.get('withPublic')(var.get('BN').create(var.get('enc')), var.get('key')))
            else:
                var.put('msg', var.get('crt')(var.get('enc'), var.get('key')))
            var.put('zBuffer', var.get('Buffer').callprop('alloc', (var.get('k')-var.get('msg').get('length'))))
            var.put('msg', var.get('Buffer').callprop('concat', Js([var.get('zBuffer'), var.get('msg')]), var.get('k')))
            if _seq(var.get('padding'),Js(4.0)):
                return var.get('oaep')(var.get('key'), var.get('msg'))
            else:
                if _seq(var.get('padding'),Js(1.0)):
                    return var.get('pkcs1')(var.get('key'), var.get('msg'), var.get('reverse'))
                else:
                    if _seq(var.get('padding'),Js(3.0)):
                        return var.get('msg')
                    else:
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('unknown padding')))
                        raise PyJsTempException
        PyJs_privateDecrypt_2604_._set_name('privateDecrypt')
        var.get('module').put('exports', PyJs_privateDecrypt_2604_)
        pass
        pass
        pass
    PyJs_anonymous_2603_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2605_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'BN', 'randomBytes', 'crt', 'parseKeys', 'createHash', 'mgf', 'oaep', 'withPublic', 'pkcs1', 'nonZero', 'xor'])
        @Js
        def PyJsHoisted_oaep_(key, msg, this, arguments, var=var):
            var = Scope({'key':key, 'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['hLen2', 'maskedDb', 'msg', 'maskedSeed', 'mLen', 'k', 'key', 'iHash', 'ps', 'seed', 'hLen', 'dblen'])
            var.put('k', var.get('key').get('modulus').callprop('byteLength'))
            var.put('mLen', var.get('msg').get('length'))
            var.put('iHash', var.get('createHash')(Js('sha1')).callprop('update', var.get('Buffer').callprop('alloc', Js(0.0))).callprop('digest'))
            var.put('hLen', var.get('iHash').get('length'))
            var.put('hLen2', (Js(2.0)*var.get('hLen')))
            if (var.get('mLen')>((var.get('k')-var.get('hLen2'))-Js(2.0))):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('message too long')))
                raise PyJsTempException
            var.put('ps', var.get('Buffer').callprop('alloc', (((var.get('k')-var.get('mLen'))-var.get('hLen2'))-Js(2.0))))
            var.put('dblen', ((var.get('k')-var.get('hLen'))-Js(1.0)))
            var.put('seed', var.get('randomBytes')(var.get('hLen')))
            var.put('maskedDb', var.get('xor')(var.get('Buffer').callprop('concat', Js([var.get('iHash'), var.get('ps'), var.get('Buffer').callprop('alloc', Js(1.0), Js(1.0)), var.get('msg')]), var.get('dblen')), var.get('mgf')(var.get('seed'), var.get('dblen'))))
            var.put('maskedSeed', var.get('xor')(var.get('seed'), var.get('mgf')(var.get('maskedDb'), var.get('hLen'))))
            return var.get('BN').create(var.get('Buffer').callprop('concat', Js([var.get('Buffer').callprop('alloc', Js(1.0)), var.get('maskedSeed'), var.get('maskedDb')]), var.get('k')))
        PyJsHoisted_oaep_.func_name = 'oaep'
        var.put('oaep', PyJsHoisted_oaep_)
        @Js
        def PyJsHoisted_pkcs1_(key, msg, reverse, this, arguments, var=var):
            var = Scope({'key':key, 'msg':msg, 'reverse':reverse, 'this':this, 'arguments':arguments}, var)
            var.registers(['reverse', 'msg', 'k', 'mLen', 'key', 'ps'])
            var.put('mLen', var.get('msg').get('length'))
            var.put('k', var.get('key').get('modulus').callprop('byteLength'))
            if (var.get('mLen')>(var.get('k')-Js(11.0))):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('message too long')))
                raise PyJsTempException
            pass
            if var.get('reverse'):
                var.put('ps', var.get('Buffer').callprop('alloc', ((var.get('k')-var.get('mLen'))-Js(3.0)), Js(255)))
            else:
                var.put('ps', var.get('nonZero')(((var.get('k')-var.get('mLen'))-Js(3.0))))
            return var.get('BN').create(var.get('Buffer').callprop('concat', Js([var.get('Buffer').callprop('from', Js([Js(0.0), (Js(1.0) if var.get('reverse') else Js(2.0))])), var.get('ps'), var.get('Buffer').callprop('alloc', Js(1.0)), var.get('msg')]), var.get('k')))
        PyJsHoisted_pkcs1_.func_name = 'pkcs1'
        var.put('pkcs1', PyJsHoisted_pkcs1_)
        @Js
        def PyJsHoisted_nonZero_(len, this, arguments, var=var):
            var = Scope({'len':len, 'this':this, 'arguments':arguments}, var)
            var.registers(['cur', 'i', 'num', 'out', 'len', 'cache'])
            var.put('out', var.get('Buffer').callprop('allocUnsafe', var.get('len')))
            var.put('i', Js(0.0))
            var.put('cache', var.get('randomBytes')((var.get('len')*Js(2.0))))
            var.put('cur', Js(0.0))
            pass
            while (var.get('i')<var.get('len')):
                if _seq(var.get('cur'),var.get('cache').get('length')):
                    var.put('cache', var.get('randomBytes')((var.get('len')*Js(2.0))))
                    var.put('cur', Js(0.0))
                var.put('num', var.get('cache').get((var.put('cur',Js(var.get('cur').to_number())+Js(1))-Js(1))))
                if var.get('num'):
                    var.get('out').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), var.get('num'))
            return var.get('out')
        PyJsHoisted_nonZero_.func_name = 'nonZero'
        var.put('nonZero', PyJsHoisted_nonZero_)
        var.put('parseKeys', var.get('require')(Js('parse-asn1')))
        var.put('randomBytes', var.get('require')(Js('randombytes')))
        var.put('createHash', var.get('require')(Js('create-hash')))
        var.put('mgf', var.get('require')(Js('./mgf')))
        var.put('xor', var.get('require')(Js('./xor')))
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('withPublic', var.get('require')(Js('./withPublic')))
        var.put('crt', var.get('require')(Js('browserify-rsa')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        @Js
        def PyJs_publicEncrypt_2606_(publicKey, msg, reverse, this, arguments, var=var):
            var = Scope({'publicKey':publicKey, 'msg':msg, 'reverse':reverse, 'this':this, 'arguments':arguments, 'publicEncrypt':PyJs_publicEncrypt_2606_}, var)
            var.registers(['reverse', 'msg', 'paddedMsg', 'padding', 'key', 'publicKey'])
            pass
            if var.get('publicKey').get('padding'):
                var.put('padding', var.get('publicKey').get('padding'))
            else:
                if var.get('reverse'):
                    var.put('padding', Js(1.0))
                else:
                    var.put('padding', Js(4.0))
            var.put('key', var.get('parseKeys')(var.get('publicKey')))
            pass
            if _seq(var.get('padding'),Js(4.0)):
                var.put('paddedMsg', var.get('oaep')(var.get('key'), var.get('msg')))
            else:
                if _seq(var.get('padding'),Js(1.0)):
                    var.put('paddedMsg', var.get('pkcs1')(var.get('key'), var.get('msg'), var.get('reverse')))
                else:
                    if _seq(var.get('padding'),Js(3.0)):
                        var.put('paddedMsg', var.get('BN').create(var.get('msg')))
                        if (var.get('paddedMsg').callprop('cmp', var.get('key').get('modulus'))>=Js(0.0)):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('data too long for modulus')))
                            raise PyJsTempException
                    else:
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('unknown padding')))
                        raise PyJsTempException
            if var.get('reverse'):
                return var.get('crt')(var.get('paddedMsg'), var.get('key'))
            else:
                return var.get('withPublic')(var.get('paddedMsg'), var.get('key'))
        PyJs_publicEncrypt_2606_._set_name('publicEncrypt')
        var.get('module').put('exports', PyJs_publicEncrypt_2606_)
        pass
        pass
        pass
    PyJs_anonymous_2605_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2607_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'BN', 'withPublic'])
        @Js
        def PyJsHoisted_withPublic_(paddedMsg, key, this, arguments, var=var):
            var = Scope({'paddedMsg':paddedMsg, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key', 'paddedMsg'])
            return var.get('Buffer').callprop('from', var.get('paddedMsg').callprop('toRed', var.get('BN').callprop('mont', var.get('key').get('modulus'))).callprop('redPow', var.get('BN').create(var.get('key').get('publicExponent'))).callprop('fromRed').callprop('toArray'))
        PyJsHoisted_withPublic_.func_name = 'withPublic'
        var.put('withPublic', PyJsHoisted_withPublic_)
        var.put('BN', var.get('require')(Js('bn.js')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        pass
        var.get('module').put('exports', var.get('withPublic'))
    PyJs_anonymous_2607_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2608_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_xor_2609_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'xor':PyJs_xor_2609_}, var)
            var.registers(['len', 'i', 'a', 'b'])
            var.put('len', var.get('a').get('length'))
            var.put('i', (-Js(1.0)))
            while (var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('len')):
                var.get('a').put(var.get('i'), var.get('b').get(var.get('i')), '^')
            return var.get('a')
        PyJs_xor_2609_._set_name('xor')
        var.get('module').put('exports', PyJs_xor_2609_)
    PyJs_anonymous_2608_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2610_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_2611_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global', 'process'])
            @Js
            def PyJs_anonymous_2612_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Buffer', 'randomBytes', 'oldBrowser', 'MAX_BYTES', 'MAX_UINT32', 'crypto'])
                @Js
                def PyJsHoisted_oldBrowser_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')))
                    raise PyJsTempException
                PyJsHoisted_oldBrowser_.func_name = 'oldBrowser'
                var.put('oldBrowser', PyJsHoisted_oldBrowser_)
                @Js
                def PyJsHoisted_randomBytes_(size, cb, this, arguments, var=var):
                    var = Scope({'size':size, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['size', 'cb', 'generated', 'bytes'])
                    if (var.get('size')>var.get('MAX_UINT32')):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('requested too many random bytes')))
                        raise PyJsTempException
                    var.put('bytes', var.get('Buffer').callprop('allocUnsafe', var.get('size')))
                    if (var.get('size')>Js(0.0)):
                        if (var.get('size')>var.get('MAX_BYTES')):
                            #for JS loop
                            var.put('generated', Js(0.0))
                            while (var.get('generated')<var.get('size')):
                                try:
                                    var.get('crypto').callprop('getRandomValues', var.get('bytes').callprop('slice', var.get('generated'), (var.get('generated')+var.get('MAX_BYTES'))))
                                finally:
                                        var.put('generated', var.get('MAX_BYTES'), '+')
                        else:
                            var.get('crypto').callprop('getRandomValues', var.get('bytes'))
                    if _seq(var.get('cb',throw=False).typeof(),Js('function')):
                        @Js
                        def PyJs_anonymous_2613_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.get('cb')(var.get(u"null"), var.get('bytes'))
                        PyJs_anonymous_2613_._set_name('anonymous')
                        return var.get('process').callprop('nextTick', PyJs_anonymous_2613_)
                    return var.get('bytes')
                PyJsHoisted_randomBytes_.func_name = 'randomBytes'
                var.put('randomBytes', PyJsHoisted_randomBytes_)
                Js('use strict')
                var.put('MAX_BYTES', Js(65536.0))
                var.put('MAX_UINT32', Js(4294967295.0))
                pass
                var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
                var.put('crypto', (var.get('global').get('crypto') or var.get('global').get('msCrypto')))
                if (var.get('crypto') and var.get('crypto').get('getRandomValues')):
                    var.get('module').put('exports', var.get('randomBytes'))
                else:
                    var.get('module').put('exports', var.get('oldBrowser'))
                pass
            PyJs_anonymous_2612_._set_name('anonymous')
            PyJs_anonymous_2612_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2611_._set_name('anonymous')
        PyJs_anonymous_2611_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_2610_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2614_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_2615_(process, PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'process':process, 'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global', 'process'])
            @Js
            def PyJs_anonymous_2616_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Buffer', 'safeBuffer', 'actualFill', 'assertSize', 'kBufferMaxLength', 'oldBrowser', 'kMaxUint32', 'randombytes', 'randomFillSync', 'randomFill', 'crypto', 'assertOffset'])
                @Js
                def PyJsHoisted_oldBrowser_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')))
                    raise PyJsTempException
                PyJsHoisted_oldBrowser_.func_name = 'oldBrowser'
                var.put('oldBrowser', PyJsHoisted_oldBrowser_)
                @Js
                def PyJsHoisted_assertOffset_(offset, length, this, arguments, var=var):
                    var = Scope({'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'offset'])
                    if (PyJsStrictNeq(var.get('offset',throw=False).typeof(),Js('number')) or PyJsStrictNeq(var.get('offset'),var.get('offset'))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('offset must be a number')))
                        raise PyJsTempException
                    if ((var.get('offset')>var.get('kMaxUint32')) or (var.get('offset')<Js(0.0))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('offset must be a uint32')))
                        raise PyJsTempException
                    if ((var.get('offset')>var.get('kBufferMaxLength')) or (var.get('offset')>var.get('length'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('offset out of range')))
                        raise PyJsTempException
                PyJsHoisted_assertOffset_.func_name = 'assertOffset'
                var.put('assertOffset', PyJsHoisted_assertOffset_)
                @Js
                def PyJsHoisted_assertSize_(size, offset, length, this, arguments, var=var):
                    var = Scope({'size':size, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'size', 'offset'])
                    if (PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')) or PyJsStrictNeq(var.get('size'),var.get('size'))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('size must be a number')))
                        raise PyJsTempException
                    if ((var.get('size')>var.get('kMaxUint32')) or (var.get('size')<Js(0.0))):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('size must be a uint32')))
                        raise PyJsTempException
                    if (((var.get('size')+var.get('offset'))>var.get('length')) or (var.get('size')>var.get('kBufferMaxLength'))):
                        PyJsTempException = JsToPyException(var.get('RangeError').create(Js('buffer too small')))
                        raise PyJsTempException
                PyJsHoisted_assertSize_.func_name = 'assertSize'
                var.put('assertSize', PyJsHoisted_assertSize_)
                @Js
                def PyJsHoisted_randomFill_(buf, offset, size, cb, this, arguments, var=var):
                    var = Scope({'buf':buf, 'offset':offset, 'size':size, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['cb', 'buf', 'size', 'offset'])
                    if (var.get('Buffer').callprop('isBuffer', var.get('buf')).neg() and var.get('buf').instanceof(var.get('global').get('Uint8Array')).neg()):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"buf" argument must be a Buffer or Uint8Array')))
                        raise PyJsTempException
                    if _seq(var.get('offset',throw=False).typeof(),Js('function')):
                        var.put('cb', var.get('offset'))
                        var.put('offset', Js(0.0))
                        var.put('size', var.get('buf').get('length'))
                    else:
                        if _seq(var.get('size',throw=False).typeof(),Js('function')):
                            var.put('cb', var.get('size'))
                            var.put('size', (var.get('buf').get('length')-var.get('offset')))
                        else:
                            if PyJsStrictNeq(var.get('cb',throw=False).typeof(),Js('function')):
                                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"cb" argument must be a function')))
                                raise PyJsTempException
                    var.get('assertOffset')(var.get('offset'), var.get('buf').get('length'))
                    var.get('assertSize')(var.get('size'), var.get('offset'), var.get('buf').get('length'))
                    return var.get('actualFill')(var.get('buf'), var.get('offset'), var.get('size'), var.get('cb'))
                PyJsHoisted_randomFill_.func_name = 'randomFill'
                var.put('randomFill', PyJsHoisted_randomFill_)
                @Js
                def PyJsHoisted_actualFill_(buf, offset, size, cb, this, arguments, var=var):
                    var = Scope({'buf':buf, 'offset':offset, 'size':size, 'cb':cb, 'this':this, 'arguments':arguments}, var)
                    var.registers(['cb', 'buf', 'bytes', 'uint', 'size', 'ourBuf', 'offset'])
                    if var.get('process').get('browser'):
                        var.put('ourBuf', var.get('buf').get('buffer'))
                        var.put('uint', var.get('Uint8Array').create(var.get('ourBuf'), var.get('offset'), var.get('size')))
                        var.get('crypto').callprop('getRandomValues', var.get('uint'))
                        if var.get('cb'):
                            @Js
                            def PyJs_anonymous_2617_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers([])
                                var.get('cb')(var.get(u"null"), var.get('buf'))
                            PyJs_anonymous_2617_._set_name('anonymous')
                            var.get('process').callprop('nextTick', PyJs_anonymous_2617_)
                            return var.get('undefined')
                        return var.get('buf')
                    if var.get('cb'):
                        @Js
                        def PyJs_anonymous_2618_(err, bytes, this, arguments, var=var):
                            var = Scope({'err':err, 'bytes':bytes, 'this':this, 'arguments':arguments}, var)
                            var.registers(['err', 'bytes'])
                            if var.get('err'):
                                return var.get('cb')(var.get('err'))
                            var.get('bytes').callprop('copy', var.get('buf'), var.get('offset'))
                            var.get('cb')(var.get(u"null"), var.get('buf'))
                        PyJs_anonymous_2618_._set_name('anonymous')
                        var.get('randombytes')(var.get('size'), PyJs_anonymous_2618_)
                        return var.get('undefined')
                    var.put('bytes', var.get('randombytes')(var.get('size')))
                    var.get('bytes').callprop('copy', var.get('buf'), var.get('offset'))
                    return var.get('buf')
                PyJsHoisted_actualFill_.func_name = 'actualFill'
                var.put('actualFill', PyJsHoisted_actualFill_)
                @Js
                def PyJsHoisted_randomFillSync_(buf, offset, size, this, arguments, var=var):
                    var = Scope({'buf':buf, 'offset':offset, 'size':size, 'this':this, 'arguments':arguments}, var)
                    var.registers(['buf', 'size', 'offset'])
                    if _seq(var.get('offset',throw=False).typeof(),Js('undefined')):
                        var.put('offset', Js(0.0))
                    if (var.get('Buffer').callprop('isBuffer', var.get('buf')).neg() and var.get('buf').instanceof(var.get('global').get('Uint8Array')).neg()):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"buf" argument must be a Buffer or Uint8Array')))
                        raise PyJsTempException
                    var.get('assertOffset')(var.get('offset'), var.get('buf').get('length'))
                    if _seq(var.get('size'),var.get('undefined')):
                        var.put('size', (var.get('buf').get('length')-var.get('offset')))
                    var.get('assertSize')(var.get('size'), var.get('offset'), var.get('buf').get('length'))
                    return var.get('actualFill')(var.get('buf'), var.get('offset'), var.get('size'))
                PyJsHoisted_randomFillSync_.func_name = 'randomFillSync'
                var.put('randomFillSync', PyJsHoisted_randomFillSync_)
                Js('use strict')
                pass
                var.put('safeBuffer', var.get('require')(Js('safe-buffer')))
                var.put('randombytes', var.get('require')(Js('randombytes')))
                var.put('Buffer', var.get('safeBuffer').get('Buffer'))
                var.put('kBufferMaxLength', var.get('safeBuffer').get('kMaxLength'))
                var.put('crypto', (var.get('global').get('crypto') or var.get('global').get('msCrypto')))
                var.put('kMaxUint32', (var.get('Math').callprop('pow', Js(2.0), Js(32.0))-Js(1.0)))
                pass
                pass
                if ((var.get('crypto') and var.get('crypto').get('getRandomValues')) or var.get('process').get('browser').neg()):
                    var.get('exports').put('randomFill', var.get('randomFill'))
                    var.get('exports').put('randomFillSync', var.get('randomFillSync'))
                else:
                    var.get('exports').put('randomFill', var.get('oldBrowser'))
                    var.get('exports').put('randomFillSync', var.get('oldBrowser'))
                pass
                pass
                pass
            PyJs_anonymous_2616_._set_name('anonymous')
            PyJs_anonymous_2616_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2615_._set_name('anonymous')
        PyJs_anonymous_2615_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_2614_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2619_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['sr', 'module', 'zl', 'zr', 'fn1', 'rotl', 'hl', 'inherits', 'require', 'Buffer', 'sl', 'hr', 'fn2', 'fn4', 'fn5', 'exports', 'fn3', 'ARRAY16', 'HashBase', 'RIPEMD160'])
        @Js
        def PyJsHoisted_RIPEMD160_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('HashBase').callprop('call', var.get(u"this"), Js(64.0))
            var.get(u"this").put('_a', Js(1732584193))
            var.get(u"this").put('_b', Js(4023233417))
            var.get(u"this").put('_c', Js(2562383102))
            var.get(u"this").put('_d', Js(271733878))
            var.get(u"this").put('_e', Js(3285377520))
        PyJsHoisted_RIPEMD160_.func_name = 'RIPEMD160'
        var.put('RIPEMD160', PyJsHoisted_RIPEMD160_)
        @Js
        def PyJsHoisted_rotl_(x, n, this, arguments, var=var):
            var = Scope({'x':x, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'n'])
            return ((var.get('x')<<var.get('n'))|PyJsBshift(var.get('x'),(Js(32.0)-var.get('n'))))
        PyJsHoisted_rotl_.func_name = 'rotl'
        var.put('rotl', PyJsHoisted_rotl_)
        @Js
        def PyJsHoisted_fn1_(a, b, c, d, e, m, k, s, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'e':e, 'm':m, 'k':k, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'e', 'c', 'm', 'k', 'b', 'd', 's'])
            return ((var.get('rotl')(((((var.get('a')+((var.get('b')^var.get('c'))^var.get('d')))+var.get('m'))+var.get('k'))|Js(0.0)), var.get('s'))+var.get('e'))|Js(0.0))
        PyJsHoisted_fn1_.func_name = 'fn1'
        var.put('fn1', PyJsHoisted_fn1_)
        @Js
        def PyJsHoisted_fn2_(a, b, c, d, e, m, k, s, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'e':e, 'm':m, 'k':k, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'e', 'c', 'm', 'k', 'b', 'd', 's'])
            return ((var.get('rotl')(((((var.get('a')+((var.get('b')&var.get('c'))|((~var.get('b'))&var.get('d'))))+var.get('m'))+var.get('k'))|Js(0.0)), var.get('s'))+var.get('e'))|Js(0.0))
        PyJsHoisted_fn2_.func_name = 'fn2'
        var.put('fn2', PyJsHoisted_fn2_)
        @Js
        def PyJsHoisted_fn3_(a, b, c, d, e, m, k, s, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'e':e, 'm':m, 'k':k, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'e', 'c', 'm', 'k', 'b', 'd', 's'])
            return ((var.get('rotl')(((((var.get('a')+((var.get('b')|(~var.get('c')))^var.get('d')))+var.get('m'))+var.get('k'))|Js(0.0)), var.get('s'))+var.get('e'))|Js(0.0))
        PyJsHoisted_fn3_.func_name = 'fn3'
        var.put('fn3', PyJsHoisted_fn3_)
        @Js
        def PyJsHoisted_fn4_(a, b, c, d, e, m, k, s, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'e':e, 'm':m, 'k':k, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'e', 'c', 'm', 'k', 'b', 'd', 's'])
            return ((var.get('rotl')(((((var.get('a')+((var.get('b')&var.get('d'))|(var.get('c')&(~var.get('d')))))+var.get('m'))+var.get('k'))|Js(0.0)), var.get('s'))+var.get('e'))|Js(0.0))
        PyJsHoisted_fn4_.func_name = 'fn4'
        var.put('fn4', PyJsHoisted_fn4_)
        @Js
        def PyJsHoisted_fn5_(a, b, c, d, e, m, k, s, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'c':c, 'd':d, 'e':e, 'm':m, 'k':k, 's':s, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'e', 'c', 'm', 'k', 'b', 'd', 's'])
            return ((var.get('rotl')(((((var.get('a')+(var.get('b')^(var.get('c')|(~var.get('d')))))+var.get('m'))+var.get('k'))|Js(0.0)), var.get('s'))+var.get('e'))|Js(0.0))
        PyJsHoisted_fn5_.func_name = 'fn5'
        var.put('fn5', PyJsHoisted_fn5_)
        Js('use strict')
        var.put('Buffer', var.get('require')(Js('buffer')).get('Buffer'))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('HashBase', var.get('require')(Js('hash-base')))
        var.put('ARRAY16', var.get('Array').create(Js(16.0)))
        var.put('zl', Js([Js(0.0), Js(1.0), Js(2.0), Js(3.0), Js(4.0), Js(5.0), Js(6.0), Js(7.0), Js(8.0), Js(9.0), Js(10.0), Js(11.0), Js(12.0), Js(13.0), Js(14.0), Js(15.0), Js(7.0), Js(4.0), Js(13.0), Js(1.0), Js(10.0), Js(6.0), Js(15.0), Js(3.0), Js(12.0), Js(0.0), Js(9.0), Js(5.0), Js(2.0), Js(14.0), Js(11.0), Js(8.0), Js(3.0), Js(10.0), Js(14.0), Js(4.0), Js(9.0), Js(15.0), Js(8.0), Js(1.0), Js(2.0), Js(7.0), Js(0.0), Js(6.0), Js(13.0), Js(11.0), Js(5.0), Js(12.0), Js(1.0), Js(9.0), Js(11.0), Js(10.0), Js(0.0), Js(8.0), Js(12.0), Js(4.0), Js(13.0), Js(3.0), Js(7.0), Js(15.0), Js(14.0), Js(5.0), Js(6.0), Js(2.0), Js(4.0), Js(0.0), Js(5.0), Js(9.0), Js(7.0), Js(12.0), Js(2.0), Js(10.0), Js(14.0), Js(1.0), Js(3.0), Js(8.0), Js(11.0), Js(6.0), Js(15.0), Js(13.0)]))
        var.put('zr', Js([Js(5.0), Js(14.0), Js(7.0), Js(0.0), Js(9.0), Js(2.0), Js(11.0), Js(4.0), Js(13.0), Js(6.0), Js(15.0), Js(8.0), Js(1.0), Js(10.0), Js(3.0), Js(12.0), Js(6.0), Js(11.0), Js(3.0), Js(7.0), Js(0.0), Js(13.0), Js(5.0), Js(10.0), Js(14.0), Js(15.0), Js(8.0), Js(12.0), Js(4.0), Js(9.0), Js(1.0), Js(2.0), Js(15.0), Js(5.0), Js(1.0), Js(3.0), Js(7.0), Js(14.0), Js(6.0), Js(9.0), Js(11.0), Js(8.0), Js(12.0), Js(2.0), Js(10.0), Js(0.0), Js(4.0), Js(13.0), Js(8.0), Js(6.0), Js(4.0), Js(1.0), Js(3.0), Js(11.0), Js(15.0), Js(0.0), Js(5.0), Js(12.0), Js(2.0), Js(13.0), Js(9.0), Js(7.0), Js(10.0), Js(14.0), Js(12.0), Js(15.0), Js(10.0), Js(4.0), Js(1.0), Js(5.0), Js(8.0), Js(7.0), Js(6.0), Js(2.0), Js(13.0), Js(14.0), Js(0.0), Js(3.0), Js(9.0), Js(11.0)]))
        var.put('sl', Js([Js(11.0), Js(14.0), Js(15.0), Js(12.0), Js(5.0), Js(8.0), Js(7.0), Js(9.0), Js(11.0), Js(13.0), Js(14.0), Js(15.0), Js(6.0), Js(7.0), Js(9.0), Js(8.0), Js(7.0), Js(6.0), Js(8.0), Js(13.0), Js(11.0), Js(9.0), Js(7.0), Js(15.0), Js(7.0), Js(12.0), Js(15.0), Js(9.0), Js(11.0), Js(7.0), Js(13.0), Js(12.0), Js(11.0), Js(13.0), Js(6.0), Js(7.0), Js(14.0), Js(9.0), Js(13.0), Js(15.0), Js(14.0), Js(8.0), Js(13.0), Js(6.0), Js(5.0), Js(12.0), Js(7.0), Js(5.0), Js(11.0), Js(12.0), Js(14.0), Js(15.0), Js(14.0), Js(15.0), Js(9.0), Js(8.0), Js(9.0), Js(14.0), Js(5.0), Js(6.0), Js(8.0), Js(6.0), Js(5.0), Js(12.0), Js(9.0), Js(15.0), Js(5.0), Js(11.0), Js(6.0), Js(8.0), Js(13.0), Js(12.0), Js(5.0), Js(12.0), Js(13.0), Js(14.0), Js(11.0), Js(8.0), Js(5.0), Js(6.0)]))
        var.put('sr', Js([Js(8.0), Js(9.0), Js(9.0), Js(11.0), Js(13.0), Js(15.0), Js(15.0), Js(5.0), Js(7.0), Js(7.0), Js(8.0), Js(11.0), Js(14.0), Js(14.0), Js(12.0), Js(6.0), Js(9.0), Js(13.0), Js(15.0), Js(7.0), Js(12.0), Js(8.0), Js(9.0), Js(11.0), Js(7.0), Js(7.0), Js(12.0), Js(7.0), Js(6.0), Js(15.0), Js(13.0), Js(11.0), Js(9.0), Js(7.0), Js(15.0), Js(11.0), Js(8.0), Js(6.0), Js(6.0), Js(14.0), Js(12.0), Js(13.0), Js(5.0), Js(14.0), Js(13.0), Js(13.0), Js(7.0), Js(5.0), Js(15.0), Js(5.0), Js(8.0), Js(11.0), Js(14.0), Js(14.0), Js(6.0), Js(14.0), Js(6.0), Js(9.0), Js(12.0), Js(9.0), Js(12.0), Js(5.0), Js(15.0), Js(8.0), Js(8.0), Js(5.0), Js(12.0), Js(9.0), Js(12.0), Js(5.0), Js(14.0), Js(6.0), Js(8.0), Js(13.0), Js(6.0), Js(5.0), Js(15.0), Js(13.0), Js(11.0), Js(11.0)]))
        var.put('hl', Js([Js(0), Js(1518500249), Js(1859775393), Js(2400959708), Js(2840853838)]))
        var.put('hr', Js([Js(1352829926), Js(1548603684), Js(1836072691), Js(2053994217), Js(0)]))
        pass
        var.get('inherits')(var.get('RIPEMD160'), var.get('HashBase'))
        @Js
        def PyJs_anonymous_2620_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['tr', 'words', 'er', 'tl', 'br', 'j', 'al', 'bl', 'i', 'cr', 'ar', 'dl', 'dr', 'el', 't', 'cl'])
            var.put('words', var.get('ARRAY16'))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<Js(16.0)):
                try:
                    var.get('words').put(var.get('j'), var.get(u"this").get('_block').callprop('readInt32LE', (var.get('j')*Js(4.0))))
                finally:
                        var.put('j',Js(var.get('j').to_number())+Js(1))
            var.put('al', (var.get(u"this").get('_a')|Js(0.0)))
            var.put('bl', (var.get(u"this").get('_b')|Js(0.0)))
            var.put('cl', (var.get(u"this").get('_c')|Js(0.0)))
            var.put('dl', (var.get(u"this").get('_d')|Js(0.0)))
            var.put('el', (var.get(u"this").get('_e')|Js(0.0)))
            var.put('ar', (var.get(u"this").get('_a')|Js(0.0)))
            var.put('br', (var.get(u"this").get('_b')|Js(0.0)))
            var.put('cr', (var.get(u"this").get('_c')|Js(0.0)))
            var.put('dr', (var.get(u"this").get('_d')|Js(0.0)))
            var.put('er', (var.get(u"this").get('_e')|Js(0.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(80.0)):
                try:
                    pass
                    pass
                    if (var.get('i')<Js(16.0)):
                        var.put('tl', var.get('fn1')(var.get('al'), var.get('bl'), var.get('cl'), var.get('dl'), var.get('el'), var.get('words').get(var.get('zl').get(var.get('i'))), var.get('hl').get('0'), var.get('sl').get(var.get('i'))))
                        var.put('tr', var.get('fn5')(var.get('ar'), var.get('br'), var.get('cr'), var.get('dr'), var.get('er'), var.get('words').get(var.get('zr').get(var.get('i'))), var.get('hr').get('0'), var.get('sr').get(var.get('i'))))
                    else:
                        if (var.get('i')<Js(32.0)):
                            var.put('tl', var.get('fn2')(var.get('al'), var.get('bl'), var.get('cl'), var.get('dl'), var.get('el'), var.get('words').get(var.get('zl').get(var.get('i'))), var.get('hl').get('1'), var.get('sl').get(var.get('i'))))
                            var.put('tr', var.get('fn4')(var.get('ar'), var.get('br'), var.get('cr'), var.get('dr'), var.get('er'), var.get('words').get(var.get('zr').get(var.get('i'))), var.get('hr').get('1'), var.get('sr').get(var.get('i'))))
                        else:
                            if (var.get('i')<Js(48.0)):
                                var.put('tl', var.get('fn3')(var.get('al'), var.get('bl'), var.get('cl'), var.get('dl'), var.get('el'), var.get('words').get(var.get('zl').get(var.get('i'))), var.get('hl').get('2'), var.get('sl').get(var.get('i'))))
                                var.put('tr', var.get('fn3')(var.get('ar'), var.get('br'), var.get('cr'), var.get('dr'), var.get('er'), var.get('words').get(var.get('zr').get(var.get('i'))), var.get('hr').get('2'), var.get('sr').get(var.get('i'))))
                            else:
                                if (var.get('i')<Js(64.0)):
                                    var.put('tl', var.get('fn4')(var.get('al'), var.get('bl'), var.get('cl'), var.get('dl'), var.get('el'), var.get('words').get(var.get('zl').get(var.get('i'))), var.get('hl').get('3'), var.get('sl').get(var.get('i'))))
                                    var.put('tr', var.get('fn2')(var.get('ar'), var.get('br'), var.get('cr'), var.get('dr'), var.get('er'), var.get('words').get(var.get('zr').get(var.get('i'))), var.get('hr').get('3'), var.get('sr').get(var.get('i'))))
                                else:
                                    var.put('tl', var.get('fn5')(var.get('al'), var.get('bl'), var.get('cl'), var.get('dl'), var.get('el'), var.get('words').get(var.get('zl').get(var.get('i'))), var.get('hl').get('4'), var.get('sl').get(var.get('i'))))
                                    var.put('tr', var.get('fn1')(var.get('ar'), var.get('br'), var.get('cr'), var.get('dr'), var.get('er'), var.get('words').get(var.get('zr').get(var.get('i'))), var.get('hr').get('4'), var.get('sr').get(var.get('i'))))
                    var.put('al', var.get('el'))
                    var.put('el', var.get('dl'))
                    var.put('dl', var.get('rotl')(var.get('cl'), Js(10.0)))
                    var.put('cl', var.get('bl'))
                    var.put('bl', var.get('tl'))
                    var.put('ar', var.get('er'))
                    var.put('er', var.get('dr'))
                    var.put('dr', var.get('rotl')(var.get('cr'), Js(10.0)))
                    var.put('cr', var.get('br'))
                    var.put('br', var.get('tr'))
                finally:
                        var.put('i', Js(1.0), '+')
            var.put('t', (((var.get(u"this").get('_b')+var.get('cl'))+var.get('dr'))|Js(0.0)))
            var.get(u"this").put('_b', (((var.get(u"this").get('_c')+var.get('dl'))+var.get('er'))|Js(0.0)))
            var.get(u"this").put('_c', (((var.get(u"this").get('_d')+var.get('el'))+var.get('ar'))|Js(0.0)))
            var.get(u"this").put('_d', (((var.get(u"this").get('_e')+var.get('al'))+var.get('br'))|Js(0.0)))
            var.get(u"this").put('_e', (((var.get(u"this").get('_a')+var.get('bl'))+var.get('cr'))|Js(0.0)))
            var.get(u"this").put('_a', var.get('t'))
        PyJs_anonymous_2620_._set_name('anonymous')
        var.get('RIPEMD160').get('prototype').put('_update', PyJs_anonymous_2620_)
        @Js
        def PyJs_anonymous_2621_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['buffer'])
            var.get(u"this").get('_block').put((var.get(u"this").put('_blockOffset',Js(var.get(u"this").get('_blockOffset').to_number())+Js(1))-Js(1)), Js(128))
            if (var.get(u"this").get('_blockOffset')>Js(56.0)):
                var.get(u"this").get('_block').callprop('fill', Js(0.0), var.get(u"this").get('_blockOffset'), Js(64.0))
                var.get(u"this").callprop('_update')
                var.get(u"this").put('_blockOffset', Js(0.0))
            var.get(u"this").get('_block').callprop('fill', Js(0.0), var.get(u"this").get('_blockOffset'), Js(56.0))
            var.get(u"this").get('_block').callprop('writeUInt32LE', var.get(u"this").get('_length').get('0'), Js(56.0))
            var.get(u"this").get('_block').callprop('writeUInt32LE', var.get(u"this").get('_length').get('1'), Js(60.0))
            var.get(u"this").callprop('_update')
            var.put('buffer', (var.get('Buffer').callprop('alloc', Js(20.0)) if var.get('Buffer').get('alloc') else var.get('Buffer').create(Js(20.0))))
            var.get('buffer').callprop('writeInt32LE', var.get(u"this").get('_a'), Js(0.0))
            var.get('buffer').callprop('writeInt32LE', var.get(u"this").get('_b'), Js(4.0))
            var.get('buffer').callprop('writeInt32LE', var.get(u"this").get('_c'), Js(8.0))
            var.get('buffer').callprop('writeInt32LE', var.get(u"this").get('_d'), Js(12.0))
            var.get('buffer').callprop('writeInt32LE', var.get(u"this").get('_e'), Js(16.0))
            return var.get('buffer')
        PyJs_anonymous_2621_._set_name('anonymous')
        var.get('RIPEMD160').get('prototype').put('_digest', PyJs_anonymous_2621_)
        pass
        pass
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('RIPEMD160'))
    PyJs_anonymous_2619_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2622_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'buffer', 'module', 'SafeBuffer', 'copyProps'])
        @Js
        def PyJsHoisted_copyProps_(src, dst, this, arguments, var=var):
            var = Scope({'src':src, 'dst':dst, 'this':this, 'arguments':arguments}, var)
            var.registers(['src', 'key', 'dst'])
            for PyJsTemp in var.get('src'):
                var.put('key', PyJsTemp)
                var.get('dst').put(var.get('key'), var.get('src').get(var.get('key')))
        PyJsHoisted_copyProps_.func_name = 'copyProps'
        var.put('copyProps', PyJsHoisted_copyProps_)
        @Js
        def PyJsHoisted_SafeBuffer_(arg, encodingOrOffset, length, this, arguments, var=var):
            var = Scope({'arg':arg, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'length', 'encodingOrOffset'])
            return var.get('Buffer')(var.get('arg'), var.get('encodingOrOffset'), var.get('length'))
        PyJsHoisted_SafeBuffer_.func_name = 'SafeBuffer'
        var.put('SafeBuffer', PyJsHoisted_SafeBuffer_)
        var.put('buffer', var.get('require')(Js('buffer')))
        var.put('Buffer', var.get('buffer').get('Buffer'))
        pass
        if (((var.get('Buffer').get('from') and var.get('Buffer').get('alloc')) and var.get('Buffer').get('allocUnsafe')) and var.get('Buffer').get('allocUnsafeSlow')):
            var.get('module').put('exports', var.get('buffer'))
        else:
            var.get('copyProps')(var.get('buffer'), var.get('exports'))
            var.get('exports').put('Buffer', var.get('SafeBuffer'))
        pass
        var.get('copyProps')(var.get('Buffer'), var.get('SafeBuffer'))
        @Js
        def PyJs_anonymous_2623_(arg, encodingOrOffset, length, this, arguments, var=var):
            var = Scope({'arg':arg, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'length', 'encodingOrOffset'])
            if _seq(var.get('arg',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must not be a number')))
                raise PyJsTempException
            return var.get('Buffer')(var.get('arg'), var.get('encodingOrOffset'), var.get('length'))
        PyJs_anonymous_2623_._set_name('anonymous')
        var.get('SafeBuffer').put('from', PyJs_anonymous_2623_)
        @Js
        def PyJs_anonymous_2624_(size, fill, encoding, this, arguments, var=var):
            var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['fill', 'buf', 'size', 'encoding'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a number')))
                raise PyJsTempException
            var.put('buf', var.get('Buffer')(var.get('size')))
            if PyJsStrictNeq(var.get('fill'),var.get('undefined')):
                if _seq(var.get('encoding',throw=False).typeof(),Js('string')):
                    var.get('buf').callprop('fill', var.get('fill'), var.get('encoding'))
                else:
                    var.get('buf').callprop('fill', var.get('fill'))
            else:
                var.get('buf').callprop('fill', Js(0.0))
            return var.get('buf')
        PyJs_anonymous_2624_._set_name('anonymous')
        var.get('SafeBuffer').put('alloc', PyJs_anonymous_2624_)
        @Js
        def PyJs_anonymous_2625_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a number')))
                raise PyJsTempException
            return var.get('Buffer')(var.get('size'))
        PyJs_anonymous_2625_._set_name('anonymous')
        var.get('SafeBuffer').put('allocUnsafe', PyJs_anonymous_2625_)
        @Js
        def PyJs_anonymous_2626_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a number')))
                raise PyJsTempException
            return var.get('buffer').callprop('SlowBuffer', var.get('size'))
        PyJs_anonymous_2626_._set_name('anonymous')
        var.get('SafeBuffer').put('allocUnsafeSlow', PyJs_anonymous_2626_)
    PyJs_anonymous_2622_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2627_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_2628_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['process'])
            @Js
            def PyJs_anonymous_2629_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['Buffer', 'buffer', 'Safer', 'key', 'safer'])
                Js('use strict')
                var.put('buffer', var.get('require')(Js('buffer')))
                var.put('Buffer', var.get('buffer').get('Buffer'))
                var.put('safer', Js({}))
                pass
                for PyJsTemp in var.get('buffer'):
                    var.put('key', PyJsTemp)
                    if var.get('buffer').callprop('hasOwnProperty', var.get('key')).neg():
                        continue
                    if (_seq(var.get('key'),Js('SlowBuffer')) or _seq(var.get('key'),Js('Buffer'))):
                        continue
                    var.get('safer').put(var.get('key'), var.get('buffer').get(var.get('key')))
                var.put('Safer', var.get('safer').put('Buffer', Js({})))
                for PyJsTemp in var.get('Buffer'):
                    var.put('key', PyJsTemp)
                    if var.get('Buffer').callprop('hasOwnProperty', var.get('key')).neg():
                        continue
                    if (_seq(var.get('key'),Js('allocUnsafe')) or _seq(var.get('key'),Js('allocUnsafeSlow'))):
                        continue
                    var.get('Safer').put(var.get('key'), var.get('Buffer').get(var.get('key')))
                var.get('safer').get('Buffer').put('prototype', var.get('Buffer').get('prototype'))
                if (var.get('Safer').get('from').neg() or _seq(var.get('Safer').get('from'),var.get('Uint8Array').get('from'))):
                    @Js
                    def PyJs_anonymous_2630_(value, encodingOrOffset, length, this, arguments, var=var):
                        var = Scope({'value':value, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'value', 'encodingOrOffset'])
                        if _seq(var.get('value',throw=False).typeof(),Js('number')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('The "value" argument must not be of type number. Received type ')+(Js('undefined') if _seq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))))
                            raise PyJsTempException
                        if (var.get('value') and _seq(var.get('value').get('length').typeof(),Js('undefined'))):
                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ')+(Js('undefined') if _seq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))))
                            raise PyJsTempException
                        return var.get('Buffer')(var.get('value'), var.get('encodingOrOffset'), var.get('length'))
                    PyJs_anonymous_2630_._set_name('anonymous')
                    var.get('Safer').put('from', PyJs_anonymous_2630_)
                if var.get('Safer').get('alloc').neg():
                    @Js
                    def PyJs_anonymous_2631_(size, fill, encoding, this, arguments, var=var):
                        var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fill', 'buf', 'size', 'encoding'])
                        if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('The "size" argument must be of type number. Received type ')+(Js('undefined') if _seq(var.get('size',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('size'))))))
                            raise PyJsTempException
                        if ((var.get('size')<Js(0.0)) or (var.get('size')>=(Js(2.0)*(Js(1.0)<<Js(30.0))))):
                            PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value "')+var.get('size'))+Js('" is invalid for option "size"'))))
                            raise PyJsTempException
                        var.put('buf', var.get('Buffer')(var.get('size')))
                        if (var.get('fill').neg() or _seq(var.get('fill').get('length'),Js(0.0))):
                            var.get('buf').callprop('fill', Js(0.0))
                        else:
                            if _seq(var.get('encoding',throw=False).typeof(),Js('string')):
                                var.get('buf').callprop('fill', var.get('fill'), var.get('encoding'))
                            else:
                                var.get('buf').callprop('fill', var.get('fill'))
                        return var.get('buf')
                    PyJs_anonymous_2631_._set_name('anonymous')
                    var.get('Safer').put('alloc', PyJs_anonymous_2631_)
                if var.get('safer').get('kStringMaxLength').neg():
                    try:
                        var.get('safer').put('kStringMaxLength', var.get('process').callprop('binding', Js('buffer')).get('kStringMaxLength'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_34216655 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_65_34216655 is not None:
                                var.own['e'] = PyJsHolder_65_34216655
                            else:
                                del var.own['e']
                            del PyJsHolder_65_34216655
                if var.get('safer').get('constants').neg():
                    var.get('safer').put('constants', Js({'MAX_LENGTH':var.get('safer').get('kMaxLength')}))
                    if var.get('safer').get('kStringMaxLength'):
                        var.get('safer').get('constants').put('MAX_STRING_LENGTH', var.get('safer').get('kStringMaxLength'))
                var.get('module').put('exports', var.get('safer'))
            PyJs_anonymous_2629_._set_name('anonymous')
            PyJs_anonymous_2629_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2628_._set_name('anonymous')
        PyJs_anonymous_2628_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_2627_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2632_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'module', 'Hash'])
        @Js
        def PyJsHoisted_Hash_(blockSize, finalSize, this, arguments, var=var):
            var = Scope({'blockSize':blockSize, 'finalSize':finalSize, 'this':this, 'arguments':arguments}, var)
            var.registers(['finalSize', 'blockSize'])
            var.get(u"this").put('_block', var.get('Buffer').callprop('alloc', var.get('blockSize')))
            var.get(u"this").put('_finalSize', var.get('finalSize'))
            var.get(u"this").put('_blockSize', var.get('blockSize'))
            var.get(u"this").put('_len', Js(0.0))
        PyJsHoisted_Hash_.func_name = 'Hash'
        var.put('Hash', PyJsHoisted_Hash_)
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        pass
        @Js
        def PyJs_anonymous_2633_(data, enc, this, arguments, var=var):
            var = Scope({'data':data, 'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['remainder', 'blockSize', 'assigned', 'i', 'length', 'accum', 'data', 'block', 'enc', 'offset'])
            if _seq(var.get('data',throw=False).typeof(),Js('string')):
                var.put('enc', (var.get('enc') or Js('utf8')))
                var.put('data', var.get('Buffer').callprop('from', var.get('data'), var.get('enc')))
            var.put('block', var.get(u"this").get('_block'))
            var.put('blockSize', var.get(u"this").get('_blockSize'))
            var.put('length', var.get('data').get('length'))
            var.put('accum', var.get(u"this").get('_len'))
            #for JS loop
            var.put('offset', Js(0.0))
            while (var.get('offset')<var.get('length')):
                var.put('assigned', (var.get('accum')%var.get('blockSize')))
                var.put('remainder', var.get('Math').callprop('min', (var.get('length')-var.get('offset')), (var.get('blockSize')-var.get('assigned'))))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('remainder')):
                    try:
                        var.get('block').put((var.get('assigned')+var.get('i')), var.get('data').get((var.get('offset')+var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('accum', var.get('remainder'), '+')
                var.put('offset', var.get('remainder'), '+')
                if _seq((var.get('accum')%var.get('blockSize')),Js(0.0)):
                    var.get(u"this").callprop('_update', var.get('block'))

            var.get(u"this").put('_len', var.get('length'), '+')
            return var.get(u"this")
        PyJs_anonymous_2633_._set_name('anonymous')
        var.get('Hash').get('prototype').put('update', PyJs_anonymous_2633_)
        @Js
        def PyJs_anonymous_2634_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['bits', 'rem', 'hash', 'lowBits', 'highBits', 'enc'])
            var.put('rem', (var.get(u"this").get('_len')%var.get(u"this").get('_blockSize')))
            var.get(u"this").get('_block').put(var.get('rem'), Js(128))
            var.get(u"this").get('_block').callprop('fill', Js(0.0), (var.get('rem')+Js(1.0)))
            if (var.get('rem')>=var.get(u"this").get('_finalSize')):
                var.get(u"this").callprop('_update', var.get(u"this").get('_block'))
                var.get(u"this").get('_block').callprop('fill', Js(0.0))
            var.put('bits', (var.get(u"this").get('_len')*Js(8.0)))
            if (var.get('bits')<=Js(4294967295)):
                var.get(u"this").get('_block').callprop('writeUInt32BE', var.get('bits'), (var.get(u"this").get('_blockSize')-Js(4.0)))
            else:
                var.put('lowBits', PyJsBshift((var.get('bits')&Js(4294967295)),Js(0.0)))
                var.put('highBits', ((var.get('bits')-var.get('lowBits'))/Js(4294967296)))
                var.get(u"this").get('_block').callprop('writeUInt32BE', var.get('highBits'), (var.get(u"this").get('_blockSize')-Js(8.0)))
                var.get(u"this").get('_block').callprop('writeUInt32BE', var.get('lowBits'), (var.get(u"this").get('_blockSize')-Js(4.0)))
            var.get(u"this").callprop('_update', var.get(u"this").get('_block'))
            var.put('hash', var.get(u"this").callprop('_hash'))
            return (var.get('hash').callprop('toString', var.get('enc')) if var.get('enc') else var.get('hash'))
        PyJs_anonymous_2634_._set_name('anonymous')
        var.get('Hash').get('prototype').put('digest', PyJs_anonymous_2634_)
        @Js
        def PyJs_anonymous_2635_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('_update must be implemented by subclass')))
            raise PyJsTempException
        PyJs_anonymous_2635_._set_name('anonymous')
        var.get('Hash').get('prototype').put('_update', PyJs_anonymous_2635_)
        var.get('module').put('exports', var.get('Hash'))
    PyJs_anonymous_2632_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2636_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_SHA_2637_(algorithm, this, arguments, var=var):
            var = Scope({'algorithm':algorithm, 'this':this, 'arguments':arguments, 'SHA':PyJs_SHA_2637_}, var)
            var.registers(['Algorithm', 'algorithm'])
            var.put('algorithm', var.get('algorithm').callprop('toLowerCase'))
            var.put('Algorithm', var.get('exports').get(var.get('algorithm')))
            if var.get('Algorithm').neg():
                PyJsTempException = JsToPyException(var.get('Error').create((var.get('algorithm')+Js(' is not supported (we accept pull requests)'))))
                raise PyJsTempException
            return var.get('Algorithm').create()
        PyJs_SHA_2637_._set_name('SHA')
        var.put('exports', var.get('module').put('exports', PyJs_SHA_2637_))
        var.get('exports').put('sha', var.get('require')(Js('./sha')))
        var.get('exports').put('sha1', var.get('require')(Js('./sha1')))
        var.get('exports').put('sha224', var.get('require')(Js('./sha224')))
        var.get('exports').put('sha256', var.get('require')(Js('./sha256')))
        var.get('exports').put('sha384', var.get('require')(Js('./sha384')))
        var.get('exports').put('sha512', var.get('require')(Js('./sha512')))
    PyJs_anonymous_2636_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2638_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['rotl30', 'exports', 'require', 'Buffer', 'module', 'K', 'Sha', 'Hash', 'W', 'rotl5', 'inherits', 'ft'])
        @Js
        def PyJsHoisted_Sha_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('init')
            var.get(u"this").put('_w', var.get('W'))
            var.get('Hash').callprop('call', var.get(u"this"), Js(64.0), Js(56.0))
        PyJsHoisted_Sha_.func_name = 'Sha'
        var.put('Sha', PyJsHoisted_Sha_)
        @Js
        def PyJsHoisted_rotl5_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['num'])
            return ((var.get('num')<<Js(5.0))|PyJsBshift(var.get('num'),Js(27.0)))
        PyJsHoisted_rotl5_.func_name = 'rotl5'
        var.put('rotl5', PyJsHoisted_rotl5_)
        @Js
        def PyJsHoisted_rotl30_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['num'])
            return ((var.get('num')<<Js(30.0))|PyJsBshift(var.get('num'),Js(2.0)))
        PyJsHoisted_rotl30_.func_name = 'rotl30'
        var.put('rotl30', PyJsHoisted_rotl30_)
        @Js
        def PyJsHoisted_ft_(s, b, c, d, this, arguments, var=var):
            var = Scope({'s':s, 'b':b, 'c':c, 'd':d, 'this':this, 'arguments':arguments}, var)
            var.registers(['b', 'c', 'd', 's'])
            if _seq(var.get('s'),Js(0.0)):
                return ((var.get('b')&var.get('c'))|((~var.get('b'))&var.get('d')))
            if _seq(var.get('s'),Js(2.0)):
                return (((var.get('b')&var.get('c'))|(var.get('b')&var.get('d')))|(var.get('c')&var.get('d')))
            return ((var.get('b')^var.get('c'))^var.get('d'))
        PyJsHoisted_ft_.func_name = 'ft'
        var.put('ft', PyJsHoisted_ft_)
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Hash', var.get('require')(Js('./hash')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('K', Js([Js(1518500249), Js(1859775393), (Js(2400959708)|Js(0.0)), (Js(3395469782)|Js(0.0))]))
        var.put('W', var.get('Array').create(Js(80.0)))
        pass
        var.get('inherits')(var.get('Sha'), var.get('Hash'))
        @Js
        def PyJs_anonymous_2639_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('_a', Js(1732584193))
            var.get(u"this").put('_b', Js(4023233417))
            var.get(u"this").put('_c', Js(2562383102))
            var.get(u"this").put('_d', Js(271733878))
            var.get(u"this").put('_e', Js(3285377520))
            return var.get(u"this")
        PyJs_anonymous_2639_._set_name('anonymous')
        var.get('Sha').get('prototype').put('init', PyJs_anonymous_2639_)
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_2640_(M, this, arguments, var=var):
            var = Scope({'M':M, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'j', 'i', 'c', 'e', 'M', 'b', 'W', 't', 'd', 's'])
            var.put('W', var.get(u"this").get('_w'))
            var.put('a', (var.get(u"this").get('_a')|Js(0.0)))
            var.put('b', (var.get(u"this").get('_b')|Js(0.0)))
            var.put('c', (var.get(u"this").get('_c')|Js(0.0)))
            var.put('d', (var.get(u"this").get('_d')|Js(0.0)))
            var.put('e', (var.get(u"this").get('_e')|Js(0.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(16.0)):
                try:
                    var.get('W').put(var.get('i'), var.get('M').callprop('readInt32BE', (var.get('i')*Js(4.0))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop

            while (var.get('i')<Js(80.0)):
                try:
                    var.get('W').put(var.get('i'), (((var.get('W').get((var.get('i')-Js(3.0)))^var.get('W').get((var.get('i')-Js(8.0))))^var.get('W').get((var.get('i')-Js(14.0))))^var.get('W').get((var.get('i')-Js(16.0)))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<Js(80.0)):
                try:
                    var.put('s', (~(~(var.get('j')/Js(20.0)))))
                    var.put('t', (((((var.get('rotl5')(var.get('a'))+var.get('ft')(var.get('s'), var.get('b'), var.get('c'), var.get('d')))+var.get('e'))+var.get('W').get(var.get('j')))+var.get('K').get(var.get('s')))|Js(0.0)))
                    var.put('e', var.get('d'))
                    var.put('d', var.get('c'))
                    var.put('c', var.get('rotl30')(var.get('b')))
                    var.put('b', var.get('a'))
                    var.put('a', var.get('t'))
                finally:
                        var.put('j',Js(var.get('j').to_number())+Js(1))
            var.get(u"this").put('_a', ((var.get('a')+var.get(u"this").get('_a'))|Js(0.0)))
            var.get(u"this").put('_b', ((var.get('b')+var.get(u"this").get('_b'))|Js(0.0)))
            var.get(u"this").put('_c', ((var.get('c')+var.get(u"this").get('_c'))|Js(0.0)))
            var.get(u"this").put('_d', ((var.get('d')+var.get(u"this").get('_d'))|Js(0.0)))
            var.get(u"this").put('_e', ((var.get('e')+var.get(u"this").get('_e'))|Js(0.0)))
        PyJs_anonymous_2640_._set_name('anonymous')
        var.get('Sha').get('prototype').put('_update', PyJs_anonymous_2640_)
        @Js
        def PyJs_anonymous_2641_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['H'])
            var.put('H', var.get('Buffer').callprop('allocUnsafe', Js(20.0)))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_a')|Js(0.0)), Js(0.0))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_b')|Js(0.0)), Js(4.0))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_c')|Js(0.0)), Js(8.0))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_d')|Js(0.0)), Js(12.0))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_e')|Js(0.0)), Js(16.0))
            return var.get('H')
        PyJs_anonymous_2641_._set_name('anonymous')
        var.get('Sha').get('prototype').put('_hash', PyJs_anonymous_2641_)
        var.get('module').put('exports', var.get('Sha'))
    PyJs_anonymous_2638_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2642_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['rotl30', 'exports', 'require', 'Buffer', 'Sha1', 'K', 'module', 'Hash', 'rotl1', 'W', 'rotl5', 'inherits', 'ft'])
        @Js
        def PyJsHoisted_Sha1_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('init')
            var.get(u"this").put('_w', var.get('W'))
            var.get('Hash').callprop('call', var.get(u"this"), Js(64.0), Js(56.0))
        PyJsHoisted_Sha1_.func_name = 'Sha1'
        var.put('Sha1', PyJsHoisted_Sha1_)
        @Js
        def PyJsHoisted_rotl1_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['num'])
            return ((var.get('num')<<Js(1.0))|PyJsBshift(var.get('num'),Js(31.0)))
        PyJsHoisted_rotl1_.func_name = 'rotl1'
        var.put('rotl1', PyJsHoisted_rotl1_)
        @Js
        def PyJsHoisted_rotl5_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['num'])
            return ((var.get('num')<<Js(5.0))|PyJsBshift(var.get('num'),Js(27.0)))
        PyJsHoisted_rotl5_.func_name = 'rotl5'
        var.put('rotl5', PyJsHoisted_rotl5_)
        @Js
        def PyJsHoisted_rotl30_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['num'])
            return ((var.get('num')<<Js(30.0))|PyJsBshift(var.get('num'),Js(2.0)))
        PyJsHoisted_rotl30_.func_name = 'rotl30'
        var.put('rotl30', PyJsHoisted_rotl30_)
        @Js
        def PyJsHoisted_ft_(s, b, c, d, this, arguments, var=var):
            var = Scope({'s':s, 'b':b, 'c':c, 'd':d, 'this':this, 'arguments':arguments}, var)
            var.registers(['b', 'c', 'd', 's'])
            if _seq(var.get('s'),Js(0.0)):
                return ((var.get('b')&var.get('c'))|((~var.get('b'))&var.get('d')))
            if _seq(var.get('s'),Js(2.0)):
                return (((var.get('b')&var.get('c'))|(var.get('b')&var.get('d')))|(var.get('c')&var.get('d')))
            return ((var.get('b')^var.get('c'))^var.get('d'))
        PyJsHoisted_ft_.func_name = 'ft'
        var.put('ft', PyJsHoisted_ft_)
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Hash', var.get('require')(Js('./hash')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('K', Js([Js(1518500249), Js(1859775393), (Js(2400959708)|Js(0.0)), (Js(3395469782)|Js(0.0))]))
        var.put('W', var.get('Array').create(Js(80.0)))
        pass
        var.get('inherits')(var.get('Sha1'), var.get('Hash'))
        @Js
        def PyJs_anonymous_2643_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('_a', Js(1732584193))
            var.get(u"this").put('_b', Js(4023233417))
            var.get(u"this").put('_c', Js(2562383102))
            var.get(u"this").put('_d', Js(271733878))
            var.get(u"this").put('_e', Js(3285377520))
            return var.get(u"this")
        PyJs_anonymous_2643_._set_name('anonymous')
        var.get('Sha1').get('prototype').put('init', PyJs_anonymous_2643_)
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_2644_(M, this, arguments, var=var):
            var = Scope({'M':M, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'j', 'i', 'c', 'e', 'M', 'b', 'W', 't', 'd', 's'])
            var.put('W', var.get(u"this").get('_w'))
            var.put('a', (var.get(u"this").get('_a')|Js(0.0)))
            var.put('b', (var.get(u"this").get('_b')|Js(0.0)))
            var.put('c', (var.get(u"this").get('_c')|Js(0.0)))
            var.put('d', (var.get(u"this").get('_d')|Js(0.0)))
            var.put('e', (var.get(u"this").get('_e')|Js(0.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(16.0)):
                try:
                    var.get('W').put(var.get('i'), var.get('M').callprop('readInt32BE', (var.get('i')*Js(4.0))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop

            while (var.get('i')<Js(80.0)):
                try:
                    var.get('W').put(var.get('i'), var.get('rotl1')((((var.get('W').get((var.get('i')-Js(3.0)))^var.get('W').get((var.get('i')-Js(8.0))))^var.get('W').get((var.get('i')-Js(14.0))))^var.get('W').get((var.get('i')-Js(16.0))))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<Js(80.0)):
                try:
                    var.put('s', (~(~(var.get('j')/Js(20.0)))))
                    var.put('t', (((((var.get('rotl5')(var.get('a'))+var.get('ft')(var.get('s'), var.get('b'), var.get('c'), var.get('d')))+var.get('e'))+var.get('W').get(var.get('j')))+var.get('K').get(var.get('s')))|Js(0.0)))
                    var.put('e', var.get('d'))
                    var.put('d', var.get('c'))
                    var.put('c', var.get('rotl30')(var.get('b')))
                    var.put('b', var.get('a'))
                    var.put('a', var.get('t'))
                finally:
                        var.put('j',Js(var.get('j').to_number())+Js(1))
            var.get(u"this").put('_a', ((var.get('a')+var.get(u"this").get('_a'))|Js(0.0)))
            var.get(u"this").put('_b', ((var.get('b')+var.get(u"this").get('_b'))|Js(0.0)))
            var.get(u"this").put('_c', ((var.get('c')+var.get(u"this").get('_c'))|Js(0.0)))
            var.get(u"this").put('_d', ((var.get('d')+var.get(u"this").get('_d'))|Js(0.0)))
            var.get(u"this").put('_e', ((var.get('e')+var.get(u"this").get('_e'))|Js(0.0)))
        PyJs_anonymous_2644_._set_name('anonymous')
        var.get('Sha1').get('prototype').put('_update', PyJs_anonymous_2644_)
        @Js
        def PyJs_anonymous_2645_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['H'])
            var.put('H', var.get('Buffer').callprop('allocUnsafe', Js(20.0)))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_a')|Js(0.0)), Js(0.0))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_b')|Js(0.0)), Js(4.0))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_c')|Js(0.0)), Js(8.0))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_d')|Js(0.0)), Js(12.0))
            var.get('H').callprop('writeInt32BE', (var.get(u"this").get('_e')|Js(0.0)), Js(16.0))
            return var.get('H')
        PyJs_anonymous_2645_._set_name('anonymous')
        var.get('Sha1').get('prototype').put('_hash', PyJs_anonymous_2645_)
        var.get('module').put('exports', var.get('Sha1'))
    PyJs_anonymous_2642_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2646_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'Sha256', 'module', 'Hash', 'W', 'inherits', 'Sha224'])
        @Js
        def PyJsHoisted_Sha224_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('init')
            var.get(u"this").put('_w', var.get('W'))
            var.get('Hash').callprop('call', var.get(u"this"), Js(64.0), Js(56.0))
        PyJsHoisted_Sha224_.func_name = 'Sha224'
        var.put('Sha224', PyJsHoisted_Sha224_)
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Sha256', var.get('require')(Js('./sha256')))
        var.put('Hash', var.get('require')(Js('./hash')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('W', var.get('Array').create(Js(64.0)))
        pass
        var.get('inherits')(var.get('Sha224'), var.get('Sha256'))
        @Js
        def PyJs_anonymous_2647_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('_a', Js(3238371032))
            var.get(u"this").put('_b', Js(914150663))
            var.get(u"this").put('_c', Js(812702999))
            var.get(u"this").put('_d', Js(4144912697))
            var.get(u"this").put('_e', Js(4290775857))
            var.get(u"this").put('_f', Js(1750603025))
            var.get(u"this").put('_g', Js(1694076839))
            var.get(u"this").put('_h', Js(3204075428))
            return var.get(u"this")
        PyJs_anonymous_2647_._set_name('anonymous')
        var.get('Sha224').get('prototype').put('init', PyJs_anonymous_2647_)
        @Js
        def PyJs_anonymous_2648_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['H'])
            var.put('H', var.get('Buffer').callprop('allocUnsafe', Js(28.0)))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_a'), Js(0.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_b'), Js(4.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_c'), Js(8.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_d'), Js(12.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_e'), Js(16.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_f'), Js(20.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_g'), Js(24.0))
            return var.get('H')
        PyJs_anonymous_2648_._set_name('anonymous')
        var.get('Sha224').get('prototype').put('_hash', PyJs_anonymous_2648_)
        var.get('module').put('exports', var.get('Sha224'))
    PyJs_anonymous_2646_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2649_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'Buffer', 'Sha256', 'K', 'maj', 'sigma0', 'module', 'ch', 'Hash', 'W', 'gamma0', 'inherits', 'gamma1', 'sigma1'])
        @Js
        def PyJsHoisted_Sha256_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('init')
            var.get(u"this").put('_w', var.get('W'))
            var.get('Hash').callprop('call', var.get(u"this"), Js(64.0), Js(56.0))
        PyJsHoisted_Sha256_.func_name = 'Sha256'
        var.put('Sha256', PyJsHoisted_Sha256_)
        @Js
        def PyJsHoisted_ch_(x, y, z, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'z', 'y'])
            return (var.get('z')^(var.get('x')&(var.get('y')^var.get('z'))))
        PyJsHoisted_ch_.func_name = 'ch'
        var.put('ch', PyJsHoisted_ch_)
        @Js
        def PyJsHoisted_maj_(x, y, z, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'z', 'y'])
            return ((var.get('x')&var.get('y'))|(var.get('z')&(var.get('x')|var.get('y'))))
        PyJsHoisted_maj_.func_name = 'maj'
        var.put('maj', PyJsHoisted_maj_)
        @Js
        def PyJsHoisted_sigma0_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return (((PyJsBshift(var.get('x'),Js(2.0))|(var.get('x')<<Js(30.0)))^(PyJsBshift(var.get('x'),Js(13.0))|(var.get('x')<<Js(19.0))))^(PyJsBshift(var.get('x'),Js(22.0))|(var.get('x')<<Js(10.0))))
        PyJsHoisted_sigma0_.func_name = 'sigma0'
        var.put('sigma0', PyJsHoisted_sigma0_)
        @Js
        def PyJsHoisted_sigma1_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return (((PyJsBshift(var.get('x'),Js(6.0))|(var.get('x')<<Js(26.0)))^(PyJsBshift(var.get('x'),Js(11.0))|(var.get('x')<<Js(21.0))))^(PyJsBshift(var.get('x'),Js(25.0))|(var.get('x')<<Js(7.0))))
        PyJsHoisted_sigma1_.func_name = 'sigma1'
        var.put('sigma1', PyJsHoisted_sigma1_)
        @Js
        def PyJsHoisted_gamma0_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return (((PyJsBshift(var.get('x'),Js(7.0))|(var.get('x')<<Js(25.0)))^(PyJsBshift(var.get('x'),Js(18.0))|(var.get('x')<<Js(14.0))))^PyJsBshift(var.get('x'),Js(3.0)))
        PyJsHoisted_gamma0_.func_name = 'gamma0'
        var.put('gamma0', PyJsHoisted_gamma0_)
        @Js
        def PyJsHoisted_gamma1_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return (((PyJsBshift(var.get('x'),Js(17.0))|(var.get('x')<<Js(15.0)))^(PyJsBshift(var.get('x'),Js(19.0))|(var.get('x')<<Js(13.0))))^PyJsBshift(var.get('x'),Js(10.0)))
        PyJsHoisted_gamma1_.func_name = 'gamma1'
        var.put('gamma1', PyJsHoisted_gamma1_)
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Hash', var.get('require')(Js('./hash')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('K', Js([Js(1116352408), Js(1899447441), Js(3049323471), Js(3921009573), Js(961987163), Js(1508970993), Js(2453635748), Js(2870763221), Js(3624381080), Js(310598401), Js(607225278), Js(1426881987), Js(1925078388), Js(2162078206), Js(2614888103), Js(3248222580), Js(3835390401), Js(4022224774), Js(264347078), Js(604807628), Js(770255983), Js(1249150122), Js(1555081692), Js(1996064986), Js(2554220882), Js(2821834349), Js(2952996808), Js(3210313671), Js(3336571891), Js(3584528711), Js(113926993), Js(338241895), Js(666307205), Js(773529912), Js(1294757372), Js(1396182291), Js(1695183700), Js(1986661051), Js(2177026350), Js(2456956037), Js(2730485921), Js(2820302411), Js(3259730800), Js(3345764771), Js(3516065817), Js(3600352804), Js(4094571909), Js(275423344), Js(430227734), Js(506948616), Js(659060556), Js(883997877), Js(958139571), Js(1322822218), Js(1537002063), Js(1747873779), Js(1955562222), Js(2024104815), Js(2227730452), Js(2361852424), Js(2428436474), Js(2756734187), Js(3204031479), Js(3329325298)]))
        var.put('W', var.get('Array').create(Js(64.0)))
        pass
        var.get('inherits')(var.get('Sha256'), var.get('Hash'))
        @Js
        def PyJs_anonymous_2650_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('_a', Js(1779033703))
            var.get(u"this").put('_b', Js(3144134277))
            var.get(u"this").put('_c', Js(1013904242))
            var.get(u"this").put('_d', Js(2773480762))
            var.get(u"this").put('_e', Js(1359893119))
            var.get(u"this").put('_f', Js(2600822924))
            var.get(u"this").put('_g', Js(528734635))
            var.get(u"this").put('_h', Js(1541459225))
            return var.get(u"this")
        PyJs_anonymous_2650_._set_name('anonymous')
        var.get('Sha256').get('prototype').put('init', PyJs_anonymous_2650_)
        pass
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_2651_(M, this, arguments, var=var):
            var = Scope({'M':M, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'f', 'j', 'i', 'c', 'e', 'M', 'h', 'b', 'g', 'T1', 'W', 'T2', 'd'])
            var.put('W', var.get(u"this").get('_w'))
            var.put('a', (var.get(u"this").get('_a')|Js(0.0)))
            var.put('b', (var.get(u"this").get('_b')|Js(0.0)))
            var.put('c', (var.get(u"this").get('_c')|Js(0.0)))
            var.put('d', (var.get(u"this").get('_d')|Js(0.0)))
            var.put('e', (var.get(u"this").get('_e')|Js(0.0)))
            var.put('f', (var.get(u"this").get('_f')|Js(0.0)))
            var.put('g', (var.get(u"this").get('_g')|Js(0.0)))
            var.put('h', (var.get(u"this").get('_h')|Js(0.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(16.0)):
                try:
                    var.get('W').put(var.get('i'), var.get('M').callprop('readInt32BE', (var.get('i')*Js(4.0))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop

            while (var.get('i')<Js(64.0)):
                try:
                    var.get('W').put(var.get('i'), ((((var.get('gamma1')(var.get('W').get((var.get('i')-Js(2.0))))+var.get('W').get((var.get('i')-Js(7.0))))+var.get('gamma0')(var.get('W').get((var.get('i')-Js(15.0)))))+var.get('W').get((var.get('i')-Js(16.0))))|Js(0.0)))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<Js(64.0)):
                try:
                    var.put('T1', (((((var.get('h')+var.get('sigma1')(var.get('e')))+var.get('ch')(var.get('e'), var.get('f'), var.get('g')))+var.get('K').get(var.get('j')))+var.get('W').get(var.get('j')))|Js(0.0)))
                    var.put('T2', ((var.get('sigma0')(var.get('a'))+var.get('maj')(var.get('a'), var.get('b'), var.get('c')))|Js(0.0)))
                    var.put('h', var.get('g'))
                    var.put('g', var.get('f'))
                    var.put('f', var.get('e'))
                    var.put('e', ((var.get('d')+var.get('T1'))|Js(0.0)))
                    var.put('d', var.get('c'))
                    var.put('c', var.get('b'))
                    var.put('b', var.get('a'))
                    var.put('a', ((var.get('T1')+var.get('T2'))|Js(0.0)))
                finally:
                        var.put('j',Js(var.get('j').to_number())+Js(1))
            var.get(u"this").put('_a', ((var.get('a')+var.get(u"this").get('_a'))|Js(0.0)))
            var.get(u"this").put('_b', ((var.get('b')+var.get(u"this").get('_b'))|Js(0.0)))
            var.get(u"this").put('_c', ((var.get('c')+var.get(u"this").get('_c'))|Js(0.0)))
            var.get(u"this").put('_d', ((var.get('d')+var.get(u"this").get('_d'))|Js(0.0)))
            var.get(u"this").put('_e', ((var.get('e')+var.get(u"this").get('_e'))|Js(0.0)))
            var.get(u"this").put('_f', ((var.get('f')+var.get(u"this").get('_f'))|Js(0.0)))
            var.get(u"this").put('_g', ((var.get('g')+var.get(u"this").get('_g'))|Js(0.0)))
            var.get(u"this").put('_h', ((var.get('h')+var.get(u"this").get('_h'))|Js(0.0)))
        PyJs_anonymous_2651_._set_name('anonymous')
        var.get('Sha256').get('prototype').put('_update', PyJs_anonymous_2651_)
        @Js
        def PyJs_anonymous_2652_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['H'])
            var.put('H', var.get('Buffer').callprop('allocUnsafe', Js(32.0)))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_a'), Js(0.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_b'), Js(4.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_c'), Js(8.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_d'), Js(12.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_e'), Js(16.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_f'), Js(20.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_g'), Js(24.0))
            var.get('H').callprop('writeInt32BE', var.get(u"this").get('_h'), Js(28.0))
            return var.get('H')
        PyJs_anonymous_2652_._set_name('anonymous')
        var.get('Sha256').get('prototype').put('_hash', PyJs_anonymous_2652_)
        var.get('module').put('exports', var.get('Sha256'))
    PyJs_anonymous_2649_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2653_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'SHA512', 'Buffer', 'require', 'module', 'Hash', 'Sha384', 'W', 'inherits'])
        @Js
        def PyJsHoisted_Sha384_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('init')
            var.get(u"this").put('_w', var.get('W'))
            var.get('Hash').callprop('call', var.get(u"this"), Js(128.0), Js(112.0))
        PyJsHoisted_Sha384_.func_name = 'Sha384'
        var.put('Sha384', PyJsHoisted_Sha384_)
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('SHA512', var.get('require')(Js('./sha512')))
        var.put('Hash', var.get('require')(Js('./hash')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('W', var.get('Array').create(Js(160.0)))
        pass
        var.get('inherits')(var.get('Sha384'), var.get('SHA512'))
        @Js
        def PyJs_anonymous_2654_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('_ah', Js(3418070365))
            var.get(u"this").put('_bh', Js(1654270250))
            var.get(u"this").put('_ch', Js(2438529370))
            var.get(u"this").put('_dh', Js(355462360))
            var.get(u"this").put('_eh', Js(1731405415))
            var.get(u"this").put('_fh', Js(2394180231))
            var.get(u"this").put('_gh', Js(3675008525))
            var.get(u"this").put('_hh', Js(1203062813))
            var.get(u"this").put('_al', Js(3238371032))
            var.get(u"this").put('_bl', Js(914150663))
            var.get(u"this").put('_cl', Js(812702999))
            var.get(u"this").put('_dl', Js(4144912697))
            var.get(u"this").put('_el', Js(4290775857))
            var.get(u"this").put('_fl', Js(1750603025))
            var.get(u"this").put('_gl', Js(1694076839))
            var.get(u"this").put('_hl', Js(3204075428))
            return var.get(u"this")
        PyJs_anonymous_2654_._set_name('anonymous')
        var.get('Sha384').get('prototype').put('init', PyJs_anonymous_2654_)
        @Js
        def PyJs_anonymous_2655_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['writeInt64BE', 'H'])
            @Js
            def PyJsHoisted_writeInt64BE_(h, l, offset, this, arguments, var=var):
                var = Scope({'h':h, 'l':l, 'offset':offset, 'this':this, 'arguments':arguments}, var)
                var.registers(['l', 'h', 'offset'])
                var.get('H').callprop('writeInt32BE', var.get('h'), var.get('offset'))
                var.get('H').callprop('writeInt32BE', var.get('l'), (var.get('offset')+Js(4.0)))
            PyJsHoisted_writeInt64BE_.func_name = 'writeInt64BE'
            var.put('writeInt64BE', PyJsHoisted_writeInt64BE_)
            var.put('H', var.get('Buffer').callprop('allocUnsafe', Js(48.0)))
            pass
            var.get('writeInt64BE')(var.get(u"this").get('_ah'), var.get(u"this").get('_al'), Js(0.0))
            var.get('writeInt64BE')(var.get(u"this").get('_bh'), var.get(u"this").get('_bl'), Js(8.0))
            var.get('writeInt64BE')(var.get(u"this").get('_ch'), var.get(u"this").get('_cl'), Js(16.0))
            var.get('writeInt64BE')(var.get(u"this").get('_dh'), var.get(u"this").get('_dl'), Js(24.0))
            var.get('writeInt64BE')(var.get(u"this").get('_eh'), var.get(u"this").get('_el'), Js(32.0))
            var.get('writeInt64BE')(var.get(u"this").get('_fh'), var.get(u"this").get('_fl'), Js(40.0))
            return var.get('H')
        PyJs_anonymous_2655_._set_name('anonymous')
        var.get('Sha384').get('prototype').put('_hash', PyJs_anonymous_2655_)
        var.get('module').put('exports', var.get('Sha384'))
    PyJs_anonymous_2653_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2656_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'Ch', 'require', 'Buffer', 'module', 'K', 'maj', 'sigma0', 'Gamma1l', 'getCarry', 'Hash', 'Gamma0l', 'Gamma1', 'Sha512', 'W', 'inherits', 'Gamma0', 'sigma1'])
        @Js
        def PyJsHoisted_Sha512_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop('init')
            var.get(u"this").put('_w', var.get('W'))
            var.get('Hash').callprop('call', var.get(u"this"), Js(128.0), Js(112.0))
        PyJsHoisted_Sha512_.func_name = 'Sha512'
        var.put('Sha512', PyJsHoisted_Sha512_)
        @Js
        def PyJsHoisted_Ch_(x, y, z, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'z', 'y'])
            return (var.get('z')^(var.get('x')&(var.get('y')^var.get('z'))))
        PyJsHoisted_Ch_.func_name = 'Ch'
        var.put('Ch', PyJsHoisted_Ch_)
        @Js
        def PyJsHoisted_maj_(x, y, z, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['x', 'z', 'y'])
            return ((var.get('x')&var.get('y'))|(var.get('z')&(var.get('x')|var.get('y'))))
        PyJsHoisted_maj_.func_name = 'maj'
        var.put('maj', PyJsHoisted_maj_)
        @Js
        def PyJsHoisted_sigma0_(x, xl, this, arguments, var=var):
            var = Scope({'x':x, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['xl', 'x'])
            return (((PyJsBshift(var.get('x'),Js(28.0))|(var.get('xl')<<Js(4.0)))^(PyJsBshift(var.get('xl'),Js(2.0))|(var.get('x')<<Js(30.0))))^(PyJsBshift(var.get('xl'),Js(7.0))|(var.get('x')<<Js(25.0))))
        PyJsHoisted_sigma0_.func_name = 'sigma0'
        var.put('sigma0', PyJsHoisted_sigma0_)
        @Js
        def PyJsHoisted_sigma1_(x, xl, this, arguments, var=var):
            var = Scope({'x':x, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['xl', 'x'])
            return (((PyJsBshift(var.get('x'),Js(14.0))|(var.get('xl')<<Js(18.0)))^(PyJsBshift(var.get('x'),Js(18.0))|(var.get('xl')<<Js(14.0))))^(PyJsBshift(var.get('xl'),Js(9.0))|(var.get('x')<<Js(23.0))))
        PyJsHoisted_sigma1_.func_name = 'sigma1'
        var.put('sigma1', PyJsHoisted_sigma1_)
        @Js
        def PyJsHoisted_Gamma0_(x, xl, this, arguments, var=var):
            var = Scope({'x':x, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['xl', 'x'])
            return (((PyJsBshift(var.get('x'),Js(1.0))|(var.get('xl')<<Js(31.0)))^(PyJsBshift(var.get('x'),Js(8.0))|(var.get('xl')<<Js(24.0))))^PyJsBshift(var.get('x'),Js(7.0)))
        PyJsHoisted_Gamma0_.func_name = 'Gamma0'
        var.put('Gamma0', PyJsHoisted_Gamma0_)
        @Js
        def PyJsHoisted_Gamma0l_(x, xl, this, arguments, var=var):
            var = Scope({'x':x, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['xl', 'x'])
            return (((PyJsBshift(var.get('x'),Js(1.0))|(var.get('xl')<<Js(31.0)))^(PyJsBshift(var.get('x'),Js(8.0))|(var.get('xl')<<Js(24.0))))^(PyJsBshift(var.get('x'),Js(7.0))|(var.get('xl')<<Js(25.0))))
        PyJsHoisted_Gamma0l_.func_name = 'Gamma0l'
        var.put('Gamma0l', PyJsHoisted_Gamma0l_)
        @Js
        def PyJsHoisted_Gamma1_(x, xl, this, arguments, var=var):
            var = Scope({'x':x, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['xl', 'x'])
            return (((PyJsBshift(var.get('x'),Js(19.0))|(var.get('xl')<<Js(13.0)))^(PyJsBshift(var.get('xl'),Js(29.0))|(var.get('x')<<Js(3.0))))^PyJsBshift(var.get('x'),Js(6.0)))
        PyJsHoisted_Gamma1_.func_name = 'Gamma1'
        var.put('Gamma1', PyJsHoisted_Gamma1_)
        @Js
        def PyJsHoisted_Gamma1l_(x, xl, this, arguments, var=var):
            var = Scope({'x':x, 'xl':xl, 'this':this, 'arguments':arguments}, var)
            var.registers(['xl', 'x'])
            return (((PyJsBshift(var.get('x'),Js(19.0))|(var.get('xl')<<Js(13.0)))^(PyJsBshift(var.get('xl'),Js(29.0))|(var.get('x')<<Js(3.0))))^(PyJsBshift(var.get('x'),Js(6.0))|(var.get('xl')<<Js(26.0))))
        PyJsHoisted_Gamma1l_.func_name = 'Gamma1l'
        var.put('Gamma1l', PyJsHoisted_Gamma1l_)
        @Js
        def PyJsHoisted_getCarry_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return (Js(1.0) if (PyJsBshift(var.get('a'),Js(0.0))<PyJsBshift(var.get('b'),Js(0.0))) else Js(0.0))
        PyJsHoisted_getCarry_.func_name = 'getCarry'
        var.put('getCarry', PyJsHoisted_getCarry_)
        var.put('inherits', var.get('require')(Js('inherits')))
        var.put('Hash', var.get('require')(Js('./hash')))
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        var.put('K', Js([Js(1116352408), Js(3609767458), Js(1899447441), Js(602891725), Js(3049323471), Js(3964484399), Js(3921009573), Js(2173295548), Js(961987163), Js(4081628472), Js(1508970993), Js(3053834265), Js(2453635748), Js(2937671579), Js(2870763221), Js(3664609560), Js(3624381080), Js(2734883394), Js(310598401), Js(1164996542), Js(607225278), Js(1323610764), Js(1426881987), Js(3590304994), Js(1925078388), Js(4068182383), Js(2162078206), Js(991336113), Js(2614888103), Js(633803317), Js(3248222580), Js(3479774868), Js(3835390401), Js(2666613458), Js(4022224774), Js(944711139), Js(264347078), Js(2341262773), Js(604807628), Js(2007800933), Js(770255983), Js(1495990901), Js(1249150122), Js(1856431235), Js(1555081692), Js(3175218132), Js(1996064986), Js(2198950837), Js(2554220882), Js(3999719339), Js(2821834349), Js(766784016), Js(2952996808), Js(2566594879), Js(3210313671), Js(3203337956), Js(3336571891), Js(1034457026), Js(3584528711), Js(2466948901), Js(113926993), Js(3758326383), Js(338241895), Js(168717936), Js(666307205), Js(1188179964), Js(773529912), Js(1546045734), Js(1294757372), Js(1522805485), Js(1396182291), Js(2643833823), Js(1695183700), Js(2343527390), Js(1986661051), Js(1014477480), Js(2177026350), Js(1206759142), Js(2456956037), Js(344077627), Js(2730485921), Js(1290863460), Js(2820302411), Js(3158454273), Js(3259730800), Js(3505952657), Js(3345764771), Js(106217008), Js(3516065817), Js(3606008344), Js(3600352804), Js(1432725776), Js(4094571909), Js(1467031594), Js(275423344), Js(851169720), Js(430227734), Js(3100823752), Js(506948616), Js(1363258195), Js(659060556), Js(3750685593), Js(883997877), Js(3785050280), Js(958139571), Js(3318307427), Js(1322822218), Js(3812723403), Js(1537002063), Js(2003034995), Js(1747873779), Js(3602036899), Js(1955562222), Js(1575990012), Js(2024104815), Js(1125592928), Js(2227730452), Js(2716904306), Js(2361852424), Js(442776044), Js(2428436474), Js(593698344), Js(2756734187), Js(3733110249), Js(3204031479), Js(2999351573), Js(3329325298), Js(3815920427), Js(3391569614), Js(3928383900), Js(3515267271), Js(566280711), Js(3940187606), Js(3454069534), Js(4118630271), Js(4000239992), Js(116418474), Js(1914138554), Js(174292421), Js(2731055270), Js(289380356), Js(3203993006), Js(460393269), Js(320620315), Js(685471733), Js(587496836), Js(852142971), Js(1086792851), Js(1017036298), Js(365543100), Js(1126000580), Js(2618297676), Js(1288033470), Js(3409855158), Js(1501505948), Js(4234509866), Js(1607167915), Js(987167468), Js(1816402316), Js(1246189591)]))
        var.put('W', var.get('Array').create(Js(160.0)))
        pass
        var.get('inherits')(var.get('Sha512'), var.get('Hash'))
        @Js
        def PyJs_anonymous_2657_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('_ah', Js(1779033703))
            var.get(u"this").put('_bh', Js(3144134277))
            var.get(u"this").put('_ch', Js(1013904242))
            var.get(u"this").put('_dh', Js(2773480762))
            var.get(u"this").put('_eh', Js(1359893119))
            var.get(u"this").put('_fh', Js(2600822924))
            var.get(u"this").put('_gh', Js(528734635))
            var.get(u"this").put('_hh', Js(1541459225))
            var.get(u"this").put('_al', Js(4089235720))
            var.get(u"this").put('_bl', Js(2227873595))
            var.get(u"this").put('_cl', Js(4271175723))
            var.get(u"this").put('_dl', Js(1595750129))
            var.get(u"this").put('_el', Js(2917565137))
            var.get(u"this").put('_fl', Js(725511199))
            var.get(u"this").put('_gl', Js(4215389547))
            var.get(u"this").put('_hl', Js(327033209))
            return var.get(u"this")
        PyJs_anonymous_2657_._set_name('anonymous')
        var.get('Sha512').get('prototype').put('init', PyJs_anonymous_2657_)
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_2658_(M, this, arguments, var=var):
            var = Scope({'M':M, 'this':this, 'arguments':arguments}, var)
            var.registers(['j', 'bl', 'M', 'chh', 'chl', 'sigma0h', 'gamma0', 'Wi7l', 'Wi16h', 'Wih', 'Kih', 'Wil', 'i', 'hl', 'ch', 'hh', 't1h', 'el', 't2h', 'xh', 'fh', 't2l', 'Kil', 'dh', 't1l', 'eh', 'gl', 'bh', 'gamma1', 'gh', 'Wi7h', 'Wi16l', 'al', 'xl', 'sigma1l', 'majh', 'sigma0l', 'gamma0l', 'dl', 'gamma1l', 'majl', 'W', 'fl', 'sigma1h', 'ah', 'cl'])
            var.put('W', var.get(u"this").get('_w'))
            var.put('ah', (var.get(u"this").get('_ah')|Js(0.0)))
            var.put('bh', (var.get(u"this").get('_bh')|Js(0.0)))
            var.put('ch', (var.get(u"this").get('_ch')|Js(0.0)))
            var.put('dh', (var.get(u"this").get('_dh')|Js(0.0)))
            var.put('eh', (var.get(u"this").get('_eh')|Js(0.0)))
            var.put('fh', (var.get(u"this").get('_fh')|Js(0.0)))
            var.put('gh', (var.get(u"this").get('_gh')|Js(0.0)))
            var.put('hh', (var.get(u"this").get('_hh')|Js(0.0)))
            var.put('al', (var.get(u"this").get('_al')|Js(0.0)))
            var.put('bl', (var.get(u"this").get('_bl')|Js(0.0)))
            var.put('cl', (var.get(u"this").get('_cl')|Js(0.0)))
            var.put('dl', (var.get(u"this").get('_dl')|Js(0.0)))
            var.put('el', (var.get(u"this").get('_el')|Js(0.0)))
            var.put('fl', (var.get(u"this").get('_fl')|Js(0.0)))
            var.put('gl', (var.get(u"this").get('_gl')|Js(0.0)))
            var.put('hl', (var.get(u"this").get('_hl')|Js(0.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(32.0)):
                try:
                    var.get('W').put(var.get('i'), var.get('M').callprop('readInt32BE', (var.get('i')*Js(4.0))))
                    var.get('W').put((var.get('i')+Js(1.0)), var.get('M').callprop('readInt32BE', ((var.get('i')*Js(4.0))+Js(4.0))))
                finally:
                        var.put('i', Js(2.0), '+')
            #for JS loop

            while (var.get('i')<Js(160.0)):
                try:
                    var.put('xh', var.get('W').get((var.get('i')-(Js(15.0)*Js(2.0)))))
                    var.put('xl', var.get('W').get(((var.get('i')-(Js(15.0)*Js(2.0)))+Js(1.0))))
                    var.put('gamma0', var.get('Gamma0')(var.get('xh'), var.get('xl')))
                    var.put('gamma0l', var.get('Gamma0l')(var.get('xl'), var.get('xh')))
                    var.put('xh', var.get('W').get((var.get('i')-(Js(2.0)*Js(2.0)))))
                    var.put('xl', var.get('W').get(((var.get('i')-(Js(2.0)*Js(2.0)))+Js(1.0))))
                    var.put('gamma1', var.get('Gamma1')(var.get('xh'), var.get('xl')))
                    var.put('gamma1l', var.get('Gamma1l')(var.get('xl'), var.get('xh')))
                    var.put('Wi7h', var.get('W').get((var.get('i')-(Js(7.0)*Js(2.0)))))
                    var.put('Wi7l', var.get('W').get(((var.get('i')-(Js(7.0)*Js(2.0)))+Js(1.0))))
                    var.put('Wi16h', var.get('W').get((var.get('i')-(Js(16.0)*Js(2.0)))))
                    var.put('Wi16l', var.get('W').get(((var.get('i')-(Js(16.0)*Js(2.0)))+Js(1.0))))
                    var.put('Wil', ((var.get('gamma0l')+var.get('Wi7l'))|Js(0.0)))
                    var.put('Wih', (((var.get('gamma0')+var.get('Wi7h'))+var.get('getCarry')(var.get('Wil'), var.get('gamma0l')))|Js(0.0)))
                    var.put('Wil', ((var.get('Wil')+var.get('gamma1l'))|Js(0.0)))
                    var.put('Wih', (((var.get('Wih')+var.get('gamma1'))+var.get('getCarry')(var.get('Wil'), var.get('gamma1l')))|Js(0.0)))
                    var.put('Wil', ((var.get('Wil')+var.get('Wi16l'))|Js(0.0)))
                    var.put('Wih', (((var.get('Wih')+var.get('Wi16h'))+var.get('getCarry')(var.get('Wil'), var.get('Wi16l')))|Js(0.0)))
                    var.get('W').put(var.get('i'), var.get('Wih'))
                    var.get('W').put((var.get('i')+Js(1.0)), var.get('Wil'))
                finally:
                        var.put('i', Js(2.0), '+')
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<Js(160.0)):
                try:
                    var.put('Wih', var.get('W').get(var.get('j')))
                    var.put('Wil', var.get('W').get((var.get('j')+Js(1.0))))
                    var.put('majh', var.get('maj')(var.get('ah'), var.get('bh'), var.get('ch')))
                    var.put('majl', var.get('maj')(var.get('al'), var.get('bl'), var.get('cl')))
                    var.put('sigma0h', var.get('sigma0')(var.get('ah'), var.get('al')))
                    var.put('sigma0l', var.get('sigma0')(var.get('al'), var.get('ah')))
                    var.put('sigma1h', var.get('sigma1')(var.get('eh'), var.get('el')))
                    var.put('sigma1l', var.get('sigma1')(var.get('el'), var.get('eh')))
                    var.put('Kih', var.get('K').get(var.get('j')))
                    var.put('Kil', var.get('K').get((var.get('j')+Js(1.0))))
                    var.put('chh', var.get('Ch')(var.get('eh'), var.get('fh'), var.get('gh')))
                    var.put('chl', var.get('Ch')(var.get('el'), var.get('fl'), var.get('gl')))
                    var.put('t1l', ((var.get('hl')+var.get('sigma1l'))|Js(0.0)))
                    var.put('t1h', (((var.get('hh')+var.get('sigma1h'))+var.get('getCarry')(var.get('t1l'), var.get('hl')))|Js(0.0)))
                    var.put('t1l', ((var.get('t1l')+var.get('chl'))|Js(0.0)))
                    var.put('t1h', (((var.get('t1h')+var.get('chh'))+var.get('getCarry')(var.get('t1l'), var.get('chl')))|Js(0.0)))
                    var.put('t1l', ((var.get('t1l')+var.get('Kil'))|Js(0.0)))
                    var.put('t1h', (((var.get('t1h')+var.get('Kih'))+var.get('getCarry')(var.get('t1l'), var.get('Kil')))|Js(0.0)))
                    var.put('t1l', ((var.get('t1l')+var.get('Wil'))|Js(0.0)))
                    var.put('t1h', (((var.get('t1h')+var.get('Wih'))+var.get('getCarry')(var.get('t1l'), var.get('Wil')))|Js(0.0)))
                    var.put('t2l', ((var.get('sigma0l')+var.get('majl'))|Js(0.0)))
                    var.put('t2h', (((var.get('sigma0h')+var.get('majh'))+var.get('getCarry')(var.get('t2l'), var.get('sigma0l')))|Js(0.0)))
                    var.put('hh', var.get('gh'))
                    var.put('hl', var.get('gl'))
                    var.put('gh', var.get('fh'))
                    var.put('gl', var.get('fl'))
                    var.put('fh', var.get('eh'))
                    var.put('fl', var.get('el'))
                    var.put('el', ((var.get('dl')+var.get('t1l'))|Js(0.0)))
                    var.put('eh', (((var.get('dh')+var.get('t1h'))+var.get('getCarry')(var.get('el'), var.get('dl')))|Js(0.0)))
                    var.put('dh', var.get('ch'))
                    var.put('dl', var.get('cl'))
                    var.put('ch', var.get('bh'))
                    var.put('cl', var.get('bl'))
                    var.put('bh', var.get('ah'))
                    var.put('bl', var.get('al'))
                    var.put('al', ((var.get('t1l')+var.get('t2l'))|Js(0.0)))
                    var.put('ah', (((var.get('t1h')+var.get('t2h'))+var.get('getCarry')(var.get('al'), var.get('t1l')))|Js(0.0)))
                finally:
                        var.put('j', Js(2.0), '+')
            var.get(u"this").put('_al', ((var.get(u"this").get('_al')+var.get('al'))|Js(0.0)))
            var.get(u"this").put('_bl', ((var.get(u"this").get('_bl')+var.get('bl'))|Js(0.0)))
            var.get(u"this").put('_cl', ((var.get(u"this").get('_cl')+var.get('cl'))|Js(0.0)))
            var.get(u"this").put('_dl', ((var.get(u"this").get('_dl')+var.get('dl'))|Js(0.0)))
            var.get(u"this").put('_el', ((var.get(u"this").get('_el')+var.get('el'))|Js(0.0)))
            var.get(u"this").put('_fl', ((var.get(u"this").get('_fl')+var.get('fl'))|Js(0.0)))
            var.get(u"this").put('_gl', ((var.get(u"this").get('_gl')+var.get('gl'))|Js(0.0)))
            var.get(u"this").put('_hl', ((var.get(u"this").get('_hl')+var.get('hl'))|Js(0.0)))
            var.get(u"this").put('_ah', (((var.get(u"this").get('_ah')+var.get('ah'))+var.get('getCarry')(var.get(u"this").get('_al'), var.get('al')))|Js(0.0)))
            var.get(u"this").put('_bh', (((var.get(u"this").get('_bh')+var.get('bh'))+var.get('getCarry')(var.get(u"this").get('_bl'), var.get('bl')))|Js(0.0)))
            var.get(u"this").put('_ch', (((var.get(u"this").get('_ch')+var.get('ch'))+var.get('getCarry')(var.get(u"this").get('_cl'), var.get('cl')))|Js(0.0)))
            var.get(u"this").put('_dh', (((var.get(u"this").get('_dh')+var.get('dh'))+var.get('getCarry')(var.get(u"this").get('_dl'), var.get('dl')))|Js(0.0)))
            var.get(u"this").put('_eh', (((var.get(u"this").get('_eh')+var.get('eh'))+var.get('getCarry')(var.get(u"this").get('_el'), var.get('el')))|Js(0.0)))
            var.get(u"this").put('_fh', (((var.get(u"this").get('_fh')+var.get('fh'))+var.get('getCarry')(var.get(u"this").get('_fl'), var.get('fl')))|Js(0.0)))
            var.get(u"this").put('_gh', (((var.get(u"this").get('_gh')+var.get('gh'))+var.get('getCarry')(var.get(u"this").get('_gl'), var.get('gl')))|Js(0.0)))
            var.get(u"this").put('_hh', (((var.get(u"this").get('_hh')+var.get('hh'))+var.get('getCarry')(var.get(u"this").get('_hl'), var.get('hl')))|Js(0.0)))
        PyJs_anonymous_2658_._set_name('anonymous')
        var.get('Sha512').get('prototype').put('_update', PyJs_anonymous_2658_)
        @Js
        def PyJs_anonymous_2659_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['writeInt64BE', 'H'])
            @Js
            def PyJsHoisted_writeInt64BE_(h, l, offset, this, arguments, var=var):
                var = Scope({'h':h, 'l':l, 'offset':offset, 'this':this, 'arguments':arguments}, var)
                var.registers(['l', 'h', 'offset'])
                var.get('H').callprop('writeInt32BE', var.get('h'), var.get('offset'))
                var.get('H').callprop('writeInt32BE', var.get('l'), (var.get('offset')+Js(4.0)))
            PyJsHoisted_writeInt64BE_.func_name = 'writeInt64BE'
            var.put('writeInt64BE', PyJsHoisted_writeInt64BE_)
            var.put('H', var.get('Buffer').callprop('allocUnsafe', Js(64.0)))
            pass
            var.get('writeInt64BE')(var.get(u"this").get('_ah'), var.get(u"this").get('_al'), Js(0.0))
            var.get('writeInt64BE')(var.get(u"this").get('_bh'), var.get(u"this").get('_bl'), Js(8.0))
            var.get('writeInt64BE')(var.get(u"this").get('_ch'), var.get(u"this").get('_cl'), Js(16.0))
            var.get('writeInt64BE')(var.get(u"this").get('_dh'), var.get(u"this").get('_dl'), Js(24.0))
            var.get('writeInt64BE')(var.get(u"this").get('_eh'), var.get(u"this").get('_el'), Js(32.0))
            var.get('writeInt64BE')(var.get(u"this").get('_fh'), var.get(u"this").get('_fl'), Js(40.0))
            var.get('writeInt64BE')(var.get(u"this").get('_gh'), var.get(u"this").get('_gl'), Js(48.0))
            var.get('writeInt64BE')(var.get(u"this").get('_hh'), var.get(u"this").get('_hl'), Js(56.0))
            return var.get('H')
        PyJs_anonymous_2659_._set_name('anonymous')
        var.get('Sha512').get('prototype').put('_hash', PyJs_anonymous_2659_)
        var.get('module').put('exports', var.get('Sha512'))
    PyJs_anonymous_2656_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2660_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'EE', 'inherits', 'Stream'])
        @Js
        def PyJsHoisted_Stream_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('EE').callprop('call', var.get(u"this"))
        PyJsHoisted_Stream_.func_name = 'Stream'
        var.put('Stream', PyJsHoisted_Stream_)
        var.get('module').put('exports', var.get('Stream'))
        var.put('EE', var.get('require')(Js('events')).get('EventEmitter'))
        var.put('inherits', var.get('require')(Js('inherits')))
        var.get('inherits')(var.get('Stream'), var.get('EE'))
        var.get('Stream').put('Readable', var.get('require')(Js('readable-stream/lib/_stream_readable.js')))
        var.get('Stream').put('Writable', var.get('require')(Js('readable-stream/lib/_stream_writable.js')))
        var.get('Stream').put('Duplex', var.get('require')(Js('readable-stream/lib/_stream_duplex.js')))
        var.get('Stream').put('Transform', var.get('require')(Js('readable-stream/lib/_stream_transform.js')))
        var.get('Stream').put('PassThrough', var.get('require')(Js('readable-stream/lib/_stream_passthrough.js')))
        var.get('Stream').put('finished', var.get('require')(Js('readable-stream/lib/internal/streams/end-of-stream.js')))
        var.get('Stream').put('pipeline', var.get('require')(Js('readable-stream/lib/internal/streams/pipeline.js')))
        var.get('Stream').put('Stream', var.get('Stream'))
        pass
        @Js
        def PyJs_anonymous_2661_(dest, options, this, arguments, var=var):
            var = Scope({'dest':dest, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'cleanup', 'didOnEnd', 'ondrain', 'onclose', 'source', 'onerror', 'dest', 'onend', 'ondata'])
            @Js
            def PyJsHoisted_ondata_(chunk, this, arguments, var=var):
                var = Scope({'chunk':chunk, 'this':this, 'arguments':arguments}, var)
                var.registers(['chunk'])
                if var.get('dest').get('writable'):
                    if (_seq(Js(False),var.get('dest').callprop('write', var.get('chunk'))) and var.get('source').get('pause')):
                        var.get('source').callprop('pause')
            PyJsHoisted_ondata_.func_name = 'ondata'
            var.put('ondata', PyJsHoisted_ondata_)
            @Js
            def PyJsHoisted_ondrain_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if (var.get('source').get('readable') and var.get('source').get('resume')):
                    var.get('source').callprop('resume')
            PyJsHoisted_ondrain_.func_name = 'ondrain'
            var.put('ondrain', PyJsHoisted_ondrain_)
            @Js
            def PyJsHoisted_onend_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get('didOnEnd'):
                    return var.get('undefined')
                var.put('didOnEnd', Js(True))
                var.get('dest').callprop('end')
            PyJsHoisted_onend_.func_name = 'onend'
            var.put('onend', PyJsHoisted_onend_)
            @Js
            def PyJsHoisted_onclose_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                if var.get('didOnEnd'):
                    return var.get('undefined')
                var.put('didOnEnd', Js(True))
                if _seq(var.get('dest').get('destroy').typeof(),Js('function')):
                    var.get('dest').callprop('destroy')
            PyJsHoisted_onclose_.func_name = 'onclose'
            var.put('onclose', PyJsHoisted_onclose_)
            @Js
            def PyJsHoisted_onerror_(er, this, arguments, var=var):
                var = Scope({'er':er, 'this':this, 'arguments':arguments}, var)
                var.registers(['er'])
                var.get('cleanup')()
                if _seq(var.get('EE').callprop('listenerCount', var.get(u"this"), Js('error')),Js(0.0)):
                    PyJsTempException = JsToPyException(var.get('er'))
                    raise PyJsTempException
            PyJsHoisted_onerror_.func_name = 'onerror'
            var.put('onerror', PyJsHoisted_onerror_)
            @Js
            def PyJsHoisted_cleanup_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('source').callprop('removeListener', Js('data'), var.get('ondata'))
                var.get('dest').callprop('removeListener', Js('drain'), var.get('ondrain'))
                var.get('source').callprop('removeListener', Js('end'), var.get('onend'))
                var.get('source').callprop('removeListener', Js('close'), var.get('onclose'))
                var.get('source').callprop('removeListener', Js('error'), var.get('onerror'))
                var.get('dest').callprop('removeListener', Js('error'), var.get('onerror'))
                var.get('source').callprop('removeListener', Js('end'), var.get('cleanup'))
                var.get('source').callprop('removeListener', Js('close'), var.get('cleanup'))
                var.get('dest').callprop('removeListener', Js('close'), var.get('cleanup'))
            PyJsHoisted_cleanup_.func_name = 'cleanup'
            var.put('cleanup', PyJsHoisted_cleanup_)
            var.put('source', var.get(u"this"))
            pass
            var.get('source').callprop('on', Js('data'), var.get('ondata'))
            pass
            var.get('dest').callprop('on', Js('drain'), var.get('ondrain'))
            if (var.get('dest').get('_isStdio').neg() and (var.get('options').neg() or PyJsStrictNeq(var.get('options').get('end'),Js(False)))):
                var.get('source').callprop('on', Js('end'), var.get('onend'))
                var.get('source').callprop('on', Js('close'), var.get('onclose'))
            var.put('didOnEnd', Js(False))
            pass
            pass
            pass
            var.get('source').callprop('on', Js('error'), var.get('onerror'))
            var.get('dest').callprop('on', Js('error'), var.get('onerror'))
            pass
            var.get('source').callprop('on', Js('end'), var.get('cleanup'))
            var.get('source').callprop('on', Js('close'), var.get('cleanup'))
            var.get('dest').callprop('on', Js('close'), var.get('cleanup'))
            var.get('dest').callprop('emit', Js('pipe'), var.get('source'))
            return var.get('dest')
        PyJs_anonymous_2661_._set_name('anonymous')
        var.get('Stream').get('prototype').put('pipe', PyJs_anonymous_2661_)
    PyJs_anonymous_2660_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2662_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('49').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2662_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2663_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('50').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2663_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2664_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('51').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2664_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2665_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('52').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2665_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2666_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('53').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2666_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2667_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('54').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2667_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2668_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('55').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2668_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2669_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('56').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2669_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2670_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('57').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2670_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2671_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('58').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2671_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2672_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('59').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2672_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2673_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('60').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2673_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2674_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('61').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2674_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2675_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('arguments').get('4').get('62').get('0').callprop('apply', var.get('exports'), var.get('arguments'))
    PyJs_anonymous_2675_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2676_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'utf8CheckExtraBytes', 'utf16End', 'utf8Text', 'utf8FillLast', '_normalizeEncoding', 'base64Text', 'simpleEnd', 'utf8CheckIncomplete', 'utf8CheckByte', 'StringDecoder', 'require', 'Buffer', 'normalizeEncoding', 'simpleWrite', 'base64End', 'exports', 'utf16Text', 'utf8End', 'isEncoding'])
        @Js
        def PyJsHoisted__normalizeEncoding_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['retried', 'enc'])
            if var.get('enc').neg():
                return Js('utf8')
            pass
            while Js(True):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('enc'))
                    if SWITCHED or _seq(CONDITION, Js('utf8')):
                        SWITCHED = True
                        pass
                    if SWITCHED or _seq(CONDITION, Js('utf-8')):
                        SWITCHED = True
                        return Js('utf8')
                    if SWITCHED or _seq(CONDITION, Js('ucs2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or _seq(CONDITION, Js('ucs-2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or _seq(CONDITION, Js('utf16le')):
                        SWITCHED = True
                        pass
                    if SWITCHED or _seq(CONDITION, Js('utf-16le')):
                        SWITCHED = True
                        return Js('utf16le')
                    if SWITCHED or _seq(CONDITION, Js('latin1')):
                        SWITCHED = True
                        pass
                    if SWITCHED or _seq(CONDITION, Js('binary')):
                        SWITCHED = True
                        return Js('latin1')
                    if SWITCHED or _seq(CONDITION, Js('base64')):
                        SWITCHED = True
                        pass
                    if SWITCHED or _seq(CONDITION, Js('ascii')):
                        SWITCHED = True
                        pass
                    if SWITCHED or _seq(CONDITION, Js('hex')):
                        SWITCHED = True
                        return var.get('enc')
                    if True:
                        SWITCHED = True
                        if var.get('retried'):
                            return var.get('undefined')
                        var.put('enc', (Js('')+var.get('enc')).callprop('toLowerCase'))
                        var.put('retried', Js(True))
                    SWITCHED = True
                    break
        PyJsHoisted__normalizeEncoding_.func_name = '_normalizeEncoding'
        var.put('_normalizeEncoding', PyJsHoisted__normalizeEncoding_)
        @Js
        def PyJsHoisted_normalizeEncoding_(enc, this, arguments, var=var):
            var = Scope({'enc':enc, 'this':this, 'arguments':arguments}, var)
            var.registers(['nenc', 'enc'])
            var.put('nenc', var.get('_normalizeEncoding')(var.get('enc')))
            if (PyJsStrictNeq(var.get('nenc',throw=False).typeof(),Js('string')) and (_seq(var.get('Buffer').get('isEncoding'),var.get('isEncoding')) or var.get('isEncoding')(var.get('enc')).neg())):
                PyJsTempException = JsToPyException(var.get('Error').create((Js('Unknown encoding: ')+var.get('enc'))))
                raise PyJsTempException
            return (var.get('nenc') or var.get('enc'))
        PyJsHoisted_normalizeEncoding_.func_name = 'normalizeEncoding'
        var.put('normalizeEncoding', PyJsHoisted_normalizeEncoding_)
        @Js
        def PyJsHoisted_StringDecoder_(encoding, this, arguments, var=var):
            var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['encoding', 'nb'])
            var.get(u"this").put('encoding', var.get('normalizeEncoding')(var.get('encoding')))
            pass
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u"this").get('encoding'))
                if SWITCHED or _seq(CONDITION, Js('utf16le')):
                    SWITCHED = True
                    var.get(u"this").put('text', var.get('utf16Text'))
                    var.get(u"this").put('end', var.get('utf16End'))
                    var.put('nb', Js(4.0))
                    break
                if SWITCHED or _seq(CONDITION, Js('utf8')):
                    SWITCHED = True
                    var.get(u"this").put('fillLast', var.get('utf8FillLast'))
                    var.put('nb', Js(4.0))
                    break
                if SWITCHED or _seq(CONDITION, Js('base64')):
                    SWITCHED = True
                    var.get(u"this").put('text', var.get('base64Text'))
                    var.get(u"this").put('end', var.get('base64End'))
                    var.put('nb', Js(3.0))
                    break
                if True:
                    SWITCHED = True
                    var.get(u"this").put('write', var.get('simpleWrite'))
                    var.get(u"this").put('end', var.get('simpleEnd'))
                    return var.get('undefined')
                SWITCHED = True
                break
            var.get(u"this").put('lastNeed', Js(0.0))
            var.get(u"this").put('lastTotal', Js(0.0))
            var.get(u"this").put('lastChar', var.get('Buffer').callprop('allocUnsafe', var.get('nb')))
        PyJsHoisted_StringDecoder_.func_name = 'StringDecoder'
        var.put('StringDecoder', PyJsHoisted_StringDecoder_)
        @Js
        def PyJsHoisted_utf8CheckByte_(byte, this, arguments, var=var):
            var = Scope({'byte':byte, 'this':this, 'arguments':arguments}, var)
            var.registers(['byte'])
            if (var.get('byte')<=Js(127)):
                return Js(0.0)
            else:
                if _seq((var.get('byte')>>Js(5.0)),Js(6)):
                    return Js(2.0)
                else:
                    if _seq((var.get('byte')>>Js(4.0)),Js(14)):
                        return Js(3.0)
                    else:
                        if _seq((var.get('byte')>>Js(3.0)),Js(30)):
                            return Js(4.0)
            return ((-Js(1.0)) if _seq((var.get('byte')>>Js(6.0)),Js(2)) else (-Js(2.0)))
        PyJsHoisted_utf8CheckByte_.func_name = 'utf8CheckByte'
        var.put('utf8CheckByte', PyJsHoisted_utf8CheckByte_)
        @Js
        def PyJsHoisted_utf8CheckIncomplete_(self, buf, i, this, arguments, var=var):
            var = Scope({'self':self, 'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'j', 'i', 'buf', 'nb'])
            var.put('j', (var.get('buf').get('length')-Js(1.0)))
            if (var.get('j')<var.get('i')):
                return Js(0.0)
            var.put('nb', var.get('utf8CheckByte')(var.get('buf').get(var.get('j'))))
            if (var.get('nb')>=Js(0.0)):
                if (var.get('nb')>Js(0.0)):
                    var.get('self').put('lastNeed', (var.get('nb')-Js(1.0)))
                return var.get('nb')
            if ((var.put('j',Js(var.get('j').to_number())-Js(1))<var.get('i')) or _seq(var.get('nb'),(-Js(2.0)))):
                return Js(0.0)
            var.put('nb', var.get('utf8CheckByte')(var.get('buf').get(var.get('j'))))
            if (var.get('nb')>=Js(0.0)):
                if (var.get('nb')>Js(0.0)):
                    var.get('self').put('lastNeed', (var.get('nb')-Js(2.0)))
                return var.get('nb')
            if ((var.put('j',Js(var.get('j').to_number())-Js(1))<var.get('i')) or _seq(var.get('nb'),(-Js(2.0)))):
                return Js(0.0)
            var.put('nb', var.get('utf8CheckByte')(var.get('buf').get(var.get('j'))))
            if (var.get('nb')>=Js(0.0)):
                if (var.get('nb')>Js(0.0)):
                    if _seq(var.get('nb'),Js(2.0)):
                        var.put('nb', Js(0.0))
                    else:
                        var.get('self').put('lastNeed', (var.get('nb')-Js(3.0)))
                return var.get('nb')
            return Js(0.0)
        PyJsHoisted_utf8CheckIncomplete_.func_name = 'utf8CheckIncomplete'
        var.put('utf8CheckIncomplete', PyJsHoisted_utf8CheckIncomplete_)
        @Js
        def PyJsHoisted_utf8CheckExtraBytes_(self, buf, p, this, arguments, var=var):
            var = Scope({'self':self, 'buf':buf, 'p':p, 'this':this, 'arguments':arguments}, var)
            var.registers(['self', 'buf', 'p'])
            if PyJsStrictNeq((var.get('buf').get('0')&Js(192)),Js(128)):
                var.get('self').put('lastNeed', Js(0.0))
                return Js('�')
            if ((var.get('self').get('lastNeed')>Js(1.0)) and (var.get('buf').get('length')>Js(1.0))):
                if PyJsStrictNeq((var.get('buf').get('1')&Js(192)),Js(128)):
                    var.get('self').put('lastNeed', Js(1.0))
                    return Js('�')
                if ((var.get('self').get('lastNeed')>Js(2.0)) and (var.get('buf').get('length')>Js(2.0))):
                    if PyJsStrictNeq((var.get('buf').get('2')&Js(192)),Js(128)):
                        var.get('self').put('lastNeed', Js(2.0))
                        return Js('�')
        PyJsHoisted_utf8CheckExtraBytes_.func_name = 'utf8CheckExtraBytes'
        var.put('utf8CheckExtraBytes', PyJsHoisted_utf8CheckExtraBytes_)
        @Js
        def PyJsHoisted_utf8FillLast_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf', 'r', 'p'])
            var.put('p', (var.get(u"this").get('lastTotal')-var.get(u"this").get('lastNeed')))
            var.put('r', var.get('utf8CheckExtraBytes')(var.get(u"this"), var.get('buf'), var.get('p')))
            if PyJsStrictNeq(var.get('r'),var.get('undefined')):
                return var.get('r')
            if (var.get(u"this").get('lastNeed')<=var.get('buf').get('length')):
                var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), var.get('p'), Js(0.0), var.get(u"this").get('lastNeed'))
                return var.get(u"this").get('lastChar').callprop('toString', var.get(u"this").get('encoding'), Js(0.0), var.get(u"this").get('lastTotal'))
            var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), var.get('p'), Js(0.0), var.get('buf').get('length'))
            var.get(u"this").put('lastNeed', var.get('buf').get('length'), '-')
        PyJsHoisted_utf8FillLast_.func_name = 'utf8FillLast'
        var.put('utf8FillLast', PyJsHoisted_utf8FillLast_)
        @Js
        def PyJsHoisted_utf8Text_(buf, i, this, arguments, var=var):
            var = Scope({'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'total', 'buf', 'end'])
            var.put('total', var.get('utf8CheckIncomplete')(var.get(u"this"), var.get('buf'), var.get('i')))
            if var.get(u"this").get('lastNeed').neg():
                return var.get('buf').callprop('toString', Js('utf8'), var.get('i'))
            var.get(u"this").put('lastTotal', var.get('total'))
            var.put('end', (var.get('buf').get('length')-(var.get('total')-var.get(u"this").get('lastNeed'))))
            var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), Js(0.0), var.get('end'))
            return var.get('buf').callprop('toString', Js('utf8'), var.get('i'), var.get('end'))
        PyJsHoisted_utf8Text_.func_name = 'utf8Text'
        var.put('utf8Text', PyJsHoisted_utf8Text_)
        @Js
        def PyJsHoisted_utf8End_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf', 'r'])
            var.put('r', (var.get(u"this").callprop('write', var.get('buf')) if (var.get('buf') and var.get('buf').get('length')) else Js('')))
            if var.get(u"this").get('lastNeed'):
                return (var.get('r')+Js('�'))
            return var.get('r')
        PyJsHoisted_utf8End_.func_name = 'utf8End'
        var.put('utf8End', PyJsHoisted_utf8End_)
        @Js
        def PyJsHoisted_utf16Text_(buf, i, this, arguments, var=var):
            var = Scope({'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'c', 'buf', 'r'])
            if _seq(((var.get('buf').get('length')-var.get('i'))%Js(2.0)),Js(0.0)):
                var.put('r', var.get('buf').callprop('toString', Js('utf16le'), var.get('i')))
                if var.get('r'):
                    var.put('c', var.get('r').callprop('charCodeAt', (var.get('r').get('length')-Js(1.0))))
                    if ((var.get('c')>=Js(55296)) and (var.get('c')<=Js(56319))):
                        var.get(u"this").put('lastNeed', Js(2.0))
                        var.get(u"this").put('lastTotal', Js(4.0))
                        var.get(u"this").get('lastChar').put('0', var.get('buf').get((var.get('buf').get('length')-Js(2.0))))
                        var.get(u"this").get('lastChar').put('1', var.get('buf').get((var.get('buf').get('length')-Js(1.0))))
                        return var.get('r').callprop('slice', Js(0.0), (-Js(1.0)))
                return var.get('r')
            var.get(u"this").put('lastNeed', Js(1.0))
            var.get(u"this").put('lastTotal', Js(2.0))
            var.get(u"this").get('lastChar').put('0', var.get('buf').get((var.get('buf').get('length')-Js(1.0))))
            return var.get('buf').callprop('toString', Js('utf16le'), var.get('i'), (var.get('buf').get('length')-Js(1.0)))
        PyJsHoisted_utf16Text_.func_name = 'utf16Text'
        var.put('utf16Text', PyJsHoisted_utf16Text_)
        @Js
        def PyJsHoisted_utf16End_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf', 'end', 'r'])
            var.put('r', (var.get(u"this").callprop('write', var.get('buf')) if (var.get('buf') and var.get('buf').get('length')) else Js('')))
            if var.get(u"this").get('lastNeed'):
                var.put('end', (var.get(u"this").get('lastTotal')-var.get(u"this").get('lastNeed')))
                return (var.get('r')+var.get(u"this").get('lastChar').callprop('toString', Js('utf16le'), Js(0.0), var.get('end')))
            return var.get('r')
        PyJsHoisted_utf16End_.func_name = 'utf16End'
        var.put('utf16End', PyJsHoisted_utf16End_)
        @Js
        def PyJsHoisted_base64Text_(buf, i, this, arguments, var=var):
            var = Scope({'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'buf', 'n'])
            var.put('n', ((var.get('buf').get('length')-var.get('i'))%Js(3.0)))
            if _seq(var.get('n'),Js(0.0)):
                return var.get('buf').callprop('toString', Js('base64'), var.get('i'))
            var.get(u"this").put('lastNeed', (Js(3.0)-var.get('n')))
            var.get(u"this").put('lastTotal', Js(3.0))
            if _seq(var.get('n'),Js(1.0)):
                var.get(u"this").get('lastChar').put('0', var.get('buf').get((var.get('buf').get('length')-Js(1.0))))
            else:
                var.get(u"this").get('lastChar').put('0', var.get('buf').get((var.get('buf').get('length')-Js(2.0))))
                var.get(u"this").get('lastChar').put('1', var.get('buf').get((var.get('buf').get('length')-Js(1.0))))
            return var.get('buf').callprop('toString', Js('base64'), var.get('i'), (var.get('buf').get('length')-var.get('n')))
        PyJsHoisted_base64Text_.func_name = 'base64Text'
        var.put('base64Text', PyJsHoisted_base64Text_)
        @Js
        def PyJsHoisted_base64End_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf', 'r'])
            var.put('r', (var.get(u"this").callprop('write', var.get('buf')) if (var.get('buf') and var.get('buf').get('length')) else Js('')))
            if var.get(u"this").get('lastNeed'):
                return (var.get('r')+var.get(u"this").get('lastChar').callprop('toString', Js('base64'), Js(0.0), (Js(3.0)-var.get(u"this").get('lastNeed'))))
            return var.get('r')
        PyJsHoisted_base64End_.func_name = 'base64End'
        var.put('base64End', PyJsHoisted_base64End_)
        @Js
        def PyJsHoisted_simpleWrite_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf'])
            return var.get('buf').callprop('toString', var.get(u"this").get('encoding'))
        PyJsHoisted_simpleWrite_.func_name = 'simpleWrite'
        var.put('simpleWrite', PyJsHoisted_simpleWrite_)
        @Js
        def PyJsHoisted_simpleEnd_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf'])
            return (var.get(u"this").callprop('write', var.get('buf')) if (var.get('buf') and var.get('buf').get('length')) else Js(''))
        PyJsHoisted_simpleEnd_.func_name = 'simpleEnd'
        var.put('simpleEnd', PyJsHoisted_simpleEnd_)
        Js('use strict')
        var.put('Buffer', var.get('require')(Js('safe-buffer')).get('Buffer'))
        @Js
        def PyJs_anonymous_2677_(encoding, this, arguments, var=var):
            var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['encoding'])
            var.put('encoding', (Js('')+var.get('encoding')))
            while 1:
                SWITCHED = False
                CONDITION = ((var.get('encoding') and var.get('encoding').callprop('toLowerCase')))
                if SWITCHED or _seq(CONDITION, Js('hex')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('utf8')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('utf-8')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('ascii')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('binary')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('base64')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('ucs2')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('ucs-2')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('utf16le')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('utf-16le')):
                    SWITCHED = True
                    pass
                if SWITCHED or _seq(CONDITION, Js('raw')):
                    SWITCHED = True
                    return Js(True)
                if True:
                    SWITCHED = True
                    return Js(False)
                SWITCHED = True
                break
        PyJs_anonymous_2677_._set_name('anonymous')
        var.put('isEncoding', (var.get('Buffer').get('isEncoding') or PyJs_anonymous_2677_))
        pass
        pass
        pass
        var.get('exports').put('StringDecoder', var.get('StringDecoder'))
        pass
        @Js
        def PyJs_anonymous_2678_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'buf', 'r'])
            if _seq(var.get('buf').get('length'),Js(0.0)):
                return Js('')
            pass
            pass
            if var.get(u"this").get('lastNeed'):
                var.put('r', var.get(u"this").callprop('fillLast', var.get('buf')))
                if _seq(var.get('r'),var.get('undefined')):
                    return Js('')
                var.put('i', var.get(u"this").get('lastNeed'))
                var.get(u"this").put('lastNeed', Js(0.0))
            else:
                var.put('i', Js(0.0))
            if (var.get('i')<var.get('buf').get('length')):
                return ((var.get('r')+var.get(u"this").callprop('text', var.get('buf'), var.get('i'))) if var.get('r') else var.get(u"this").callprop('text', var.get('buf'), var.get('i')))
            return (var.get('r') or Js(''))
        PyJs_anonymous_2678_._set_name('anonymous')
        var.get('StringDecoder').get('prototype').put('write', PyJs_anonymous_2678_)
        var.get('StringDecoder').get('prototype').put('end', var.get('utf8End'))
        var.get('StringDecoder').get('prototype').put('text', var.get('utf8Text'))
        @Js
        def PyJs_anonymous_2679_(buf, this, arguments, var=var):
            var = Scope({'buf':buf, 'this':this, 'arguments':arguments}, var)
            var.registers(['buf'])
            if (var.get(u"this").get('lastNeed')<=var.get('buf').get('length')):
                var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), (var.get(u"this").get('lastTotal')-var.get(u"this").get('lastNeed')), Js(0.0), var.get(u"this").get('lastNeed'))
                return var.get(u"this").get('lastChar').callprop('toString', var.get(u"this").get('encoding'), Js(0.0), var.get(u"this").get('lastTotal'))
            var.get('buf').callprop('copy', var.get(u"this").get('lastChar'), (var.get(u"this").get('lastTotal')-var.get(u"this").get('lastNeed')), Js(0.0), var.get('buf').get('length'))
            var.get(u"this").put('lastNeed', var.get('buf').get('length'), '-')
        PyJs_anonymous_2679_._set_name('anonymous')
        var.get('StringDecoder').get('prototype').put('fillLast', PyJs_anonymous_2679_)
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_2676_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2680_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_2681_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_2682_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['config', 'deprecate'])
                @Js
                def PyJsHoisted_deprecate_(fn, msg, this, arguments, var=var):
                    var = Scope({'fn':fn, 'msg':msg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['deprecated', 'warned', 'fn', 'msg'])
                    @Js
                    def PyJsHoisted_deprecated_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if var.get('warned').neg():
                            if var.get('config')(Js('throwDeprecation')):
                                PyJsTempException = JsToPyException(var.get('Error').create(var.get('msg')))
                                raise PyJsTempException
                            else:
                                if var.get('config')(Js('traceDeprecation')):
                                    var.get('console').callprop('trace', var.get('msg'))
                                else:
                                    var.get('console').callprop('warn', var.get('msg'))
                            var.put('warned', Js(True))
                        return var.get('fn').callprop('apply', var.get(u"this"), var.get('arguments'))
                    PyJsHoisted_deprecated_.func_name = 'deprecated'
                    var.put('deprecated', PyJsHoisted_deprecated_)
                    if var.get('config')(Js('noDeprecation')):
                        return var.get('fn')
                    var.put('warned', Js(False))
                    pass
                    return var.get('deprecated')
                PyJsHoisted_deprecate_.func_name = 'deprecate'
                var.put('deprecate', PyJsHoisted_deprecate_)
                @Js
                def PyJsHoisted_config_(name, this, arguments, var=var):
                    var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
                    var.registers(['name', 'val'])
                    try:
                        if var.get('global').get('localStorage').neg():
                            return Js(False)
                    except PyJsException as PyJsTempException:
                        PyJsHolder_5f_16622195 = var.own.get('_')
                        var.force_own_put('_', PyExceptionToJs(PyJsTempException))
                        try:
                            return Js(False)
                        finally:
                            if PyJsHolder_5f_16622195 is not None:
                                var.own['_'] = PyJsHolder_5f_16622195
                            else:
                                del var.own['_']
                            del PyJsHolder_5f_16622195
                    var.put('val', var.get('global').get('localStorage').get(var.get('name')))
                    if (var.get(u"null")==var.get('val')):
                        return Js(False)
                    return _seq(var.get('String')(var.get('val')).callprop('toLowerCase'),Js('true'))
                PyJsHoisted_config_.func_name = 'config'
                var.put('config', PyJsHoisted_config_)
                var.get('module').put('exports', var.get('deprecate'))
                pass
                pass
            PyJs_anonymous_2682_._set_name('anonymous')
            PyJs_anonymous_2682_.callprop('call', var.get(u"this"))
        PyJs_anonymous_2681_._set_name('anonymous')
        PyJs_anonymous_2681_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_2680_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2683_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'addToGlobals', 'module_temp_love_python'])
        @Js
        def PyJsHoisted_addToGlobals_(name, obj, this, arguments, var=var):
            var = Scope({'name':name, 'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'obj'])
            if var.get('Object').get('prototype').callprop('hasOwnProperty', Js('_fake_exports')).neg():
                var.get('Object').get('prototype').put('_fake_exports', Js({}))
            var.get('Object').get('prototype').get('_fake_exports').put(var.get('name'), var.get('obj'))
        PyJsHoisted_addToGlobals_.func_name = 'addToGlobals'
        var.put('addToGlobals', PyJsHoisted_addToGlobals_)
        pass
        pass
        pass
        pass
        var.get('require')(Js('babel-polyfill'))
        var.put('module_temp_love_python', var.get('require')(Js('crypto-js')))
        var.get('addToGlobals')(Js('crypto-js'), var.get('module_temp_love_python'))
    PyJs_anonymous_2683_._set_name('anonymous')
    @Js
    def PyJs_anonymous_2684_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['r'])
        @Js
        def PyJsHoisted_r_(e, n, t, this, arguments, var=var):
            var = Scope({'e':e, 'n':n, 't':t, 'this':this, 'arguments':arguments}, var)
            var.registers(['u', 'i', 'e', 'n', 'o', 't'])
            @Js
            def PyJsHoisted_o_(i, f, this, arguments, var=var):
                var = Scope({'i':i, 'f':f, 'this':this, 'arguments':arguments}, var)
                var.registers(['a', 'f', 'i', 'c', 'p'])
                if var.get('n').get(var.get('i')).neg():
                    if var.get('e').get(var.get('i')).neg():
                        var.put('c', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
                        if (var.get('f').neg() and var.get('c')):
                            return var.get('c')(var.get('i'), Js(0.0).neg())
                        if var.get('u'):
                            return var.get('u')(var.get('i'), Js(0.0).neg())
                        var.put('a', var.get('Error').create(((Js("Cannot find module '")+var.get('i'))+Js("'"))))
                        PyJsTempException = JsToPyException(PyJsComma(var.get('a').put('code', Js('MODULE_NOT_FOUND')),var.get('a')))
                        raise PyJsTempException
                    var.put('p', var.get('n').put(var.get('i'), Js({'exports':Js({})})))
                    @Js
                    def PyJs_anonymous_2685_(r, this, arguments, var=var):
                        var = Scope({'r':r, 'this':this, 'arguments':arguments}, var)
                        var.registers(['r', 'n'])
                        var.put('n', var.get('e').get(var.get('i')).get('1').get(var.get('r')))
                        return var.get('o')((var.get('n') or var.get('r')))
                    PyJs_anonymous_2685_._set_name('anonymous')
                    var.get('e').get(var.get('i')).get('0').callprop('call', var.get('p').get('exports'), PyJs_anonymous_2685_, var.get('p'), var.get('p').get('exports'), var.get('r'), var.get('e'), var.get('n'), var.get('t'))
                return var.get('n').get(var.get('i')).get('exports')
            PyJsHoisted_o_.func_name = 'o'
            var.put('o', PyJsHoisted_o_)
            pass
            #for JS loop
            var.put('u', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('t').get('length')):
                try:
                    var.get('o')(var.get('t').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('o')
        PyJsHoisted_r_.func_name = 'r'
        var.put('r', PyJsHoisted_r_)
        pass
        return var.get('r')
    PyJs_anonymous_2684_._set_name('anonymous')
    return PyJs_anonymous_2684_()(Js({'1':Js([PyJs_anonymous_2_, Js({'./asn1/api':Js(2.0),'./asn1/base':Js(4.0),'./asn1/constants':Js(8.0),'./asn1/decoders':Js(10.0),'./asn1/encoders':Js(13.0),'bn.js':Js(15.0)})]),'2':Js([PyJs_anonymous_3_, Js({'./decoders':Js(10.0),'./encoders':Js(13.0),'inherits':Js(499.0)})]),'3':Js([PyJs_anonymous_11_, Js({'../base/reporter':Js(6.0),'inherits':Js(499.0),'safer-buffer':Js(528.0)})]),'4':Js([PyJs_anonymous_25_, Js({'./buffer':Js(3.0),'./node':Js(5.0),'./reporter':Js(6.0)})]),'5':Js([PyJs_anonymous_26_, Js({'../base/buffer':Js(3.0),'../base/reporter':Js(6.0),'minimalistic-assert':Js(503.0)})]),'6':Js([PyJs_anonymous_71_, Js({'inherits':Js(499.0)})]),'7':Js([PyJs_anonymous_85_, Js({})]),'8':Js([PyJs_anonymous_88_, Js({'./der':Js(7.0)})]),'9':Js([PyJs_anonymous_91_, Js({'../base/buffer':Js(3.0),'../base/node':Js(5.0),'../constants/der':Js(7.0),'bn.js':Js(15.0),'inherits':Js(499.0)})]),'10':Js([PyJs_anonymous_104_, Js({'./der':Js(9.0),'./pem':Js(11.0)})]),'11':Js([PyJs_anonymous_105_, Js({'./der':Js(9.0),'inherits':Js(499.0),'safer-buffer':Js(528.0)})]),'12':Js([PyJs_anonymous_107_, Js({'../base/node':Js(5.0),'../constants/der':Js(7.0),'inherits':Js(499.0),'safer-buffer':Js(528.0)})]),'13':Js([PyJs_anonymous_120_, Js({'./der':Js(12.0),'./pem':Js(14.0)})]),'14':Js([PyJs_anonymous_121_, Js({'./der':Js(12.0),'inherits':Js(499.0)})]),'15':Js([PyJs_anonymous_123_, Js({'buffer':Js(21.0)})]),'16':Js([PyJs_anonymous_296_, Js({'core-js/fn/regexp/escape':Js(68.0),'core-js/shim':Js(396.0),'regenerator-runtime/runtime':Js(17.0)})]),'17':Js([PyJs_anonymous_300_, Js({})]),'18':Js([PyJs_anonymous_332_, Js({})]),'19':Js([PyJs_anonymous_333_, Js({'buffer':Js(21.0)})]),'20':Js([PyJs_anonymous_510_, Js({'crypto':Js(21.0)})]),'21':Js([PyJs_anonymous_518_, Js({})]),'22':Js([PyJs_anonymous_519_, Js({'safe-buffer':Js(527.0)})]),'23':Js([PyJs_anonymous_527_, Js({'./aes':Js(22.0),'./ghash':Js(27.0),'./incr32':Js(28.0),'buffer-xor':Js(65.0),'cipher-base':Js(67.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'24':Js([PyJs_anonymous_533_, Js({'./decrypter':Js(25.0),'./encrypter':Js(26.0),'./modes/list.json':Js(36.0)})]),'25':Js([PyJs_anonymous_534_, Js({'./aes':Js(22.0),'./authCipher':Js(23.0),'./modes':Js(35.0),'./streamCipher':Js(38.0),'cipher-base':Js(67.0),'evp_bytestokey':Js(467.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'26':Js([PyJs_anonymous_541_, Js({'./aes':Js(22.0),'./authCipher':Js(23.0),'./modes':Js(35.0),'./streamCipher':Js(38.0),'cipher-base':Js(67.0),'evp_bytestokey':Js(467.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'27':Js([PyJs_anonymous_548_, Js({'safe-buffer':Js(527.0)})]),'28':Js([PyJs_anonymous_553_, Js({})]),'29':Js([PyJs_anonymous_554_, Js({'buffer-xor':Js(65.0)})]),'30':Js([PyJs_anonymous_557_, Js({'buffer-xor':Js(65.0),'safe-buffer':Js(527.0)})]),'31':Js([PyJs_anonymous_559_, Js({'safe-buffer':Js(527.0)})]),'32':Js([PyJs_anonymous_561_, Js({'safe-buffer':Js(527.0)})]),'33':Js([PyJs_anonymous_563_, Js({'../incr32':Js(28.0),'buffer-xor':Js(65.0),'safe-buffer':Js(527.0)})]),'34':Js([PyJs_anonymous_565_, Js({})]),'35':Js([PyJs_anonymous_568_, Js({'./cbc':Js(29.0),'./cfb':Js(30.0),'./cfb1':Js(31.0),'./cfb8':Js(32.0),'./ctr':Js(33.0),'./ecb':Js(34.0),'./list.json':Js(36.0),'./ofb':Js(37.0)})]),'36':Js([PyJs_anonymous_569_, Js({})]),'37':Js([PyJs_anonymous_571_, Js({'buffer':Js(66.0),'buffer-xor':Js(65.0)})]),'38':Js([PyJs_anonymous_575_, Js({'./aes':Js(22.0),'cipher-base':Js(67.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'39':Js([PyJs_anonymous_578_, Js({'browserify-aes/browser':Js(24.0),'browserify-aes/modes':Js(35.0),'browserify-des':Js(40.0),'browserify-des/modes':Js(41.0),'evp_bytestokey':Js(467.0)})]),'40':Js([PyJs_anonymous_579_, Js({'cipher-base':Js(67.0),'des.js':Js(438.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'41':Js([PyJs_anonymous_582_, Js({})]),'42':Js([PyJs_anonymous_583_, Js({'bn.js':Js(19.0),'buffer':Js(66.0),'randombytes':Js(524.0)})]),'43':Js([PyJs_anonymous_586_, Js({'./browser/algorithms.json':Js(44.0)})]),'44':Js([PyJs_anonymous_587_, Js({})]),'45':Js([PyJs_anonymous_589_, Js({})]),'46':Js([PyJs_anonymous_590_, Js({'./algorithms.json':Js(44.0),'./sign':Js(47.0),'./verify':Js(48.0),'create-hash':Js(399.0),'inherits':Js(499.0),'readable-stream':Js(63.0),'safe-buffer':Js(64.0)})]),'47':Js([PyJs_anonymous_598_, Js({'./curves.json':Js(45.0),'bn.js':Js(19.0),'browserify-rsa':Js(42.0),'create-hmac':Js(401.0),'elliptic':Js(449.0),'parse-asn1':Js(509.0),'safe-buffer':Js(64.0)})]),'48':Js([PyJs_anonymous_599_, Js({'./curves.json':Js(45.0),'bn.js':Js(19.0),'elliptic':Js(449.0),'parse-asn1':Js(509.0),'safe-buffer':Js(64.0)})]),'49':Js([PyJs_anonymous_601_, Js({})]),'50':Js([PyJs_anonymous_609_, Js({'./_stream_readable':Js(52.0),'./_stream_writable':Js(54.0),'_process':Js(516.0),'inherits':Js(499.0)})]),'51':Js([PyJs_anonymous_618_, Js({'./_stream_transform':Js(53.0),'inherits':Js(499.0)})]),'52':Js([PyJs_anonymous_620_, Js({'../errors':Js(49.0),'./_stream_duplex':Js(50.0),'./internal/streams/async_iterator':Js(55.0),'./internal/streams/buffer_list':Js(56.0),'./internal/streams/destroy':Js(57.0),'./internal/streams/from':Js(59.0),'./internal/streams/state':Js(61.0),'./internal/streams/stream':Js(62.0),'_process':Js(516.0),'buffer':Js(66.0),'events':Js(466.0),'inherits':Js(499.0),'string_decoder/':Js(552.0),'util':Js(21.0)})]),'53':Js([PyJs_anonymous_656_, Js({'../errors':Js(49.0),'./_stream_duplex':Js(50.0),'inherits':Js(499.0)})]),'54':Js([PyJs_anonymous_664_, Js({'../errors':Js(49.0),'./_stream_duplex':Js(50.0),'./internal/streams/destroy':Js(57.0),'./internal/streams/state':Js(61.0),'./internal/streams/stream':Js(62.0),'_process':Js(516.0),'buffer':Js(66.0),'inherits':Js(499.0),'util-deprecate':Js(553.0)})]),'55':Js([PyJs_anonymous_689_, Js({'./end-of-stream':Js(58.0),'_process':Js(516.0)})]),'56':Js([PyJs_anonymous_709_, Js({'buffer':Js(66.0),'util':Js(21.0)})]),'57':Js([PyJs_anonymous_726_, Js({'_process':Js(516.0)})]),'58':Js([PyJs_anonymous_730_, Js({'../../../errors':Js(49.0)})]),'59':Js([PyJs_anonymous_739_, Js({})]),'60':Js([PyJs_anonymous_741_, Js({'../../../errors':Js(49.0),'./end-of-stream':Js(58.0)})]),'61':Js([PyJs_anonymous_748_, Js({'../../../errors':Js(49.0)})]),'62':Js([PyJs_anonymous_749_, Js({'events':Js(466.0)})]),'63':Js([PyJs_anonymous_750_, Js({'./lib/_stream_duplex.js':Js(50.0),'./lib/_stream_passthrough.js':Js(51.0),'./lib/_stream_readable.js':Js(52.0),'./lib/_stream_transform.js':Js(53.0),'./lib/_stream_writable.js':Js(54.0),'./lib/internal/streams/end-of-stream.js':Js(58.0),'./lib/internal/streams/pipeline.js':Js(60.0)})]),'64':Js([PyJs_anonymous_751_, Js({'buffer':Js(66.0)})]),'65':Js([PyJs_anonymous_756_, Js({'buffer':Js(66.0)})]),'66':Js([PyJs_anonymous_760_, Js({'base64-js':Js(18.0),'buffer':Js(66.0),'ieee754':Js(498.0)})]),'67':Js([PyJs_anonymous_825_, Js({'inherits':Js(499.0),'safe-buffer':Js(527.0),'stream':Js(537.0),'string_decoder':Js(552.0)})]),'68':Js([PyJs_anonymous_835_, Js({'../../modules/_core':Js(90.0),'../../modules/core.regexp.escape':Js(198.0)})]),'69':Js([PyJs_anonymous_836_, Js({})]),'70':Js([PyJs_anonymous_838_, Js({'./_cof':Js(85.0)})]),'71':Js([PyJs_anonymous_840_, Js({'./_hide':Js(110.0),'./_wks':Js(196.0)})]),'72':Js([PyJs_anonymous_842_, Js({'./_string-at':Js(173.0)})]),'73':Js([PyJs_anonymous_844_, Js({})]),'74':Js([PyJs_anonymous_846_, Js({'./_is-object':Js(119.0)})]),'75':Js([PyJs_anonymous_848_, Js({'./_to-absolute-index':Js(181.0),'./_to-length':Js(185.0),'./_to-object':Js(186.0)})]),'76':Js([PyJs_anonymous_850_, Js({'./_to-absolute-index':Js(181.0),'./_to-length':Js(185.0),'./_to-object':Js(186.0)})]),'77':Js([PyJs_anonymous_852_, Js({'./_for-of':Js(106.0)})]),'78':Js([PyJs_anonymous_854_, Js({'./_to-absolute-index':Js(181.0),'./_to-iobject':Js(184.0),'./_to-length':Js(185.0)})]),'79':Js([PyJs_anonymous_857_, Js({'./_array-species-create':Js(82.0),'./_ctx':Js(92.0),'./_iobject':Js(115.0),'./_to-length':Js(185.0),'./_to-object':Js(186.0)})]),'80':Js([PyJs_anonymous_860_, Js({'./_a-function':Js(69.0),'./_iobject':Js(115.0),'./_to-length':Js(185.0),'./_to-object':Js(186.0)})]),'81':Js([PyJs_anonymous_862_, Js({'./_is-array':Js(117.0),'./_is-object':Js(119.0),'./_wks':Js(196.0)})]),'82':Js([PyJs_anonymous_864_, Js({'./_array-species-constructor':Js(81.0)})]),'83':Js([PyJs_anonymous_866_, Js({'./_a-function':Js(69.0),'./_invoke':Js(114.0),'./_is-object':Js(119.0)})]),'84':Js([PyJs_anonymous_870_, Js({'./_cof':Js(85.0),'./_wks':Js(196.0)})]),'85':Js([PyJs_anonymous_875_, Js({})]),'86':Js([PyJs_anonymous_877_, Js({'./_an-instance':Js(73.0),'./_ctx':Js(92.0),'./_descriptors':Js(96.0),'./_for-of':Js(106.0),'./_iter-define':Js(123.0),'./_iter-step':Js(125.0),'./_meta':Js(133.0),'./_object-create':Js(138.0),'./_object-dp':Js(139.0),'./_redefine-all':Js(158.0),'./_set-species':Js(167.0),'./_validate-collection':Js(193.0)})]),'87':Js([PyJs_anonymous_890_, Js({'./_array-from-iterable':Js(77.0),'./_classof':Js(84.0)})]),'88':Js([PyJs_anonymous_893_, Js({'./_an-instance':Js(73.0),'./_an-object':Js(74.0),'./_array-methods':Js(79.0),'./_for-of':Js(106.0),'./_has':Js(109.0),'./_is-object':Js(119.0),'./_meta':Js(133.0),'./_redefine-all':Js(158.0),'./_validate-collection':Js(193.0)})]),'89':Js([PyJs_anonymous_908_, Js({'./_an-instance':Js(73.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_for-of':Js(106.0),'./_global':Js(108.0),'./_inherit-if-required':Js(113.0),'./_is-object':Js(119.0),'./_iter-detect':Js(124.0),'./_meta':Js(133.0),'./_redefine':Js(159.0),'./_redefine-all':Js(158.0),'./_set-to-string-tag':Js(168.0)})]),'90':Js([PyJs_anonymous_921_, Js({})]),'91':Js([PyJs_anonymous_922_, Js({'./_object-dp':Js(139.0),'./_property-desc':Js(157.0)})]),'92':Js([PyJs_anonymous_924_, Js({'./_a-function':Js(69.0)})]),'93':Js([PyJs_anonymous_930_, Js({'./_fails':Js(102.0)})]),'94':Js([PyJs_anonymous_936_, Js({'./_an-object':Js(74.0),'./_to-primitive':Js(187.0)})]),'95':Js([PyJs_anonymous_938_, Js({})]),'96':Js([PyJs_anonymous_940_, Js({'./_fails':Js(102.0)})]),'97':Js([PyJs_anonymous_943_, Js({'./_global':Js(108.0),'./_is-object':Js(119.0)})]),'98':Js([PyJs_anonymous_945_, Js({})]),'99':Js([PyJs_anonymous_946_, Js({'./_object-gops':Js(145.0),'./_object-keys':Js(148.0),'./_object-pie':Js(149.0)})]),'100':Js([PyJs_anonymous_948_, Js({'./_core':Js(90.0),'./_ctx':Js(92.0),'./_global':Js(108.0),'./_hide':Js(110.0),'./_redefine':Js(159.0)})]),'101':Js([PyJs_anonymous_950_, Js({'./_wks':Js(196.0)})]),'102':Js([PyJs_anonymous_952_, Js({})]),'103':Js([PyJs_anonymous_954_, Js({'./_defined':Js(95.0),'./_fails':Js(102.0),'./_hide':Js(110.0),'./_redefine':Js(159.0),'./_regexp-exec':Js(161.0),'./_wks':Js(196.0),'./es6.regexp.exec':Js(293.0)})]),'104':Js([PyJs_anonymous_968_, Js({'./_an-object':Js(74.0)})]),'105':Js([PyJs_anonymous_970_, Js({'./_ctx':Js(92.0),'./_is-array':Js(117.0),'./_is-object':Js(119.0),'./_to-length':Js(185.0),'./_wks':Js(196.0)})]),'106':Js([PyJs_anonymous_971_, Js({'./_an-object':Js(74.0),'./_ctx':Js(92.0),'./_is-array-iter':Js(116.0),'./_iter-call':Js(121.0),'./_to-length':Js(185.0),'./core.get-iterator-method':Js(197.0)})]),'107':Js([PyJs_anonymous_974_, Js({'./_shared':Js(170.0)})]),'108':Js([PyJs_anonymous_975_, Js({})]),'109':Js([PyJs_anonymous_976_, Js({})]),'110':Js([PyJs_anonymous_978_, Js({'./_descriptors':Js(96.0),'./_object-dp':Js(139.0),'./_property-desc':Js(157.0)})]),'111':Js([PyJs_anonymous_981_, Js({'./_global':Js(108.0)})]),'112':Js([PyJs_anonymous_982_, Js({'./_descriptors':Js(96.0),'./_dom-create':Js(97.0),'./_fails':Js(102.0)})]),'113':Js([PyJs_anonymous_985_, Js({'./_is-object':Js(119.0),'./_set-proto':Js(166.0)})]),'114':Js([PyJs_anonymous_987_, Js({})]),'115':Js([PyJs_anonymous_989_, Js({'./_cof':Js(85.0)})]),'116':Js([PyJs_anonymous_991_, Js({'./_iterators':Js(126.0),'./_wks':Js(196.0)})]),'117':Js([PyJs_anonymous_993_, Js({'./_cof':Js(85.0)})]),'118':Js([PyJs_anonymous_995_, Js({'./_is-object':Js(119.0)})]),'119':Js([PyJs_anonymous_997_, Js({})]),'120':Js([PyJs_anonymous_999_, Js({'./_cof':Js(85.0),'./_is-object':Js(119.0),'./_wks':Js(196.0)})]),'121':Js([PyJs_anonymous_1001_, Js({'./_an-object':Js(74.0)})]),'122':Js([PyJs_anonymous_1003_, Js({'./_hide':Js(110.0),'./_object-create':Js(138.0),'./_property-desc':Js(157.0),'./_set-to-string-tag':Js(168.0),'./_wks':Js(196.0)})]),'123':Js([PyJs_anonymous_1006_, Js({'./_export':Js(100.0),'./_hide':Js(110.0),'./_iter-create':Js(122.0),'./_iterators':Js(126.0),'./_library':Js(127.0),'./_object-gpo':Js(146.0),'./_redefine':Js(159.0),'./_set-to-string-tag':Js(168.0),'./_wks':Js(196.0)})]),'124':Js([PyJs_anonymous_1014_, Js({'./_wks':Js(196.0)})]),'125':Js([PyJs_anonymous_1020_, Js({})]),'126':Js([PyJs_anonymous_1022_, Js({})]),'127':Js([PyJs_anonymous_1023_, Js({})]),'128':Js([PyJs_anonymous_1024_, Js({})]),'129':Js([PyJs_anonymous_1026_, Js({'./_math-sign':Js(132.0)})]),'130':Js([PyJs_anonymous_1029_, Js({})]),'131':Js([PyJs_anonymous_1031_, Js({})]),'132':Js([PyJs_anonymous_1033_, Js({})]),'133':Js([PyJs_anonymous_1035_, Js({'./_fails':Js(102.0),'./_has':Js(109.0),'./_is-object':Js(119.0),'./_object-dp':Js(139.0),'./_uid':Js(191.0)})]),'134':Js([PyJs_anonymous_1042_, Js({'./_export':Js(100.0),'./_shared':Js(170.0),'./es6.map':Js(228.0),'./es6.weak-map':Js(335.0)})]),'135':Js([PyJs_anonymous_1051_, Js({'./_cof':Js(85.0),'./_global':Js(108.0),'./_task':Js(180.0)})]),'136':Js([PyJs_anonymous_1059_, Js({'./_a-function':Js(69.0)})]),'137':Js([PyJs_anonymous_1062_, Js({'./_descriptors':Js(96.0),'./_fails':Js(102.0),'./_iobject':Js(115.0),'./_object-gops':Js(145.0),'./_object-keys':Js(148.0),'./_object-pie':Js(149.0),'./_to-object':Js(186.0)})]),'138':Js([PyJs_anonymous_1066_, Js({'./_an-object':Js(74.0),'./_dom-create':Js(97.0),'./_enum-bug-keys':Js(98.0),'./_html':Js(111.0),'./_object-dps':Js(140.0),'./_shared-key':Js(169.0)})]),'139':Js([PyJs_anonymous_1070_, Js({'./_an-object':Js(74.0),'./_descriptors':Js(96.0),'./_ie8-dom-define':Js(112.0),'./_to-primitive':Js(187.0)})]),'140':Js([PyJs_anonymous_1072_, Js({'./_an-object':Js(74.0),'./_descriptors':Js(96.0),'./_object-dp':Js(139.0),'./_object-keys':Js(148.0)})]),'141':Js([PyJs_anonymous_1074_, Js({'./_fails':Js(102.0),'./_global':Js(108.0),'./_library':Js(127.0)})]),'142':Js([PyJs_anonymous_1077_, Js({'./_descriptors':Js(96.0),'./_has':Js(109.0),'./_ie8-dom-define':Js(112.0),'./_object-pie':Js(149.0),'./_property-desc':Js(157.0),'./_to-iobject':Js(184.0),'./_to-primitive':Js(187.0)})]),'143':Js([PyJs_anonymous_1079_, Js({'./_object-gopn':Js(144.0),'./_to-iobject':Js(184.0)})]),'144':Js([PyJs_anonymous_1082_, Js({'./_enum-bug-keys':Js(98.0),'./_object-keys-internal':Js(147.0)})]),'145':Js([PyJs_anonymous_1084_, Js({})]),'146':Js([PyJs_anonymous_1085_, Js({'./_has':Js(109.0),'./_shared-key':Js(169.0),'./_to-object':Js(186.0)})]),'147':Js([PyJs_anonymous_1087_, Js({'./_array-includes':Js(78.0),'./_has':Js(109.0),'./_shared-key':Js(169.0),'./_to-iobject':Js(184.0)})]),'148':Js([PyJs_anonymous_1089_, Js({'./_enum-bug-keys':Js(98.0),'./_object-keys-internal':Js(147.0)})]),'149':Js([PyJs_anonymous_1091_, Js({})]),'150':Js([PyJs_anonymous_1092_, Js({'./_core':Js(90.0),'./_export':Js(100.0),'./_fails':Js(102.0)})]),'151':Js([PyJs_anonymous_1095_, Js({'./_descriptors':Js(96.0),'./_object-keys':Js(148.0),'./_object-pie':Js(149.0),'./_to-iobject':Js(184.0)})]),'152':Js([PyJs_anonymous_1098_, Js({'./_an-object':Js(74.0),'./_global':Js(108.0),'./_object-gopn':Js(144.0),'./_object-gops':Js(145.0)})]),'153':Js([PyJs_anonymous_1100_, Js({'./_global':Js(108.0),'./_string-trim':Js(178.0),'./_string-ws':Js(179.0)})]),'154':Js([PyJs_anonymous_1102_, Js({'./_global':Js(108.0),'./_string-trim':Js(178.0),'./_string-ws':Js(179.0)})]),'155':Js([PyJs_anonymous_1104_, Js({})]),'156':Js([PyJs_anonymous_1106_, Js({'./_an-object':Js(74.0),'./_is-object':Js(119.0),'./_new-promise-capability':Js(136.0)})]),'157':Js([PyJs_anonymous_1108_, Js({})]),'158':Js([PyJs_anonymous_1110_, Js({'./_redefine':Js(159.0)})]),'159':Js([PyJs_anonymous_1112_, Js({'./_core':Js(90.0),'./_function-to-string':Js(107.0),'./_global':Js(108.0),'./_has':Js(109.0),'./_hide':Js(110.0),'./_uid':Js(191.0)})]),'160':Js([PyJs_anonymous_1116_, Js({'./_classof':Js(84.0)})]),'161':Js([PyJs_anonymous_1118_, Js({'./_flags':Js(104.0)})]),'162':Js([PyJs_anonymous_1122_, Js({})]),'163':Js([PyJs_anonymous_1126_, Js({})]),'164':Js([PyJs_anonymous_1128_, Js({'./_a-function':Js(69.0),'./_ctx':Js(92.0),'./_export':Js(100.0),'./_for-of':Js(106.0)})]),'165':Js([PyJs_anonymous_1132_, Js({'./_export':Js(100.0)})]),'166':Js([PyJs_anonymous_1135_, Js({'./_an-object':Js(74.0),'./_ctx':Js(92.0),'./_is-object':Js(119.0),'./_object-gopd':Js(142.0)})]),'167':Js([PyJs_anonymous_1139_, Js({'./_descriptors':Js(96.0),'./_global':Js(108.0),'./_object-dp':Js(139.0),'./_wks':Js(196.0)})]),'168':Js([PyJs_anonymous_1142_, Js({'./_has':Js(109.0),'./_object-dp':Js(139.0),'./_wks':Js(196.0)})]),'169':Js([PyJs_anonymous_1144_, Js({'./_shared':Js(170.0),'./_uid':Js(191.0)})]),'170':Js([PyJs_anonymous_1146_, Js({'./_core':Js(90.0),'./_global':Js(108.0),'./_library':Js(127.0)})]),'171':Js([PyJs_anonymous_1148_, Js({'./_a-function':Js(69.0),'./_an-object':Js(74.0),'./_wks':Js(196.0)})]),'172':Js([PyJs_anonymous_1150_, Js({'./_fails':Js(102.0)})]),'173':Js([PyJs_anonymous_1154_, Js({'./_defined':Js(95.0),'./_to-integer':Js(183.0)})]),'174':Js([PyJs_anonymous_1158_, Js({'./_defined':Js(95.0),'./_is-regexp':Js(120.0)})]),'175':Js([PyJs_anonymous_1160_, Js({'./_defined':Js(95.0),'./_export':Js(100.0),'./_fails':Js(102.0)})]),'176':Js([PyJs_anonymous_1164_, Js({'./_defined':Js(95.0),'./_string-repeat':Js(177.0),'./_to-length':Js(185.0)})]),'177':Js([PyJs_anonymous_1166_, Js({'./_defined':Js(95.0),'./_to-integer':Js(183.0)})]),'178':Js([PyJs_anonymous_1168_, Js({'./_defined':Js(95.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_string-ws':Js(179.0)})]),'179':Js([PyJs_anonymous_1172_, Js({})]),'180':Js([PyJs_anonymous_1173_, Js({'./_cof':Js(85.0),'./_ctx':Js(92.0),'./_dom-create':Js(97.0),'./_global':Js(108.0),'./_html':Js(111.0),'./_invoke':Js(114.0)})]),'181':Js([PyJs_anonymous_1185_, Js({'./_to-integer':Js(183.0)})]),'182':Js([PyJs_anonymous_1187_, Js({'./_to-integer':Js(183.0),'./_to-length':Js(185.0)})]),'183':Js([PyJs_anonymous_1189_, Js({})]),'184':Js([PyJs_anonymous_1191_, Js({'./_defined':Js(95.0),'./_iobject':Js(115.0)})]),'185':Js([PyJs_anonymous_1193_, Js({'./_to-integer':Js(183.0)})]),'186':Js([PyJs_anonymous_1195_, Js({'./_defined':Js(95.0)})]),'187':Js([PyJs_anonymous_1197_, Js({'./_is-object':Js(119.0)})]),'188':Js([PyJs_anonymous_1199_, Js({'./_an-instance':Js(73.0),'./_array-copy-within':Js(75.0),'./_array-fill':Js(76.0),'./_array-includes':Js(78.0),'./_array-methods':Js(79.0),'./_classof':Js(84.0),'./_ctx':Js(92.0),'./_descriptors':Js(96.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_global':Js(108.0),'./_has':Js(109.0),'./_hide':Js(110.0),'./_is-array-iter':Js(116.0),'./_is-object':Js(119.0),'./_iter-detect':Js(124.0),'./_iterators':Js(126.0),'./_library':Js(127.0),'./_object-create':Js(138.0),'./_object-dp':Js(139.0),'./_object-gopd':Js(142.0),'./_object-gopn':Js(144.0),'./_object-gpo':Js(146.0),'./_property-desc':Js(157.0),'./_redefine-all':Js(158.0),'./_set-species':Js(167.0),'./_species-constructor':Js(171.0),'./_to-absolute-index':Js(181.0),'./_to-index':Js(182.0),'./_to-integer':Js(183.0),'./_to-length':Js(185.0),'./_to-object':Js(186.0),'./_to-primitive':Js(187.0),'./_typed':Js(190.0),'./_typed-buffer':Js(189.0),'./_uid':Js(191.0),'./_wks':Js(196.0),'./core.get-iterator-method':Js(197.0),'./es6.array.iterator':Js(209.0)})]),'189':Js([PyJs_anonymous_1263_, Js({'./_an-instance':Js(73.0),'./_array-fill':Js(76.0),'./_descriptors':Js(96.0),'./_fails':Js(102.0),'./_global':Js(108.0),'./_hide':Js(110.0),'./_library':Js(127.0),'./_object-dp':Js(139.0),'./_object-gopn':Js(144.0),'./_redefine-all':Js(158.0),'./_set-to-string-tag':Js(168.0),'./_to-index':Js(182.0),'./_to-integer':Js(183.0),'./_to-length':Js(185.0),'./_typed':Js(190.0)})]),'190':Js([PyJs_anonymous_1290_, Js({'./_global':Js(108.0),'./_hide':Js(110.0),'./_uid':Js(191.0)})]),'191':Js([PyJs_anonymous_1291_, Js({})]),'192':Js([PyJs_anonymous_1293_, Js({'./_global':Js(108.0)})]),'193':Js([PyJs_anonymous_1294_, Js({'./_is-object':Js(119.0)})]),'194':Js([PyJs_anonymous_1296_, Js({'./_core':Js(90.0),'./_global':Js(108.0),'./_library':Js(127.0),'./_object-dp':Js(139.0),'./_wks-ext':Js(195.0)})]),'195':Js([PyJs_anonymous_1298_, Js({'./_wks':Js(196.0)})]),'196':Js([PyJs_anonymous_1299_, Js({'./_global':Js(108.0),'./_shared':Js(170.0),'./_uid':Js(191.0)})]),'197':Js([PyJs_anonymous_1301_, Js({'./_classof':Js(84.0),'./_core':Js(90.0),'./_iterators':Js(126.0),'./_wks':Js(196.0)})]),'198':Js([PyJs_anonymous_1303_, Js({'./_export':Js(100.0),'./_replacer':Js(162.0)})]),'199':Js([PyJs_anonymous_1305_, Js({'./_add-to-unscopables':Js(71.0),'./_array-copy-within':Js(75.0),'./_export':Js(100.0)})]),'200':Js([PyJs_anonymous_1306_, Js({'./_array-methods':Js(79.0),'./_export':Js(100.0),'./_strict-method':Js(172.0)})]),'201':Js([PyJs_anonymous_1308_, Js({'./_add-to-unscopables':Js(71.0),'./_array-fill':Js(76.0),'./_export':Js(100.0)})]),'202':Js([PyJs_anonymous_1309_, Js({'./_array-methods':Js(79.0),'./_export':Js(100.0),'./_strict-method':Js(172.0)})]),'203':Js([PyJs_anonymous_1311_, Js({'./_add-to-unscopables':Js(71.0),'./_array-methods':Js(79.0),'./_export':Js(100.0)})]),'204':Js([PyJs_anonymous_1314_, Js({'./_add-to-unscopables':Js(71.0),'./_array-methods':Js(79.0),'./_export':Js(100.0)})]),'205':Js([PyJs_anonymous_1317_, Js({'./_array-methods':Js(79.0),'./_export':Js(100.0),'./_strict-method':Js(172.0)})]),'206':Js([PyJs_anonymous_1319_, Js({'./_create-property':Js(91.0),'./_ctx':Js(92.0),'./_export':Js(100.0),'./_is-array-iter':Js(116.0),'./_iter-call':Js(121.0),'./_iter-detect':Js(124.0),'./_to-length':Js(185.0),'./_to-object':Js(186.0),'./core.get-iterator-method':Js(197.0)})]),'207':Js([PyJs_anonymous_1322_, Js({'./_array-includes':Js(78.0),'./_export':Js(100.0),'./_strict-method':Js(172.0)})]),'208':Js([PyJs_anonymous_1324_, Js({'./_export':Js(100.0),'./_is-array':Js(117.0)})]),'209':Js([PyJs_anonymous_1325_, Js({'./_add-to-unscopables':Js(71.0),'./_iter-define':Js(123.0),'./_iter-step':Js(125.0),'./_iterators':Js(126.0),'./_to-iobject':Js(184.0)})]),'210':Js([PyJs_anonymous_1328_, Js({'./_export':Js(100.0),'./_iobject':Js(115.0),'./_strict-method':Js(172.0),'./_to-iobject':Js(184.0)})]),'211':Js([PyJs_anonymous_1330_, Js({'./_export':Js(100.0),'./_strict-method':Js(172.0),'./_to-integer':Js(183.0),'./_to-iobject':Js(184.0),'./_to-length':Js(185.0)})]),'212':Js([PyJs_anonymous_1332_, Js({'./_array-methods':Js(79.0),'./_export':Js(100.0),'./_strict-method':Js(172.0)})]),'213':Js([PyJs_anonymous_1334_, Js({'./_create-property':Js(91.0),'./_export':Js(100.0),'./_fails':Js(102.0)})]),'214':Js([PyJs_anonymous_1337_, Js({'./_array-reduce':Js(80.0),'./_export':Js(100.0),'./_strict-method':Js(172.0)})]),'215':Js([PyJs_anonymous_1339_, Js({'./_array-reduce':Js(80.0),'./_export':Js(100.0),'./_strict-method':Js(172.0)})]),'216':Js([PyJs_anonymous_1341_, Js({'./_cof':Js(85.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_html':Js(111.0),'./_to-absolute-index':Js(181.0),'./_to-length':Js(185.0)})]),'217':Js([PyJs_anonymous_1344_, Js({'./_array-methods':Js(79.0),'./_export':Js(100.0),'./_strict-method':Js(172.0)})]),'218':Js([PyJs_anonymous_1346_, Js({'./_a-function':Js(69.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_strict-method':Js(172.0),'./_to-object':Js(186.0)})]),'219':Js([PyJs_anonymous_1350_, Js({'./_set-species':Js(167.0)})]),'220':Js([PyJs_anonymous_1351_, Js({'./_export':Js(100.0)})]),'221':Js([PyJs_anonymous_1353_, Js({'./_date-to-iso-string':Js(93.0),'./_export':Js(100.0)})]),'222':Js([PyJs_anonymous_1354_, Js({'./_export':Js(100.0),'./_fails':Js(102.0),'./_to-object':Js(186.0),'./_to-primitive':Js(187.0)})]),'223':Js([PyJs_anonymous_1358_, Js({'./_date-to-primitive':Js(94.0),'./_hide':Js(110.0),'./_wks':Js(196.0)})]),'224':Js([PyJs_anonymous_1359_, Js({'./_redefine':Js(159.0)})]),'225':Js([PyJs_anonymous_1361_, Js({'./_bind':Js(83.0),'./_export':Js(100.0)})]),'226':Js([PyJs_anonymous_1362_, Js({'./_is-object':Js(119.0),'./_object-dp':Js(139.0),'./_object-gpo':Js(146.0),'./_wks':Js(196.0)})]),'227':Js([PyJs_anonymous_1364_, Js({'./_descriptors':Js(96.0),'./_object-dp':Js(139.0)})]),'228':Js([PyJs_anonymous_1366_, Js({'./_collection':Js(89.0),'./_collection-strong':Js(86.0),'./_validate-collection':Js(193.0)})]),'229':Js([PyJs_anonymous_1371_, Js({'./_export':Js(100.0),'./_math-log1p':Js(130.0)})]),'230':Js([PyJs_anonymous_1373_, Js({'./_export':Js(100.0)})]),'231':Js([PyJs_anonymous_1374_, Js({'./_export':Js(100.0)})]),'232':Js([PyJs_anonymous_1376_, Js({'./_export':Js(100.0),'./_math-sign':Js(132.0)})]),'233':Js([PyJs_anonymous_1378_, Js({'./_export':Js(100.0)})]),'234':Js([PyJs_anonymous_1380_, Js({'./_export':Js(100.0)})]),'235':Js([PyJs_anonymous_1382_, Js({'./_export':Js(100.0),'./_math-expm1':Js(128.0)})]),'236':Js([PyJs_anonymous_1383_, Js({'./_export':Js(100.0),'./_math-fround':Js(129.0)})]),'237':Js([PyJs_anonymous_1384_, Js({'./_export':Js(100.0)})]),'238':Js([PyJs_anonymous_1386_, Js({'./_export':Js(100.0),'./_fails':Js(102.0)})]),'239':Js([PyJs_anonymous_1389_, Js({'./_export':Js(100.0)})]),'240':Js([PyJs_anonymous_1391_, Js({'./_export':Js(100.0),'./_math-log1p':Js(130.0)})]),'241':Js([PyJs_anonymous_1392_, Js({'./_export':Js(100.0)})]),'242':Js([PyJs_anonymous_1394_, Js({'./_export':Js(100.0),'./_math-sign':Js(132.0)})]),'243':Js([PyJs_anonymous_1395_, Js({'./_export':Js(100.0),'./_fails':Js(102.0),'./_math-expm1':Js(128.0)})]),'244':Js([PyJs_anonymous_1398_, Js({'./_export':Js(100.0),'./_math-expm1':Js(128.0)})]),'245':Js([PyJs_anonymous_1400_, Js({'./_export':Js(100.0)})]),'246':Js([PyJs_anonymous_1402_, Js({'./_cof':Js(85.0),'./_descriptors':Js(96.0),'./_fails':Js(102.0),'./_global':Js(108.0),'./_has':Js(109.0),'./_inherit-if-required':Js(113.0),'./_object-create':Js(138.0),'./_object-dp':Js(139.0),'./_object-gopd':Js(142.0),'./_object-gopn':Js(144.0),'./_redefine':Js(159.0),'./_string-trim':Js(178.0),'./_to-primitive':Js(187.0)})]),'247':Js([PyJs_anonymous_1406_, Js({'./_export':Js(100.0)})]),'248':Js([PyJs_anonymous_1407_, Js({'./_export':Js(100.0),'./_global':Js(108.0)})]),'249':Js([PyJs_anonymous_1409_, Js({'./_export':Js(100.0),'./_is-integer':Js(118.0)})]),'250':Js([PyJs_anonymous_1410_, Js({'./_export':Js(100.0)})]),'251':Js([PyJs_anonymous_1412_, Js({'./_export':Js(100.0),'./_is-integer':Js(118.0)})]),'252':Js([PyJs_anonymous_1414_, Js({'./_export':Js(100.0)})]),'253':Js([PyJs_anonymous_1415_, Js({'./_export':Js(100.0)})]),'254':Js([PyJs_anonymous_1416_, Js({'./_export':Js(100.0),'./_parse-float':Js(153.0)})]),'255':Js([PyJs_anonymous_1417_, Js({'./_export':Js(100.0),'./_parse-int':Js(154.0)})]),'256':Js([PyJs_anonymous_1418_, Js({'./_a-number-value':Js(70.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_string-repeat':Js(177.0),'./_to-integer':Js(183.0)})]),'257':Js([PyJs_anonymous_1427_, Js({'./_a-number-value':Js(70.0),'./_export':Js(100.0),'./_fails':Js(102.0)})]),'258':Js([PyJs_anonymous_1431_, Js({'./_export':Js(100.0),'./_object-assign':Js(137.0)})]),'259':Js([PyJs_anonymous_1432_, Js({'./_export':Js(100.0),'./_object-create':Js(138.0)})]),'260':Js([PyJs_anonymous_1433_, Js({'./_descriptors':Js(96.0),'./_export':Js(100.0),'./_object-dps':Js(140.0)})]),'261':Js([PyJs_anonymous_1434_, Js({'./_descriptors':Js(96.0),'./_export':Js(100.0),'./_object-dp':Js(139.0)})]),'262':Js([PyJs_anonymous_1435_, Js({'./_is-object':Js(119.0),'./_meta':Js(133.0),'./_object-sap':Js(150.0)})]),'263':Js([PyJs_anonymous_1438_, Js({'./_object-gopd':Js(142.0),'./_object-sap':Js(150.0),'./_to-iobject':Js(184.0)})]),'264':Js([PyJs_anonymous_1441_, Js({'./_object-gopn-ext':Js(143.0),'./_object-sap':Js(150.0)})]),'265':Js([PyJs_anonymous_1443_, Js({'./_object-gpo':Js(146.0),'./_object-sap':Js(150.0),'./_to-object':Js(186.0)})]),'266':Js([PyJs_anonymous_1446_, Js({'./_is-object':Js(119.0),'./_object-sap':Js(150.0)})]),'267':Js([PyJs_anonymous_1449_, Js({'./_is-object':Js(119.0),'./_object-sap':Js(150.0)})]),'268':Js([PyJs_anonymous_1452_, Js({'./_is-object':Js(119.0),'./_object-sap':Js(150.0)})]),'269':Js([PyJs_anonymous_1455_, Js({'./_export':Js(100.0),'./_same-value':Js(163.0)})]),'270':Js([PyJs_anonymous_1456_, Js({'./_object-keys':Js(148.0),'./_object-sap':Js(150.0),'./_to-object':Js(186.0)})]),'271':Js([PyJs_anonymous_1459_, Js({'./_is-object':Js(119.0),'./_meta':Js(133.0),'./_object-sap':Js(150.0)})]),'272':Js([PyJs_anonymous_1462_, Js({'./_is-object':Js(119.0),'./_meta':Js(133.0),'./_object-sap':Js(150.0)})]),'273':Js([PyJs_anonymous_1465_, Js({'./_export':Js(100.0),'./_set-proto':Js(166.0)})]),'274':Js([PyJs_anonymous_1466_, Js({'./_classof':Js(84.0),'./_redefine':Js(159.0),'./_wks':Js(196.0)})]),'275':Js([PyJs_anonymous_1468_, Js({'./_export':Js(100.0),'./_parse-float':Js(153.0)})]),'276':Js([PyJs_anonymous_1469_, Js({'./_export':Js(100.0),'./_parse-int':Js(154.0)})]),'277':Js([PyJs_anonymous_1470_, Js({'./_a-function':Js(69.0),'./_an-instance':Js(73.0),'./_classof':Js(84.0),'./_core':Js(90.0),'./_ctx':Js(92.0),'./_export':Js(100.0),'./_for-of':Js(106.0),'./_global':Js(108.0),'./_is-object':Js(119.0),'./_iter-detect':Js(124.0),'./_library':Js(127.0),'./_microtask':Js(135.0),'./_new-promise-capability':Js(136.0),'./_perform':Js(155.0),'./_promise-resolve':Js(156.0),'./_redefine-all':Js(158.0),'./_set-species':Js(167.0),'./_set-to-string-tag':Js(168.0),'./_species-constructor':Js(171.0),'./_task':Js(180.0),'./_user-agent':Js(192.0),'./_wks':Js(196.0)})]),'278':Js([PyJs_anonymous_1503_, Js({'./_a-function':Js(69.0),'./_an-object':Js(74.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_global':Js(108.0)})]),'279':Js([PyJs_anonymous_1507_, Js({'./_a-function':Js(69.0),'./_an-object':Js(74.0),'./_bind':Js(83.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_global':Js(108.0),'./_is-object':Js(119.0),'./_object-create':Js(138.0)})]),'280':Js([PyJs_anonymous_1513_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_object-dp':Js(139.0),'./_to-primitive':Js(187.0)})]),'281':Js([PyJs_anonymous_1516_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0),'./_object-gopd':Js(142.0)})]),'282':Js([PyJs_anonymous_1518_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0),'./_iter-create':Js(122.0)})]),'283':Js([PyJs_anonymous_1522_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0),'./_object-gopd':Js(142.0)})]),'284':Js([PyJs_anonymous_1524_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0),'./_object-gpo':Js(146.0)})]),'285':Js([PyJs_anonymous_1526_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0),'./_has':Js(109.0),'./_is-object':Js(119.0),'./_object-gopd':Js(142.0),'./_object-gpo':Js(146.0)})]),'286':Js([PyJs_anonymous_1527_, Js({'./_export':Js(100.0)})]),'287':Js([PyJs_anonymous_1529_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0)})]),'288':Js([PyJs_anonymous_1531_, Js({'./_export':Js(100.0),'./_own-keys':Js(152.0)})]),'289':Js([PyJs_anonymous_1532_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0)})]),'290':Js([PyJs_anonymous_1534_, Js({'./_export':Js(100.0),'./_set-proto':Js(166.0)})]),'291':Js([PyJs_anonymous_1536_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0),'./_has':Js(109.0),'./_is-object':Js(119.0),'./_object-dp':Js(139.0),'./_object-gopd':Js(142.0),'./_object-gpo':Js(146.0),'./_property-desc':Js(157.0)})]),'292':Js([PyJs_anonymous_1537_, Js({'./_descriptors':Js(96.0),'./_fails':Js(102.0),'./_flags':Js(104.0),'./_global':Js(108.0),'./_inherit-if-required':Js(113.0),'./_is-regexp':Js(120.0),'./_object-dp':Js(139.0),'./_object-gopn':Js(144.0),'./_redefine':Js(159.0),'./_set-species':Js(167.0),'./_wks':Js(196.0)})]),'293':Js([PyJs_anonymous_1544_, Js({'./_export':Js(100.0),'./_regexp-exec':Js(161.0)})]),'294':Js([PyJs_anonymous_1545_, Js({'./_descriptors':Js(96.0),'./_flags':Js(104.0),'./_object-dp':Js(139.0)})]),'295':Js([PyJs_anonymous_1546_, Js({'./_advance-string-index':Js(72.0),'./_an-object':Js(74.0),'./_fix-re-wks':Js(103.0),'./_regexp-exec-abstract':Js(160.0),'./_to-length':Js(185.0)})]),'296':Js([PyJs_anonymous_1550_, Js({'./_advance-string-index':Js(72.0),'./_an-object':Js(74.0),'./_fix-re-wks':Js(103.0),'./_regexp-exec-abstract':Js(160.0),'./_to-integer':Js(183.0),'./_to-length':Js(185.0),'./_to-object':Js(186.0)})]),'297':Js([PyJs_anonymous_1556_, Js({'./_an-object':Js(74.0),'./_fix-re-wks':Js(103.0),'./_regexp-exec-abstract':Js(160.0),'./_same-value':Js(163.0)})]),'298':Js([PyJs_anonymous_1560_, Js({'./_advance-string-index':Js(72.0),'./_an-object':Js(74.0),'./_fails':Js(102.0),'./_fix-re-wks':Js(103.0),'./_is-regexp':Js(120.0),'./_regexp-exec':Js(161.0),'./_regexp-exec-abstract':Js(160.0),'./_species-constructor':Js(171.0),'./_to-length':Js(185.0)})]),'299':Js([PyJs_anonymous_1568_, Js({'./_an-object':Js(74.0),'./_descriptors':Js(96.0),'./_fails':Js(102.0),'./_flags':Js(104.0),'./_redefine':Js(159.0),'./es6.regexp.flags':Js(294.0)})]),'300':Js([PyJs_anonymous_1573_, Js({'./_collection':Js(89.0),'./_collection-strong':Js(86.0),'./_validate-collection':Js(193.0)})]),'301':Js([PyJs_anonymous_1577_, Js({'./_string-html':Js(175.0)})]),'302':Js([PyJs_anonymous_1580_, Js({'./_string-html':Js(175.0)})]),'303':Js([PyJs_anonymous_1583_, Js({'./_string-html':Js(175.0)})]),'304':Js([PyJs_anonymous_1586_, Js({'./_string-html':Js(175.0)})]),'305':Js([PyJs_anonymous_1589_, Js({'./_export':Js(100.0),'./_string-at':Js(173.0)})]),'306':Js([PyJs_anonymous_1591_, Js({'./_export':Js(100.0),'./_fails-is-regexp':Js(101.0),'./_string-context':Js(174.0),'./_to-length':Js(185.0)})]),'307':Js([PyJs_anonymous_1593_, Js({'./_string-html':Js(175.0)})]),'308':Js([PyJs_anonymous_1596_, Js({'./_string-html':Js(175.0)})]),'309':Js([PyJs_anonymous_1599_, Js({'./_string-html':Js(175.0)})]),'310':Js([PyJs_anonymous_1602_, Js({'./_export':Js(100.0),'./_to-absolute-index':Js(181.0)})]),'311':Js([PyJs_anonymous_1604_, Js({'./_export':Js(100.0),'./_fails-is-regexp':Js(101.0),'./_string-context':Js(174.0)})]),'312':Js([PyJs_anonymous_1606_, Js({'./_string-html':Js(175.0)})]),'313':Js([PyJs_anonymous_1609_, Js({'./_iter-define':Js(123.0),'./_string-at':Js(173.0)})]),'314':Js([PyJs_anonymous_1612_, Js({'./_string-html':Js(175.0)})]),'315':Js([PyJs_anonymous_1615_, Js({'./_export':Js(100.0),'./_to-iobject':Js(184.0),'./_to-length':Js(185.0)})]),'316':Js([PyJs_anonymous_1617_, Js({'./_export':Js(100.0),'./_string-repeat':Js(177.0)})]),'317':Js([PyJs_anonymous_1618_, Js({'./_string-html':Js(175.0)})]),'318':Js([PyJs_anonymous_1621_, Js({'./_export':Js(100.0),'./_fails-is-regexp':Js(101.0),'./_string-context':Js(174.0),'./_to-length':Js(185.0)})]),'319':Js([PyJs_anonymous_1623_, Js({'./_string-html':Js(175.0)})]),'320':Js([PyJs_anonymous_1626_, Js({'./_string-html':Js(175.0)})]),'321':Js([PyJs_anonymous_1629_, Js({'./_string-html':Js(175.0)})]),'322':Js([PyJs_anonymous_1632_, Js({'./_string-trim':Js(178.0)})]),'323':Js([PyJs_anonymous_1635_, Js({'./_an-object':Js(74.0),'./_descriptors':Js(96.0),'./_enum-keys':Js(99.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_global':Js(108.0),'./_has':Js(109.0),'./_hide':Js(110.0),'./_is-array':Js(117.0),'./_is-object':Js(119.0),'./_library':Js(127.0),'./_meta':Js(133.0),'./_object-create':Js(138.0),'./_object-dp':Js(139.0),'./_object-gopd':Js(142.0),'./_object-gopn':Js(144.0),'./_object-gopn-ext':Js(143.0),'./_object-gops':Js(145.0),'./_object-keys':Js(148.0),'./_object-pie':Js(149.0),'./_property-desc':Js(157.0),'./_redefine':Js(159.0),'./_set-to-string-tag':Js(168.0),'./_shared':Js(170.0),'./_to-iobject':Js(184.0),'./_to-object':Js(186.0),'./_to-primitive':Js(187.0),'./_uid':Js(191.0),'./_wks':Js(196.0),'./_wks-define':Js(194.0),'./_wks-ext':Js(195.0)})]),'324':Js([PyJs_anonymous_1663_, Js({'./_an-object':Js(74.0),'./_export':Js(100.0),'./_fails':Js(102.0),'./_global':Js(108.0),'./_is-object':Js(119.0),'./_set-species':Js(167.0),'./_species-constructor':Js(171.0),'./_to-absolute-index':Js(181.0),'./_to-length':Js(185.0),'./_typed':Js(190.0),'./_typed-buffer':Js(189.0)})]),'325':Js([PyJs_anonymous_1667_, Js({'./_export':Js(100.0),'./_typed':Js(190.0),'./_typed-buffer':Js(189.0)})]),'326':Js([PyJs_anonymous_1668_, Js({'./_typed-array':Js(188.0)})]),'327':Js([PyJs_anonymous_1671_, Js({'./_typed-array':Js(188.0)})]),'328':Js([PyJs_anonymous_1674_, Js({'./_typed-array':Js(188.0)})]),'329':Js([PyJs_anonymous_1677_, Js({'./_typed-array':Js(188.0)})]),'330':Js([PyJs_anonymous_1680_, Js({'./_typed-array':Js(188.0)})]),'331':Js([PyJs_anonymous_1683_, Js({'./_typed-array':Js(188.0)})]),'332':Js([PyJs_anonymous_1686_, Js({'./_typed-array':Js(188.0)})]),'333':Js([PyJs_anonymous_1689_, Js({'./_typed-array':Js(188.0)})]),'334':Js([PyJs_anonymous_1692_, Js({'./_typed-array':Js(188.0)})]),'335':Js([PyJs_anonymous_1695_, Js({'./_array-methods':Js(79.0),'./_collection':Js(89.0),'./_collection-weak':Js(88.0),'./_global':Js(108.0),'./_is-object':Js(119.0),'./_meta':Js(133.0),'./_object-assign':Js(137.0),'./_redefine':Js(159.0),'./_validate-collection':Js(193.0)})]),'336':Js([PyJs_anonymous_1702_, Js({'./_collection':Js(89.0),'./_collection-weak':Js(88.0),'./_validate-collection':Js(193.0)})]),'337':Js([PyJs_anonymous_1706_, Js({'./_a-function':Js(69.0),'./_add-to-unscopables':Js(71.0),'./_array-species-create':Js(82.0),'./_export':Js(100.0),'./_flatten-into-array':Js(105.0),'./_to-length':Js(185.0),'./_to-object':Js(186.0)})]),'338':Js([PyJs_anonymous_1708_, Js({'./_add-to-unscopables':Js(71.0),'./_array-species-create':Js(82.0),'./_export':Js(100.0),'./_flatten-into-array':Js(105.0),'./_to-integer':Js(183.0),'./_to-length':Js(185.0),'./_to-object':Js(186.0)})]),'339':Js([PyJs_anonymous_1710_, Js({'./_add-to-unscopables':Js(71.0),'./_array-includes':Js(78.0),'./_export':Js(100.0)})]),'340':Js([PyJs_anonymous_1712_, Js({'./_cof':Js(85.0),'./_export':Js(100.0),'./_global':Js(108.0),'./_microtask':Js(135.0)})]),'341':Js([PyJs_anonymous_1714_, Js({'./_cof':Js(85.0),'./_export':Js(100.0)})]),'342':Js([PyJs_anonymous_1716_, Js({'./_export':Js(100.0),'./_global':Js(108.0)})]),'343':Js([PyJs_anonymous_1717_, Js({'./_set-collection-from':Js(164.0)})]),'344':Js([PyJs_anonymous_1718_, Js({'./_set-collection-of':Js(165.0)})]),'345':Js([PyJs_anonymous_1719_, Js({'./_collection-to-json':Js(87.0),'./_export':Js(100.0)})]),'346':Js([PyJs_anonymous_1720_, Js({'./_export':Js(100.0)})]),'347':Js([PyJs_anonymous_1722_, Js({'./_export':Js(100.0)})]),'348':Js([PyJs_anonymous_1723_, Js({'./_export':Js(100.0)})]),'349':Js([PyJs_anonymous_1725_, Js({'./_export':Js(100.0),'./_math-fround':Js(129.0),'./_math-scale':Js(131.0)})]),'350':Js([PyJs_anonymous_1727_, Js({'./_export':Js(100.0)})]),'351':Js([PyJs_anonymous_1729_, Js({'./_export':Js(100.0)})]),'352':Js([PyJs_anonymous_1731_, Js({'./_export':Js(100.0)})]),'353':Js([PyJs_anonymous_1733_, Js({'./_export':Js(100.0)})]),'354':Js([PyJs_anonymous_1734_, Js({'./_export':Js(100.0)})]),'355':Js([PyJs_anonymous_1736_, Js({'./_export':Js(100.0),'./_math-scale':Js(131.0)})]),'356':Js([PyJs_anonymous_1737_, Js({'./_export':Js(100.0)})]),'357':Js([PyJs_anonymous_1739_, Js({'./_export':Js(100.0)})]),'358':Js([PyJs_anonymous_1741_, Js({'./_a-function':Js(69.0),'./_descriptors':Js(96.0),'./_export':Js(100.0),'./_object-dp':Js(139.0),'./_object-forced-pam':Js(141.0),'./_to-object':Js(186.0)})]),'359':Js([PyJs_anonymous_1743_, Js({'./_a-function':Js(69.0),'./_descriptors':Js(96.0),'./_export':Js(100.0),'./_object-dp':Js(139.0),'./_object-forced-pam':Js(141.0),'./_to-object':Js(186.0)})]),'360':Js([PyJs_anonymous_1745_, Js({'./_export':Js(100.0),'./_object-to-array':Js(151.0)})]),'361':Js([PyJs_anonymous_1747_, Js({'./_create-property':Js(91.0),'./_export':Js(100.0),'./_object-gopd':Js(142.0),'./_own-keys':Js(152.0),'./_to-iobject':Js(184.0)})]),'362':Js([PyJs_anonymous_1749_, Js({'./_descriptors':Js(96.0),'./_export':Js(100.0),'./_object-forced-pam':Js(141.0),'./_object-gopd':Js(142.0),'./_object-gpo':Js(146.0),'./_to-object':Js(186.0),'./_to-primitive':Js(187.0)})]),'363':Js([PyJs_anonymous_1751_, Js({'./_descriptors':Js(96.0),'./_export':Js(100.0),'./_object-forced-pam':Js(141.0),'./_object-gopd':Js(142.0),'./_object-gpo':Js(146.0),'./_to-object':Js(186.0),'./_to-primitive':Js(187.0)})]),'364':Js([PyJs_anonymous_1753_, Js({'./_export':Js(100.0),'./_object-to-array':Js(151.0)})]),'365':Js([PyJs_anonymous_1755_, Js({'./_a-function':Js(69.0),'./_an-instance':Js(73.0),'./_an-object':Js(74.0),'./_core':Js(90.0),'./_export':Js(100.0),'./_for-of':Js(106.0),'./_global':Js(108.0),'./_hide':Js(110.0),'./_microtask':Js(135.0),'./_redefine-all':Js(158.0),'./_set-species':Js(167.0),'./_wks':Js(196.0)})]),'366':Js([PyJs_anonymous_1783_, Js({'./_core':Js(90.0),'./_export':Js(100.0),'./_global':Js(108.0),'./_promise-resolve':Js(156.0),'./_species-constructor':Js(171.0)})]),'367':Js([PyJs_anonymous_1789_, Js({'./_export':Js(100.0),'./_new-promise-capability':Js(136.0),'./_perform':Js(155.0)})]),'368':Js([PyJs_anonymous_1791_, Js({'./_an-object':Js(74.0),'./_metadata':Js(134.0)})]),'369':Js([PyJs_anonymous_1793_, Js({'./_an-object':Js(74.0),'./_metadata':Js(134.0)})]),'370':Js([PyJs_anonymous_1795_, Js({'./_an-object':Js(74.0),'./_array-from-iterable':Js(77.0),'./_metadata':Js(134.0),'./_object-gpo':Js(146.0),'./es6.set':Js(300.0)})]),'371':Js([PyJs_anonymous_1798_, Js({'./_an-object':Js(74.0),'./_metadata':Js(134.0),'./_object-gpo':Js(146.0)})]),'372':Js([PyJs_anonymous_1801_, Js({'./_an-object':Js(74.0),'./_metadata':Js(134.0)})]),'373':Js([PyJs_anonymous_1803_, Js({'./_an-object':Js(74.0),'./_metadata':Js(134.0)})]),'374':Js([PyJs_anonymous_1805_, Js({'./_an-object':Js(74.0),'./_metadata':Js(134.0),'./_object-gpo':Js(146.0)})]),'375':Js([PyJs_anonymous_1808_, Js({'./_an-object':Js(74.0),'./_metadata':Js(134.0)})]),'376':Js([PyJs_anonymous_1810_, Js({'./_a-function':Js(69.0),'./_an-object':Js(74.0),'./_metadata':Js(134.0)})]),'377':Js([PyJs_anonymous_1813_, Js({'./_set-collection-from':Js(164.0)})]),'378':Js([PyJs_anonymous_1814_, Js({'./_set-collection-of':Js(165.0)})]),'379':Js([PyJs_anonymous_1815_, Js({'./_collection-to-json':Js(87.0),'./_export':Js(100.0)})]),'380':Js([PyJs_anonymous_1816_, Js({'./_export':Js(100.0),'./_fails':Js(102.0),'./_string-at':Js(173.0)})]),'381':Js([PyJs_anonymous_1819_, Js({'./_defined':Js(95.0),'./_export':Js(100.0),'./_flags':Js(104.0),'./_is-regexp':Js(120.0),'./_iter-create':Js(122.0),'./_to-length':Js(185.0)})]),'382':Js([PyJs_anonymous_1823_, Js({'./_export':Js(100.0),'./_string-pad':Js(176.0),'./_user-agent':Js(192.0)})]),'383':Js([PyJs_anonymous_1825_, Js({'./_export':Js(100.0),'./_string-pad':Js(176.0),'./_user-agent':Js(192.0)})]),'384':Js([PyJs_anonymous_1827_, Js({'./_string-trim':Js(178.0)})]),'385':Js([PyJs_anonymous_1830_, Js({'./_string-trim':Js(178.0)})]),'386':Js([PyJs_anonymous_1833_, Js({'./_wks-define':Js(194.0)})]),'387':Js([PyJs_anonymous_1834_, Js({'./_wks-define':Js(194.0)})]),'388':Js([PyJs_anonymous_1835_, Js({'./_export':Js(100.0),'./_global':Js(108.0)})]),'389':Js([PyJs_anonymous_1836_, Js({'./_set-collection-from':Js(164.0)})]),'390':Js([PyJs_anonymous_1837_, Js({'./_set-collection-of':Js(165.0)})]),'391':Js([PyJs_anonymous_1838_, Js({'./_set-collection-from':Js(164.0)})]),'392':Js([PyJs_anonymous_1839_, Js({'./_set-collection-of':Js(165.0)})]),'393':Js([PyJs_anonymous_1840_, Js({'./_global':Js(108.0),'./_hide':Js(110.0),'./_iterators':Js(126.0),'./_object-keys':Js(148.0),'./_redefine':Js(159.0),'./_wks':Js(196.0),'./es6.array.iterator':Js(209.0)})]),'394':Js([PyJs_anonymous_1841_, Js({'./_export':Js(100.0),'./_task':Js(180.0)})]),'395':Js([PyJs_anonymous_1842_, Js({'./_export':Js(100.0),'./_global':Js(108.0),'./_user-agent':Js(192.0)})]),'396':Js([PyJs_anonymous_1846_, Js({'./modules/_core':Js(90.0),'./modules/es6.array.copy-within':Js(199.0),'./modules/es6.array.every':Js(200.0),'./modules/es6.array.fill':Js(201.0),'./modules/es6.array.filter':Js(202.0),'./modules/es6.array.find':Js(204.0),'./modules/es6.array.find-index':Js(203.0),'./modules/es6.array.for-each':Js(205.0),'./modules/es6.array.from':Js(206.0),'./modules/es6.array.index-of':Js(207.0),'./modules/es6.array.is-array':Js(208.0),'./modules/es6.array.iterator':Js(209.0),'./modules/es6.array.join':Js(210.0),'./modules/es6.array.last-index-of':Js(211.0),'./modules/es6.array.map':Js(212.0),'./modules/es6.array.of':Js(213.0),'./modules/es6.array.reduce':Js(215.0),'./modules/es6.array.reduce-right':Js(214.0),'./modules/es6.array.slice':Js(216.0),'./modules/es6.array.some':Js(217.0),'./modules/es6.array.sort':Js(218.0),'./modules/es6.array.species':Js(219.0),'./modules/es6.date.now':Js(220.0),'./modules/es6.date.to-iso-string':Js(221.0),'./modules/es6.date.to-json':Js(222.0),'./modules/es6.date.to-primitive':Js(223.0),'./modules/es6.date.to-string':Js(224.0),'./modules/es6.function.bind':Js(225.0),'./modules/es6.function.has-instance':Js(226.0),'./modules/es6.function.name':Js(227.0),'./modules/es6.map':Js(228.0),'./modules/es6.math.acosh':Js(229.0),'./modules/es6.math.asinh':Js(230.0),'./modules/es6.math.atanh':Js(231.0),'./modules/es6.math.cbrt':Js(232.0),'./modules/es6.math.clz32':Js(233.0),'./modules/es6.math.cosh':Js(234.0),'./modules/es6.math.expm1':Js(235.0),'./modules/es6.math.fround':Js(236.0),'./modules/es6.math.hypot':Js(237.0),'./modules/es6.math.imul':Js(238.0),'./modules/es6.math.log10':Js(239.0),'./modules/es6.math.log1p':Js(240.0),'./modules/es6.math.log2':Js(241.0),'./modules/es6.math.sign':Js(242.0),'./modules/es6.math.sinh':Js(243.0),'./modules/es6.math.tanh':Js(244.0),'./modules/es6.math.trunc':Js(245.0),'./modules/es6.number.constructor':Js(246.0),'./modules/es6.number.epsilon':Js(247.0),'./modules/es6.number.is-finite':Js(248.0),'./modules/es6.number.is-integer':Js(249.0),'./modules/es6.number.is-nan':Js(250.0),'./modules/es6.number.is-safe-integer':Js(251.0),'./modules/es6.number.max-safe-integer':Js(252.0),'./modules/es6.number.min-safe-integer':Js(253.0),'./modules/es6.number.parse-float':Js(254.0),'./modules/es6.number.parse-int':Js(255.0),'./modules/es6.number.to-fixed':Js(256.0),'./modules/es6.number.to-precision':Js(257.0),'./modules/es6.object.assign':Js(258.0),'./modules/es6.object.create':Js(259.0),'./modules/es6.object.define-properties':Js(260.0),'./modules/es6.object.define-property':Js(261.0),'./modules/es6.object.freeze':Js(262.0),'./modules/es6.object.get-own-property-descriptor':Js(263.0),'./modules/es6.object.get-own-property-names':Js(264.0),'./modules/es6.object.get-prototype-of':Js(265.0),'./modules/es6.object.is':Js(269.0),'./modules/es6.object.is-extensible':Js(266.0),'./modules/es6.object.is-frozen':Js(267.0),'./modules/es6.object.is-sealed':Js(268.0),'./modules/es6.object.keys':Js(270.0),'./modules/es6.object.prevent-extensions':Js(271.0),'./modules/es6.object.seal':Js(272.0),'./modules/es6.object.set-prototype-of':Js(273.0),'./modules/es6.object.to-string':Js(274.0),'./modules/es6.parse-float':Js(275.0),'./modules/es6.parse-int':Js(276.0),'./modules/es6.promise':Js(277.0),'./modules/es6.reflect.apply':Js(278.0),'./modules/es6.reflect.construct':Js(279.0),'./modules/es6.reflect.define-property':Js(280.0),'./modules/es6.reflect.delete-property':Js(281.0),'./modules/es6.reflect.enumerate':Js(282.0),'./modules/es6.reflect.get':Js(285.0),'./modules/es6.reflect.get-own-property-descriptor':Js(283.0),'./modules/es6.reflect.get-prototype-of':Js(284.0),'./modules/es6.reflect.has':Js(286.0),'./modules/es6.reflect.is-extensible':Js(287.0),'./modules/es6.reflect.own-keys':Js(288.0),'./modules/es6.reflect.prevent-extensions':Js(289.0),'./modules/es6.reflect.set':Js(291.0),'./modules/es6.reflect.set-prototype-of':Js(290.0),'./modules/es6.regexp.constructor':Js(292.0),'./modules/es6.regexp.exec':Js(293.0),'./modules/es6.regexp.flags':Js(294.0),'./modules/es6.regexp.match':Js(295.0),'./modules/es6.regexp.replace':Js(296.0),'./modules/es6.regexp.search':Js(297.0),'./modules/es6.regexp.split':Js(298.0),'./modules/es6.regexp.to-string':Js(299.0),'./modules/es6.set':Js(300.0),'./modules/es6.string.anchor':Js(301.0),'./modules/es6.string.big':Js(302.0),'./modules/es6.string.blink':Js(303.0),'./modules/es6.string.bold':Js(304.0),'./modules/es6.string.code-point-at':Js(305.0),'./modules/es6.string.ends-with':Js(306.0),'./modules/es6.string.fixed':Js(307.0),'./modules/es6.string.fontcolor':Js(308.0),'./modules/es6.string.fontsize':Js(309.0),'./modules/es6.string.from-code-point':Js(310.0),'./modules/es6.string.includes':Js(311.0),'./modules/es6.string.italics':Js(312.0),'./modules/es6.string.iterator':Js(313.0),'./modules/es6.string.link':Js(314.0),'./modules/es6.string.raw':Js(315.0),'./modules/es6.string.repeat':Js(316.0),'./modules/es6.string.small':Js(317.0),'./modules/es6.string.starts-with':Js(318.0),'./modules/es6.string.strike':Js(319.0),'./modules/es6.string.sub':Js(320.0),'./modules/es6.string.sup':Js(321.0),'./modules/es6.string.trim':Js(322.0),'./modules/es6.symbol':Js(323.0),'./modules/es6.typed.array-buffer':Js(324.0),'./modules/es6.typed.data-view':Js(325.0),'./modules/es6.typed.float32-array':Js(326.0),'./modules/es6.typed.float64-array':Js(327.0),'./modules/es6.typed.int16-array':Js(328.0),'./modules/es6.typed.int32-array':Js(329.0),'./modules/es6.typed.int8-array':Js(330.0),'./modules/es6.typed.uint16-array':Js(331.0),'./modules/es6.typed.uint32-array':Js(332.0),'./modules/es6.typed.uint8-array':Js(333.0),'./modules/es6.typed.uint8-clamped-array':Js(334.0),'./modules/es6.weak-map':Js(335.0),'./modules/es6.weak-set':Js(336.0),'./modules/es7.array.flat-map':Js(337.0),'./modules/es7.array.flatten':Js(338.0),'./modules/es7.array.includes':Js(339.0),'./modules/es7.asap':Js(340.0),'./modules/es7.error.is-error':Js(341.0),'./modules/es7.global':Js(342.0),'./modules/es7.map.from':Js(343.0),'./modules/es7.map.of':Js(344.0),'./modules/es7.map.to-json':Js(345.0),'./modules/es7.math.clamp':Js(346.0),'./modules/es7.math.deg-per-rad':Js(347.0),'./modules/es7.math.degrees':Js(348.0),'./modules/es7.math.fscale':Js(349.0),'./modules/es7.math.iaddh':Js(350.0),'./modules/es7.math.imulh':Js(351.0),'./modules/es7.math.isubh':Js(352.0),'./modules/es7.math.rad-per-deg':Js(353.0),'./modules/es7.math.radians':Js(354.0),'./modules/es7.math.scale':Js(355.0),'./modules/es7.math.signbit':Js(356.0),'./modules/es7.math.umulh':Js(357.0),'./modules/es7.object.define-getter':Js(358.0),'./modules/es7.object.define-setter':Js(359.0),'./modules/es7.object.entries':Js(360.0),'./modules/es7.object.get-own-property-descriptors':Js(361.0),'./modules/es7.object.lookup-getter':Js(362.0),'./modules/es7.object.lookup-setter':Js(363.0),'./modules/es7.object.values':Js(364.0),'./modules/es7.observable':Js(365.0),'./modules/es7.promise.finally':Js(366.0),'./modules/es7.promise.try':Js(367.0),'./modules/es7.reflect.define-metadata':Js(368.0),'./modules/es7.reflect.delete-metadata':Js(369.0),'./modules/es7.reflect.get-metadata':Js(371.0),'./modules/es7.reflect.get-metadata-keys':Js(370.0),'./modules/es7.reflect.get-own-metadata':Js(373.0),'./modules/es7.reflect.get-own-metadata-keys':Js(372.0),'./modules/es7.reflect.has-metadata':Js(374.0),'./modules/es7.reflect.has-own-metadata':Js(375.0),'./modules/es7.reflect.metadata':Js(376.0),'./modules/es7.set.from':Js(377.0),'./modules/es7.set.of':Js(378.0),'./modules/es7.set.to-json':Js(379.0),'./modules/es7.string.at':Js(380.0),'./modules/es7.string.match-all':Js(381.0),'./modules/es7.string.pad-end':Js(382.0),'./modules/es7.string.pad-start':Js(383.0),'./modules/es7.string.trim-left':Js(384.0),'./modules/es7.string.trim-right':Js(385.0),'./modules/es7.symbol.async-iterator':Js(386.0),'./modules/es7.symbol.observable':Js(387.0),'./modules/es7.system.global':Js(388.0),'./modules/es7.weak-map.from':Js(389.0),'./modules/es7.weak-map.of':Js(390.0),'./modules/es7.weak-set.from':Js(391.0),'./modules/es7.weak-set.of':Js(392.0),'./modules/web.dom.iterable':Js(393.0),'./modules/web.immediate':Js(394.0),'./modules/web.timers':Js(395.0)})]),'397':Js([PyJs_anonymous_1847_, Js({'bn.js':Js(398.0),'buffer':Js(66.0),'elliptic':Js(449.0)})]),'398':Js([PyJs_anonymous_1857_, Js({'buffer':Js(21.0),'dup':Js(15.0)})]),'399':Js([PyJs_anonymous_1858_, Js({'cipher-base':Js(67.0),'inherits':Js(499.0),'md5.js':Js(500.0),'ripemd160':Js(526.0),'sha.js':Js(530.0)})]),'400':Js([PyJs_anonymous_1862_, Js({'md5.js':Js(500.0)})]),'401':Js([PyJs_anonymous_1864_, Js({'./legacy':Js(402.0),'cipher-base':Js(67.0),'create-hash/md5':Js(400.0),'inherits':Js(499.0),'ripemd160':Js(526.0),'safe-buffer':Js(527.0),'sha.js':Js(530.0)})]),'402':Js([PyJs_anonymous_1868_, Js({'cipher-base':Js(67.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'403':Js([PyJs_anonymous_1871_, Js({'browserify-cipher':Js(39.0),'browserify-sign':Js(46.0),'browserify-sign/algos':Js(43.0),'create-ecdh':Js(397.0),'create-hash':Js(399.0),'create-hmac':Js(401.0),'diffie-hellman':Js(444.0),'pbkdf2':Js(510.0),'public-encrypt':Js(517.0),'randombytes':Js(524.0),'randomfill':Js(525.0)})]),'404':Js([PyJs_anonymous_1875_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0),'./enc-base64':Js(407.0),'./evpkdf':Js(409.0),'./md5':Js(414.0)})]),'405':Js([PyJs_anonymous_1885_, Js({'./core':Js(406.0),'./evpkdf':Js(409.0)})]),'406':Js([PyJs_anonymous_1922_, Js({'crypto':Js(403.0)})]),'407':Js([PyJs_anonymous_1962_, Js({'./core':Js(406.0)})]),'408':Js([PyJs_anonymous_1968_, Js({'./core':Js(406.0)})]),'409':Js([PyJs_anonymous_1976_, Js({'./core':Js(406.0),'./hmac':Js(411.0),'./sha1':Js(430.0)})]),'410':Js([PyJs_anonymous_1983_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'411':Js([PyJs_anonymous_1989_, Js({'./core':Js(406.0)})]),'412':Js([PyJs_anonymous_1997_, Js({'./aes':Js(404.0),'./cipher-core':Js(405.0),'./core':Js(406.0),'./enc-base64':Js(407.0),'./enc-utf16':Js(408.0),'./evpkdf':Js(409.0),'./format-hex':Js(410.0),'./hmac':Js(411.0),'./lib-typedarrays':Js(413.0),'./md5':Js(414.0),'./mode-cfb':Js(415.0),'./mode-ctr':Js(417.0),'./mode-ctr-gladman':Js(416.0),'./mode-ecb':Js(418.0),'./mode-ofb':Js(419.0),'./pad-ansix923':Js(420.0),'./pad-iso10126':Js(421.0),'./pad-iso97971':Js(422.0),'./pad-nopadding':Js(423.0),'./pad-zeropadding':Js(424.0),'./pbkdf2':Js(425.0),'./rabbit':Js(427.0),'./rabbit-legacy':Js(426.0),'./rc4':Js(428.0),'./ripemd160':Js(429.0),'./sha1':Js(430.0),'./sha224':Js(431.0),'./sha256':Js(432.0),'./sha3':Js(433.0),'./sha384':Js(434.0),'./sha512':Js(435.0),'./tripledes':Js(436.0),'./x64-core':Js(437.0)})]),'413':Js([PyJs_anonymous_2002_, Js({'./core':Js(406.0)})]),'414':Js([PyJs_anonymous_2008_, Js({'./core':Js(406.0)})]),'415':Js([PyJs_anonymous_2017_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'416':Js([PyJs_anonymous_2023_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'417':Js([PyJs_anonymous_2028_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'418':Js([PyJs_anonymous_2033_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'419':Js([PyJs_anonymous_2039_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'420':Js([PyJs_anonymous_2044_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'421':Js([PyJs_anonymous_2049_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'422':Js([PyJs_anonymous_2054_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'423':Js([PyJs_anonymous_2059_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'424':Js([PyJs_anonymous_2064_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0)})]),'425':Js([PyJs_anonymous_2069_, Js({'./core':Js(406.0),'./hmac':Js(411.0),'./sha1':Js(430.0)})]),'426':Js([PyJs_anonymous_2076_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0),'./enc-base64':Js(407.0),'./evpkdf':Js(409.0),'./md5':Js(414.0)})]),'427':Js([PyJs_anonymous_2084_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0),'./enc-base64':Js(407.0),'./evpkdf':Js(409.0),'./md5':Js(414.0)})]),'428':Js([PyJs_anonymous_2092_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0),'./enc-base64':Js(407.0),'./evpkdf':Js(409.0),'./md5':Js(414.0)})]),'429':Js([PyJs_anonymous_2099_, Js({'./core':Js(406.0)})]),'430':Js([PyJs_anonymous_2111_, Js({'./core':Js(406.0)})]),'431':Js([PyJs_anonymous_2119_, Js({'./core':Js(406.0),'./sha256':Js(432.0)})]),'432':Js([PyJs_anonymous_2125_, Js({'./core':Js(406.0)})]),'433':Js([PyJs_anonymous_2134_, Js({'./core':Js(406.0),'./x64-core':Js(437.0)})]),'434':Js([PyJs_anonymous_2144_, Js({'./core':Js(406.0),'./sha512':Js(435.0),'./x64-core':Js(437.0)})]),'435':Js([PyJs_anonymous_2151_, Js({'./core':Js(406.0),'./x64-core':Js(437.0)})]),'436':Js([PyJs_anonymous_2161_, Js({'./cipher-core':Js(405.0),'./core':Js(406.0),'./enc-base64':Js(407.0),'./evpkdf':Js(409.0),'./md5':Js(414.0)})]),'437':Js([PyJs_anonymous_2172_, Js({'./core':Js(406.0)})]),'438':Js([PyJs_anonymous_2180_, Js({'./des/cbc':Js(439.0),'./des/cipher':Js(440.0),'./des/des':Js(441.0),'./des/ede':Js(442.0),'./des/utils':Js(443.0)})]),'439':Js([PyJs_anonymous_2181_, Js({'inherits':Js(499.0),'minimalistic-assert':Js(503.0)})]),'440':Js([PyJs_anonymous_2185_, Js({'minimalistic-assert':Js(503.0)})]),'441':Js([PyJs_anonymous_2197_, Js({'./cipher':Js(440.0),'./utils':Js(443.0),'inherits':Js(499.0),'minimalistic-assert':Js(503.0)})]),'442':Js([PyJs_anonymous_2205_, Js({'./cipher':Js(440.0),'./des':Js(441.0),'inherits':Js(499.0),'minimalistic-assert':Js(503.0)})]),'443':Js([PyJs_anonymous_2208_, Js({})]),'444':Js([PyJs_anonymous_2220_, Js({'./lib/dh':Js(445.0),'./lib/generatePrime':Js(446.0),'./lib/primes.json':Js(447.0),'buffer':Js(66.0)})]),'445':Js([PyJs_anonymous_2223_, Js({'./generatePrime':Js(446.0),'bn.js':Js(448.0),'buffer':Js(66.0),'miller-rabin':Js(501.0),'randombytes':Js(524.0)})]),'446':Js([PyJs_anonymous_2234_, Js({'bn.js':Js(448.0),'miller-rabin':Js(501.0),'randombytes':Js(524.0)})]),'447':Js([PyJs_anonymous_2235_, Js({})]),'448':Js([PyJs_anonymous_2237_, Js({'buffer':Js(21.0),'dup':Js(15.0)})]),'449':Js([PyJs_anonymous_2238_, Js({'../package.json':Js(465.0),'./elliptic/curve':Js(452.0),'./elliptic/curves':Js(455.0),'./elliptic/ec':Js(456.0),'./elliptic/eddsa':Js(459.0),'./elliptic/utils':Js(463.0),'brorand':Js(20.0)})]),'450':Js([PyJs_anonymous_2239_, Js({'../utils':Js(463.0),'bn.js':Js(464.0)})]),'451':Js([PyJs_anonymous_2257_, Js({'../utils':Js(463.0),'./base':Js(450.0),'bn.js':Js(464.0),'inherits':Js(499.0)})]),'452':Js([PyJs_anonymous_2284_, Js({'./base':Js(450.0),'./edwards':Js(451.0),'./mont':Js(453.0),'./short':Js(454.0)})]),'453':Js([PyJs_anonymous_2285_, Js({'../utils':Js(463.0),'./base':Js(450.0),'bn.js':Js(464.0),'inherits':Js(499.0)})]),'454':Js([PyJs_anonymous_2304_, Js({'../utils':Js(463.0),'./base':Js(450.0),'bn.js':Js(464.0),'inherits':Js(499.0)})]),'455':Js([PyJs_anonymous_2351_, Js({'./curve':Js(452.0),'./precomputed/secp256k1':Js(462.0),'./utils':Js(463.0),'hash.js':Js(485.0)})]),'456':Js([PyJs_anonymous_2360_, Js({'../curves':Js(455.0),'../utils':Js(463.0),'./key':Js(457.0),'./signature':Js(458.0),'bn.js':Js(464.0),'brorand':Js(20.0),'hmac-drbg':Js(497.0)})]),'457':Js([PyJs_anonymous_2371_, Js({'../utils':Js(463.0),'bn.js':Js(464.0)})]),'458':Js([PyJs_anonymous_2383_, Js({'../utils':Js(463.0),'bn.js':Js(464.0)})]),'459':Js([PyJs_anonymous_2386_, Js({'../curves':Js(455.0),'../utils':Js(463.0),'./key':Js(460.0),'./signature':Js(461.0),'hash.js':Js(485.0)})]),'460':Js([PyJs_anonymous_2398_, Js({'../utils':Js(463.0)})]),'461':Js([PyJs_anonymous_2412_, Js({'../utils':Js(463.0),'bn.js':Js(464.0)})]),'462':Js([PyJs_anonymous_2419_, Js({})]),'463':Js([PyJs_anonymous_2421_, Js({'bn.js':Js(464.0),'minimalistic-assert':Js(503.0),'minimalistic-crypto-utils':Js(504.0)})]),'464':Js([PyJs_anonymous_2423_, Js({'buffer':Js(21.0),'dup':Js(15.0)})]),'465':Js([PyJs_anonymous_2424_, Js({})]),'466':Js([PyJs_anonymous_2426_, Js({})]),'467':Js([PyJs_anonymous_2449_, Js({'md5.js':Js(500.0),'safe-buffer':Js(527.0)})]),'468':Js([PyJs_anonymous_2450_, Js({'inherits':Js(499.0),'readable-stream':Js(483.0),'safe-buffer':Js(484.0)})]),'469':Js([PyJs_anonymous_2457_, Js({'dup':Js(49.0)})]),'470':Js([PyJs_anonymous_2458_, Js({'./_stream_readable':Js(472.0),'./_stream_writable':Js(474.0),'_process':Js(516.0),'dup':Js(50.0),'inherits':Js(499.0)})]),'471':Js([PyJs_anonymous_2459_, Js({'./_stream_transform':Js(473.0),'dup':Js(51.0),'inherits':Js(499.0)})]),'472':Js([PyJs_anonymous_2460_, Js({'../errors':Js(469.0),'./_stream_duplex':Js(470.0),'./internal/streams/async_iterator':Js(475.0),'./internal/streams/buffer_list':Js(476.0),'./internal/streams/destroy':Js(477.0),'./internal/streams/from':Js(479.0),'./internal/streams/state':Js(481.0),'./internal/streams/stream':Js(482.0),'_process':Js(516.0),'buffer':Js(66.0),'dup':Js(52.0),'events':Js(466.0),'inherits':Js(499.0),'string_decoder/':Js(552.0),'util':Js(21.0)})]),'473':Js([PyJs_anonymous_2461_, Js({'../errors':Js(469.0),'./_stream_duplex':Js(470.0),'dup':Js(53.0),'inherits':Js(499.0)})]),'474':Js([PyJs_anonymous_2462_, Js({'../errors':Js(469.0),'./_stream_duplex':Js(470.0),'./internal/streams/destroy':Js(477.0),'./internal/streams/state':Js(481.0),'./internal/streams/stream':Js(482.0),'_process':Js(516.0),'buffer':Js(66.0),'dup':Js(54.0),'inherits':Js(499.0),'util-deprecate':Js(553.0)})]),'475':Js([PyJs_anonymous_2463_, Js({'./end-of-stream':Js(478.0),'_process':Js(516.0),'dup':Js(55.0)})]),'476':Js([PyJs_anonymous_2464_, Js({'buffer':Js(66.0),'dup':Js(56.0),'util':Js(21.0)})]),'477':Js([PyJs_anonymous_2465_, Js({'_process':Js(516.0),'dup':Js(57.0)})]),'478':Js([PyJs_anonymous_2466_, Js({'../../../errors':Js(469.0),'dup':Js(58.0)})]),'479':Js([PyJs_anonymous_2467_, Js({'dup':Js(59.0)})]),'480':Js([PyJs_anonymous_2468_, Js({'../../../errors':Js(469.0),'./end-of-stream':Js(478.0),'dup':Js(60.0)})]),'481':Js([PyJs_anonymous_2469_, Js({'../../../errors':Js(469.0),'dup':Js(61.0)})]),'482':Js([PyJs_anonymous_2470_, Js({'dup':Js(62.0),'events':Js(466.0)})]),'483':Js([PyJs_anonymous_2471_, Js({'./lib/_stream_duplex.js':Js(470.0),'./lib/_stream_passthrough.js':Js(471.0),'./lib/_stream_readable.js':Js(472.0),'./lib/_stream_transform.js':Js(473.0),'./lib/_stream_writable.js':Js(474.0),'./lib/internal/streams/end-of-stream.js':Js(478.0),'./lib/internal/streams/pipeline.js':Js(480.0),'dup':Js(63.0)})]),'484':Js([PyJs_anonymous_2472_, Js({'buffer':Js(66.0),'dup':Js(64.0)})]),'485':Js([PyJs_anonymous_2473_, Js({'./hash/common':Js(486.0),'./hash/hmac':Js(487.0),'./hash/ripemd':Js(488.0),'./hash/sha':Js(489.0),'./hash/utils':Js(496.0)})]),'486':Js([PyJs_anonymous_2474_, Js({'./utils':Js(496.0),'minimalistic-assert':Js(503.0)})]),'487':Js([PyJs_anonymous_2478_, Js({'./utils':Js(496.0),'minimalistic-assert':Js(503.0)})]),'488':Js([PyJs_anonymous_2482_, Js({'./common':Js(486.0),'./utils':Js(496.0)})]),'489':Js([PyJs_anonymous_2485_, Js({'./sha/1':Js(490.0),'./sha/224':Js(491.0),'./sha/256':Js(492.0),'./sha/384':Js(493.0),'./sha/512':Js(494.0)})]),'490':Js([PyJs_anonymous_2486_, Js({'../common':Js(486.0),'../utils':Js(496.0),'./common':Js(495.0)})]),'491':Js([PyJs_anonymous_2489_, Js({'../utils':Js(496.0),'./256':Js(492.0)})]),'492':Js([PyJs_anonymous_2491_, Js({'../common':Js(486.0),'../utils':Js(496.0),'./common':Js(495.0),'minimalistic-assert':Js(503.0)})]),'493':Js([PyJs_anonymous_2494_, Js({'../utils':Js(496.0),'./512':Js(494.0)})]),'494':Js([PyJs_anonymous_2496_, Js({'../common':Js(486.0),'../utils':Js(496.0),'minimalistic-assert':Js(503.0)})]),'495':Js([PyJs_anonymous_2500_, Js({'../utils':Js(496.0)})]),'496':Js([PyJs_anonymous_2501_, Js({'inherits':Js(499.0),'minimalistic-assert':Js(503.0)})]),'497':Js([PyJs_anonymous_2502_, Js({'hash.js':Js(485.0),'minimalistic-assert':Js(503.0),'minimalistic-crypto-utils':Js(504.0)})]),'498':Js([PyJs_anonymous_2508_, Js({})]),'499':Js([PyJs_anonymous_2511_, Js({})]),'500':Js([PyJs_anonymous_2515_, Js({'hash-base':Js(468.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'501':Js([PyJs_anonymous_2518_, Js({'bn.js':Js(502.0),'brorand':Js(20.0)})]),'502':Js([PyJs_anonymous_2524_, Js({'buffer':Js(21.0),'dup':Js(15.0)})]),'503':Js([PyJs_anonymous_2525_, Js({})]),'504':Js([PyJs_anonymous_2527_, Js({})]),'505':Js([PyJs_anonymous_2529_, Js({})]),'506':Js([PyJs_anonymous_2531_, Js({'./certificate':Js(507.0),'asn1.js':Js(1.0)})]),'507':Js([PyJs_anonymous_2548_, Js({'asn1.js':Js(1.0)})]),'508':Js([PyJs_anonymous_2561_, Js({'browserify-aes':Js(24.0),'evp_bytestokey':Js(467.0),'safe-buffer':Js(527.0)})]),'509':Js([PyJs_anonymous_2563_, Js({'./aesid.json':Js(505.0),'./asn1':Js(506.0),'./fixProc':Js(508.0),'browserify-aes':Js(24.0),'pbkdf2':Js(510.0),'safe-buffer':Js(527.0)})]),'510':Js([PyJs_anonymous_2564_, Js({'./lib/async':Js(511.0),'./lib/sync':Js(514.0)})]),'511':Js([PyJs_anonymous_2565_, Js({'./default-encoding':Js(512.0),'./precondition':Js(513.0),'./sync':Js(514.0),'./to-buffer':Js(515.0),'_process':Js(516.0),'safe-buffer':Js(527.0)})]),'512':Js([PyJs_anonymous_2579_, Js({'_process':Js(516.0)})]),'513':Js([PyJs_anonymous_2582_, Js({})]),'514':Js([PyJs_anonymous_2584_, Js({'./default-encoding':Js(512.0),'./precondition':Js(513.0),'./to-buffer':Js(515.0),'create-hash/md5':Js(400.0),'ripemd160':Js(526.0),'safe-buffer':Js(527.0),'sha.js':Js(530.0)})]),'515':Js([PyJs_anonymous_2586_, Js({'safe-buffer':Js(527.0)})]),'516':Js([PyJs_anonymous_2588_, Js({})]),'517':Js([PyJs_anonymous_2597_, Js({'./privateDecrypt':Js(520.0),'./publicEncrypt':Js(521.0)})]),'518':Js([PyJs_anonymous_2600_, Js({'create-hash':Js(399.0),'safe-buffer':Js(527.0)})]),'519':Js([PyJs_anonymous_2602_, Js({'buffer':Js(21.0),'dup':Js(15.0)})]),'520':Js([PyJs_anonymous_2603_, Js({'./mgf':Js(518.0),'./withPublic':Js(522.0),'./xor':Js(523.0),'bn.js':Js(519.0),'browserify-rsa':Js(42.0),'create-hash':Js(399.0),'parse-asn1':Js(509.0),'safe-buffer':Js(527.0)})]),'521':Js([PyJs_anonymous_2605_, Js({'./mgf':Js(518.0),'./withPublic':Js(522.0),'./xor':Js(523.0),'bn.js':Js(519.0),'browserify-rsa':Js(42.0),'create-hash':Js(399.0),'parse-asn1':Js(509.0),'randombytes':Js(524.0),'safe-buffer':Js(527.0)})]),'522':Js([PyJs_anonymous_2607_, Js({'bn.js':Js(519.0),'safe-buffer':Js(527.0)})]),'523':Js([PyJs_anonymous_2608_, Js({})]),'524':Js([PyJs_anonymous_2610_, Js({'_process':Js(516.0),'safe-buffer':Js(527.0)})]),'525':Js([PyJs_anonymous_2614_, Js({'_process':Js(516.0),'randombytes':Js(524.0),'safe-buffer':Js(527.0)})]),'526':Js([PyJs_anonymous_2619_, Js({'buffer':Js(66.0),'hash-base':Js(468.0),'inherits':Js(499.0)})]),'527':Js([PyJs_anonymous_2622_, Js({'buffer':Js(66.0)})]),'528':Js([PyJs_anonymous_2627_, Js({'_process':Js(516.0),'buffer':Js(66.0)})]),'529':Js([PyJs_anonymous_2632_, Js({'safe-buffer':Js(527.0)})]),'530':Js([PyJs_anonymous_2636_, Js({'./sha':Js(531.0),'./sha1':Js(532.0),'./sha224':Js(533.0),'./sha256':Js(534.0),'./sha384':Js(535.0),'./sha512':Js(536.0)})]),'531':Js([PyJs_anonymous_2638_, Js({'./hash':Js(529.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'532':Js([PyJs_anonymous_2642_, Js({'./hash':Js(529.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'533':Js([PyJs_anonymous_2646_, Js({'./hash':Js(529.0),'./sha256':Js(534.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'534':Js([PyJs_anonymous_2649_, Js({'./hash':Js(529.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'535':Js([PyJs_anonymous_2653_, Js({'./hash':Js(529.0),'./sha512':Js(536.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'536':Js([PyJs_anonymous_2656_, Js({'./hash':Js(529.0),'inherits':Js(499.0),'safe-buffer':Js(527.0)})]),'537':Js([PyJs_anonymous_2660_, Js({'events':Js(466.0),'inherits':Js(499.0),'readable-stream/lib/_stream_duplex.js':Js(539.0),'readable-stream/lib/_stream_passthrough.js':Js(540.0),'readable-stream/lib/_stream_readable.js':Js(541.0),'readable-stream/lib/_stream_transform.js':Js(542.0),'readable-stream/lib/_stream_writable.js':Js(543.0),'readable-stream/lib/internal/streams/end-of-stream.js':Js(547.0),'readable-stream/lib/internal/streams/pipeline.js':Js(549.0)})]),'538':Js([PyJs_anonymous_2662_, Js({'dup':Js(49.0)})]),'539':Js([PyJs_anonymous_2663_, Js({'./_stream_readable':Js(541.0),'./_stream_writable':Js(543.0),'_process':Js(516.0),'dup':Js(50.0),'inherits':Js(499.0)})]),'540':Js([PyJs_anonymous_2664_, Js({'./_stream_transform':Js(542.0),'dup':Js(51.0),'inherits':Js(499.0)})]),'541':Js([PyJs_anonymous_2665_, Js({'../errors':Js(538.0),'./_stream_duplex':Js(539.0),'./internal/streams/async_iterator':Js(544.0),'./internal/streams/buffer_list':Js(545.0),'./internal/streams/destroy':Js(546.0),'./internal/streams/from':Js(548.0),'./internal/streams/state':Js(550.0),'./internal/streams/stream':Js(551.0),'_process':Js(516.0),'buffer':Js(66.0),'dup':Js(52.0),'events':Js(466.0),'inherits':Js(499.0),'string_decoder/':Js(552.0),'util':Js(21.0)})]),'542':Js([PyJs_anonymous_2666_, Js({'../errors':Js(538.0),'./_stream_duplex':Js(539.0),'dup':Js(53.0),'inherits':Js(499.0)})]),'543':Js([PyJs_anonymous_2667_, Js({'../errors':Js(538.0),'./_stream_duplex':Js(539.0),'./internal/streams/destroy':Js(546.0),'./internal/streams/state':Js(550.0),'./internal/streams/stream':Js(551.0),'_process':Js(516.0),'buffer':Js(66.0),'dup':Js(54.0),'inherits':Js(499.0),'util-deprecate':Js(553.0)})]),'544':Js([PyJs_anonymous_2668_, Js({'./end-of-stream':Js(547.0),'_process':Js(516.0),'dup':Js(55.0)})]),'545':Js([PyJs_anonymous_2669_, Js({'buffer':Js(66.0),'dup':Js(56.0),'util':Js(21.0)})]),'546':Js([PyJs_anonymous_2670_, Js({'_process':Js(516.0),'dup':Js(57.0)})]),'547':Js([PyJs_anonymous_2671_, Js({'../../../errors':Js(538.0),'dup':Js(58.0)})]),'548':Js([PyJs_anonymous_2672_, Js({'dup':Js(59.0)})]),'549':Js([PyJs_anonymous_2673_, Js({'../../../errors':Js(538.0),'./end-of-stream':Js(547.0),'dup':Js(60.0)})]),'550':Js([PyJs_anonymous_2674_, Js({'../../../errors':Js(538.0),'dup':Js(61.0)})]),'551':Js([PyJs_anonymous_2675_, Js({'dup':Js(62.0),'events':Js(466.0)})]),'552':Js([PyJs_anonymous_2676_, Js({'safe-buffer':Js(527.0)})]),'553':Js([PyJs_anonymous_2680_, Js({})]),'554':Js([PyJs_anonymous_2683_, Js({'babel-polyfill':Js(16.0),'crypto-js':Js(412.0)})])}), Js({}), Js([Js(554.0)]))
PyJs_LONG_2686_()
var.put('crypto_js', var.get('getFromGlobals')(Js('crypto-js')))
lib = var.get('crypto_js').to_py()